(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.NGL = global.NGL || {})));
}(this, function (exports) { 'use strict';

	// https://github.com/taylorhakes/promise-polyfill
	// MIT License
	// Copyright (c) 2014 Taylor Hakes
	// Copyright (c) 2014 Forbes Lindesay


	// Store setTimeout reference so promise-polyfill will be unaffected by
	// other code modifying setTimeout (like sinon.useFakeTimers())
	var setTimeoutFunc = setTimeout;

	function noop() {
	}

	// Use polyfill for setImmediate for performance gains
	var asap = (typeof setImmediate === 'function' && setImmediate) ||
	  function (fn) {
	    setTimeoutFunc(fn, 0);
	  };

	var onUnhandledRejection = function onUnhandledRejection(err) {
	  if (typeof console !== 'undefined' && console) {
	    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
	  }
	};

	// Polyfill for Function.prototype.bind
	function bind(fn, thisArg) {
	  return function () {
	    fn.apply(thisArg, arguments);
	  };
	}

	function Promise$1(fn) {
	  if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
	  if (typeof fn !== 'function') throw new TypeError('not a function');
	  this._state = 0;
	  this._handled = false;
	  this._value = undefined;
	  this._deferreds = [];

	  doResolve(fn, this);
	}

	function handle(self, deferred) {
	  while (self._state === 3) {
	    self = self._value;
	  }
	  if (self._state === 0) {
	    self._deferreds.push(deferred);
	    return;
	  }
	  self._handled = true;
	  asap(function () {
	    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
	      return;
	    }
	    var ret;
	    try {
	      ret = cb(self._value);
	    } catch (e) {
	      reject(deferred.promise, e);
	      return;
	    }
	    resolve(deferred.promise, ret);
	  });
	}

	function resolve(self, newValue) {
	  try {
	    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	    if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
	    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
	      var then = newValue.then;
	      if (newValue instanceof Promise$1) {
	        self._state = 3;
	        self._value = newValue;
	        finale(self);
	        return;
	      } else if (typeof then === 'function') {
	        doResolve(bind(then, newValue), self);
	        return;
	      }
	    }
	    self._state = 1;
	    self._value = newValue;
	    finale(self);
	  } catch (e) {
	    reject(self, e);
	  }
	}

	function reject(self, newValue) {
	  self._state = 2;
	  self._value = newValue;
	  finale(self);
	}

	function finale(self) {
	  if (self._state === 2 && self._deferreds.length === 0) {
	    asap(function() {
	      if (!self._handled) {
	        onUnhandledRejection(self._value);
	      }
	    });
	  }

	  for (var i = 0, len = self._deferreds.length; i < len; i++) {
	    handle(self, self._deferreds[i]);
	  }
	  self._deferreds = null;
	}

	function Handler(onFulfilled, onRejected, promise) {
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}

	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, self) {
	  var done = false;
	  try {
	    fn(function (value) {
	      if (done) return;
	      done = true;
	      resolve(self, value);
	    }, function (reason) {
	      if (done) return;
	      done = true;
	      reject(self, reason);
	    });
	  } catch (ex) {
	    if (done) return;
	    done = true;
	    reject(self, ex);
	  }
	}

	Promise$1.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};

	Promise$1.prototype.then = function (onFulfilled, onRejected) {
	  var prom = new (this.constructor)(noop);

	  handle(this, new Handler(onFulfilled, onRejected, prom));
	  return prom;
	};

	Promise$1.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);

	  return new Promise$1(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;

	    function res(i, val) {
	      try {
	        if (val && (typeof val === 'object' || typeof val === 'function')) {
	          var then = val.then;
	          if (typeof then === 'function') {
	            then.call(val, function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	        args[i] = val;
	        if (--remaining === 0) {
	          resolve(args);
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    }

	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};

	Promise$1.resolve = function (value) {
	  if (value && typeof value === 'object' && value.constructor === Promise$1) {
	    return value;
	  }

	  return new Promise$1(function (resolve) {
	    resolve(value);
	  });
	};

	Promise$1.reject = function (value) {
	  return new Promise$1(function (resolve, reject) {
	    reject(value);
	  });
	};

	Promise$1.race = function (values) {
	  return new Promise$1(function (resolve, reject) {
	    for (var i = 0, len = values.length; i < len; i++) {
	      values[i].then(resolve, reject);
	    }
	  });
	};

	/**
	 * Set the immediate function to execute callbacks
	 * @param fn {function} Function to execute
	 * @private
	 */
	Promise$1._setImmediateFn = function _setImmediateFn(fn) {
	  asap = fn;
	};

	Promise$1._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
	  onUnhandledRejection = fn;
	};

	// 'use strict';


	// var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	//                 (typeof Uint16Array !== 'undefined') &&
	//                 (typeof Int32Array !== 'undefined');


	function assign(obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	}


	// reduce buffer size, avoiding mem copy
	function shrinkBuf(buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	}


	function arraySet(dest, src, src_offs, len, dest_offs) {
	  if (src.subarray && dest.subarray) {
	    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	    return;
	  }
	  // Fallback to ordinary array
	  for (var i = 0; i < len; i++) {
	    dest[dest_offs + i] = src[src_offs + i];
	  }
	}

	// Join array of chunks to single array.
	function flattenChunks(chunks) {
	  var i, l, len, pos, chunk, result;

	  // calculate data length
	  len = 0;
	  for (i = 0, l = chunks.length; i < l; i++) {
	    len += chunks[i].length;
	  }

	  // join chunks
	  result = new Uint8Array(len);
	  pos = 0;
	  for (i = 0, l = chunks.length; i < l; i++) {
	    chunk = chunks[i];
	    result.set(chunk, pos);
	    pos += chunk.length;
	  }

	  return result;
	}

	// 'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}

	// 'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}

	// 'use strict';

	// See state defs from inflate.js
	var BAD$1 = 30;       /* got a data error -- remain here until reset */
	var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	// module.exports =
	function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD$1;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD$1;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD$1;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE$1;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD$1;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};

	// 'use strict';


	// var utils = require('../utils/common');

	var MAXBITS = 15;
	var ENOUGH_LENS$1 = 852;
	var ENOUGH_DISTS$1 = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES$1 = 0;
	var LENS$1 = 1;
	var DISTS$1 = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	// module.exports =
	function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES$1 || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES$1) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS$1) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	    return 1;
	  }

	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};

	// 'use strict';


	// var utils         = require('../utils/common');
	// var adler32       = require('./adler32');
	// var crc32         = require('./crc32');
	// var inflate_fast  = require('./inffast');
	// var inflate_table = require('./inftrees');

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
	  this.work = new Uint16Array(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
	  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix;
	var distfix;
	// We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new Int32Array(512);
	    distfix = new Int32Array(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new Uint8Array(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	// String encode/decode helpers
	// 'use strict';


	// var utils = require('./common');


	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new Uint8Array(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


	// convert string to array (typed, when possible)
	function string2buf(str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new Uint8Array(buf_len);

	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	}

	// Helper (used in 2 places)
	function _buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert binary string (typed, when possible)
	function binstring2buf(str) {
	  var buf = new Uint8Array(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	}


	// convert array to string
	function buf2string(buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);

	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return _buf2binstring(utf16buf, out);
	}


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	function utf8border(buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	}

	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH        = 0;
	var Z_SYNC_FLUSH      = 2;
	var Z_FINISH$1          = 4;
	/* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	var Z_OK$1              =  0;
	var Z_STREAM_END$1      =  1;
	var Z_NEED_DICT$1       =  2;
	//export var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR$1       = -5;

	// 'use strict';

	var messages = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

	// 'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	// 'use strict';


	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	// 'use strict';


	// var zlib_inflate = require('./zlib/inflate');
	// var utils        = require('./utils/common');
	// var strings      = require('./utils/strings');
	// var c            = require('./zlib/constants');
	// var msg          = require('./zlib/messages');
	// var ZStream      = require('./zlib/zstream');
	// var GZheader     = require('./zlib/gzheader');

	var toString = Object.prototype.toString;

	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);

	  this.options = assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;

	  var status  = inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== Z_OK$1) {
	    throw new Error(messages[status]);
	  }

	  this.header = new GZheader();

	  inflateGetHeader(this.strm, this.header);
	}

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;
	  var dict;

	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new Uint8Array(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = inflate(strm, Z_NO_FLUSH);    /* no bad return value */

	    if (status === Z_NEED_DICT$1 && dictionary) {
	      // Convert data if needed
	      if (typeof dictionary === 'string') {
	        dict = string2buf(dictionary);
	      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
	        dict = new Uint8Array(dictionary);
	      } else {
	        dict = dictionary;
	      }

	      status = inflateSetDictionary(this.strm, dict);

	    }

	    if (status === Z_BUF_ERROR$1 && allowBufError === true) {
	      status = Z_OK$1;
	      allowBufError = false;
	    }

	    if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === Z_STREAM_END$1 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }

	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }

	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

	  if (status === Z_STREAM_END$1) {
	    _mode = Z_FINISH$1;
	  }

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH$1) {
	    status = inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK$1;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK$1);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === Z_OK$1) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function doInflate(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg; }

	  return inflator.result;
	}

	function getQuery( id ){

	    if( typeof window === "undefined" ) return undefined;

	    var a = new RegExp( id + "=([^&#=]*)" );
	    var m = a.exec( window.location.search );

	    if( m ){
	        return decodeURIComponent( m[1] );
	    }else{
	        return undefined;
	    }

	}


	function boolean( value ){

	    if( !value ){
	        return false;
	    }

	    if( typeof value === "string" ){
	        return /^1|true|t|yes|y$/i.test( value );
	    }

	    return true;

	}


	function defaults( value, defaultValue ){

	    return value !== undefined ? value : defaultValue;

	}


	function getBrowser(){

	    if( typeof window === "undefined" ) return false;

	    var ua = window.navigator.userAgent;

	    if ( /Arora/i.test( ua ) ) {

	        return 'Arora';

	    } else if ( /Opera|OPR/.test( ua ) ) {

	        return 'Opera';

	    } else if ( /Chrome/i.test( ua ) ) {

	        return 'Chrome';

	    } else if ( /Epiphany/i.test( ua ) ) {

	        return 'Epiphany';

	    } else if ( /Firefox/i.test( ua ) ) {

	        return 'Firefox';

	    } else if ( /Mobile(\/.*)? Safari/i.test( ua ) ) {

	        return 'Mobile Safari';

	    } else if ( /MSIE/i.test( ua ) ) {

	        return 'Internet Explorer';

	    } else if ( /Midori/i.test( ua ) ) {

	        return 'Midori';

	    } else if ( /Safari/i.test( ua ) ) {

	        return 'Safari';

	    }

	    return false;

	}


	function getAbsolutePath( relativePath ){

	    var loc = window.location;
	    var pn = loc.pathname;
	    var basePath = pn.substring( 0, pn.lastIndexOf("/") + 1 );

	    return loc.origin + basePath + relativePath;

	}


	function deepCopy( src ){

	    if( typeof src !== "object" ){
	        return src;
	    }

	    var dst = Array.isArray( src ) ? [] : {};

	    for( var key in src ){
	        dst[ key ] = deepCopy( src[ key ] );
	    }

	    return dst;

	}


	function download( data, downloadName ){

	    if( !data ) return;

	    downloadName = downloadName || "download";

	    var a = document.createElement( 'a' );
	    a.style.display = "hidden";
	    document.body.appendChild( a );
	    if( data instanceof Blob ){
	        a.href = URL.createObjectURL( data );
	    }else{
	        a.href = data;
	    }
	    a.download = downloadName;
	    a.target = "_blank";
	    a.click();

	    document.body.removeChild( a );
	    if( data instanceof Blob ){
	        URL.revokeObjectURL( data );
	    }

	}


	function getFileInfo( file ){

	    var compressedExtList = [ "gz" ];

	    var path, compressed, protocol;

	    if( ( self.File && file instanceof File ) ||
	        ( self.Blob && file instanceof self.Blob )
	    ){
	        path = file.name || "";
	    }else{
	        path = file;
	    }
	    var queryIndex = path.lastIndexOf( '?' );
	    path = path.substring( 0, queryIndex === -1 ? path.length : queryIndex );

	    var name = path.replace( /^.*[\\\/]/, '' );
	    var base = name.substring( 0, name.lastIndexOf( '.' ) );

	    var nameSplit = name.split( '.' );
	    var ext = nameSplit.length > 1 ? nameSplit.pop().toLowerCase() : "";

	    var protocolMatch = path.match( /^(.+):\/\/(.+)$/ );
	    if( protocolMatch ){
	        protocol = protocolMatch[ 1 ].toLowerCase();
	        path = protocolMatch[ 2 ];
	    }

	    var dir = path.substring( 0, path.lastIndexOf( '/' ) + 1 );

	    if( compressedExtList.indexOf( ext ) !== -1 ){
	        compressed = ext;
	        var n = path.length - ext.length - 1;
	        ext = path.substr( 0, n ).split( '.' ).pop().toLowerCase();
	        var m = base.length - ext.length - 1;
	        base = base.substr( 0, m );
	    }else{
	        compressed = false;
	    }

	    return {
	        "path": path,
	        "name": name,
	        "ext": ext,
	        "base": base,
	        "dir": dir,
	        "compressed": compressed,
	        "protocol": protocol,
	        "src": file
	    };

	}


	function throttle( func, wait, options ){

	    // from http://underscorejs.org/docs/underscore.html

	    var context, args, result;
	    var timeout = null;
	    var previous = 0;

	    if( !options ) options = {};

	    var later = function(){
	        previous = options.leading === false ? 0 : Date.now();
	        timeout = null;
	        result = func.apply( context, args );
	        if( !timeout ) context = args = null;
	    };

	    return function(){

	        var now = Date.now();
	        if( !previous && options.leading === false ) previous = now;
	        var remaining = wait - ( now - previous );
	        context = this;
	        args = arguments;
	        if( remaining <= 0 || remaining > wait ){
	            if( timeout ){
	                clearTimeout( timeout );
	                timeout = null;
	            }
	            previous = now;
	            result = func.apply(context, args);
	            if( !timeout ) context = args = null;
	        }else if( !timeout && options.trailing !== false ){
	            timeout = setTimeout( later, remaining );
	        }

	        return result;

	    };

	}


	var binarySearchIndexOf = function(){
	    function _compareFunction( elm1, elm2 ){
	        if( elm1 < elm2 ) return -1;
	        if( elm1 > elm2 ) return 1;
	        return 0;
	    }
	    return function( array, element, compareFunction ){
	        var low = 0;
	        var high = array.length - 1;
	        if( !compareFunction ) compareFunction = _compareFunction;
	        while( low <= high ){
	            var i = ( low + high ) >> 1;
	            var cmp = compareFunction( element, array[ i ] );
	            if( cmp > 0 ){
	                low = i + 1;
	            }else if( cmp < 0 ){
	                high = i - 1;
	            } else {
	                return i;
	            }
	        }
	        return -low - 1;
	    };
	}();


	function uniqueArray( array ){
	    return array.sort().filter( function( value, index, sorted ){
	        return ( index === 0 ) || ( value !== sorted[ index - 1 ] );
	    } );
	}


	// String/arraybuffer conversion

	function uint8ToString( u8a ){

	    var chunkSize = 0x7000;

	    if( u8a.length > chunkSize ){

	      var c = [];

	      for(var i = 0; i < u8a.length; i += chunkSize) {

	        c.push( String.fromCharCode.apply(
	          null, u8a.subarray( i, i + chunkSize )
	        ) );

	      }

	      return c.join("");

	    }else{

	      return String.fromCharCode.apply( null, u8a );

	    }

	}


	function uint8ToLines( u8a, chunkSize, newline ){

	    chunkSize = chunkSize !== undefined ? chunkSize : 1024 * 1024 * 10;
	    newline = newline !== undefined ? newline : "\n";

	    var partialLine = "";
	    var lines = [];

	    for( var i = 0; i < u8a.length; i += chunkSize ){

	        var str = uint8ToString( u8a.subarray( i, i + chunkSize ) );
	        var idx = str.lastIndexOf( newline );

	        if( idx === -1 ){

	            partialLine += str;

	        }else{

	            var str2 = partialLine + str.substr( 0, idx );
	            lines = lines.concat( str2.split( newline ) );

	            if( idx === str.length - newline.length ){

	                partialLine = "";

	            }else{

	                partialLine = str.substr( idx + newline.length );

	            }

	        }

	    }

	    if( partialLine !== "" ){

	        lines.push( partialLine );

	    }

	    return lines;

	}


	function decompress( data ){

	    var decompressedData;

	    if( data instanceof ArrayBuffer ){
	        data = new Uint8Array( data );
	    }

	    try{
	        decompressedData = doInflate( data );
	    }catch( e ){
	        decompressedData = data;  // assume it is already uncompressed
	    }

	    return decompressedData;

	}

	/**
	 * @file Registry
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function Registry( name ){

	    var dict = {};

	    this.add = function( key, value ){
	        dict[ key.toLowerCase() ] = value;
	    };

	    this.get = function( key ){
	        return dict[ key === undefined ? "" : key.toLowerCase() ];
	    };

	    Object.defineProperties( this, {
	        names: {
	            get: function(){ return Object.keys( dict ); }
	        }
	    } );

	}

	function GidPool$1(){

	}

	GidPool$1.prototype = {

	    constructor: GidPool$1,

	    nextGid: 1,

	    objectList: [],

	    rangeList: [],

	    getBaseObject: function( object ){

	        if( object.type === "StructureView" ){
	            object = object.getStructure();
	        }

	        return object;

	    },

	    addObject: function( object ){

	        object = this.getBaseObject( object );

	        this.objectList.push( object );
	        this.rangeList.push( this.allocateGidRange( object ) );

	        return this;

	    },

	    removeObject: function( object ){

	        object = this.getBaseObject( object );

	        var idx = this.objectList.indexOf( object );

	        if( idx !== -1 ){

	            this.objectList.splice( idx, 1 );
	            this.rangeList.splice( idx, 1 );

	            if( this.objectList.length === 0 ){
	                this.nextGid = 1;
	            }

	        }

	        return this;

	    },

	    updateObject: function( object, silent ){

	        object = this.getBaseObject( object );

	        var idx = this.objectList.indexOf( object );

	        if( idx !== -1 ){

	            var range = this.rangeList[ idx ];

	            if( range[1] === this.nextGid ){
	                var count = this.getGidCount( object );
	                this.nextGid += count - ( range[1] - range[0] );
	                range[ 1 ] = this.nextGid;
	            }else{
	                this.rangeList[ idx ] = this.allocateGidRange( object );
	            }

	        }else{

	            if( !silent ){
	                Log$1.warn( "GidPool.updateObject: object not found." );
	            }

	        }

	        return this;

	    },

	    getGidCount: function( object ){

	        object = this.getBaseObject( object );

	        var count = 0;

	        if( object.type === "Structure" ){
	            count = (
	                object.atomStore.count +
	                object.bondStore.count +
	                object.backboneBondStore.count +
	                object.rungBondStore.count
	            );
	        }else if( object.type === "Volume" ){
	            count = object.__data.length;
	        }else{
	            Log$1.warn( "GidPool.getGidCount: unknown object type" );
	        }

	        return count;

	    },

	    allocateGidRange: function( object ){

	        object = this.getBaseObject( object );

	        var firstGid = this.nextGid;

	        this.nextGid += this.getGidCount( object );

	        if( this.nextGid > Math.pow( 2, 24 ) ){
	            Log$1.error( "GidPool.allocateGidRange: GidPool overflown" );
	        }

	        return [ firstGid, this.nextGid ];

	    },

	    freeGidRange: function( object ){

	        object = this.getBaseObject( object );
	        // TODO

	    },

	    getNextGid: function(){

	        return this.nextGid++;

	    },

	    getGid: function( object, offset ){

	        object = this.getBaseObject( object );
	        offset = offset || 0;

	        var gid = 0;
	        var idx = this.objectList.indexOf( object );

	        if( idx !== -1 ){

	            var range = this.rangeList[ idx ];
	            var first = range[ 0 ];

	            gid = first + offset;

	        }else{

	            Log$1.warn( "GidPool.getGid: object not found." );

	        }

	        return gid;

	    },

	    getByGid: function( gid ){

	        var entity;

	        this.objectList.forEach( function( o, i ){

	            var range = this.rangeList[ i ];
	            if( gid < range[ 0 ] || gid >= range[ 1 ] ){
	                return;
	            }
	            var offset = gid - range[ 0 ];

	            if( o.type === "Structure" ){

	                if( offset <= o.atomStore.count ){

	                    entity = o.getAtomProxy( offset );

	                }else if( offset <= o.atomStore.count + o.bondStore.count ){

	                    offset -= o.atomStore.count;
	                    entity = o.getBondProxy( offset );

	                }else if( offset <= o.atomStore.count + o.bondStore.count + o.backboneBondStore.count ){

	                    offset -= ( o.atomStore.count + o.bondStore.count );
	                    entity = o.getBondProxy( offset );
	                    entity.bondStore = o.backboneBondStore;

	                }else if( offset <= o.atomStore.count + o.bondStore.count + o.backboneBondStore.count + o.rungBondStore.count ){

	                    offset -= ( o.atomStore.count + o.bondStore.count + o.backboneBondStore.count );
	                    entity = o.getBondProxy( offset );
	                    entity.bondStore = o.rungBondStore;

	                }else{

	                    Log$1.warn( "GidPool.getByGid: invalid Structure gid", gid );

	                }

	            }else if( o.type === "Volume" ){

	                entity = {
	                    volume: o,
	                    index: offset,
	                    value: o.data[ offset ],
	                    x: o.dataPosition[ offset * 3 ],
	                    y: o.dataPosition[ offset * 3 + 1 ],
	                    z: o.dataPosition[ offset * 3 + 2 ],
	                };

	            }else{

	                Log$1.warn( "GidPool.getByGid: unknown object type for gid", gid );

	            }

	        }, this );

	        return entity;

	    }

	};

	function getWorkerDeps( vars ){
	    var deps = vars;
	    vars.forEach( function( sym ){
	        if( sym.__deps ){
	            Array.prototype.push.apply( deps, getWorkerDeps( sym.__deps ) );
	        }
	    } );
	    return deps;
	}


	function makeWorkerString( vars ){
	    var deps = uniqueArray( getWorkerDeps( vars ) );
	    return deps.map( function( sym ){
	        return sym.toString();
	    } ).join( "\n\n\n" );
	}


	function onmessage( e ){

	    var name = e.data.__name;
	    var postId = e.data.__postId;
	    var Debug = e.data.__debug;

	    if( name === undefined ){

	        console.error( "message __name undefined" );

	    }else if( self.func === undefined ){

	        console.error( "worker func undefined", name );

	    }else{

	        var callback = function( aMessage, transferList ){

	            aMessage = aMessage || {};
	            if( postId !== undefined ) aMessage.__postId = postId;

	            try{
	                self.postMessage( aMessage, transferList );
	            }catch( error ){
	                console.error( "self.postMessage:", error );
	                self.postMessage( aMessage );
	            }

	        };

	        self.func( e, callback );

	    }

	}


	function makeWorkerBlob( func, deps ){
	    var str = "'use strict';\n\n" + makeWorkerString( deps );
	    str += "\n\n\nself.func = " + func.toString() + ";";
	    str += "\n\n\nself.onmessage = " + onmessage.toString() + ";";
	    // console.log( str );
	    return new Blob( [ str ], { type: "application/javascript" } );
	}

	function WorkerRegistry$1(){

	    this.activeWorkerCount = 0;

	    var funcDict = {};
	    var depsDict = {};
	    var blobDict = {};

	    this.add = function( name, func, deps ){
	        funcDict[ name ] = func;
	        depsDict[ name ] = deps;
	    };

	    this.get = function( name ){
	        if( !blobDict[ name ] ){
	            blobDict[ name ] = makeWorkerBlob(
	                funcDict[ name ], depsDict[ name ]
	            );
	        }
	        return blobDict[ name ];
	    };

	}

	// File:src/Three.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var THREE = { REVISION: '78' };

	//

	// if ( typeof define === 'function' && define.amd ) {

	// 	define( 'three', THREE );

	// } else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {

	// 	module.exports = THREE;

	// }

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	//

	Object.assign( THREE, {

		// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

		MOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },

		// GL STATE CONSTANTS

		CullFaceNone: 0,
		CullFaceBack: 1,
		CullFaceFront: 2,
		CullFaceFrontBack: 3,

		FrontFaceDirectionCW: 0,
		FrontFaceDirectionCCW: 1,

		// SHADOWING TYPES

		BasicShadowMap: 0,
		PCFShadowMap: 1,
		PCFSoftShadowMap: 2,

		// MATERIAL CONSTANTS

		// side

		FrontSide: 0,
		BackSide: 1,
		DoubleSide: 2,

		// shading

		FlatShading: 1,
		SmoothShading: 2,

		// colors

		NoColors: 0,
		FaceColors: 1,
		VertexColors: 2,

		// blending modes

		NoBlending: 0,
		NormalBlending: 1,
		AdditiveBlending: 2,
		SubtractiveBlending: 3,
		MultiplyBlending: 4,
		CustomBlending: 5,

		// custom blending equations
		// (numbers start from 100 not to clash with other
		// mappings to OpenGL constants defined in Texture.js)

		AddEquation: 100,
		SubtractEquation: 101,
		ReverseSubtractEquation: 102,
		MinEquation: 103,
		MaxEquation: 104,

		// custom blending destination factors

		ZeroFactor: 200,
		OneFactor: 201,
		SrcColorFactor: 202,
		OneMinusSrcColorFactor: 203,
		SrcAlphaFactor: 204,
		OneMinusSrcAlphaFactor: 205,
		DstAlphaFactor: 206,
		OneMinusDstAlphaFactor: 207,

		// custom blending source factors

		//ZeroFactor: 200,
		//OneFactor: 201,
		//SrcAlphaFactor: 204,
		//OneMinusSrcAlphaFactor: 205,
		//DstAlphaFactor: 206,
		//OneMinusDstAlphaFactor: 207,
		DstColorFactor: 208,
		OneMinusDstColorFactor: 209,
		SrcAlphaSaturateFactor: 210,

		// depth modes

		NeverDepth: 0,
		AlwaysDepth: 1,
		LessDepth: 2,
		LessEqualDepth: 3,
		EqualDepth: 4,
		GreaterEqualDepth: 5,
		GreaterDepth: 6,
		NotEqualDepth: 7,


		// TEXTURE CONSTANTS

		MultiplyOperation: 0,
		MixOperation: 1,
		AddOperation: 2,

		// Tone Mapping modes

		NoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)
		LinearToneMapping: 1, // only apply exposure.
		ReinhardToneMapping: 2,
		Uncharted2ToneMapping: 3, // John Hable
		CineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson

		// Mapping modes

		UVMapping: 300,

		CubeReflectionMapping: 301,
		CubeRefractionMapping: 302,

		EquirectangularReflectionMapping: 303,
		EquirectangularRefractionMapping: 304,

		SphericalReflectionMapping: 305,
		CubeUVReflectionMapping: 306,
		CubeUVRefractionMapping: 307,

		// Wrapping modes

		RepeatWrapping: 1000,
		ClampToEdgeWrapping: 1001,
		MirroredRepeatWrapping: 1002,

		// Filters

		NearestFilter: 1003,
		NearestMipMapNearestFilter: 1004,
		NearestMipMapLinearFilter: 1005,
		LinearFilter: 1006,
		LinearMipMapNearestFilter: 1007,
		LinearMipMapLinearFilter: 1008,

		// Data types

		UnsignedByteType: 1009,
		ByteType: 1010,
		ShortType: 1011,
		UnsignedShortType: 1012,
		IntType: 1013,
		UnsignedIntType: 1014,
		FloatType: 1015,
		HalfFloatType: 1025,

		// Pixel types

		//UnsignedByteType: 1009,
		UnsignedShort4444Type: 1016,
		UnsignedShort5551Type: 1017,
		UnsignedShort565Type: 1018,

		// Pixel formats

		AlphaFormat: 1019,
		RGBFormat: 1020,
		RGBAFormat: 1021,
		LuminanceFormat: 1022,
		LuminanceAlphaFormat: 1023,
		// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
		RGBEFormat: THREE.RGBAFormat, //1024;
		DepthFormat: 1026,

		// DDS / ST3C Compressed texture formats

		RGB_S3TC_DXT1_Format: 2001,
		RGBA_S3TC_DXT1_Format: 2002,
		RGBA_S3TC_DXT3_Format: 2003,
		RGBA_S3TC_DXT5_Format: 2004,

		// PVRTC compressed texture formats

		RGB_PVRTC_4BPPV1_Format: 2100,
		RGB_PVRTC_2BPPV1_Format: 2101,
		RGBA_PVRTC_4BPPV1_Format: 2102,
		RGBA_PVRTC_2BPPV1_Format: 2103,

		// ETC compressed texture formats

		RGB_ETC1_Format: 2151,

		// Loop styles for AnimationAction

		LoopOnce: 2200,
		LoopRepeat: 2201,
		LoopPingPong: 2202,

		// Interpolation

		InterpolateDiscrete: 2300,
		InterpolateLinear: 2301,
		InterpolateSmooth: 2302,

		// Interpolant ending modes

		ZeroCurvatureEnding: 2400,
		ZeroSlopeEnding: 2401,
		WrapAroundEnding: 2402,

		// Triangle Draw modes

		TrianglesDrawMode: 0,
		TriangleStripDrawMode: 1,
		TriangleFanDrawMode: 2,

		// Texture Encodings

		LinearEncoding: 3000, // No encoding at all.
		sRGBEncoding: 3001,
		GammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput

		// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.
		// These encodings should not specified as output encodings except in rare situations.
		RGBEEncoding: 3002, // AKA Radiance.
		LogLuvEncoding: 3003,
		RGBM7Encoding: 3004,
		RGBM16Encoding: 3005,
		RGBDEncoding: 3006, // MaxRange is 256.

		// Depth packing strategies

		BasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers
		RGBADepthPacking: 3201 // for packing into RGBA buffers.

	} );

	// File:src/math/Color.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Color = function ( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	};

	THREE.Color.prototype = {

		constructor: THREE.Color,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value instanceof THREE.Color ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = THREE.Math.euclideanModulo( h, 1 );
				s = THREE.Math.clamp( s, 0, 1 );
				l = THREE.Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = THREE.ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		}

	};

	THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	// File:src/math/Quaternion.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Quaternion = function ( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	};

	THREE.Quaternion.prototype = {

		constructor: THREE.Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( euler instanceof THREE.Euler === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		inverse: function () {

			return this.conjugate().normalize();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( THREE.Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	// File:src/math/Vector2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.Vector2 = function ( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	};

	THREE.Vector2.prototype = {

		constructor: THREE.Vector2,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector2();
					max = new THREE.Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	// File:src/math/Vector3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector3 = function ( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	};

	THREE.Vector3.prototype = {

		constructor: THREE.Vector3,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( euler instanceof THREE.Euler === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector3();
					max = new THREE.Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		setFromSpherical: function( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			return this.setFromMatrixColumn( m, 3 );

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			if ( typeof m === 'number' ) {

				console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
				var temp = m
				m = index;
				index = temp;

			}

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	// File:src/math/Vector4.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector4 = function ( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	};

	THREE.Vector4.prototype = {

		constructor: THREE.Vector4,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector4();
					max = new THREE.Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	// File:src/math/Euler.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Euler = function ( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || THREE.Euler.DefaultOrder;

	};

	THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	THREE.Euler.DefaultOrder = 'XYZ';

	THREE.Euler.prototype = {

		constructor: THREE.Euler,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = THREE.Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function setFromQuaternion( q, order, update ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new THREE.Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new THREE.Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	// File:src/math/Line3.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Line3 = function ( start, end ) {

		this.start = ( start !== undefined ) ? start : new THREE.Vector3();
		this.end = ( end !== undefined ) ? end : new THREE.Vector3();

	};

	THREE.Line3.prototype = {

		constructor: THREE.Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new THREE.Vector3();
			var startEnd = new THREE.Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = THREE.Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	// File:src/math/Box2.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Box2 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );

	};

	THREE.Box2.prototype = {

		constructor: THREE.Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Box3.js

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Box3 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );

	};

	THREE.Box3.prototype = {

		constructor: THREE.Box3,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var v1 = new THREE.Vector3();

			return function setFromObject( object ) {

				var scope = this;

				object.updateMatrixWorld( true );

				this.makeEmpty();

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( geometry instanceof THREE.Geometry ) {

							var vertices = geometry.vertices;

							for ( var i = 0, il = vertices.length; i < il; i ++ ) {

								v1.copy( vertices[ i ] );
								v1.applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {

							var positions = geometry.attributes[ 'position' ].array;

							for ( var i = 0, il = positions.length; i < il; i += 3 ) {

								v1.fromArray( positions, i );
								v1.applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						}

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new THREE.Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new THREE.Vector3();

			return function getBoundingSphere( optionalTarget ) {

				var result = optionalTarget || new THREE.Sphere();

				result.center = this.center();
				result.radius = this.size( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3()
			];

			return function applyMatrix4( matrix ) {

				// transform of empty box is an empty box.
				if( this.isEmpty() ) return this;

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Matrix3.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	THREE.Matrix3 = function () {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix3.prototype = {

		constructor: THREE.Matrix3,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		setFromMatrix4: function( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[  8 ],
				me[ 1 ], me[ 5 ], me[  9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( matrix instanceof THREE.Matrix4 ) {

				console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate || false ) {} else {

					console.warn( msg );

				}

				return this.identity();
			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		}

	};

	// File:src/math/Matrix4.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Matrix4 = function () {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix4.prototype = {

		constructor: THREE.Matrix4,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new THREE.Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function extractRotation( m ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( euler instanceof THREE.Euler === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function lookAt( eye, target, up ) {

				if ( x === undefined ) {

					x = new THREE.Vector3();
					y = new THREE.Vector3();
					z = new THREE.Vector3();

				}

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.z += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate || false ) {} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function decompose( position, quaternion, scale ) {

				if ( vector === undefined ) {

					vector = new THREE.Vector3();
					matrix = new THREE.Matrix4();

				}

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	};

	// File:src/math/Ray.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Ray = function ( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
		this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

	};

	THREE.Ray.prototype = {

		constructor: THREE.Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new THREE.Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new THREE.Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new THREE.Vector3();
			var segDir = new THREE.Vector3();
			var diff = new THREE.Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new THREE.Vector3();

			return function intersectSphere( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new THREE.Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new THREE.Vector3();
			var edge1 = new THREE.Vector3();
			var edge2 = new THREE.Vector3();
			var normal = new THREE.Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	// File:src/math/Sphere.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Sphere = function ( center, radius ) {

		this.center = ( center !== undefined ) ? center : new THREE.Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	};

	THREE.Sphere.prototype = {

		constructor: THREE.Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new THREE.Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).center( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new THREE.Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new THREE.Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	// File:src/math/Frustum.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new THREE.Plane(),
			( p1 !== undefined ) ? p1 : new THREE.Plane(),
			( p2 !== undefined ) ? p2 : new THREE.Plane(),
			( p3 !== undefined ) ? p3 : new THREE.Plane(),
			( p4 !== undefined ) ? p4 : new THREE.Plane(),
			( p5 !== undefined ) ? p5 : new THREE.Plane()

		];

	};

	THREE.Frustum.prototype = {

		constructor: THREE.Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new THREE.Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new THREE.Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new THREE.Vector3(),
				p2 = new THREE.Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	// File:src/math/Plane.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Plane = function ( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	};

	THREE.Plane.prototype = {

		constructor: THREE.Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new THREE.Vector3();

			return function intersectLine( line, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new THREE.Vector3();
			var m1 = new THREE.Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				// transform normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				// recalculate constant (like in setFromNormalAndCoplanarPoint)
				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	// File:src/math/Spherical.js

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	THREE.Spherical = function ( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	};

	THREE.Spherical.prototype = {

		constructor: THREE.Spherical,

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius.copy( other.radius );
			this.phi.copy( other.phi );
			this.theta.copy( other.theta );

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function() {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		},

	};

	// File:src/math/Math.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function generateUUID() {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		random16: function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * THREE.Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * THREE.Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	// File:src/math/Spline.js

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Spline = function ( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new THREE.Vector3(),
				tmpVec = new THREE.Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new THREE.Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/math/Triangle.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Triangle = function ( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new THREE.Vector3();
		this.b = ( b !== undefined ) ? b : new THREE.Vector3();
		this.c = ( c !== undefined ) ? c : new THREE.Vector3();

	};

	THREE.Triangle.normal = function () {

		var v0 = new THREE.Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	THREE.Triangle.barycoordFromPoint = function () {

		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new THREE.Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	THREE.Triangle.containsPoint = function () {

		var v1 = new THREE.Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	THREE.Triangle.prototype = {

		constructor: THREE.Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new THREE.Vector3();
			var v1 = new THREE.Vector3();

			return function area() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		closestPointToPoint: function () {

			var plane, edgeList, projectedPoint, closestPoint;

			return function closestPointToPoint( point, optionalTarget ) {

				if ( plane === undefined ) {

					plane = new THREE.Plane();
					edgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];
					projectedPoint = new THREE.Vector3();
					closestPoint = new THREE.Vector3();

				}

				var result = optionalTarget || new THREE.Vector3();
				var minDistance = Infinity;

				// project the point onto the plane of the triangle

				plane.setFromCoplanarPoints( this.a, this.b, this.c );
				plane.projectPoint( point, projectedPoint );

				// check if the projection lies within the triangle

				if( this.containsPoint( projectedPoint ) === true ) {

					// if so, this is the closest point

					result.copy( projectedPoint );

				} else {

					// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

					edgeList[ 0 ].set( this.a, this.b );
					edgeList[ 1 ].set( this.b, this.c );
					edgeList[ 2 ].set( this.c, this.a );

					for( var i = 0; i < edgeList.length; i ++ ) {

						edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

						var distance = projectedPoint.distanceToSquared( closestPoint );

						if( distance < minDistance ) {

							minDistance = distance;

							result.copy( closestPoint );

						}

					}

				}

				return result;

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	// File:src/math/Interpolant.js

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	THREE.Interpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	};

	THREE.Interpolant.prototype = {

		constructor: THREE.Interpolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( THREE.Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_

	} );

	// File:src/math/interpolants/CubicInterpolant.js

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	THREE.CubicInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	};

	THREE.CubicInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	THREE.ZeroCurvatureEnding,
			endingEnd:		THREE.ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case THREE.ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case THREE.ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	// File:src/math/interpolants/DiscreteInterpolant.js

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	THREE.DiscreteInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.DiscreteInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	// File:src/math/interpolants/LinearInterpolant.js

	/**
	 * @author tschw
	 */

	THREE.LinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.LinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	// File:src/math/interpolants/QuaternionLinearInterpolant.js

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	THREE.QuaternionLinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				THREE.Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	// File:src/core/Clock.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Clock = function ( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	};

	THREE.Clock.prototype = {

		constructor: THREE.Clock,

		start: function () {

			this.startTime = ( performance || Date ).now();

			this.oldTime = this.startTime;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = ( performance || Date ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	// File:src/core/EventDispatcher.js

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	THREE.EventDispatcher = function () {};

	Object.assign( THREE.EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [], i = 0;
				var length = listenerArray.length;

				for ( i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	// File:src/core/Layers.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Layers = function () {

		this.mask = 1;

	};

	THREE.Layers.prototype = {

		constructor: THREE.Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	// File:src/core/Raycaster.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	( function ( THREE ) {

		THREE.Raycaster = function ( origin, direction, near, far ) {

			this.ray = new THREE.Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

			this.near = near || 0;
			this.far = far || Infinity;

			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};

			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );

		};

		function ascSort( a, b ) {

			return a.distance - b.distance;

		}

		function intersectObject( object, raycaster, intersects, recursive ) {

			if ( object.visible === false ) return;

			object.raycast( raycaster, intersects );

			if ( recursive === true ) {

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					intersectObject( children[ i ], raycaster, intersects, true );

				}

			}

		}

		//

		THREE.Raycaster.prototype = {

			constructor: THREE.Raycaster,

			linePrecision: 1,

			set: function ( origin, direction ) {

				// direction is assumed to be normalized (for accurate distance calculations)

				this.ray.set( origin, direction );

			},

			setFromCamera: function ( coords, camera ) {

				if ( camera instanceof THREE.PerspectiveCamera ) {

					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

				} else if ( camera instanceof THREE.OrthographicCamera ) {

					this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

				} else {

					console.error( 'THREE.Raycaster: Unsupported camera type.' );

				}

			},

			intersectObject: function ( object, recursive ) {

				var intersects = [];

				intersectObject( object, this, intersects, recursive );

				intersects.sort( ascSort );

				return intersects;

			},

			intersectObjects: function ( objects, recursive ) {

				var intersects = [];

				if ( Array.isArray( objects ) === false ) {

					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;

				}

				for ( var i = 0, l = objects.length; i < l; i ++ ) {

					intersectObject( objects[ i ], this, intersects, recursive );

				}

				intersects.sort( ascSort );

				return intersects;

			}

		};

	}( THREE ) );

	// File:src/core/Object3D.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	THREE.Object3D = function () {

		Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = THREE.Object3D.DefaultUp.clone();

		var position = new THREE.Vector3();
		var rotation = new THREE.Euler();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new THREE.Matrix4()
			},
			normalMatrix: {
				value: new THREE.Matrix3()
			}
		} );

		this.matrix = new THREE.Matrix4();
		this.matrixWorld = new THREE.Matrix4();

		this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new THREE.Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	};

	THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
	THREE.Object3D.DefaultMatrixAutoUpdate = true;

	Object.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new THREE.Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new THREE.Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new THREE.Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new THREE.Matrix4();

			return function lookAt( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( object instanceof THREE.Object3D ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new THREE.Vector3();
			var scale = new THREE.Vector3();

			return function getWorldQuaternion( optionalTarget ) {

				var result = optionalTarget || new THREE.Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new THREE.Quaternion();

			return function getWorldRotation( optionalTarget ) {

				var result = optionalTarget || new THREE.Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new THREE.Vector3();
			var quaternion = new THREE.Quaternion();

			return function getWorldScale( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new THREE.Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				this.children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is '' when called from JSON.stringify
			var isRootObject = ( meta === undefined || meta === '' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache ( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	THREE.Object3DIdCount = 0;

	// File:src/core/Face3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = color instanceof THREE.Color ? color : new THREE.Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	};

	THREE.Face3.prototype = {

		constructor: THREE.Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	// File:src/core/BufferAttribute.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferAttribute = function ( array, itemSize, normalized ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;
		this.normalized = normalized === true;

	};

	THREE.BufferAttribute.prototype = {

		constructor: THREE.BufferAttribute,

		get count() {

			return this.array.length / this.itemSize;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new THREE.Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new THREE.Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new THREE.Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new THREE.Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	THREE.Int8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int8Array( array ), itemSize );

	};

	THREE.Uint8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8Array( array ), itemSize );

	};

	THREE.Uint8ClampedAttribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	};

	THREE.Int16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int16Array( array ), itemSize );

	};

	THREE.Uint16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint16Array( array ), itemSize );

	};

	THREE.Int32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int32Array( array ), itemSize );

	};

	THREE.Uint32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint32Array( array ), itemSize );

	};

	THREE.Float32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float32Array( array ), itemSize );

	};

	THREE.Float64Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float64Array( array ), itemSize );

	};


	// Deprecated

	THREE.DynamicBufferAttribute = function ( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new THREE.BufferAttribute( array, itemSize ).setDynamic( true );

	};

	// File:src/core/InstancedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {

		THREE.BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;

	THREE.InstancedBufferAttribute.prototype.copy = function ( source ) {

		THREE.BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBuffer = function ( array, stride ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.stride = stride;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	};

	THREE.InterleavedBuffer.prototype = {

		constructor: THREE.InterleavedBuffer,

		get length () {

			return this.array.length;

		},

		get count () {

			return this.array.length / this.stride;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	// File:src/core/InstancedInterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {

		THREE.InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );
	THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;

	THREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		THREE.InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {

		this.uuid = THREE.Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

	};


	THREE.InterleavedBufferAttribute.prototype = {

		constructor: THREE.InterleavedBufferAttribute,

		get length() {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
			return this.array.length;

		},

		get count() {

			return this.data.count;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	// File:src/core/Geometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	THREE.Geometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.elementsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	Object.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {

		applyMatrix: function ( matrix ) {

			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new THREE.Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new THREE.Vector3(), ab = new THREE.Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new THREE.Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new THREE.Vector3(), ab = new THREE.Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new THREE.Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new THREE.Vector3();
						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new THREE.Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new THREE.Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( geometry instanceof THREE.Geometry === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ];

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( mesh instanceof THREE.Mesh === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	THREE.GeometryIdCount = 0;

	// File:src/core/DirectGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.DirectGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	Object.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {

		computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	// File:src/core/BufferGeometry.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	};

	Object.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object instanceof THREE.Points || object instanceof THREE.Line ) {

				var positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object instanceof THREE.Mesh ) {

				if ( geometry instanceof THREE.Geometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object instanceof THREE.Mesh ) {

				var direct = geometry.__directGeometry;

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			if ( geometry.verticesNeedUpdate === true ) {

				var attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				var attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				var attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				var attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				var attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new THREE.Box3();

			}

			var positions = this.attributes.position.array;

			if ( positions !== undefined ) {

				this.boundingBox.setFromArray( positions );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new THREE.Box3();
			var vector = new THREE.Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new THREE.Sphere();

				}

				var positions = this.attributes.position;

				if ( positions ) {

					var array = positions.array;
					var center = this.boundingSphere.center;

					box.setFromArray( array );
					box.center( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = array.length; i < il; i += 3 ) {

						vector.fromArray( array, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new THREE.Vector3(),
				pB = new THREE.Vector3(),
				pC = new THREE.Vector3(),

				cb = new THREE.Vector3(),
				ab = new THREE.Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( geometry instanceof THREE.BufferGeometry === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new THREE.BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	THREE.BufferGeometry.MaxIndex = 65535;

	// File:src/core/InstancedBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferGeometry = function () {

		THREE.BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	};

	THREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;

	THREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {

		this.groups.push( {

			start: start,
			count: count,
			instances: instances

		} );

	};

	THREE.InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.instances );

		}

		return this;

	};

	// File:src/core/Uniform.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Uniform = function ( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

		this.dynamic = false;

	};

	THREE.Uniform.prototype = {

		constructor: THREE.Uniform,

		onUpdate: function ( callback ) {

			this.dynamic = true;
			this.onUpdateCallback = callback;

			return this;

		}

	};

	// File:src/animation/AnimationAction.js

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	THREE.AnimationAction = function() {

		throw new Error( "THREE.AnimationAction: " +
				"Use mixer.clipAction for construction." );

	};

	THREE.AnimationAction._new =
			function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	THREE.ZeroCurvatureEnding,
				endingEnd:		THREE.ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = THREE.LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	};

	THREE.AnimationAction._new.prototype = {

		constructor: THREE.AnimationAction._new,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			var start = this._startTime;

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			var mixer = this._mixer;

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === THREE.LoopOnce ) {

				if ( loopCount === -1 ) {
					// just started

					this.loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === THREE.LoopPingPong );

				if ( loopCount === -1 ) {
					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings(
								true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings(
								this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {
					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending < 0 ) {
						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : -1
						} );

					} else {
						// keep running

						if ( pending === 0 ) {
							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {
					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= THREE.ZeroSlopeEnding;
				settings.endingEnd		= THREE.ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingStart = THREE.WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = THREE.WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};


	// File:src/animation/AnimationClip.js

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationClip = function ( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		this.uuid = THREE.Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		// maybe only do these on demand, as doing them here could potentially slow down loading
		// but leaving these here during development as this ensures a lot of testing of these functions
		this.trim();
		this.optimize();

	};

	THREE.AnimationClip.prototype = {

		constructor: THREE.AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new THREE.AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = THREE.AnimationUtils.getKeyframeOrder( times );
				times = THREE.AnimationUtils.sortedArray( times, 1, order );
				values = THREE.AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new THREE.NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new THREE.AnimationClip( name, -1, tracks );

		},

		findByName: function( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones, nodeName ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					THREE.AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new THREE.NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							THREE.QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new THREE.AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	// File:src/animation/AnimationMixer.js

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.AnimationMixer = function( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	};

	Object.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						THREE.AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new THREE.
					AnimationMixer._Action( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						THREE.AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	THREE.AnimationMixer._Action = THREE.AnimationAction._new;

	// Implementation details:

	Object.assign( THREE.AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new THREE.PropertyMixer(
							THREE.PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< _Action >	- used as prototypes
			// 		actionByRoot: _Action			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for _Action objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new THREE.LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );

	// File:src/animation/AnimationObjectGroup.js

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	THREE.AnimationObjectGroup = function( var_args ) {

		this.uuid = THREE.Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	};

	THREE.AnimationObjectGroup.prototype = {

		constructor: THREE.AnimationObjectGroup,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new THREE.PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};


	// File:src/animation/AnimationUtils.js

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( THREE.AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	// File:src/animation/KeyframeTrack.js

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.KeyframeTrack = function ( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	};

	THREE.KeyframeTrack.prototype = {

		constructor: THREE.KeyframeTrack,

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new THREE.DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new THREE.CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case THREE.InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case THREE.InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case THREE.InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return THREE.InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return THREE.InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return THREE.InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) ++ from;
			while ( to !== -1 && times[ to ] > endTime ) -- to;

			++ to; // inclusive -> exclusive bound

			if( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = THREE.AnimationUtils.arraySlice( times, from, to );
				this.values = THREE.AnimationUtils.
						arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( THREE.AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				writeIndex = 1;

			for( var i = 1, n = times.length - 1; i <= n; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					// remove unnecessary keyframes same as their neighbors
					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}


					}

					++ writeIndex;

				}

			}

			if ( writeIndex !== times.length ) {

				this.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				var times = [], values = [];

				THREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': THREE.AnimationUtils.convertArray( track.times, Array ),
					'values': THREE.AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return THREE.NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return THREE.VectorKeyframeTrack;

				case "color":

					return THREE.ColorKeyframeTrack;

				case "quaternion":

					return THREE.QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return THREE.BooleanKeyframeTrack;

				case "string":

					return THREE.StringKeyframeTrack;

			}

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	// File:src/animation/PropertyBinding.js

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyBinding = function ( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this.node = THREE.PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	};

	THREE.PropertyBinding.prototype = {

		constructor: THREE.PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = THREE.PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( THREE.PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: THREE.PropertyBinding.prototype.getValue,
		_setValue_unbound: THREE.PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	THREE.PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	THREE.PropertyBinding.Composite.prototype = {

		constructor: THREE.PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	THREE.PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {

			return new THREE.PropertyBinding( root, path, parsedPath );

		} else {

			return new THREE.PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	THREE.PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//	  .bone[Armature.DEF_cog].position
		// created and tested via https://regex101.com/#javascript

		var re = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/;
		var matches = re.exec( trackName );

		if ( ! matches ) {

			throw new Error( "cannot parse trackName at all: " + trackName );

		}

		if ( matches.index === re.lastIndex ) {

			re.lastIndex++;

		}

		var results = {
			// directoryName: matches[ 1 ], // (tschw) currently unused
			nodeName: matches[ 3 ], 	// allowed to be null, specified root node.
			objectName: matches[ 5 ],
			objectIndex: matches[ 7 ],
			propertyName: matches[ 9 ],
			propertyIndex: matches[ 11 ]	// allowed to be null, specifies that the whole property is set.
		};

		if ( results.propertyName === null || results.propertyName.length === 0 ) {

			throw new Error( "can not parse propertyName from trackName: " + trackName );

		}

		return results;

	};

	THREE.PropertyBinding.findNode = function( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	};

	// File:src/animation/PropertyMixer.js

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyMixer = function ( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	};

	THREE.PropertyMixer.prototype = {

		constructor: THREE.PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			THREE.Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	// File:src/animation/tracks/BooleanKeyframeTrack.js

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.BooleanKeyframeTrack = function ( name, times, values ) {

		THREE.KeyframeTrack.call( this, name, times, values );

	};

	THREE.BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	// File:src/animation/tracks/ColorKeyframeTrack.js

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.ColorKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited


		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	// File:src/animation/tracks/NumberKeyframeTrack.js

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.NumberKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/animation/tracks/QuaternionKeyframeTrack.js

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	// File:src/animation/tracks/StringKeyframeTrack.js

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.StringKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	// File:src/animation/tracks/VectorKeyframeTrack.js

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.VectorKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/audio/Audio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	THREE.Audio = function ( listener ) {

		THREE.Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	};

	THREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.source.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.source.buffer;
			source.loop = this.source.loop;
			source.onended = this.source.onended;
			source.start( 0, this.startTime );
			source.playbackRate.value = this.playbackRate;

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = this.context.currentTime;
			this.isPlaying = false;

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.value = this.playbackRate;

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.source.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.loop = value;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},


		setVolume: function ( value ) {

			this.gain.gain.value = value;

			return this;

		}

	} );

	// File:src/audio/AudioAnalyser.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioAnalyser = function ( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	};

	Object.assign( THREE.AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	// File:src/audio/AudioContext.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	Object.defineProperty( THREE, 'AudioContext', {

		get: ( function () {

			var context;

			return function get() {

				if ( context === undefined ) {

					context = new ( window.AudioContext || window.webkitAudioContext )();

				}

				return context;

			};

		} )()

	} );

	// File:src/audio/PositionalAudio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PositionalAudio = function ( listener ) {

		THREE.Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	};

	THREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {

		constructor: THREE.PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

		},

		updateMatrixWorld: ( function () {

			var position = new THREE.Vector3();

			return function updateMatrixWorld( force ) {

				THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

				position.setFromMatrixPosition( this.matrixWorld );

				this.panner.setPosition( position.x, position.y, position.z );

			};

		} )()


	} );

	// File:src/audio/AudioListener.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioListener = function () {

		THREE.Object3D.call( this );

		this.type = 'AudioListener';

		this.context = THREE.AudioContext;

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	};

	THREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.value = value;

		},

		updateMatrixWorld: ( function () {

			var position = new THREE.Vector3();
			var quaternion = new THREE.Quaternion();
			var scale = new THREE.Vector3();

			var orientation = new THREE.Vector3();

			return function updateMatrixWorld( force ) {

				THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			};

		} )()

	} );

	// File:src/cameras/Camera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.Camera = function () {

		THREE.Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new THREE.Matrix4();
		this.projectionMatrix = new THREE.Matrix4();

	};

	THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Camera.prototype.constructor = THREE.Camera;

	THREE.Camera.prototype.getWorldDirection = function () {

		var quaternion = new THREE.Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	THREE.Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new THREE.Matrix4();

		return function lookAt( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	THREE.Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	THREE.Camera.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	// File:src/cameras/CubeCamera.js

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CubeCamera = function ( near, far, cubeResolution ) {

		THREE.Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };

		this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	};

	THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;

	// File:src/cameras/OrthographicCamera.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

		THREE.Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	};

	THREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {

		constructor: THREE.OrthographicCamera,

		copy: function ( source ) {

			THREE.Camera.prototype.copy.call( this, source );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = THREE.Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	// File:src/cameras/PerspectiveCamera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	THREE.PerspectiveCamera = function( fov, aspect, near, far ) {

		THREE.Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	};

	THREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {

		constructor: THREE.PerspectiveCamera,

		copy: function ( source ) {

			THREE.Camera.prototype.copy.call( this, source );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return THREE.Math.RAD2DEG * 2 * Math.atan(
					Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
						THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( view !== null ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makeFrustum(
					left, left + width, top - height, top, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = THREE.Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	// File:src/cameras/StereoCamera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.StereoCamera = function () {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.cameraL = new THREE.PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new THREE.PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	};

	Object.assign( THREE.StereoCamera.prototype, {

		update: ( function () {

			var focus, fov, aspect, near, far;

			var eyeRight = new THREE.Matrix4();
			var eyeLeft = new THREE.Matrix4();

			return function update( camera ) {

				var needsUpdate = focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far;

				if ( needsUpdate ) {

					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSep = 0.064 / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	// File:src/lights/Light.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Light = function ( color, intensity ) {

		THREE.Object3D.call( this );

		this.type = 'Light';

		this.color = new THREE.Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	};

	THREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Light,

		copy: function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = THREE.Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			return data;

		}

	} );

	// File:src/lights/LightShadow.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LightShadow = function ( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new THREE.Vector2( 512, 512 );

		this.map = null;
		this.matrix = new THREE.Matrix4();

	};

	Object.assign( THREE.LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	// File:src/lights/AmbientLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AmbientLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	};

	THREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

		constructor: THREE.AmbientLight

	} );

	// File:src/lights/DirectionalLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DirectionalLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		this.shadow = new THREE.DirectionalLightShadow();

	};

	THREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

		constructor: THREE.DirectionalLight,

		copy: function ( source ) {

			THREE.Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	// File:src/lights/DirectionalLightShadow.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.DirectionalLightShadow = function ( light ) {

		THREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	};

	THREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {

		constructor: THREE.DirectionalLightShadow

	} );

	// File:src/lights/HemisphereLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

		THREE.Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.groundColor = new THREE.Color( groundColor );

	};

	THREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

		constructor: THREE.HemisphereLight,

		copy: function ( source ) {

			THREE.Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	// File:src/lights/PointLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	THREE.PointLight = function ( color, intensity, distance, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / ( 4 * Math.PI );
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );

	};

	THREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

		constructor: THREE.PointLight,

		copy: function ( source ) {

			THREE.Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	// File:src/lights/SpotLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * Math.PI;
			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / Math.PI;
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.SpotLightShadow();

	};

	THREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

		constructor: THREE.SpotLight,

		copy: function ( source ) {

			THREE.Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	// File:src/lights/SpotLightShadow.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.SpotLightShadow = function () {

		THREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );

	};

	THREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {

		constructor: THREE.SpotLightShadow,

		update: function ( light ) {

			var fov = THREE.Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || 500;

			var camera = this.camera;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	// File:src/loaders/AudioLoader.js

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	THREE.AudioLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new THREE.XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				var context = THREE.AudioContext;

				context.decodeAudioData( buffer, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	// File:src/loaders/Cache.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	// File:src/loaders/Loader.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Loader = function () {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	};

	THREE.Loader.prototype = {

		constructor: THREE.Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function createMaterial( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new THREE.Color();
				if ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = THREE.Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = THREE.Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: THREE.Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = THREE[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = THREE.BackSide;
							break;
						case 'doubleSided':
							json.side = THREE.DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = THREE.VertexColors;
							if ( value === 'face' ) json.vertexColors = THREE.FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	THREE.Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	// File:src/loaders/XHRLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.XHRLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.XHRLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = THREE.Cache.get( url );

			if ( cached !== undefined ) {

				if ( onLoad ) {

					setTimeout( function () {

						onLoad( cached );

					}, 0 );

				}

				return cached;

			}

			var request = new XMLHttpRequest();
			request.overrideMimeType( 'text/plain' );
			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				THREE.Cache.add( url, response );

				if ( this.status === 200 ) {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}

			}, false );

			if ( onProgress !== undefined ) {

				request.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			request.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			request.send( null );

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		}

	} );

	// File:src/loaders/FontLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.FontLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( this.manager );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new THREE.Font( json );

		}

	} );

	// File:src/loaders/ImageLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ImageLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.ImageLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
			image.onload = function () {

				URL.revokeObjectURL( image.src );
				if ( onLoad ) onLoad( image );

			};

			if ( url.indexOf( 'data:' ) === 0 ) {

				image.src = url;

			} else {

				var loader = new THREE.XHRLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'blob' );
				loader.load( url, function ( blob ) {

					image.src = URL.createObjectURL( blob );

				}, onProgress, onError );

			}

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	// File:src/loaders/JSONLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.JSONLoader = function ( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		this.withCredentials = false;

	};

	Object.assign( THREE.JSONLoader.prototype, {

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );

			var loader = new THREE.XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new THREE.Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new THREE.Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new THREE.Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new THREE.Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new THREE.Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new THREE.Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	} );

	// File:src/loaders/LoadingManager.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	};

	THREE.DefaultLoadingManager = new THREE.LoadingManager();

	// File:src/loaders/BufferGeometryLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometryLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new THREE.BufferGeometry();

			var index = json.data.index;

			var TYPED_ARRAYS = {
				'Int8Array': Int8Array,
				'Uint8Array': Uint8Array,
				'Uint8ClampedArray': Uint8ClampedArray,
				'Int16Array': Int16Array,
				'Uint16Array': Uint16Array,
				'Int32Array': Int32Array,
				'Uint32Array': Uint32Array,
				'Float32Array': Float32Array,
				'Float64Array': Float64Array
			};

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new THREE.Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	// File:src/loaders/MaterialLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MaterialLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.textures = {};

	};

	Object.assign( THREE.MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		getTexture: function ( name ) {

			var textures = this.textures;

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		},

		parse: function ( json ) {

			var material = new THREE[ json.type ];

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;

			// for PointsMaterial
			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = this.getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = this.getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new THREE.Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );

			if ( json.envMap !== undefined ) {

				material.envMap = this.getTexture( json.envMap );
				material.combine = THREE.MultiplyOperation;

			}

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MultiMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	} );

	// File:src/loaders/ObjectLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ObjectLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.texturePath = '';

	};

	Object.assign( THREE.ObjectLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new THREE.JSONLoader();
				var bufferGeometryLoader = new THREE.BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new THREE[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new THREE[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new THREE[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new THREE[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new THREE [ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new THREE[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'IcosahedronGeometry':
						case 'OctahedronGeometry':
						case 'TetrahedronGeometry':

							geometry = new THREE[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new THREE[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new THREE[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new THREE[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new THREE[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new THREE.MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = THREE.AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new THREE.LoadingManager( onLoad );

				var loader = new THREE.ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return THREE[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new THREE.Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;
					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );
					if ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );
					if ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );
					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
					if ( Array.isArray( data.wrap ) ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ] );
						texture.wrapT = parseConstant( data.wrap[ 1 ] );

					}

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new THREE.Matrix4();

			return function parseObject( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new THREE.Scene();

						break;

					case 'PerspectiveCamera':

						object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						if ( data.focus !== undefined ) object.focus = data.focus;
						if ( data.zoom !== undefined ) object.zoom = data.zoom;
						if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
						if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
						if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

						break;

					case 'OrthographicCamera':

						object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new THREE.AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new THREE.DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

						break;

					case 'HemisphereLight':

						object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new THREE.SkinnedMesh( geometry, material );

						} else {

							object = new THREE.Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new THREE.LOD();

						break;

					case 'Line':

						object = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'PointCloud':
					case 'Points':

						object = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new THREE.Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new THREE.Group();

						break;

					default:

						object = new THREE.Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			};

		}()

	} );

	// File:src/loaders/TextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.TextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.TextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new THREE.Texture();

			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	// File:src/loaders/CubeTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	Object.assign( THREE.CubeTextureLoader.prototype, {

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new THREE.CubeTexture();

			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	// File:src/loaders/BinaryTextureLoader.js

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};

	Object.assign( THREE.BinaryTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new THREE.DataTexture();

			var loader = new THREE.XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = THREE.LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	// File:src/loaders/CompressedTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	THREE.CompressedTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};

	Object.assign( THREE.CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new THREE.CompressedTexture();
			texture.image = images;

			var loader = new THREE.XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = THREE.LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = THREE.LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	// File:src/materials/Material.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Material = function () {

		Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = THREE.NormalBlending;
		this.side = THREE.FrontSide;
		this.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading
		this.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = THREE.SrcAlphaFactor;
		this.blendDst = THREE.OneMinusSrcAlphaFactor;
		this.blendEquation = THREE.AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = THREE.LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipShadows = false;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	};

	THREE.Material.prototype = {

		constructor: THREE.Material,

		get needsUpdate() {

			return this._needsUpdate;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.update();
			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue instanceof THREE.Color ) {

					currentValue.set( newValue );

				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( this.color instanceof THREE.Color ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();
			if ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.bumpMap instanceof THREE.Texture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( this.normalMap instanceof THREE.Texture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( this.displacementMap instanceof THREE.Texture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( this.envMap instanceof THREE.Texture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;
			if ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;
			if ( this.side !== THREE.FrontSide ) data.side = this.side;
			if ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;
			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache ( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.shading = source.shading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.clipShadows = source.clipShadows;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	Object.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );

	THREE.MaterialIdCount = 0;

	// File:src/materials/LineBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	THREE.LineBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	};

	THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;

	THREE.LineBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	// File:src/materials/LineDashedMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	THREE.LineDashedMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.lights = false;

		this.setValues( parameters );

	};

	THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;

	THREE.LineDashedMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};

	// File:src/materials/MeshBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	THREE.MeshBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new THREE.Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	};

	THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;

	THREE.MeshBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	// File:src/materials/MeshDepthMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshDepthMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = THREE.BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	};

	THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;

	THREE.MeshDepthMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MeshLambertMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	THREE.MeshLambertMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;

	THREE.MeshLambertMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshNormalMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshNormalMaterial = function ( parameters ) {

		THREE.Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;
		this.morphTargets = false;

		this.setValues( parameters );

	};

	THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;

	THREE.MeshNormalMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MeshPhongMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	THREE.MeshPhongMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.specular = new THREE.Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;

	THREE.MeshPhongMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshStandardMaterial.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	THREE.MeshStandardMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;

	THREE.MeshStandardMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshPhysicalMaterial.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	THREE.MeshPhysicalMaterial = function ( parameters ) {

		THREE.MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	};

	THREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );
	THREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;

	THREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {

		THREE.MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	// File:src/materials/MultiMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MultiMaterial = function ( materials ) {

		this.uuid = THREE.Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	};

	THREE.MultiMaterial.prototype = {

		constructor: THREE.MultiMaterial,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	// File:src/materials/PointsMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	THREE.PointsMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.lights = false;

		this.setValues( parameters );

	};

	THREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;

	THREE.PointsMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	// File:src/materials/ShaderMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	THREE.ShaderMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	};

	THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;

	THREE.ShaderMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = THREE.UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	THREE.ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = THREE.Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	// File:src/materials/RawShaderMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.RawShaderMaterial = function ( parameters ) {

		THREE.ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	};

	THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;

	// File:src/materials/SpriteMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	THREE.SpriteMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new THREE.Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	};

	THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;

	THREE.SpriteMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	// File:src/materials/ShadowMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ShadowMaterial = function () {

		THREE.ShaderMaterial.call( this, {
			uniforms: THREE.UniformsUtils.merge( [
				THREE.UniformsLib[ "lights" ],
				{
					opacity: { value: 1.0 }
				}
			] ),
			vertexShader: THREE.ShaderChunk[ 'shadow_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]
		} );

		this.lights = true;
		this.transparent = true;

		Object.defineProperties( this, {
			opacity: {
				enumerable: true,
				get: function () {
					return this.uniforms.opacity.value;
				},
				set: function ( value ) {
					this.uniforms.opacity.value = value;
				}
			}
		} );

	};

	THREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
	THREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;

	// File:src/textures/Texture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : THREE.RGBAFormat;
		this.type = type !== undefined ? type : THREE.UnsignedByteType;

		this.offset = new THREE.Vector2( 0, 0 );
		this.repeat = new THREE.Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	};

	THREE.Texture.DEFAULT_IMAGE = undefined;
	THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;

	THREE.Texture.prototype = {

		constructor: THREE.Texture,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = THREE.Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== THREE.UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case THREE.RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case THREE.RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	Object.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );

	THREE.TextureIdCount = 0;

	// File:src/textures/DepthTexture.js

	/**
	 * @author Matt DesLauriers / @mattdesl
	 */

	THREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );

	  this.image = { width: width, height: height };

	  this.type = type !== undefined ? type : THREE.UnsignedShortType;

	  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
	  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;

	  this.flipY = false;
	  this.generateMipmaps  = false;

	};

	THREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.DepthTexture.prototype.constructor = THREE.DepthTexture;

	// File:src/textures/CanvasTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	};

	THREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;

	// File:src/textures/CubeTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;

		THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	};

	THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;

	Object.defineProperty( THREE.CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	// File:src/textures/CompressedTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	};

	THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;

	// File:src/textures/DataTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;

		this.flipY = false;
		this.generateMipmaps  = false;

	};

	THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.DataTexture.prototype.constructor = THREE.DataTexture;

	// File:src/textures/VideoTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	};

	THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;

	// File:src/objects/Group.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Group = function () {

		THREE.Object3D.call( this );

		this.type = 'Group';

	};

	THREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Group

	} );

	// File:src/objects/Points.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Points = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
		this.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Points,

		raycast: ( function () {

			var inverseMatrix = new THREE.Matrix4();
			var ray = new THREE.Ray();
			var sphere = new THREE.Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new THREE.Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						var intersectPoint = ray.closestPointToPoint( point );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( geometry instanceof THREE.BufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	// File:src/objects/Line.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Line = function ( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new THREE.LineSegments( geometry, material );

		}

		THREE.Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
		this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Line,

		raycast: ( function () {

			var inverseMatrix = new THREE.Matrix4();
			var ray = new THREE.Ray();
			var sphere = new THREE.Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new THREE.Vector3();
				var vEnd = new THREE.Vector3();
				var interSegment = new THREE.Vector3();
				var interRay = new THREE.Vector3();
				var step = this instanceof THREE.LineSegments ? 2 : 1;

				if ( geometry instanceof THREE.BufferGeometry ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( geometry instanceof THREE.Geometry ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	// File:src/objects/LineSegments.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LineSegments = function ( geometry, material ) {

		THREE.Line.call( this, geometry, material );

		this.type = 'LineSegments';

	};

	THREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {

		constructor: THREE.LineSegments

	} );

	// File:src/objects/Mesh.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	THREE.Mesh = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
		this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = THREE.TrianglesDrawMode;

		this.updateMorphTargets();

	};

	THREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Mesh,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			return this;

		},

		updateMorphTargets: function () {

			if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

				this.morphTargetBase = - 1;
				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

				}

			}

		},

		getMorphTargetIndexByName: function ( name ) {

			if ( this.morphTargetDictionary[ name ] !== undefined ) {

				return this.morphTargetDictionary[ name ];

			}

			console.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );

			return 0;

		},

		raycast: ( function () {

			var inverseMatrix = new THREE.Matrix4();
			var ray = new THREE.Ray();
			var sphere = new THREE.Sphere();

			var vA = new THREE.Vector3();
			var vB = new THREE.Vector3();
			var vC = new THREE.Vector3();

			var tempA = new THREE.Vector3();
			var tempB = new THREE.Vector3();
			var tempC = new THREE.Vector3();

			var uvA = new THREE.Vector2();
			var uvB = new THREE.Vector2();
			var uvC = new THREE.Vector2();

			var barycoord = new THREE.Vector3();

			var intersectionPoint = new THREE.Vector3();
			var intersectionPointWorld = new THREE.Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				THREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

				var intersect;
				var material = object.material;

				if ( material.side === THREE.BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

				vA.fromArray( positions, a * 3 );
				vB.fromArray( positions, b * 3 );
				vC.fromArray( positions, c * 3 );

				var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uvs ) {

						uvA.fromArray( uvs, a * 2 );
						uvB.fromArray( uvs, b * 2 );
						uvC.fromArray( uvs, c * 2 );

						intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

					}

					intersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );
					intersection.faceIndex = a;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var uvs, intersection;

				if ( geometry instanceof THREE.BufferGeometry ) {

					var a, b, c;
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( attributes.uv !== undefined ) {

						uvs = attributes.uv.array;

					}

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length; i < l; i += 3 ) {

							a = indices[ i ];
							b = indices[ i + 1 ];
							c = indices[ i + 2 ];

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
								intersects.push( intersection );

							}

						}

					} else {


						for ( var i = 0, l = positions.length; i < l; i += 9 ) {

							a = i / 3;
							b = a + 1;
							c = a + 2;

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.index = a; // triangle number in positions buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( geometry instanceof THREE.Geometry ) {

					var fvA, fvB, fvC;
					var isFaceMaterial = material instanceof THREE.MultiMaterial;
					var materials = isFaceMaterial === true ? material.materials : null;

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	// File:src/objects/Bone.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.Bone = function ( skin ) {

		THREE.Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	};

	THREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Bone,

		copy: function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source );

			this.skin = source.skin;

			return this;

		}

	} );

	// File:src/objects/Skeleton.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new THREE.Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new THREE.Matrix4() );

				}

			}

		}

	};

	Object.assign( THREE.Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				var inverse = new THREE.Matrix4();

				if ( this.bones[ b ] ) {

					inverse.getInverse( this.bones[ b ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone;

			// recover the bind-time world matrices

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ b ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					if ( bone.parent instanceof THREE.Bone ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new THREE.Matrix4();

			return function update() {

				// flatten bone matrices to array

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					// compute the offset between the current and the original transform

					var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
					offsetMatrix.toArray( this.boneMatrices, b * 16 );

				}

				if ( this.useVertexTexture ) {

					this.boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

		}

	} );

	// File:src/objects/SkinnedMesh.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

		THREE.Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new THREE.Matrix4();
		this.bindMatrixInverse = new THREE.Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new THREE.Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null &&
						bones[ gbone.parent ] !== undefined ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	};


	THREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {

		constructor: THREE.SkinnedMesh,

		bind: function( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			if ( this.geometry instanceof THREE.Geometry ) {

				for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					var scale = 1.0 / sw.lengthManhattan();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( this.geometry instanceof THREE.BufferGeometry ) {

				var vec = new THREE.Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( var i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					var scale = 1.0 / vec.lengthManhattan();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function( force ) {

			THREE.Mesh.prototype.updateMatrixWorld.call( this, true );

			if ( this.bindMode === "attached" ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === "detached" ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function() {

			return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

		}

	} );

	// File:src/objects/LOD.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LOD = function () {

		THREE.Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	};


	THREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.LOD,

		copy: function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new THREE.Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = THREE.Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	// File:src/objects/Sprite.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Sprite = function ( material ) {

		THREE.Object3D.call( this );

		this.type = 'Sprite';

		this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

	};

	THREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.Sprite,

		raycast: ( function () {

			var matrixPosition = new THREE.Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
				var guessSizeSq = this.scale.x * this.scale.y / 4;

				if ( distanceSq > guessSizeSq ) {

					return;

				}

				intersects.push( {

					distance: Math.sqrt( distanceSq ),
					point: this.position,
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		}

	} );

	// File:src/objects/LensFlare.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlare = function ( texture, size, distance, blending, color ) {

		THREE.Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new THREE.Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	};

	THREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

		constructor: THREE.LensFlare,

		copy: function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source );

			this.positionScreen.copy( source.positionScreen );
			this.customUpdateCallback = source.customUpdateCallback;

			for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

				this.lensFlares.push( source.lensFlares[ i ] );

			}

			return this;

		},

		add: function ( texture, size, distance, blending, color, opacity ) {

			if ( size === undefined ) size = - 1;
			if ( distance === undefined ) distance = 0;
			if ( opacity === undefined ) opacity = 1;
			if ( color === undefined ) color = new THREE.Color( 0xffffff );
			if ( blending === undefined ) blending = THREE.NormalBlending;

			distance = Math.min( distance, Math.max( 0, distance ) );

			this.lensFlares.push( {
				texture: texture,	// THREE.Texture
				size: size, 		// size in pixels (-1 = use texture.width)
				distance: distance, 	// distance (0-1) from light source (0=at light source)
				x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
				scale: 1, 		// scale
				rotation: 0, 		// rotation
				opacity: opacity,	// opacity
				color: color,		// color
				blending: blending	// blending
			} );

		},

		/*
		 * Update lens flares update positions on all flares based on the screen position
		 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
		 */

		updateLensFlares: function () {

			var f, fl = this.lensFlares.length;
			var flare;
			var vecX = - this.positionScreen.x * 2;
			var vecY = - this.positionScreen.y * 2;

			for ( f = 0; f < fl; f ++ ) {

				flare = this.lensFlares[ f ];

				flare.x = this.positionScreen.x + vecX * flare.distance;
				flare.y = this.positionScreen.y + vecY * flare.distance;

				flare.wantedRotation = flare.x * Math.PI * 0.25;
				flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

			}

		}

	} );

	// File:src/scenes/Scene.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Scene = function () {

		THREE.Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	};

	THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Scene.prototype.constructor = THREE.Scene;

	THREE.Scene.prototype.copy = function ( source, recursive ) {

		THREE.Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	// File:src/scenes/Fog.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Fog = function ( color, near, far ) {

		this.name = '';

		this.color = new THREE.Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	};

	THREE.Fog.prototype.clone = function () {

		return new THREE.Fog( this.color.getHex(), this.near, this.far );

	};

	// File:src/scenes/FogExp2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.FogExp2 = function ( color, density ) {

		this.name = '';

		this.color = new THREE.Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	};

	THREE.FogExp2.prototype.clone = function () {

		return new THREE.FogExp2( this.color.getHex(), this.density );

	};

	// File:src/renderers/shaders/ShaderChunk.js

	THREE.ShaderChunk = {};

	// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_fragment' ] = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_pars_fragment' ] = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl

	THREE.ShaderChunk[ 'alphatest_fragment' ] = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl

	THREE.ShaderChunk[ 'aomap_fragment' ] = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl

	THREE.ShaderChunk[ 'aomap_pars_fragment' ] = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl

	THREE.ShaderChunk[ 'begin_vertex' ] = "\nvec3 transformed = vec3( position );\n";

	// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl

	THREE.ShaderChunk[ 'beginnormal_vertex' ] = "\nvec3 objectNormal = vec3( normal );\n";

	// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl

	THREE.ShaderChunk[ 'bsdfs' ] = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n		if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n			return distanceFalloff * maxDistanceCutoffFactor;\n#else\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n		}\n		return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl

	THREE.ShaderChunk[ 'clipping_planes_fragment' ] = "#if NUM_CLIPPING_PLANES > 0\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n		vec4 plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl

	THREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = "#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl

	THREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl

	THREE.ShaderChunk[ 'clipping_planes_vertex' ] = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl

	THREE.ShaderChunk[ 'color_fragment' ] = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl

	THREE.ShaderChunk[ 'color_pars_fragment' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl

	THREE.ShaderChunk[ 'color_pars_vertex' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl

	THREE.ShaderChunk[ 'color_vertex' ] = "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/common.glsl

	THREE.ShaderChunk[ 'common' ] = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

	// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl

	THREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl

	THREE.ShaderChunk[ 'defaultnormal_vertex' ] = "#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl

	THREE.ShaderChunk[ 'encodings_pars_fragment' ] = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl

	THREE.ShaderChunk[ 'encodings_fragment' ] = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl

	THREE.ShaderChunk[ 'envmap_fragment' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'envmap_pars_fragment' ] = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'envmap_pars_vertex' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl

	THREE.ShaderChunk[ 'envmap_vertex' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl

	THREE.ShaderChunk[ 'fog_fragment' ] = "#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl

	THREE.ShaderChunk[ 'fog_pars_fragment' ] = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl

	THREE.ShaderChunk[ 'lightmap_fragment' ] = "#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'lightmap_pars_fragment' ] = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl

	THREE.ShaderChunk[ 'lights_lambert_vertex' ] = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl

	THREE.ShaderChunk[ 'lights_pars' ] = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\n			directLight.color = pointLight.color;\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#include <normal_flip>\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#include <normal_flip>\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_fragment' ] = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n";

	// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl

	THREE.ShaderChunk[ 'lights_physical_fragment' ] = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n	material.clearCoat = saturate( clearCoat );	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = "struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n		float clearCoat;\n		float clearCoatRoughness;\n	#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	#ifndef STANDARD\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n	#ifndef STANDARD\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	// File:src/renderers/shaders/ShaderChunk/lights_template.glsl

	THREE.ShaderChunk[ 'lights_template' ] = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n	 	irradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	#ifndef STANDARD\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n	#else\n		vec3 clearCoatRadiance = vec3( 0.0 );\n	#endif\n		\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_fragment' ] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl

	THREE.ShaderChunk[ 'map_fragment' ] = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_pars_fragment' ] = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_fragment' ] = "#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_pars_fragment' ] = "#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_fragment' ] = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl

	THREE.ShaderChunk[ 'morphnormal_vertex' ] = "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_vertex' ] = "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl

	THREE.ShaderChunk[ 'normal_flip' ] = "#ifdef DOUBLE_SIDED\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n	float flipNormal = 1.0;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl

	THREE.ShaderChunk[ 'normal_fragment' ] = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'normalmap_pars_fragment' ] = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/packing.glsl

	THREE.ShaderChunk[ 'packing' ] = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl

	THREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl

	THREE.ShaderChunk[ 'project_vertex' ] = "#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_fragment' ] = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return 1.0;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl

	THREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n";

	// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl

	THREE.ShaderChunk[ 'skinbase_vertex' ] = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl

	THREE.ShaderChunk[ 'skinning_pars_vertex' ] = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl

	THREE.ShaderChunk[ 'skinning_vertex' ] = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl

	THREE.ShaderChunk[ 'skinnormal_vertex' ] = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_fragment' ] = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_pars_fragment' ] = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl

	THREE.ShaderChunk[ 'tonemapping_fragment' ] = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl

	THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv2_pars_fragment' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv2_pars_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl

	THREE.ShaderChunk[ 'uv2_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv_pars_fragment' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv_pars_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl

	THREE.ShaderChunk[ 'uv_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl

	THREE.ShaderChunk[ 'worldpos_vertex' ] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/UniformsUtils.js

	/**
	 * Uniform Utilities
	 */

	THREE.UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src instanceof THREE.Color ||
						 parameter_src instanceof THREE.Vector2 ||
						 parameter_src instanceof THREE.Vector3 ||
						 parameter_src instanceof THREE.Vector4 ||
						 parameter_src instanceof THREE.Matrix3 ||
						 parameter_src instanceof THREE.Matrix4 ||
						 parameter_src instanceof THREE.Texture ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	// File:src/renderers/shaders/UniformsLib.js

	/**
	 * Uniforms library for shared webgl shaders
	 */

	THREE.UniformsLib = {

		common: {

			"diffuse": { value: new THREE.Color( 0xeeeeee ) },
			"opacity": { value: 1.0 },

			"map": { value: null },
			"offsetRepeat": { value: new THREE.Vector4( 0, 0, 1, 1 ) },

			"specularMap": { value: null },
			"alphaMap": { value: null },

			"envMap": { value: null },
			"flipEnvMap": { value: - 1 },
			"reflectivity": { value: 1.0 },
			"refractionRatio": { value: 0.98 }

		},

		aomap: {

			"aoMap": { value: null },
			"aoMapIntensity": { value: 1 }

		},

		lightmap: {

			"lightMap": { value: null },
			"lightMapIntensity": { value: 1 }

		},

		emissivemap: {

			"emissiveMap": { value: null }

		},

		bumpmap: {

			"bumpMap": { value: null },
			"bumpScale": { value: 1 }

		},

		normalmap: {

			"normalMap": { value: null },
			"normalScale": { value: new THREE.Vector2( 1, 1 ) }

		},

		displacementmap: {

			"displacementMap": { value: null },
			"displacementScale": { value: 1 },
			"displacementBias": { value: 0 }

		},

		roughnessmap: {

			"roughnessMap": { value: null }

		},

		metalnessmap: {

			"metalnessMap": { value: null }

		},

		fog: {

			"fogDensity": { value: 0.00025 },
			"fogNear": { value: 1 },
			"fogFar": { value: 2000 },
			"fogColor": { value: new THREE.Color( 0xffffff ) }

		},

		lights: {

			"ambientLightColor": { value: [] },

			"directionalLights": { value: [], properties: {
				"direction": {},
				"color": {},

				"shadow": {},
				"shadowBias": {},
				"shadowRadius": {},
				"shadowMapSize": {}
			} },

			"directionalShadowMap": { value: [] },
			"directionalShadowMatrix": { value: [] },

			"spotLights": { value: [], properties: {
				"color": {},
				"position": {},
				"direction": {},
				"distance": {},
				"coneCos": {},
				"penumbraCos": {},
				"decay": {},

				"shadow": {},
				"shadowBias": {},
				"shadowRadius": {},
				"shadowMapSize": {}
			} },

			"spotShadowMap": { value: [] },
			"spotShadowMatrix": { value: [] },

			"pointLights": { value: [], properties: {
				"color": {},
				"position": {},
				"decay": {},
				"distance": {},

				"shadow": {},
				"shadowBias": {},
				"shadowRadius": {},
				"shadowMapSize": {}
			} },

			"pointShadowMap": { value: [] },
			"pointShadowMatrix": { value: [] },

			"hemisphereLights": { value: [], properties: {
				"direction": {},
				"skyColor": {},
				"groundColor": {}
			} }

		},

		points: {

			"diffuse": { value: new THREE.Color( 0xeeeeee ) },
			"opacity": { value: 1.0 },
			"size": { value: 1.0 },
			"scale": { value: 1.0 },
			"map": { value: null },
			"offsetRepeat": { value: new THREE.Vector4( 0, 0, 1, 1 ) }

		}

	};

	// File:src/renderers/shaders/ShaderLib/cube_frag.glsl

	THREE.ShaderChunk[ 'cube_frag' ] = "uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	#include <logdepthbuf_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/cube_vert.glsl

	THREE.ShaderChunk[ 'cube_vert' ] = "varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/depth_frag.glsl

	THREE.ShaderChunk[ 'depth_frag' ] = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n";

	// File:src/renderers/shaders/ShaderLib/depth_vert.glsl

	THREE.ShaderChunk[ 'depth_vert' ] = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl

	THREE.ShaderChunk[ 'distanceRGBA_frag' ] = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

	// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl

	THREE.ShaderChunk[ 'distanceRGBA_vert' ] = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition;\n}\n";

	// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl

	THREE.ShaderChunk[ 'equirect_frag' ] = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <logdepthbuf_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl

	THREE.ShaderChunk[ 'equirect_vert' ] = "varying vec3 vWorldPosition;\n#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl

	THREE.ShaderChunk[ 'linedashed_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl

	THREE.ShaderChunk[ 'linedashed_vert' ] = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl

	THREE.ShaderChunk[ 'meshbasic_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight;\n	reflectedLight.directDiffuse = vec3( 0.0 );\n	reflectedLight.directSpecular = vec3( 0.0 );\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\n	reflectedLight.indirectSpecular = vec3( 0.0 );\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl

	THREE.ShaderChunk[ 'meshbasic_vert' ] = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl

	THREE.ShaderChunk[ 'meshlambert_frag' ] = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl

	THREE.ShaderChunk[ 'meshlambert_vert' ] = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl

	THREE.ShaderChunk[ 'meshphong_frag' ] = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl

	THREE.ShaderChunk[ 'meshphong_vert' ] = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl

	THREE.ShaderChunk[ 'meshphysical_frag' ] = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n	uniform float clearCoat;\n	uniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl

	THREE.ShaderChunk[ 'meshphysical_vert' ] = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/normal_frag.glsl

	THREE.ShaderChunk[ 'normal_frag' ] = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n	#include <logdepthbuf_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/normal_vert.glsl

	THREE.ShaderChunk[ 'normal_vert' ] = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vNormal = normalize( normalMatrix * normal );\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/points_frag.glsl

	THREE.ShaderChunk[ 'points_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

	// File:src/renderers/shaders/ShaderLib/points_vert.glsl

	THREE.ShaderChunk[ 'points_vert' ] = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl

	THREE.ShaderChunk[ 'shadow_frag' ] = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

	// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl

	THREE.ShaderChunk[ 'shadow_vert' ] = "#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

	// File:src/renderers/shaders/ShaderLib.js

	/**
	 * Webgl Shader Library for three.js
	 *
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */


	THREE.ShaderLib = {

		'basic': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'aomap' ],
				THREE.UniformsLib[ 'fog' ]

			] ),

			vertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]

		},

		'lambert': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'aomap' ],
				THREE.UniformsLib[ 'lightmap' ],
				THREE.UniformsLib[ 'emissivemap' ],
				THREE.UniformsLib[ 'fog' ],
				THREE.UniformsLib[ 'lights' ],

				{
					"emissive" : { value: new THREE.Color( 0x000000 ) }
				}

			] ),

			vertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]

		},

		'phong': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'aomap' ],
				THREE.UniformsLib[ 'lightmap' ],
				THREE.UniformsLib[ 'emissivemap' ],
				THREE.UniformsLib[ 'bumpmap' ],
				THREE.UniformsLib[ 'normalmap' ],
				THREE.UniformsLib[ 'displacementmap' ],
				THREE.UniformsLib[ 'fog' ],
				THREE.UniformsLib[ 'lights' ],

				{
					"emissive" : { value: new THREE.Color( 0x000000 ) },
					"specular" : { value: new THREE.Color( 0x111111 ) },
					"shininess": { value: 30 }
				}

			] ),

			vertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]

		},

		'standard': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'aomap' ],
				THREE.UniformsLib[ 'lightmap' ],
				THREE.UniformsLib[ 'emissivemap' ],
				THREE.UniformsLib[ 'bumpmap' ],
				THREE.UniformsLib[ 'normalmap' ],
				THREE.UniformsLib[ 'displacementmap' ],
				THREE.UniformsLib[ 'roughnessmap' ],
				THREE.UniformsLib[ 'metalnessmap' ],
				THREE.UniformsLib[ 'fog' ],
				THREE.UniformsLib[ 'lights' ],

				{
					"emissive" : { value: new THREE.Color( 0x000000 ) },
					"roughness": { value: 0.5 },
					"metalness": { value: 0 },
					"envMapIntensity" : { value: 1 }, // temporary
				}

			] ),

			vertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]

		},

		'points': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'points' ],
				THREE.UniformsLib[ 'fog' ]

			] ),

			vertexShader: THREE.ShaderChunk[ 'points_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'points_frag' ]

		},

		'dashed': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'fog' ],

				{
					"scale"    : { value: 1 },
					"dashSize" : { value: 1 },
					"totalSize": { value: 2 }
				}

			] ),

			vertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]

		},

		'depth': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ 'common' ],
				THREE.UniformsLib[ 'displacementmap' ]

			] ),

			vertexShader: THREE.ShaderChunk[ 'depth_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'depth_frag' ]

		},

		'normal': {

			uniforms: {

				"opacity" : { value: 1.0 }

			},

			vertexShader: THREE.ShaderChunk[ 'normal_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'normal_frag' ]

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'cube': {

			uniforms: {
				"tCube": { value: null },
				"tFlip": { value: - 1 }
			},

			vertexShader: THREE.ShaderChunk[ 'cube_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'cube_frag' ]

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'equirect': {

			uniforms: {
				"tEquirect": { value: null },
				"tFlip": { value: - 1 }
			},

			vertexShader: THREE.ShaderChunk[ 'equirect_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]

		},

		'distanceRGBA': {

			uniforms: {

				"lightPos": { value: new THREE.Vector3() }

			},

			vertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]

		}

	};

	THREE.ShaderLib[ 'physical' ] = {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.ShaderLib[ 'standard' ].uniforms,

			{
				"clearCoat": { value: 0 },
				"clearCoatRoughness": { value: 0 }
			}

		] ),

		vertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],
		fragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]

	};

	// File:src/renderers/WebGLRenderer.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	THREE.WebGLRenderer = function ( parameters ) {

		console.log( 'THREE.WebGLRenderer', THREE.REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );

		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = THREE.LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_currentScissor = new THREE.Vector4(),
		_currentScissorTest = null,

		_currentViewport = new THREE.Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_clearColor = new THREE.Color( 0x000000 ),
		_clearAlpha = 0,

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new THREE.Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new THREE.Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new THREE.Frustum(),

		// clipping

		_clipping = new THREE.WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		_sphere = new THREE.Sphere(),

		// camera matrices cache

		_projScreenMatrix = new THREE.Matrix4(),

		_vector3 = new THREE.Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: []

		},

		// info

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: {

				geometries: 0,
				textures: 0

			},
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new THREE.WebGLExtensions( _gl );

		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			THREE.BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );

		var state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new THREE.WebGLProperties();
		var textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
		var objects = new THREE.WebGLObjects( _gl, properties, this.info );
		var programCache = new THREE.WebGLPrograms( this, capabilities );
		var lightCache = new THREE.WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		var backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
		var backgroundCamera2 = new THREE.PerspectiveCamera();
		var backgroundPlaneMesh = new THREE.Mesh(
			new THREE.PlaneBufferGeometry( 2, 2 ),
			new THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false } )
		);
		var backgroundBoxShader = THREE.ShaderLib[ 'cube' ];
		var backgroundBoxMesh = new THREE.Mesh(
			new THREE.BoxBufferGeometry( 5, 5, 5 ),
			new THREE.ShaderMaterial( {
				uniforms: backgroundBoxShader.uniforms,
				vertexShader: backgroundBoxShader.vertexShader,
				fragmentShader: backgroundBoxShader.fragmentShader,
				depthTest: false,
				depthWrite: false,
				side: THREE.BackSide
			} )
		);
		objects.update( backgroundPlaneMesh );
		objects.update( backgroundBoxMesh );

		//

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			state.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.properties = properties;
		this.state = state;

		// shadow map

		var shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new THREE.SpritePlugin( this, sprites );
		var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = function () {

			return capabilities.getMaxAnisotropy();

		};

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _viewport.z, _viewport.w, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			state.viewport( _viewport.set( x, y, width, height ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			state.scissor( _scissor.set( x, y, width, height ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			transparentObjects = [];
			transparentObjectsLastIndex = -1;
			opaqueObjects = [];
			opaqueObjectsLastIndex = -1;

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( absNumericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				program.getUniforms().setValue(
						_gl, 'morphTargetInfluences', morphInfluences );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataStart = 0;
			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start;
			var rangeCount = geometry.drawRange.count;

			var groupStart = group !== null ? group.start : 0;
			var groupCount = group !== null ? group.count : Infinity;

			var drawStart = Math.max( dataStart, rangeStart, groupStart );
			var drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			//

			if ( object instanceof THREE.Mesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case THREE.TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case THREE.TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case THREE.TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object instanceof THREE.Line ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object instanceof THREE.LineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object instanceof THREE.Points ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry instanceof THREE.InstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry instanceof THREE.InstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var type = _gl.FLOAT;
						var array = geometryAttribute.array;
						var normalized = geometryAttribute.normalized;

						if ( array instanceof Float32Array ) {

							type = _gl.FLOAT;

						} else if ( array instanceof Float64Array ) {

							console.warn("Unsupported data buffer format: Float64Array");

						} else if ( array instanceof Uint16Array ) {

							type = _gl.UNSIGNED_SHORT;

						} else if ( array instanceof Int16Array ) {

							type = _gl.SHORT;

						} else if ( array instanceof Uint32Array ) {

							type = _gl.UNSIGNED_INT;

						} else if ( array instanceof Int32Array ) {

							type = _gl.INT;

						} else if ( array instanceof Int8Array ) {

							type = _gl.BYTE;

						} else if ( array instanceof Uint8Array ) {

							type = _gl.UNSIGNED_BYTE;

						}

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data instanceof THREE.InstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function absNumericalSort( a, b ) {

			return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

		}

		function painterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera instanceof THREE.Camera === false ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			var fog = scene.fog;

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			setupShadows( lights );

			shadowMap.render( scene, camera );

			setupLights( lights, camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			var background = scene.background;

			if ( background === null ) {

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			} else if ( background instanceof THREE.Color ) {

				glClearColor( background.r, background.g, background.b, 1 );

			}

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			if ( background instanceof THREE.CubeTexture ) {

				backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

				backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
				backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

				backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
				backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

				_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

			} else if ( background instanceof THREE.Texture ) {

				backgroundPlaneMesh.material.map = background;

				_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, camera, fog, overrideMaterial );
				renderObjects( transparentObjects, camera, fog, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( THREE.NoBlending );
				renderObjects( opaqueObjects, camera, fog );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, camera, fog );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		// TODO Duplicated code (Frustum)

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) ) {

				if ( object instanceof THREE.Light ) {

					lights.push( object );

				} else if ( object instanceof THREE.Sprite ) {

					if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object instanceof THREE.LensFlare ) {

					lensFlares.push( object );

				} else if ( object instanceof THREE.ImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {

					if ( object instanceof THREE.SkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material instanceof THREE.MultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, camera, fog, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				if ( object instanceof THREE.ImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, fog, geometry, material, object, group );

				}

			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters(
					material, _lights, fog, _clipping.numPlanes, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = THREE.ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.__webglShader.uniforms;

			if ( ! ( material instanceof THREE.ShaderMaterial ) &&
					! ( material instanceof THREE.RawShaderMaterial ) ||
					material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			if ( material.lights ) {

				// store the light setup it was created for

				materialProperties.lightsHash = _lights.hash;

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.spotLights.value = _lights.spot;
				uniforms.pointLights.value = _lights.point;
				uniforms.hemisphereLights.value = _lights.hemi;

				uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
				uniforms.spotShadowMap.value = _lights.spotShadowMap;
				uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
				uniforms.pointShadowMap.value = _lights.pointShadowMap;
				uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
						THREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;
			materialProperties.dynamicUniforms =
					THREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );

		}

		function setMaterial( material ) {

			if ( material.side !== THREE.DoubleSide )
				state.enable( _gl.CULL_FACE );
			else
				state.disable( _gl.CULL_FACE );

			state.setFlipSided( material.side === THREE.BackSide );

			if ( material.transparent === true ) {

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

			} else {

				state.setBlending( THREE.NoBlending );

			}

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
							material.clippingPlanes, material.clipShadows,
							camera, materialProperties, useCache );

				}

				if ( materialProperties.numClippingPlanes !== undefined &&
					materialProperties.numClippingPlanes !== _clipping.numPlanes ) {

					material.needsUpdate = true;

				}

			}

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			}

			if ( materialProperties.lightsHash !== undefined &&
				materialProperties.lightsHash !== _lights.hash ) {

				material.needsUpdate = true;

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.set( _gl, camera, 'projectionMatrix' );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material instanceof THREE.ShaderMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material instanceof THREE.ShaderMaterial ||
					 material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

				p_uniforms.set( _gl, _this, 'toneMappingExposure' );
				p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

						p_uniforms.set( _gl, skeleton, 'boneTexture' );
						p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
						p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material instanceof THREE.MeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material instanceof THREE.LineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material instanceof THREE.LineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material instanceof THREE.PointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material instanceof THREE.MeshLambertMaterial ) {

					refreshUniformsLambert( m_uniforms, material );

				} else if ( material instanceof THREE.MeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material instanceof THREE.MeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else if ( material instanceof THREE.MeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material instanceof THREE.MeshDepthMaterial ) {

					if ( material.displacementMap ) {

						m_uniforms.displacementMap.value = material.displacementMap;
						m_uniforms.displacementScale.value = material.displacementScale;
						m_uniforms.displacementBias.value = material.displacementBias;

					}

				} else if ( material instanceof THREE.MeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				THREE.WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );

			}


			// common matrices

			p_uniforms.set( _gl, object, 'modelViewMatrix' );
			p_uniforms.set( _gl, object, 'normalMatrix' );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );


			// dynamic uniforms

			var dynUniforms = materialProperties.dynamicUniforms;

			if ( dynUniforms !== null ) {

				THREE.WebGLUniforms.evalDynamic(
						dynUniforms, m_uniforms, object, camera );

				THREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );

			}

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon ( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine ( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash ( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints ( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _canvas.clientHeight * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog ( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog instanceof THREE.Fog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog instanceof THREE.FogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert ( uniforms, material ) {

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong ( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard ( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical ( uniforms, material ) {

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

			refreshUniformsStandard( uniforms, material );

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate ( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Lighting

		function setupShadows ( lights ) {

			var lightShadowsLength = 0;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				if ( light.castShadow ) {

					_lights.shadows[ lightShadowsLength ++ ] = light;

				}

			}

			_lights.shadows.length = lightShadowsLength;

		}

		function setupLights ( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,
			shadowMap,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light instanceof THREE.AmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light instanceof THREE.DirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.directionalShadowMap[ directionalLength ] = shadowMap;
					_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light instanceof THREE.SpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.spotShadowMap[ spotLength ] = shadowMap;
					_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light instanceof THREE.PointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.pointShadowMap[ pointLength ] = shadowMap;

					if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

						_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();

					}

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position
					_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
					_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light instanceof THREE.HemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.spot.length = spotLength;
			_lights.point.length = pointLength;
			_lights.hemi.length = hemiLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			state.setCullFace( cullFace );
			state.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );

		};

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function() {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture instanceof THREE.WebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function() {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function() {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture instanceof THREE.WebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( texture instanceof THREE.CubeTexture ||
					 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		this.getCurrentRenderTarget = function() {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var framebuffer;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

				_currentViewport.copy( renderTarget.viewport );

			} else {

				framebuffer = null;

				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			state.viewport( _currentViewport );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;

					if ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( texture.type !== THREE.UnsignedByteType &&
					     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&
					     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&
					     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		// Map three.js constants to WebGL constants

		function paramThreeToGL ( p ) {

			var extension;

			if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
			if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === THREE.NearestFilter ) return _gl.NEAREST;
			if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === THREE.LinearFilter ) return _gl.LINEAR;
			if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === THREE.ByteType ) return _gl.BYTE;
			if ( p === THREE.ShortType ) return _gl.SHORT;
			if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === THREE.IntType ) return _gl.INT;
			if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === THREE.FloatType ) return _gl.FLOAT;

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) {

				if ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;

			}

			if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
			if ( p === THREE.RGBFormat ) return _gl.RGB;
			if ( p === THREE.RGBAFormat ) return _gl.RGBA;
			if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
			if ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;

			if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
			if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === THREE.ZeroFactor ) return _gl.ZERO;
			if ( p === THREE.OneFactor ) return _gl.ONE;
			if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
			if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === THREE.MinEquation ) return extension.MIN_EXT;
				if ( p === THREE.MaxEquation ) return extension.MAX_EXT;

			}

			return 0;

		}

	};

	// File:src/renderers/WebGLRenderTarget.js

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	THREE.WebGLRenderTarget = function ( width, height, options ) {

		this.uuid = THREE.Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new THREE.Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new THREE.Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;

		this.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = null;

	};

	Object.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	// File:src/renderers/WebGLRenderTargetCube.js

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	THREE.WebGLRenderTargetCube = function ( width, height, options ) {

		THREE.WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	};

	THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
	THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;

	// File:src/renderers/webgl/WebGLBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			_gl.drawArrays( mode, start, count );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			var count = 0;

			if ( position instanceof THREE.InterleavedBufferAttribute ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				count = position.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			}

			_infoRender.calls ++;
			_infoRender.vertices += count * geometry.maxInstancedCount;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLClipping.js

	THREE.WebGLClipping = function() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new THREE.Plane(),
			viewNormalMatrix = new THREE.Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;

		this.init = function( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function() {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function() {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function( planes, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled ||
					planes === null || planes.length === 0 ||
					renderingShadows && ! clipShadows ) {
				// there's no local clipping

				if ( renderingShadows ) {
					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();
				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset;
										i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).
								applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			return dstArray;

		}

	};


	// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = _gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = _gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			_gl.drawElements( mode, count, type, start * size );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

			_infoRender.calls ++;
			_infoRender.vertices += count * geometry.maxInstancedCount;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;
		}

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLExtensions.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLExtensions = function ( gl ) {

		var extensions = {};

		this.get = function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		};

	};

	// File:src/renderers/webgl/WebGLCapabilities.js

	THREE.WebGLCapabilities = function ( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		this.getMaxAnisotropy = getMaxAnisotropy;
		this.getMaxPrecision = getMaxPrecision;

		this.precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;

		this.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		this.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		this.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		this.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		this.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		this.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		this.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		this.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		this.vertexTextures = this.maxVertexTextures > 0;
		this.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;

		var _maxPrecision = getMaxPrecision( this.precision );

		if ( _maxPrecision !== this.precision ) {

			console.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );
			this.precision = _maxPrecision;

		}

		if ( this.logarithmicDepthBuffer ) {

			this.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );

		}

	};

	// File:src/renderers/webgl/WebGLGeometries.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLGeometries = function ( gl, properties, info ) {

		var geometries = {};

		function get( object ) {

			var geometry = object.geometry;

			if ( geometries[ geometry.id ] !== undefined ) {

				return geometries[ geometry.id ];

			}

			geometry.addEventListener( 'dispose', onGeometryDispose );

			var buffergeometry;

			if ( geometry instanceof THREE.BufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry instanceof THREE.Geometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries[ geometry.id ] = buffergeometry;

			info.memory.geometries ++;

			return buffergeometry;

		}

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO

			var property = properties.get( geometry );

			if ( property.wireframe ) {

				deleteAttribute( property.wireframe );

			}

			properties.delete( geometry );

			var bufferproperty = properties.get( buffergeometry );

			if ( bufferproperty.wireframe ) {

				deleteAttribute( bufferproperty.wireframe );

			}

			properties.delete( buffergeometry );

			//

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		this.get = get;

	};

	// File:src/renderers/webgl/WebGLLights.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLLights = function () {

		var lights = {};

		this.get = function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new THREE.Vector3(),
						color: new THREE.Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new THREE.Vector3(),
						direction: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new THREE.Vector3(),
						skyColor: new THREE.Color(),
						groundColor: new THREE.Color()
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		};

	};

	// File:src/renderers/webgl/WebGLObjects.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLObjects = function ( gl, properties, info ) {

		var geometries = new THREE.WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry instanceof THREE.Geometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false || data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					if ( checkEdge( edges, a, b ) ) indices.push( a, b );
					if ( checkEdge( edges, b, c ) ) indices.push( b, c );
					if ( checkEdge( edges, c, a ) ) indices.push( c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		function checkEdge( edges, a, b ) {

			if ( a > b ) {

				var tmp = a;
				a = b;
				b = tmp;

			}

			var list = edges[ a ];

			if ( list === undefined ) {

				edges[ a ] = [ b ];
				return true;

			} else if ( list.indexOf( b ) === -1 ) {

				list.push( b );
				return true;

			}

			return false;

		}

		this.getAttributeBuffer = getAttributeBuffer;
		this.getWireframeAttribute = getWireframeAttribute;

		this.update = update;

	};

	// File:src/renderers/webgl/WebGLProgram.js

	THREE.WebGLProgram = ( function () {

		var programIdCount = 0;

		function getEncodingComponents( encoding ) {

			switch ( encoding ) {

				case THREE.LinearEncoding:
					return [ 'Linear','( value )' ];
				case THREE.sRGBEncoding:
					return [ 'sRGB','( value )' ];
				case THREE.RGBEEncoding:
					return [ 'RGBE','( value )' ];
				case THREE.RGBM7Encoding:
					return [ 'RGBM','( value, 7.0 )' ];
				case THREE.RGBM16Encoding:
					return [ 'RGBM','( value, 16.0 )' ];
				case THREE.RGBDEncoding:
					return [ 'RGBD','( value, 256.0 )' ];
				case THREE.GammaEncoding:
					return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
				default:
					throw new Error( 'unsupported encoding: ' + encoding );

			}

		}

		function getTexelDecodingFunction( functionName, encoding ) {

			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

		}

		function getTexelEncodingFunction( functionName, encoding ) {

			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

		}

		function getToneMappingFunction( functionName, toneMapping ) {

			var toneMappingName;

			switch ( toneMapping ) {

				case THREE.LinearToneMapping:
					toneMappingName = "Linear";
					break;

				case THREE.ReinhardToneMapping:
					toneMappingName = "Reinhard";
					break;

				case THREE.Uncharted2ToneMapping:
					toneMappingName = "Uncharted2";
					break;

				case THREE.CineonToneMapping:
					toneMappingName = "OptimizedCineon";
					break;

				default:
					throw new Error( 'unsupported toneMapping: ' + toneMapping );

			}

			return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

		}

		function generateExtensions( extensions, parameters, rendererExtensions ) {

			extensions = extensions || {};

			var chunks = [
				( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
			];

			return chunks.filter( filterEmptyLine ).join( '\n' );

		}

		function generateDefines( defines ) {

			var chunks = [];

			for ( var name in defines ) {

				var value = defines[ name ];

				if ( value === false ) continue;

				chunks.push( '#define ' + name + ' ' + value );

			}

			return chunks.join( '\n' );

		}

		function fetchAttributeLocations( gl, program, identifiers ) {

			var attributes = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveAttrib( program, i );
				var name = info.name;

				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

				attributes[ name ] = gl.getAttribLocation( program, name );

			}

			return attributes;

		}

		function filterEmptyLine( string ) {

			return string !== '';

		}

		function replaceLightNums( string, parameters ) {

			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

		}

		function parseIncludes( string ) {

			var pattern = /#include +<([\w\d.]+)>/g;

			function replace( match, include ) {

				var replace = THREE.ShaderChunk[ include ];

				if ( replace === undefined ) {

					throw new Error( 'Can not resolve #include <' + include + '>' );

				}

				return parseIncludes( replace );

			}

			return string.replace( pattern, replace );

		}

		function unrollLoops( string ) {

			var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

			function replace( match, start, end, snippet ) {

				var unroll = '';

				for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

					unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

				}

				return unroll;

			}

			return string.replace( pattern, replace );

		}

		return function WebGLProgram( renderer, code, material, parameters ) {

			var gl = renderer.context;

			var extensions = material.extensions;
			var defines = material.defines;

			var vertexShader = material.__webglShader.vertexShader;
			var fragmentShader = material.__webglShader.fragmentShader;

			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

			if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

			} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

			}

			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

			if ( parameters.envMap ) {

				switch ( material.envMap.mapping ) {

					case THREE.CubeReflectionMapping:
					case THREE.CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;

					case THREE.CubeUVReflectionMapping:
					case THREE.CubeUVRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
						break;

					case THREE.EquirectangularReflectionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;

					case THREE.SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;

				}

				switch ( material.envMap.mapping ) {

					case THREE.CubeRefractionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;

				}

				switch ( material.combine ) {

					case THREE.MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;

					case THREE.MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;

					case THREE.AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;

				}

			}

			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

			// console.log( 'building new program ' );

			//

			var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

			var customDefines = generateDefines( defines );

			//

			var program = gl.createProgram();

			var prefixVertex, prefixFragment;

			if ( material instanceof THREE.RawShaderMaterial ) {

				prefixVertex = [

					customDefines

				].filter( filterEmptyLine ).join( '\n' );

				prefixFragment = [

					customDefines

				].filter( filterEmptyLine ).join( '\n' );

			} else {

				prefixVertex = [

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					'#define MAX_BONES ' + parameters.maxBones,

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',

					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',

					'#ifdef USE_COLOR',

					'	attribute vec3 color;',

					'#endif',

					'#ifdef USE_MORPHTARGETS',

					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',

					'	#ifdef USE_MORPHNORMALS',

					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',

					'	#else',

					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',

					'	#endif',

					'#endif',

					'#ifdef USE_SKINNING',

					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',

					'#endif',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

				prefixFragment = [

					customExtensions,

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

					parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

					parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',

					( parameters.toneMapping !== THREE.NoToneMapping ) ? "#define TONE_MAPPING" : '',
					( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
					( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

					( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
					parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
					parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
					parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
					parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

					parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

			}

			vertexShader = parseIncludes( vertexShader, parameters );
			vertexShader = replaceLightNums( vertexShader, parameters );

			fragmentShader = parseIncludes( fragmentShader, parameters );
			fragmentShader = replaceLightNums( fragmentShader, parameters );

			if ( material instanceof THREE.ShaderMaterial === false ) {

				vertexShader = unrollLoops( vertexShader );
				fragmentShader = unrollLoops( fragmentShader );

			}

			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;

			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );

			var glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );

			// Force a particular attribute to index 0.

			if ( material.index0AttributeName !== undefined ) {

				gl.bindAttribLocation( program, 0, material.index0AttributeName );

			} else if ( parameters.morphTargets === true ) {

				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );

			}

			gl.linkProgram( program );

			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

			var runnable = true;
			var haveDiagnostics = true;

			// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
			// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

				runnable = false;

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

			// clean up

			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );

			// set up caching for uniform locations

			var cachedUniforms;

			this.getUniforms = function() {

				if ( cachedUniforms === undefined ) {

					cachedUniforms =
							new THREE.WebGLUniforms( gl, program, renderer );

				}

				return cachedUniforms;

			};

			// set up caching for attribute locations

			var cachedAttributes;

			this.getAttributes = function() {

				if ( cachedAttributes === undefined ) {

					cachedAttributes = fetchAttributeLocations( gl, program );

				}

				return cachedAttributes;

			};

			// free resource

			this.destroy = function() {

				gl.deleteProgram( program );
				this.program = undefined;

			};

			// DEPRECATED

			Object.defineProperties( this, {

				uniforms: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();

					}
				},

				attributes: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();

					}
				}

			} );


			//

			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;

			return this;

		};

	} )();

	// File:src/renderers/webgl/WebGLPrograms.js

	THREE.WebGLPrograms = function ( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "depthPacking"
		];


		function allocateBones ( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = THREE.LinearEncoding;

			} else if ( map instanceof THREE.Texture ) {

				encoding = map.encoding;

			} else if ( map instanceof THREE.WebGLRenderTarget ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {

				encoding = THREE.GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, fog, nClipPlanes, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getCurrentRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: fog,
				useFog: material.fog,
				fogExp: fog instanceof THREE.FogExp2,

				flatShading: material.shading === THREE.FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === THREE.DoubleSide,
				flipSided: material.side === THREE.BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			return array.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new THREE.WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	};

	// File:src/renderers/webgl/WebGLProperties.js

	/**
	* @author fordacious / fordacious.github.io
	*/

	THREE.WebGLProperties = function () {

		var properties = {};

		this.get = function ( object ) {

			var uuid = object.uuid;
			var map = properties[ uuid ];

			if ( map === undefined ) {

				map = {};
				properties[ uuid ] = map;

			}

			return map;

		};

		this.delete = function ( object ) {

			delete properties[ object.uuid ];

		};

		this.clear = function () {

			properties = {};

		};

	};

	// File:src/renderers/webgl/WebGLShader.js

	THREE.WebGLShader = ( function () {

		function addLineNumbers( string ) {

			var lines = string.split( '\n' );

			for ( var i = 0; i < lines.length; i ++ ) {

				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

			}

			return lines.join( '\n' );

		}

		return function WebGLShader( gl, type, string ) {

			var shader = gl.createShader( type );

			gl.shaderSource( shader, string );
			gl.compileShader( shader );

			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

			}

			if ( gl.getShaderInfoLog( shader ) !== '' ) {

				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

			}

			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			return shader;

		};

	} )();

	// File:src/renderers/webgl/WebGLShadowMap.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new THREE.Frustum(),
		_projScreenMatrix = new THREE.Matrix4(),

		_lightShadows = _lights.shadows,

		_shadowMapSize = new THREE.Vector2(),

		_lookTarget = new THREE.Vector3(),
		_lightPositionWorld = new THREE.Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

		var cubeDirections = [
			new THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),
			new THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),	new THREE.Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()
		];

		// init

		var depthMaterialTemplate = new THREE.MeshDepthMaterial();
		depthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;
		depthMaterialTemplate.clipping = true;

		var distanceShader = THREE.ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = depthMaterialTemplate.clone();
			depthMaterial.morphTargets = useMorphing;
			depthMaterial.skinning = useSkinning;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new THREE.ShaderMaterial( {
				defines: {
					'USE_SHADOWMAP': ''
				},
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning,
				clipping: true
			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = THREE.PCFShadowMap;

		this.renderReverseSided = true;
		this.renderSingleSided = true;

		this.render = function ( scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( _lightShadows.length === 0 ) return;

			// Set GL state for depth map.
			_state.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount, isPointLight;

			for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

				var light = _lightShadows[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );

				if ( light instanceof THREE.PointLight ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };

					shadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadowCamera.updateProjectionMatrix();

				}

				if ( shadow instanceof THREE.SpotLightShadow ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( material instanceof THREE.MultiMaterial ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

			}

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = geometry.morphTargets !== undefined &&
						geometry.morphTargets.length > 0 && material.morphTargets;

				var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
				 material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			var side = material.side;

			if ( scope.renderSingleSided && side == THREE.DoubleSide ) {

				side = THREE.FrontSide;

			}

			if ( scope.renderReverseSided ) {

				if ( side === THREE.FrontSide ) side = THREE.BackSide;
				else if ( side === THREE.BackSide ) side = THREE.FrontSide;

			}

			result.side = side;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.uniforms.lightPos !== undefined ) {

				result.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return result;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	};

	// File:src/renderers/webgl/WebGLState.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {

		var _this = this;

		this.buffers = {
			color: new THREE.WebGLColorBuffer( gl, this ),
			depth: new THREE.WebGLDepthBuffer( gl, this ),
			stencil: new THREE.WebGLStencilBuffer( gl, this )
		};

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new THREE.Vector4();
		var currentViewport = new THREE.Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		//

		this.init = function () {

			this.clearColor( 0, 0, 0, 1 );
			this.clearDepth( 1 );
			this.clearStencil( 0 );

			this.enable( gl.DEPTH_TEST );
			this.setDepthFunc( THREE.LessEqualDepth );

			this.setFlipSided( false );
			this.setCullFace( THREE.CullFaceBack );
			this.enable( gl.CULL_FACE );

			this.enable( gl.BLEND );
			this.setBlending( THREE.NormalBlending );

		};

		this.initAttributes = function () {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		};

		this.enableAttribute = function ( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		};

		this.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		};

		this.disableUnusedAttributes = function () {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		};

		this.enable = function ( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		};

		this.disable = function ( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		};

		this.getCompressedTextureFormats = function () {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		};

		this.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== THREE.NoBlending ) {

				this.enable( gl.BLEND );

			} else {

				this.disable( gl.BLEND );
				currentBlending = blending; // no blending, that is
				return;

			}

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( blending === THREE.AdditiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

					}

				} else if ( blending === THREE.SubtractiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

					}

				} else if ( blending === THREE.MultiplyBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

					}

				} else {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					}

				}

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			if ( blending === THREE.CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		};

		// TODO Deprecate

		this.setColorWrite = function ( colorWrite ) {

			this.buffers.color.setMask( colorWrite );

		};

		this.setDepthTest = function ( depthTest ) {

			this.buffers.depth.setTest( depthTest );

		};

		this.setDepthWrite = function ( depthWrite ) {

			this.buffers.depth.setMask( depthWrite );

		};

		this.setDepthFunc = function ( depthFunc ) {

			this.buffers.depth.setFunc( depthFunc );

		};

		this.setStencilTest = function ( stencilTest ) {

			this.buffers.stencil.setTest( stencilTest );

		};

		this.setStencilWrite = function ( stencilWrite ) {

			this.buffers.stencil.setMask( stencilWrite );

		};

		this.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {

			this.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );

		};

		this.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {

			this.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );

		};

		//

		this.setFlipSided = function ( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		};

		this.setCullFace = function ( cullFace ) {

			if ( cullFace !== THREE.CullFaceNone ) {

				this.enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === THREE.CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === THREE.CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				this.disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		};

		this.setLineWidth = function ( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		};

		this.setPolygonOffset = function ( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				this.enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				this.disable( gl.POLYGON_OFFSET_FILL );

			}

		};

		this.getScissorTest = function () {

			return currentScissorTest;

		};

		this.setScissorTest = function ( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				this.enable( gl.SCISSOR_TEST );

			} else {

				this.disable( gl.SCISSOR_TEST );

			}

		};

		// texture

		this.activeTexture = function ( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		};

		this.bindTexture = function ( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				_this.activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		};

		this.compressedTexImage2D = function () {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		this.texImage2D = function () {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		// TODO Deprecate

		this.clearColor = function ( r, g, b, a ) {

			this.buffers.color.setClear( r, g, b, a );

		};

		this.clearDepth = function ( depth ) {

			this.buffers.depth.setClear( depth );

		};

		this.clearStencil = function ( stencil ) {

			this.buffers.stencil.setClear( stencil );

		};

		//

		this.scissor = function ( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		};

		this.viewport = function ( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		};

		//

		this.reset = function () {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			this.buffers.color.reset();
			this.buffers.depth.reset();
			this.buffers.stencil.reset();

		};

	};

	THREE.WebGLColorBuffer = function ( gl, state ) {

		var locked = false;

		var color = new THREE.Vector4();
		var currentColorMask = null;
		var currentColorClear = new THREE.Vector4();

		this.setMask = function ( colorMask ) {

			if ( currentColorMask !== colorMask && ! locked ) {

				gl.colorMask( colorMask, colorMask, colorMask, colorMask );
				currentColorMask = colorMask;

			}

		};

		this.setLocked = function ( lock ) {

			locked = lock;

		};

		this.setClear = function ( r, g, b, a ) {

			color.set( r, g, b, a );

			if ( currentColorClear.equals( color ) === false ) {

				gl.clearColor( r, g, b, a );
				currentColorClear.copy( color );

			}

		};

		this.reset = function () {

			locked = false;

			currentColorMask = null;
			currentColorClear = new THREE.Vector4();

		};

	};

	THREE.WebGLDepthBuffer = function( gl, state ) {

		var locked = false;

		var currentDepthMask = null;
		var currentDepthFunc = null;
		var currentDepthClear = null;

		this.setTest = function ( depthTest ) {

			if ( depthTest ) {

				state.enable( gl.DEPTH_TEST );

			} else {

				state.disable( gl.DEPTH_TEST );

			}

		};

		this.setMask = function( depthMask ){

			if ( currentDepthMask !== depthMask && ! locked ) {

				gl.depthMask( depthMask );
				currentDepthMask = depthMask;

			}

		};

		this.setFunc = function ( depthFunc ) {

			if ( currentDepthFunc !== depthFunc ) {

				if ( depthFunc ) {

					switch ( depthFunc ) {

						case THREE.NeverDepth:

							gl.depthFunc( gl.NEVER );
							break;

						case THREE.AlwaysDepth:

							gl.depthFunc( gl.ALWAYS );
							break;

						case THREE.LessDepth:

							gl.depthFunc( gl.LESS );
							break;

						case THREE.LessEqualDepth:

							gl.depthFunc( gl.LEQUAL );
							break;

						case THREE.EqualDepth:

							gl.depthFunc( gl.EQUAL );
							break;

						case THREE.GreaterEqualDepth:

							gl.depthFunc( gl.GEQUAL );
							break;

						case THREE.GreaterDepth:

							gl.depthFunc( gl.GREATER );
							break;

						case THREE.NotEqualDepth:

							gl.depthFunc( gl.NOTEQUAL );
							break;

						default:

							gl.depthFunc( gl.LEQUAL );

					}

				} else {

					gl.depthFunc( gl.LEQUAL );

				}

				currentDepthFunc = depthFunc;

			}

		};

		this.setLocked = function ( lock ) {

			locked = lock;

		};

		this.setClear = function ( depth ) {

			if ( currentDepthClear !== depth ) {

				gl.clearDepth( depth );
				currentDepthClear = depth;

			}

		};

		this.reset = function () {

			locked = false;

			currentDepthMask = null;
			currentDepthFunc = null;
			currentDepthClear = null;

		};

	};

	THREE.WebGLStencilBuffer = function ( gl, state ) {

		var locked = false;

		var currentStencilMask = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilFuncMask = null;
		var currentStencilFail  = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;
		var currentStencilClear = null;

		this.setTest = function ( stencilTest ) {

			if ( stencilTest ) {

				state.enable( gl.STENCIL_TEST );

			} else {

				state.disable( gl.STENCIL_TEST );

			}

		};

		this.setMask = function ( stencilMask ) {

			if ( currentStencilMask !== stencilMask && ! locked ) {

				gl.stencilMask( stencilMask );
				currentStencilMask = stencilMask;

			}

		};

		this.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {

			if ( currentStencilFunc !== stencilFunc ||
			     currentStencilRef 	!== stencilRef 	||
			     currentStencilFuncMask !== stencilMask ) {

				gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

				currentStencilFunc = stencilFunc;
				currentStencilRef  = stencilRef;
				currentStencilFuncMask = stencilMask;

			}

		};

		this.setOp	 = function ( stencilFail, stencilZFail, stencilZPass ) {

			if ( currentStencilFail	 !== stencilFail 	||
			     currentStencilZFail !== stencilZFail ||
			     currentStencilZPass !== stencilZPass ) {

				gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

				currentStencilFail  = stencilFail;
				currentStencilZFail = stencilZFail;
				currentStencilZPass = stencilZPass;

			}

		};

		this.setLocked = function ( lock ) {

			locked = lock;

		};

		this.setClear = function ( stencil ) {

			if ( currentStencilClear !== stencil ) {

				gl.clearStencil( stencil );
				currentStencilClear = stencil;

			}

		};

		this.reset = function () {

			locked = false;

			currentStencilMask = null;
			currentStencilFunc = null;
			currentStencilRef = null;
			currentStencilFuncMask = null;
			currentStencilFail = null;
			currentStencilZFail = null;
			currentStencilZPass = null;
			currentStencilClear = null;

		};

	};

	// File:src/renderers/webgl/WebGLTextures.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

		var _infoMemory = info.memory;
		var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

		//

		function clampToMaxSize ( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = THREE.Math.nearestPowerOfTwo( image.width );
				canvas.height = THREE.Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;

			return false;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback ( f ) {

			if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube ( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = texture instanceof THREE.CompressedTexture;
					var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isPowerOfTwoImage ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic ( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture instanceof THREE.DepthTexture ) {

				// populate depth texture with dummy data

				var internalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === THREE.FloatType ) {

					if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
					internalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( _isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					internalFormat = _gl.DEPTH_COMPONENT16;

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( texture instanceof THREE.DataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture instanceof THREE.CompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage ( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture ( framebuffer, renderTarget ) {

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {

				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

			}

			// upload an empty depth texture with framebuffer size
			if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;

			if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
					texture.minFilter !== THREE.NearestFilter &&
					texture.minFilter !== THREE.LinearFilter ) {

				var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				_gl.generateMipmap( target );
				state.bindTexture( target, null );

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	};

	// File:src/renderers/webgl/WebGLUniforms.js

	/**
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 * .splitDynamic( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with dynamic entry and removes them from 'seq'
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 *
	 * @author tschw
	 *
	 */

	THREE.WebGLUniforms = ( function() { // scope

		var emptyTexture = new THREE.Texture();
		var emptyCubeTexture = new THREE.CubeTexture();

		// --- Base for inner nodes (including the root) ---

		var UniformContainer = function() {

				this.seq = [];
				this.map = {};

			},

		// --- Utilities ---

		// Array Caches (provide typed arrays for temporary by size)

			arrayCacheF32 = [],
			arrayCacheI32 = [],

			uncacheTemporaryArrays = function() {

				arrayCacheF32.length = 0;
				arrayCacheI32.length = 0;

			},

		// Flattening for arrays of vectors and matrices

			flatten = function( array, nBlocks, blockSize ) {

				var firstElem = array[ 0 ];

				if ( firstElem <= 0 || firstElem > 0 ) return array;
				// unoptimized: ! isNaN( firstElem )
				// see http://jacksondunstan.com/articles/983

				var n = nBlocks * blockSize,
					r = arrayCacheF32[ n ];

				if ( r === undefined ) {

					r = new Float32Array( n );
					arrayCacheF32[ n ] = r;

				}

				if ( nBlocks !== 0 ) {

					firstElem.toArray( r, 0 );

					for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

						offset += blockSize;
						array[ i ].toArray( r, offset );

					}

				}

				return r;

			},

		// Texture unit allocation

			allocTexUnits = function( renderer, n ) {

				var r = arrayCacheI32[ n ];

				if ( r === undefined ) {

					r = new Int32Array( n );
					arrayCacheI32[ n ] = r;

				}

				for ( var i = 0; i !== n; ++ i )
					r[ i ] = renderer.allocTextureUnit();

				return r;

			},

		// --- Setters ---

		// Note: Defining these methods externally, because they come in a bunch
		// and this way their names minify.

			// Single scalar

			setValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },
			setValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },

			// Single float vector (from flat array or THREE.VectorN)

			setValue2fv = function( gl, v ) {

				if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
				else gl.uniform2f( this.addr, v.x, v.y );

			},

			setValue3fv = function( gl, v ) {

				if ( v.x !== undefined )
					gl.uniform3f( this.addr, v.x, v.y, v.z );
				else if ( v.r !== undefined )
					gl.uniform3f( this.addr, v.r, v.g, v.b );
				else
					gl.uniform3fv( this.addr, v );

			},

			setValue4fv = function( gl, v ) {

				if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
				else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

			},

			// Single matrix (from flat array or MatrixN)

			setValue2fm = function( gl, v ) {

				gl.uniformMatrix2fv( this.addr, false, v.elements || v );

			},

			setValue3fm = function( gl, v ) {

				gl.uniformMatrix3fv( this.addr, false, v.elements || v );

			},

			setValue4fm = function( gl, v ) {

				gl.uniformMatrix4fv( this.addr, false, v.elements || v );

			},

			// Single texture (2D / Cube)

			setValueT1 = function( gl, v, renderer ) {

				var unit = renderer.allocTextureUnit();
				gl.uniform1i( this.addr, unit );
				renderer.setTexture2D( v || emptyTexture, unit );

			},

			setValueT6 = function( gl, v, renderer ) {

				var unit = renderer.allocTextureUnit();
				gl.uniform1i( this.addr, unit );
				renderer.setTextureCube( v || emptyCubeTexture, unit );

			},

			// Integer / Boolean vectors or arrays thereof (always flat arrays)

			setValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },
			setValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },
			setValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },

			// Helper to pick the right setter for the singular case

			getSingularSetter = function( type ) {

				switch ( type ) {

					case 0x1406: return setValue1f; // FLOAT
					case 0x8b50: return setValue2fv; // _VEC2
					case 0x8b51: return setValue3fv; // _VEC3
					case 0x8b52: return setValue4fv; // _VEC4

					case 0x8b5a: return setValue2fm; // _MAT2
					case 0x8b5b: return setValue3fm; // _MAT3
					case 0x8b5c: return setValue4fm; // _MAT4

					case 0x8b5e: return setValueT1; // SAMPLER_2D
					case 0x8b60: return setValueT6; // SAMPLER_CUBE

					case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
					case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
					case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
					case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

				}

			},

			// Array of scalars

			setValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },
			setValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },

			// Array of vectors (flat or from THREE classes)

			setValueV2a = function( gl, v ) {

				gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

			},

			setValueV3a = function( gl, v ) {

				gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

			},

			setValueV4a = function( gl, v ) {

				gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

			},

			// Array of matrices (flat or from THREE clases)

			setValueM2a = function( gl, v ) {

				gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

			},

			setValueM3a = function( gl, v ) {

				gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

			},

			setValueM4a = function( gl, v ) {

				gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

			},

			// Array of textures (2D / Cube)

			setValueT1a = function( gl, v, renderer ) {

				var n = v.length,
					units = allocTexUnits( renderer, n );

				gl.uniform1iv( this.addr, units );

				for ( var i = 0; i !== n; ++ i ) {

					renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

				}

			},

			setValueT6a = function( gl, v, renderer ) {

				var n = v.length,
					units = allocTexUnits( renderer, n );

				gl.uniform1iv( this.addr, units );

				for ( var i = 0; i !== n; ++ i ) {

					renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

				}

			},


			// Helper to pick the right setter for a pure (bottom-level) array

			getPureArraySetter = function( type ) {

				switch ( type ) {

					case 0x1406: return setValue1fv; // FLOAT
					case 0x8b50: return setValueV2a; // _VEC2
					case 0x8b51: return setValueV3a; // _VEC3
					case 0x8b52: return setValueV4a; // _VEC4

					case 0x8b5a: return setValueM2a; // _MAT2
					case 0x8b5b: return setValueM3a; // _MAT3
					case 0x8b5c: return setValueM4a; // _MAT4

					case 0x8b5e: return setValueT1a; // SAMPLER_2D
					case 0x8b60: return setValueT6a; // SAMPLER_CUBE

					case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
					case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
					case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
					case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

				}

			},

		// --- Uniform Classes ---

			SingleUniform = function SingleUniform( id, activeInfo, addr ) {

				this.id = id;
				this.addr = addr;
				this.setValue = getSingularSetter( activeInfo.type );

				// this.path = activeInfo.name; // DEBUG

			},

			PureArrayUniform = function( id, activeInfo, addr ) {

				this.id = id;
				this.addr = addr;
				this.size = activeInfo.size;
				this.setValue = getPureArraySetter( activeInfo.type );

				// this.path = activeInfo.name; // DEBUG

			},

			StructuredUniform = function( id ) {

				this.id = id;

				UniformContainer.call( this ); // mix-in

			};

		StructuredUniform.prototype.setValue = function( gl, value ) {

			// Note: Don't need an extra 'renderer' parameter, since samplers
			// are not allowed in structured uniforms.

			var seq = this.seq;

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ];
				u.setValue( gl, value[ u.id ] );

			}

		};

		// --- Top-level ---

		// Parser - builds up the property tree from the path strings

		var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g,
			// extracts
			// 	- the identifier (member name or array index)
			//  - followed by an optional right bracket (found when array index)
			//  - followed by an optional left bracket or dot (type of subscript)
			//
			// Note: These portions can be read in a non-overlapping fashion and
			// allow straightforward parsing of the hierarchy that WebGL encodes
			// in the uniform names.

			addUniform = function( container, uniformObject ) {

				container.seq.push( uniformObject );
				container.map[ uniformObject.id ] = uniformObject;

			},

			parseUniform = function( activeInfo, addr, container ) {

				var path = activeInfo.name,
					pathLength = path.length;

				// reset RegExp object, because of the early exit of a previous run
				RePathPart.lastIndex = 0;

				for (; ;) {

					var match = RePathPart.exec( path ),
						matchEnd = RePathPart.lastIndex,

						id = match[ 1 ],
						idIsIndex = match[ 2 ] === ']',
						subscript = match[ 3 ];

					if ( idIsIndex ) id = id | 0; // convert to integer

					if ( subscript === undefined ||
							subscript === '[' && matchEnd + 2 === pathLength ) {
						// bare name or "pure" bottom-level array "[0]" suffix

						addUniform( container, subscript === undefined ?
								new SingleUniform( id, activeInfo, addr ) :
								new PureArrayUniform( id, activeInfo, addr ) );

						break;

					} else {
						// step into inner node / create it in case it doesn't exist

						var map = container.map,
							next = map[ id ];

						if ( next === undefined ) {

							next = new StructuredUniform( id );
							addUniform( container, next );

						}

						container = next;

					}

				}

			},

		// Root Container

			WebGLUniforms = function WebGLUniforms( gl, program, renderer ) {

				UniformContainer.call( this );

				this.renderer = renderer;

				var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

				for ( var i = 0; i !== n; ++ i ) {

					var info = gl.getActiveUniform( program, i ),
						path = info.name,
						addr = gl.getUniformLocation( program, path );

					parseUniform( info, addr, this );

				}

			};


		WebGLUniforms.prototype.setValue = function( gl, name, value ) {

			var u = this.map[ name ];

			if ( u !== undefined ) u.setValue( gl, value, this.renderer );

		};

		WebGLUniforms.prototype.set = function( gl, object, name ) {

			var u = this.map[ name ];

			if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

		};

		WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

			var v = object[ name ];

			if ( v !== undefined ) this.setValue( gl, name, v );

		};


		// Static interface

		WebGLUniforms.upload = function( gl, seq, values, renderer ) {

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ],
					v = values[ u.id ];

				if ( v.needsUpdate !== false ) {
					// note: always updating when .needsUpdate is undefined

					u.setValue( gl, v.value, renderer );

				}

			}

		};

		WebGLUniforms.seqWithValue = function( seq, values ) {

			var r = [];

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var u = seq[ i ];
				if ( u.id in values ) r.push( u );

			}

			return r;

		};

		WebGLUniforms.splitDynamic = function( seq, values ) {

			var r = null,
				n = seq.length,
				w = 0;

			for ( var i = 0; i !== n; ++ i ) {

				var u = seq[ i ],
					v = values[ u.id ];

				if ( v && v.dynamic === true ) {

					if ( r === null ) r = [];
					r.push( u );

				} else {

					// in-place compact 'seq', removing the matches
					if ( w < i ) seq[ w ] = u;
					++ w;

				}

			}

			if ( w < n ) seq.length = w;

			return r;

		};

		WebGLUniforms.evalDynamic = function( seq, values, object, camera ) {

			for ( var i = 0, n = seq.length; i !== n; ++ i ) {

				var v = values[ seq[ i ].id ],
					f = v.onUpdateCallback;

				if ( f !== undefined ) f.call( v, object, camera );

			}

		};

		return WebGLUniforms;

	} )();

	// File:src/renderers/webgl/plugins/LensFlarePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlarePlugin = function ( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var shader, program, attributes, uniforms;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"uniform sampler2D occlusionMap;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if ( renderType == 2 ) {",

							"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

							"vVisibility =        visibility.r / 9.0;",
							"vVisibility *= 1.0 - visibility.g / 9.0;",
							"vVisibility *=       visibility.b / 9.0;",
							"vVisibility *= 1.0 - visibility.a / 9.0;",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						// pink square

						"if ( renderType == 0 ) {",

							"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

						// restore

						"} else if ( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * vVisibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new THREE.Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new THREE.Vector2( size * invAspect, size );

			var screenPosition = new THREE.Vector3( 1, 1, 0 ),
				screenPositionPixels = new THREE.Vector2( 1, 1 );

			var validArea = new THREE.Box2();

			validArea.min.set( 0, 0 );
			validArea.max.set( viewport.z - 16, viewport.w - 16 );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.setDepthWrite( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				// horizontal and vertical coordinate of the lower left corner of the pixels to copy

				screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
				screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

				// screen cull

				if ( validArea.containsPoint( screenPositionPixels ) === true ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture2D( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.setDepthWrite( true );

			renderer.resetGLState();

		};

		function createProgram ( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	};

	// File:src/renderers/webgl/plugins/SpritePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpritePlugin = function ( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new THREE.Vector3();
		var spriteRotation = new THREE.Quaternion();
		var spriteScale = new THREE.Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new THREE.Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( fog instanceof THREE.Fog ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( fog instanceof THREE.FogExp2 ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map ) {

					renderer.setTexture2D( material.map, 0 );

				} else {

					renderer.setTexture2D( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram () {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable ( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	};

	// File:src/Three.Legacy.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	Object.assign( THREE, {
		Face4: function ( a, b, c, d, normal, color, materialIndex ) {
			console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
			return new THREE.Face3( a, b, c, normal, color, materialIndex );
		},
		LineStrip: 0,
		LinePieces: 1,
		MeshFaceMaterial: THREE.MultiMaterial,
		PointCloud: function ( geometry, material ) {
			console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
			return new THREE.Points( geometry, material );
		},
		Particle: THREE.Sprite,
		ParticleSystem: function ( geometry, material ) {
			console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
			return new THREE.Points( geometry, material );
		},
		PointCloudMaterial: function ( parameters ) {
			console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
			return new THREE.PointsMaterial( parameters );
		},
		ParticleBasicMaterial: function ( parameters ) {
			console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
			return new THREE.PointsMaterial( parameters );
		},
		ParticleSystemMaterial: function ( parameters ) {
			console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
			return new THREE.PointsMaterial( parameters );
		},
		Vertex: function ( x, y, z ) {
			console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
			return new THREE.Vector3( x, y, z );
		}
	} );

	//

	Object.assign( THREE.Box2.prototype, {
		empty: function () {
			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		}
	} );

	Object.assign( THREE.Box3.prototype, {
		empty: function () {
			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );

	Object.assign( THREE.Matrix3.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		}
	} );

	Object.assign( THREE.Matrix4.prototype, {
		extractPosition: function ( m ) {
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
		},
		setRotationFromQuaternion: function ( q ) {
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
			return vector.applyProjection( this );
		},
		multiplyVector4: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		},
		rotateAxis: function ( v ) {
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );
		},
		crossVector: function ( vector ) {
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		translate: function ( v ) {
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
		},
		rotateX: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
		},
		rotateY: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
		},
		rotateZ: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
		},
		rotateByAxis: function ( axis, angle ) {
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
		}
	} );

	Object.assign( THREE.Plane.prototype, {
		isIntersectionLine: function ( line ) {
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
		}
	} );

	Object.assign( THREE.Quaternion.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
		}
	} );

	Object.assign( THREE.Ray.prototype, {
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionPlane: function ( plane ) {
			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );

	Object.assign( THREE.Vector3.prototype, {
		setEulerFromRotationMatrix: function () {
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
		},
		setEulerFromQuaternion: function () {
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
		},
		getPositionFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );
		},
		getScaleFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );
		},
		getColumnFromMatrix: function ( index, matrix ) {
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );
		}
	} );

	//

	Object.assign( THREE.Object3D.prototype, {
		getChildByName: function ( name ) {
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
		},
		renderDepth: function ( value ) {
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
		},
		translate: function ( distance, axis ) {
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
		}
	} );

	Object.defineProperties( THREE.Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	Object.defineProperties( THREE.LOD.prototype, {
		objects: {
			get: function () {
				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;
			}
		}
	} );

	//

	THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( THREE.Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	Object.assign( THREE.BufferGeometry.prototype, {
		addIndex: function ( index ) {
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
		},
		addDrawCall: function ( start, count, indexOffset ) {
			if ( indexOffset !== undefined ) {
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
		},
		clearDrawCalls: function () {
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
		},
		computeTangents: function () {
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
		},
		computeOffsets: function () {
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
		}
	} );

	Object.defineProperties( THREE.BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		}
	} );

	//

	Object.defineProperties( THREE.Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new THREE.Color();
			}
		}
	} );

	Object.defineProperties( THREE.MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( THREE.ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	THREE.EventDispatcher.prototype = Object.assign( Object.create( {

		// Note: Extra base ensures these properties are not 'assign'ed.

		constructor: THREE.EventDispatcher,

		apply: function ( target ) {

			console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
					"just inherit or Object.assign the prototype to mix-in." );

			Object.assign( target, this );

		}

	} ), THREE.EventDispatcher.prototype );

	//

	Object.assign( THREE.WebGLRenderer.prototype, {
		supportsFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );
		},
		supportsHalfFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );
		},
		supportsStandardDerivatives: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );
		},
		supportsCompressedTextureS3TC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
		},
		supportsCompressedTexturePVRTC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
		},
		supportsBlendMinMax: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );
		},
		supportsVertexTextures: function () {
			return this.capabilities.vertexTextures;
		},
		supportsInstancedArrays: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );
		},
		enableScissorTest: function ( boolean ) {
			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );
		},
		initMaterial: function () {
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
		},
		addPrePlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
		},
		addPostPlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
		},
		updateShadowMap: function () {
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
		}
	} );

	Object.defineProperties( THREE.WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		}
	} );

	Object.defineProperties( THREE.WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				return this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;
			},
			set: function ( cullFace ) {
				var value = ( cullFace !== THREE.CullFaceBack );
				console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
				this.renderReverseSided = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	Object.assign( THREE.Audio.prototype, {
		load: function ( file ) {
			console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
			var scope = this;
			var audioLoader = new THREE.AudioLoader();
			audioLoader.load( file, function ( buffer ) {
				scope.setBuffer( buffer );
			} );
			return this;
		}
	} );

	Object.assign( THREE.AudioAnalyser.prototype, {
		getData: function ( file ) {
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
		}
	} );

	//

	THREE.GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2 instanceof THREE.Mesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	THREE.ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new THREE.TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new THREE.CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	THREE.Projector = function () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	};

	//

	THREE.CanvasRenderer = function () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	};

	// File:src/extras/CurveUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/extras/SceneUtils.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new THREE.Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new THREE.Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new THREE.Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	// File:src/extras/ShapeUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function triangulate( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( THREE.ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.Shape: Duplicate point", key );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return THREE.ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function b2( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function b3( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	// File:src/extras/core/Curve.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTagentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	THREE.Curve = function () {

	};

	THREE.Curve.prototype = {

		constructor: THREE.Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPoint( d / divisions ) );

			}

			return pts;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPointAt( d / divisions ) );

			}

			return pts;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		}

	};

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	THREE.Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( THREE.Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	// File:src/extras/core/CurvePath.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	THREE.CurvePath = function () {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	};

	THREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {

		constructor: THREE.CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// TODO Test
			// and verify for vector3 (needs to implement equals)
			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new THREE.LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var u = 1 - diff / curve.getLength();

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		/**************************************************************
		 *	Create Geometries Helpers
		 **************************************************************/

		/// Generate geometry from path points (for Line or Points objects)

		createPointsGeometry: function ( divisions ) {

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		// Generate geometry from equidistant sampling along the path

		createSpacedPointsGeometry: function ( divisions ) {

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			var geometry = new THREE.Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	// File:src/extras/core/Font.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Font = function ( data ) {

		this.data = data;

	};

	Object.assign( THREE.Font.prototype, {

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var offset = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var ret = createPath( chars[ i ], scale, offset );
					offset += ret.offset;

					paths.push( ret.path );

				}

				return paths;

			}

			function createPath( c, scale, offset ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new THREE.Path();

				var pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b2( t, cpx0, cpx1, cpx );
										b2( t, cpy0, cpy1, cpy );

									}

								}

								break;

							case 'b': // bezierCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;
								cpx2 = outline[ i ++ ] * scale + offset;
								cpy2 = outline[ i ++ ] * scale;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b3( t, cpx0, cpx1, cpx2, cpx );
										b3( t, cpy0, cpy1, cpy2, cpy );

									}

								}

								break;

						}

					}

				}

				return { offset: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	// File:src/extras/core/Path.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	THREE.Path = function ( points ) {

		THREE.CurvePath.call( this );

		this.actions = [];

		if ( points ) {

			this.fromPoints( points );

		}

	};

	THREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {

		constructor: THREE.Path,

		// TODO Clean up PATH API

		// Create path using straight lines to connect all points
		// - vectors: array of Vector2

		fromPoints: function ( vectors ) {

			this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

			for ( var i = 1, l = vectors.length; i < l; i ++ ) {

				this.lineTo( vectors[ i ].x, vectors[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.actions.push( { action: 'moveTo', args: [ x, y ] } );

		},

		lineTo: function ( x, y ) {

			var lastargs = this.actions[ this.actions.length - 1 ].args;

			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
			this.curves.push( curve );

			this.actions.push( { action: 'lineTo', args: [ x, y ] } );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var lastargs = this.actions[ this.actions.length - 1 ].args;

			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			var curve = new THREE.QuadraticBezierCurve(
				new THREE.Vector2( x0, y0 ),
				new THREE.Vector2( aCPx, aCPy ),
				new THREE.Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var lastargs = this.actions[ this.actions.length - 1 ].args;

			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			var curve = new THREE.CubicBezierCurve(
				new THREE.Vector2( x0, y0 ),
				new THREE.Vector2( aCP1x, aCP1y ),
				new THREE.Vector2( aCP2x, aCP2y ),
				new THREE.Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var args = Array.prototype.slice.call( arguments );

			var lastargs = this.actions[ this.actions.length - 1 ].args;

			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			var npts = [ new THREE.Vector2( x0, y0 ) ];
			Array.prototype.push.apply( npts, pts );

			var curve = new THREE.SplineCurve( npts );
			this.curves.push( curve );

			var lastPoint = pts[ pts.length - 1 ];
			args.push( lastPoint.x );
			args.push( lastPoint.y );

			this.actions.push( { action: 'splineThru', args: args } );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var lastargs = this.actions[ this.actions.length - 1 ].args;
			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var lastargs = this.actions[ this.actions.length - 1 ].args;
			var x0 = lastargs[ lastargs.length - 2 ];
			var y0 = lastargs[ lastargs.length - 1 ];

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var args = [
				aX, aY,
				xRadius, yRadius,
				aStartAngle, aEndAngle,
				aClockwise,
				aRotation || 0 // aRotation is optional.
			];

			var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			args.push( lastPoint.x );
			args.push( lastPoint.y );

			this.actions.push( { action: 'ellipse', args: args } );

		},

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 40;

			var points = [];

			for ( var i = 0; i < divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

				//if ( !this.getPoint( i / divisions ) ) throw "DIE";

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var b2 = THREE.ShapeUtils.b2;
			var b3 = THREE.ShapeUtils.b3;

			var points = [];

			var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
				laste, tx, ty;

			for ( var i = 0, l = this.actions.length; i < l; i ++ ) {

				var item = this.actions[ i ];

				var action = item.action;
				var args = item.args;

				switch ( action ) {

				case 'moveTo':

					points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

					break;

				case 'lineTo':

					points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

					break;

				case 'quadraticCurveTo':

					cpx  = args[ 2 ];
					cpy  = args[ 3 ];

					cpx1 = args[ 0 ];
					cpy1 = args[ 1 ];

					if ( points.length > 0 ) {

						laste = points[ points.length - 1 ];

						cpx0 = laste.x;
						cpy0 = laste.y;

					} else {

						laste = this.actions[ i - 1 ].args;

						cpx0 = laste[ laste.length - 2 ];
						cpy0 = laste[ laste.length - 1 ];

					}

					for ( var j = 1; j <= divisions; j ++ ) {

						var t = j / divisions;

						tx = b2( t, cpx0, cpx1, cpx );
						ty = b2( t, cpy0, cpy1, cpy );

						points.push( new THREE.Vector2( tx, ty ) );

					}

					break;

				case 'bezierCurveTo':

					cpx  = args[ 4 ];
					cpy  = args[ 5 ];

					cpx1 = args[ 0 ];
					cpy1 = args[ 1 ];

					cpx2 = args[ 2 ];
					cpy2 = args[ 3 ];

					if ( points.length > 0 ) {

						laste = points[ points.length - 1 ];

						cpx0 = laste.x;
						cpy0 = laste.y;

					} else {

						laste = this.actions[ i - 1 ].args;

						cpx0 = laste[ laste.length - 2 ];
						cpy0 = laste[ laste.length - 1 ];

					}


					for ( var j = 1; j <= divisions; j ++ ) {

						var t = j / divisions;

						tx = b3( t, cpx0, cpx1, cpx2, cpx );
						ty = b3( t, cpy0, cpy1, cpy2, cpy );

						points.push( new THREE.Vector2( tx, ty ) );

					}

					break;

				case 'splineThru':

					laste = this.actions[ i - 1 ].args;

					var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
					var spts = [ last ];

					var n = divisions * args[ 0 ].length;

					spts = spts.concat( args[ 0 ] );

					var spline = new THREE.SplineCurve( spts );

					for ( var j = 1; j <= n; j ++ ) {

						points.push( spline.getPointAt( j / n ) );

					}

					break;

				case 'arc':

					var aX = args[ 0 ], aY = args[ 1 ],
						aRadius = args[ 2 ],
						aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
						aClockwise = !! args[ 5 ];

					var deltaAngle = aEndAngle - aStartAngle;
					var angle;
					var tdivisions = divisions * 2;

					for ( var j = 1; j <= tdivisions; j ++ ) {

						var t = j / tdivisions;

						if ( ! aClockwise ) {

							t = 1 - t;

						}

						angle = aStartAngle + t * deltaAngle;

						tx = aX + aRadius * Math.cos( angle );
						ty = aY + aRadius * Math.sin( angle );

						//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

						points.push( new THREE.Vector2( tx, ty ) );

					}

					//console.log(points);

					break;

				case 'ellipse':

					var aX = args[ 0 ], aY = args[ 1 ],
						xRadius = args[ 2 ],
						yRadius = args[ 3 ],
						aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
						aClockwise = !! args[ 6 ],
						aRotation = args[ 7 ];


					var deltaAngle = aEndAngle - aStartAngle;
					var angle;
					var tdivisions = divisions * 2;

					var cos, sin;
					if ( aRotation !== 0 ) {

						cos = Math.cos( aRotation );
						sin = Math.sin( aRotation );

					}

					for ( var j = 1; j <= tdivisions; j ++ ) {

						var t = j / tdivisions;

						if ( ! aClockwise ) {

							t = 1 - t;

						}

						angle = aStartAngle + t * deltaAngle;

						tx = aX + xRadius * Math.cos( angle );
						ty = aY + yRadius * Math.sin( angle );

						if ( aRotation !== 0 ) {

							var x = tx, y = ty;

							// Rotate the point about the center of the ellipse.
							tx = ( x - aX ) * cos - ( y - aY ) * sin + aX;
							ty = ( x - aX ) * sin + ( y - aY ) * cos + aY;

						}

						//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

						points.push( new THREE.Vector2( tx, ty ) );

					}

					//console.log(points);

					break;

				} // end switch

			}



			// Normalize to remove the closing point by default.
			var lastPoint = points[ points.length - 1 ];
			if ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&
					 Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )
				points.splice( points.length - 1, 1 );

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		toShapes: function ( isCCW, noHoles ) {

			function extractSubpaths( inActions ) {

				var subPaths = [], lastPath = new THREE.Path();

				for ( var i = 0, l = inActions.length; i < l; i ++ ) {

					var item = inActions[ i ];

					var args = item.args;
					var action = item.action;

					if ( action === 'moveTo' ) {

						if ( lastPath.actions.length !== 0 ) {

							subPaths.push( lastPath );
							lastPath = new THREE.Path();

						}

					}

					lastPath[ action ].apply( lastPath, args );

				}

				if ( lastPath.actions.length !== 0 ) {

					subPaths.push( lastPath );

				}

				// console.log(subPaths);

				return	subPaths;

			}

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new THREE.Shape();
					tmpShape.actions = tmpPath.actions;
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				//console.log("shape", shapes);

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt  = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = THREE.ShapeUtils.isClockWise;

			var subPaths = extractSubpaths( this.actions );
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.actions = tmpPath.actions;
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}

	} );

	// File:src/extras/core/Shape.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	THREE.Shape = function () {

		THREE.Path.apply( this, arguments );

		this.holes = [];

	};

	THREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {

		constructor: THREE.Shape,

		// Convenience method to return ExtrudeGeometry

		extrude: function ( options ) {

			return new THREE.ExtrudeGeometry( this, options );

		},

		// Convenience method to return ShapeGeometry

		makeGeometry: function ( options ) {

			return new THREE.ShapeGeometry( this, options );

		},

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// Get points of shape and holes (keypoints based on segments parameter)

		extractAllPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		extractPoints: function ( divisions ) {

			return this.extractAllPoints( divisions );

		}

	} );

	// File:src/extras/curves/LineCurve.js

	/**************************************************************
	 *	Line
	 **************************************************************/

	THREE.LineCurve = function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;

	THREE.LineCurve.prototype.getPoint = function ( t ) {

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	THREE.LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	THREE.LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	// File:src/extras/curves/QuadraticBezierCurve.js

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;


	THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = THREE.ShapeUtils.b2;

		return new THREE.Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;

		return new THREE.Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	// File:src/extras/curves/CubicBezierCurve.js

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	};

	THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;

	THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = THREE.ShapeUtils.b3;

		return new THREE.Vector2(
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;

		return new THREE.Vector2(
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	// File:src/extras/curves/SplineCurve.js

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

		this.points = ( points == undefined ) ? [] : points;

	};

	THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;

	THREE.SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = THREE.CurveUtils.interpolate;

		return new THREE.Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	// File:src/extras/curves/EllipseCurve.js

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation || 0;

	};

	THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;

	THREE.EllipseCurve.prototype.getPoint = function ( t ) {

		var deltaAngle = this.aEndAngle - this.aStartAngle;

		if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
		if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

		var angle;

		if ( this.aClockwise === true ) {

			angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

		} else {

			angle = this.aStartAngle + t * deltaAngle;

		}

		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x, ty = y;

			// Rotate the point about the center of the ellipse.
			x = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;
			y = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;

		}

		return new THREE.Vector2( x, y );

	};

	// File:src/extras/curves/ArcCurve.js

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	};

	THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
	THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;

	// File:src/extras/curves/LineCurve3.js

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	THREE.LineCurve3 = THREE.Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var vector = new THREE.Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	// File:src/extras/curves/QuadraticBezierCurve3.js

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	THREE.QuadraticBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = THREE.ShapeUtils.b2;

			return new THREE.Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	// File:src/extras/curves/CubicBezierCurve3.js

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	THREE.CubicBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = THREE.ShapeUtils.b3;

			return new THREE.Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	// File:src/extras/curves/SplineCurve3.js

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	THREE.SplineCurve3 = THREE.Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points == undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = THREE.CurveUtils.interpolate;

			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	// File:src/extras/curves/CatmullRomCurve3.js

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	THREE.CatmullRomCurve3 = ( function() {

		var
			tmp = new THREE.Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {

		}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return THREE.Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];
				this.closed = false;

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - ( this.closed ? 0 : 1 ) ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( this.closed ) {

					intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

				} else if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3; // 4 points

				if ( this.closed || intPoint > 0 ) {

					p0 = points[ ( intPoint - 1 ) % l ];

				} else {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				}

				p1 = points[ intPoint % l ];
				p2 = points[ ( intPoint + 1 ) % l ];

				if ( this.closed || intPoint + 2 < l ) {

					p3 = points[ ( intPoint + 2 ) % l ];

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new THREE.Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	// File:src/extras/curves/ClosedSplineCurve3.js

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	THREE.ClosedSplineCurve3 = function ( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

		THREE.CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	};

	THREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );

	// File:src/extras/geometries/BoxGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		THREE.Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	};

	THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;

	THREE.CubeGeometry = THREE.BoxGeometry;

	// File:src/extras/geometries/BoxBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		THREE.BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		// segments
		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// these are used to calculate buffer length
		var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
		var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;
		var numberOfVertices = 0;

		// group variables
		var groupStart = 0;

		// build each side of the box geometry
		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
		buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
		buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

		// build geometry
		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		// helper functions

		function calculateVertexCount ( w, h, d ) {

			var vertices = 0;

			// calculate the amount of vertices for each side (plane)
			vertices += (w + 1) * (h + 1) * 2; // xy
			vertices += (w + 1) * (d + 1) * 2; // xz
			vertices += (d + 1) * (h + 1) * 2; // zy

			return vertices;

		}

		function calculateIndexCount ( w, h, d ) {

			var index = 0;

			// calculate the amount of squares for each side
			index += w * h * 2; // xy
			index += w * d * 2; // xz
			index += d * h * 2; // zy

			return index * 6; // two triangles per square => six vertices per square

		}

		function buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth	= width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var vector = new THREE.Vector3();

			// generate vertices, normals and uvs

			for ( var iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( var ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component
					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer
					vertices[ vertexBufferOffset ] = vector.x;
					vertices[ vertexBufferOffset + 1 ] = vector.y;
					vertices[ vertexBufferOffset + 2 ] = vector.z;

					// set values to correct vector component
					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer
					normals[ vertexBufferOffset ] = vector.x;
					normals[ vertexBufferOffset + 1 ] = vector.y;
					normals[ vertexBufferOffset + 2 ] = vector.z;

					// uvs
					uvs[ uvBufferOffset ] = ix / gridX;
					uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

					// update offsets and counters
					vertexBufferOffset += 3;
					uvBufferOffset += 2;
					vertexCounter += 1;

				}

			}

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					// indices
					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;

					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;

					// update offsets and counters
					indexBufferOffset += 6;
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups
			groupStart += groupCount;

			// update total number of vertices
			numberOfVertices += vertexCounter;

		}

	};

	THREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;

	// File:src/extras/geometries/CircleGeometry.js

	/**
	 * @author hughes
	 */

	THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	};

	THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;

	// File:src/extras/geometries/CircleBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;

	// File:src/extras/geometries/CylinderBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

		// used to calculate buffer length

		var nbCap = 0;

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) nbCap ++;
			if ( radiusBottom > 0 ) nbCap ++;

		}

		var vertexCount = calculateVertexCount();
		var indexCount = calculateIndexCount();

		// buffers

		var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
		var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables

		var index = 0,
		    indexOffset = 0,
		    indexArray = [],
		    halfHeight = height / 2;

		// group variables
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// helper functions

		function calculateVertexCount() {

			var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

			if ( openEnded === false ) {

				count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

			}

			return count;

		}

		function calculateIndexCount() {

			var count = radialSegments * heightSegments * 2 * 3;

			if ( openEnded === false ) {

				count += radialSegments * nbCap * 3;

			}

			return count;

		}

		function generateTorso() {

			var x, y;
			var normal = new THREE.Vector3();
			var vertex = new THREE.Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var tanTheta = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row
				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					// vertex
					vertex.x = radius * Math.sin( u * thetaLength + thetaStart );
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * Math.cos( u * thetaLength + thetaStart );
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normal.copy( vertex );

					// handle special case if radiusTop/radiusBottom is zero

					if ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {

						normal.x = Math.sin( u * thetaLength + thetaStart );
						normal.z = Math.cos( u * thetaLength + thetaStart );

					}

					normal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );

					// uv
					uvs.setXY( index, u, 1 - v );

					// save index of vertex in respective row
					indexRow.push( index );

					// increase index
					index ++;

				}

				// now save vertices of the row in our index array
				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices
					var i1 = indexArray[ y ][ x ];
					var i2 = indexArray[ y + 1 ][ x ];
					var i3 = indexArray[ y + 1 ][ x + 1 ];
					var i4 = indexArray[ y ][ x + 1 ];

					// face one
					indices.setX( indexOffset, i1 ); indexOffset ++;
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// face two
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i3 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// update counters
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new THREE.Vector2();
			var vertex = new THREE.Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex
				vertices.setXYZ( index, 0, halfHeight * sign, 0 );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = 0.5;
				uv.y = 0.5;

				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// save the index of the last center vertex
			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex
				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				} else {

					// face bottom
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				}

				// update counters
				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

	};

	THREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;

	// File:src/extras/geometries/CylinderGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	};

	THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;

	// File:src/extras/geometries/ConeBufferGeometry.js

	/*
	 * @author: abelnation / http://github.com/abelnation
	 */

	THREE.ConeBufferGeometry = function (
		radius, height,
		radialSegments, heightSegments,
		openEnded, thetaStart, thetaLength ) {

		THREE.CylinderBufferGeometry.call( this,
			0, radius, height,
			radialSegments, heightSegments,
			openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	};

	THREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;

	// File:src/extras/geometries/ConeGeometry.js

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	THREE.ConeGeometry = function (
		radius, height,
		radialSegments, heightSegments,
		openEnded, thetaStart, thetaLength ) {

		THREE.CylinderGeometry.call( this,
			0, radius, height,
			radialSegments, heightSegments,
			openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	};

	THREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );
	THREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;

	// File:src/extras/geometries/EdgesGeometry.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.EdgesGeometry = function ( geometry, thresholdAngle ) {

		THREE.BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( geometry instanceof THREE.BufferGeometry ) {

			geometry2 = new THREE.Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );

	};

	THREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;

	// File:src/extras/geometries/ExtrudeGeometry.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ExtrudeGeometry = function ( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		THREE.Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	};

	THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;

	THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// Reuse TNB from TubeGeomtry for now.
			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new THREE.Vector3();
			normal = new THREE.Vector3();
			position2 = new THREE.Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( THREE.ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2 ( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new THREE.Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );

			//z = bevelThickness * t;
			bs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved
			//bs = bevelSize * t; // linear

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );
			//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
			bs = bevelSize * Math.sin ( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new THREE.Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	THREE.ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new THREE.Vector2( a.x, a.y ),
				new THREE.Vector2( b.x, b.y ),
				new THREE.Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new THREE.Vector2( a.x, 1 - a.z ),
					new THREE.Vector2( b.x, 1 - b.z ),
					new THREE.Vector2( c.x, 1 - c.z ),
					new THREE.Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new THREE.Vector2( a.y, 1 - a.z ),
					new THREE.Vector2( b.y, 1 - b.z ),
					new THREE.Vector2( c.y, 1 - c.z ),
					new THREE.Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	// File:src/extras/geometries/ShapeGeometry.js

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ShapeGeometry = function ( shapes, options ) {

		THREE.Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	};

	THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( THREE.ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	// File:src/extras/geometries/LatheBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	 // points - to create a closed torus, one must use a set of points
	 //    like so: [ a, b, c, d, a ], see first is the same as last.
	 // segments - the number of circumference segments to create
	 // phiStart - the starting radian
	 // phiLength - the radian (0 to 2PI) range of the lathed section
	 //    2PI is a closed lathe, less than 2PI is a portion.

	THREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]
		phiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );

		// these are used to calculate buffer length
		var vertexCount = ( segments + 1 ) * points.length;
		var indexCount = segments * points.length * 2 * 3;

		// buffers
		var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var index = 0, indexOffset = 0, base;
		var inversePointLength = 1.0 / ( points.length - 1 );
		var inverseSegments = 1.0 / segments;
		var vertex = new THREE.Vector3();
		var uv = new THREE.Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex
				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// uv
				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				// indices
				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'uv', uvs );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new THREE.Vector3();
			var n2 = new THREE.Vector3();
			var n = new THREE.Vector3();

			// this is the buffer offset for the last line of vertices
			base = segments * points.length * 3;

			for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line
				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line
				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals
				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals
				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			} // next row

		}

	};

	THREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;

	// File:src/extras/geometries/LatheGeometry.js

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2PI) range of the lathed section
	//    2PI is a closed lathe, less than 2PI is a portion.

	THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

		THREE.Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	};

	THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;

	// File:src/extras/geometries/PlaneGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	};

	THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;

	// File:src/extras/geometries/PlaneBufferGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

	};

	THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;

	// File:src/extras/geometries/RingBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 20;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// these are used to calculate buffer length
		var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
		var indexCount = thetaSegments * phiSegments * 2 * 3;

		// buffers
		var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// some helper variables
		var index = 0, indexOffset = 0, segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new THREE.Vector3();
		var uv = new THREE.Vector2();
		var j, i;

		// generate vertices, normals and uvs

		// values are generate from the inside of the ring to the outside

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, 0, 1 );

				// uv
				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index++;

			}

			// increase the radius for next row of vertices
			radius += radiusStep;

		}

		// generate indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				// indices
				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;

				// face two
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

	};

	THREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;

	// File:src/extras/geometries/RingGeometry.js

	/**
	 * @author Kaleb Murphy
	 */

	THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

	};

	THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;

	// File:src/extras/geometries/SphereGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	};

	THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;

	// File:src/extras/geometries/SphereBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	THREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new THREE.Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;

	// File:src/extras/geometries/TextGeometry.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	THREE.TextGeometry = function ( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( font instanceof THREE.Font === false ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new THREE.Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		THREE.ExtrudeGeometry.call( this, shapes, parameters );

		this.type = 'TextGeometry';

	};

	THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );
	THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;

	// File:src/extras/geometries/TorusBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	THREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

		THREE.BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;

		// helper variables
		var center = new THREE.Vector3();
		var vertex = new THREE.Vector3();
		var normal = new THREE.Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices[ vertexBufferOffset ] = vertex.x;
				vertices[ vertexBufferOffset + 1 ] = vertex.y;
				vertices[ vertexBufferOffset + 2 ] = vertex.z;

				// this vector is used to calculate the normal
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				// normal
				normal.subVectors( vertex, center ).normalize();

				normals[ vertexBufferOffset ] = normal.x;
				normals[ vertexBufferOffset + 1 ] = normal.y;
				normals[ vertexBufferOffset + 2 ] = normal.z;

				// uv
				uvs[ uvBufferOffset ] = i / tubularSegments;
				uvs[ uvBufferOffset + 1 ] = j / radialSegments;

				// update offsets
				vertexBufferOffset += 3;
				uvBufferOffset += 2;

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// face one
				indices[ indexBufferOffset ] = a;
				indices[ indexBufferOffset + 1 ] = b;
				indices[ indexBufferOffset + 2 ] = d;

				// face two
				indices[ indexBufferOffset + 3 ] = b;
				indices[ indexBufferOffset + 4 ] = c;
				indices[ indexBufferOffset + 5 ] = d;

				// update offset
				indexBufferOffset += 6;

			}

		}

		// build geometry
		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

	};

	THREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;

	// File:src/extras/geometries/TorusGeometry.js

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

		THREE.Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

	};

	THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;

	// File:src/extras/geometries/TorusKnotBufferGeometry.js

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * see: http://www.blackpawn.com/texts/pqtorus/
	 */
	THREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {

		THREE.BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 100;
		tube = tube || 40;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var i, j, index = 0, indexOffset = 0;

		var vertex = new THREE.Vector3();
		var normal = new THREE.Vector3();
		var uv = new THREE.Vector2();

		var P1 = new THREE.Vector3();
		var P2 = new THREE.Vector3();

		var B = new THREE.Vector3();
		var T = new THREE.Vector3();
		var N = new THREE.Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				// vertex
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				normal.subVectors( vertex, P1 ).normalize();
				normals.setXYZ( index, normal.x, normal.y, normal.z );

				// uv
				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices
				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	};

	THREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;

	// File:src/extras/geometries/TorusKnotGeometry.js

	/**
	 * @author oosmoxiecode
	 */

	THREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		THREE.Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	};

	THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;

	// File:src/extras/geometries/TubeGeometry.js

	/**
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Modified from the TorusKnotGeometry by @oosmoxiecode
	 *
	 * Creates a tube which extrudes along a 3d spline
	 *
	 * Uses parallel transport frames as described in
	 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	 */

	THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {

		THREE.Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			segments: segments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed,
			taper: taper
		};

		segments = segments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;
		taper = taper || THREE.TubeGeometry.NoTaper;

		var grid = [];

		var scope = this,

			tangent,
			normal,
			binormal,

			numpoints = segments + 1,

			u, v, r,

			cx, cy,
			pos, pos2 = new THREE.Vector3(),
			i, j,
			ip, jp,
			a, b, c, d,
			uva, uvb, uvc, uvd;

		var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
			tangents = frames.tangents,
			normals = frames.normals,
			binormals = frames.binormals;

		// proxy internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		function vert( x, y, z ) {

			return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

		}

		// construct the grid

		for ( i = 0; i < numpoints; i ++ ) {

			grid[ i ] = [];

			u = i / ( numpoints - 1 );

			pos = path.getPointAt( u );

			tangent = tangents[ i ];
			normal = normals[ i ];
			binormal = binormals[ i ];

			r = radius * taper( u );

			for ( j = 0; j < radialSegments; j ++ ) {

				v = j / radialSegments * 2 * Math.PI;

				cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				cy = r * Math.sin( v );

				pos2.copy( pos );
				pos2.x += cx * normal.x + cy * binormal.x;
				pos2.y += cx * normal.y + cy * binormal.y;
				pos2.z += cx * normal.z + cy * binormal.z;

				grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

			}

		}


		// construct the mesh

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < radialSegments; j ++ ) {

				ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
				jp = ( j + 1 ) % radialSegments;

				a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
				b = grid[ ip ][ j ];
				c = grid[ ip ][ jp ];
				d = grid[ i ][ jp ];

				uva = new THREE.Vector2( i / segments, j / radialSegments );
				uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
				uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
				uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;

	THREE.TubeGeometry.NoTaper = function ( u ) {

		return 1;

	};

	THREE.TubeGeometry.SinusoidalTaper = function ( u ) {

		return Math.sin( Math.PI * u );

	};

	// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
	THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

		var	normal = new THREE.Vector3(),

			tangents = [],
			normals = [],
			binormals = [],

			vec = new THREE.Vector3(),
			mat = new THREE.Matrix4(),

			numpoints = segments + 1,
			theta,
			smallest,

			tx, ty, tz,
			i, u;


		// expose internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		// compute the tangent vectors for each segment on the path

		for ( i = 0; i < numpoints; i ++ ) {

			u = i / ( numpoints - 1 );

			tangents[ i ] = path.getTangentAt( u );
			tangents[ i ].normalize();

		}

		initialNormal3();

		/*
		function initialNormal1(lastBinormal) {
			// fixed start binormal. Has dangers of 0 vectors
			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
			normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
		}

		function initialNormal2() {

			// This uses the Frenet-Serret formula for deriving binormal
			var t2 = path.getTangentAt( epsilon );

			normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
			binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

			normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

		}
		*/

		function initialNormal3() {

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the smallest tangent xyz component

			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			smallest = Number.MAX_VALUE;
			tx = Math.abs( tangents[ 0 ].x );
			ty = Math.abs( tangents[ 0 ].y );
			tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= smallest ) {

				smallest = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= smallest ) {

				smallest = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= smallest ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );

		}


		// compute the slowly-varying normal and binormal vectors for each segment on the path

		for ( i = 1; i < numpoints; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}


		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed ) {

			theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
			theta /= ( numpoints - 1 );

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i < numpoints; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

	};

	// File:src/extras/geometries/PolyhedronGeometry.js

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

		THREE.Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		var that = this;

		for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

			prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

		}

		var p = this.vertices;

		var faces = [];

		for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

			var v1 = p[ indices[ i ] ];
			var v2 = p[ indices[ i + 1 ] ];
			var v3 = p[ indices[ i + 2 ] ];

			faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

		}

		var centroid = new THREE.Vector3();

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			subdivide( faces[ i ], detail );

		}


		// Handle case when face straddles the seam

		for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

			var uvs = this.faceVertexUvs[ 0 ][ i ];

			var x0 = uvs[ 0 ].x;
			var x1 = uvs[ 1 ].x;
			var x2 = uvs[ 2 ].x;

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			if ( max > 0.9 && min < 0.1 ) {

				// 0.9 is somewhat arbitrary

				if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
				if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
				if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

			}

		}


		// Apply radius

		for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

			this.vertices[ i ].multiplyScalar( radius );

		}


		// Merge vertices

		this.mergeVertices();

		this.computeFaceNormals();

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


		// Project vector onto sphere's surface

		function prepare( vector ) {

			var vertex = vector.normalize().clone();
			vertex.index = that.vertices.push( vertex ) - 1;

			// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

			var u = azimuth( vector ) / 2 / Math.PI + 0.5;
			var v = inclination( vector ) / Math.PI + 0.5;
			vertex.uv = new THREE.Vector2( u, 1 - v );

			return vertex;

		}


		// Approximate a curved face with recursively sub-divided triangles.

		function make( v1, v2, v3 ) {

			var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
			that.faces.push( face );

			centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

			var azi = azimuth( centroid );

			that.faceVertexUvs[ 0 ].push( [
				correctUV( v1.uv, v1, azi ),
				correctUV( v2.uv, v2, azi ),
				correctUV( v3.uv, v3, azi )
			] );

		}


		// Analytically subdivide a face to the required detail level.

		function subdivide( face, detail ) {

			var cols = Math.pow( 2, detail );
			var a = prepare( that.vertices[ face.a ] );
			var b = prepare( that.vertices[ face.b ] );
			var c = prepare( that.vertices[ face.c ] );
			var v = [];

			// Construct all of the vertices for this subdivision.

			for ( var i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = prepare( a.clone().lerp( c, i / cols ) );
				var bj = prepare( b.clone().lerp( c, i / cols ) );
				var rows = cols - i;

				for ( var j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

					}

				}

			}

			// Construct all of the faces.

			for ( var i = 0; i < cols ; i ++ ) {

				for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k ],
							v[ i ][ k ]
						);

					} else {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k + 1 ],
							v[ i + 1 ][ k ]
						);

					}

				}

			}

		}


		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}


		// Texture fixing helper. Spheres have some odd behaviours.

		function correctUV( uv, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
			return uv.clone();

		}


	};

	THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;

	// File:src/extras/geometries/DodecahedronGeometry.js

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	THREE.DodecahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;

	// File:src/extras/geometries/IcosahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.IcosahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;

	// File:src/extras/geometries/OctahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.OctahedronGeometry = function ( radius, detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;

	// File:src/extras/geometries/TetrahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.TetrahedronGeometry = function ( radius, detail ) {

		var vertices = [
			 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;

	// File:src/extras/geometries/ParametricGeometry.js

	/**
	 * @author zz85 / https://github.com/zz85
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 *
	 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
	 *
	 */

	THREE.ParametricGeometry = function ( func, slices, stacks ) {

		THREE.Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		var verts = this.vertices;
		var faces = this.faces;
		var uvs = this.faceVertexUvs[ 0 ];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				verts.push( p );

			}

		}

		var a, b, c, d;
		var uva, uvb, uvc, uvd;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				uva = new THREE.Vector2( j / slices, i / stacks );
				uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
				uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
				uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

				faces.push( new THREE.Face3( a, b, d ) );
				uvs.push( [ uva, uvb, uvd ] );

				faces.push( new THREE.Face3( b, c, d ) );
				uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		// console.log(this);

		// magic bullet
		// var diff = this.mergeVertices();
		// console.log('removed ', diff, ' vertices by merging');

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;

	// File:src/extras/geometries/WireframeGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeGeometry = function ( geometry ) {

		THREE.BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( geometry instanceof THREE.Geometry ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

		} else if ( geometry instanceof THREE.BufferGeometry ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			}

		}

	};

	THREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;

	// File:src/extras/helpers/AxisHelper.js

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AxisHelper = function ( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;

	// File:src/extras/helpers/ArrowHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	THREE.ArrowHelper = ( function () {

		var lineGeometry = new THREE.BufferGeometry();
		lineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

		var coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );

		return function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

			// dir is assumed to be normalized

			THREE.Object3D.call( this );

			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			this.position.copy( origin );

			this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );

			this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );

			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );

		};

	}() );

	THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;

	THREE.ArrowHelper.prototype.setDirection = ( function () {

		var axis = new THREE.Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	THREE.ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	// File:src/extras/helpers/BoxHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BoxHelper = function ( object, color ) {

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	};

	THREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;

	THREE.BoxHelper.prototype.update = ( function () {

		var box = new THREE.Box3();

		return function update( object ) {

			if ( object instanceof THREE.Box3 ) {

				box.copy( object );

			} else {

				box.setFromObject( object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	// File:src/extras/helpers/BoundingBoxHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	THREE.BoundingBoxHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new THREE.Box3();

		THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

	};

	THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;

	THREE.BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.size( this.scale );

		this.box.center( this.position );

	};

	// File:src/extras/helpers/CameraHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	THREE.CameraHelper = function ( camera ) {

		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.colors.push( new THREE.Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		THREE.LineSegments.call( this, geometry, material );

		this.camera = camera;
		if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	};

	THREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;

	THREE.CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new THREE.Vector3();
		var camera = new THREE.Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	// File:src/extras/helpers/DirectionalLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.DirectionalLightHelper = function ( light, size ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		if ( size === undefined ) size = 1;

		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.Float32Attribute( [
			- size,   size, 0,
			  size,   size, 0,
			  size, - size, 0,
			- size, - size, 0,
			- size,   size, 0
		], 3 ) );

		var material = new THREE.LineBasicMaterial( { fog: false } );

		this.add( new THREE.Line( geometry, material ) );

		geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.add( new THREE.Line( geometry, material ));

		this.update();

	};

	THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;

	THREE.DirectionalLightHelper.prototype.dispose = function () {

		var lightPlane = this.children[ 0 ];
		var targetLine = this.children[ 1 ];

		lightPlane.geometry.dispose();
		lightPlane.material.dispose();
		targetLine.geometry.dispose();
		targetLine.material.dispose();

	};

	THREE.DirectionalLightHelper.prototype.update = function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var v3 = new THREE.Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.lookAt( v3 );
			lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			targetLine.lookAt( v3 );
			targetLine.scale.z = v3.length();

		};

	}();

	// File:src/extras/helpers/EdgesHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @param object THREE.Mesh whose geometry will be used
	 * @param hex line color
	 * @param thresholdAngle the minimum angle (in degrees),
	 * between the face normals of adjacent faces,
	 * that is required to render an edge. A value of 10 means
	 * an edge is only rendered if the angle is at least 10 degrees.
	 */

	THREE.EdgesHelper = function ( object, hex, thresholdAngle ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;

	// File:src/extras/helpers/FaceNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	};

	THREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;

	THREE.FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	// File:src/extras/helpers/GridHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.GridHelper = function ( size, step, color1, color2 ) {

		color1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );

		var vertices = [];
		var colors = [];

		for ( var i = - size, j = 0; i <= size; i += step ) {

			vertices.push( - size, 0, i, size, 0, i );
			vertices.push( i, 0, - size, i, 0, size );

			var color = i === 0 ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;

	THREE.GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	// File:src/extras/helpers/HemisphereLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.HemisphereLightHelper = function ( light, sphereSize ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new THREE.Color(), new THREE.Color() ];

		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

		this.lightSphere = new THREE.Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	};

	THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;

	THREE.HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	THREE.HemisphereLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();

		return function update() {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		};

	}();

	// File:src/extras/helpers/PointLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PointLightHelper = function ( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		THREE.Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	};

	THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;

	THREE.PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	THREE.PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	// File:src/extras/helpers/SkeletonHelper.js

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkeletonHelper = function ( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new THREE.Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				geometry.vertices.push( new THREE.Vector3() );
				geometry.vertices.push( new THREE.Vector3() );
				geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
				geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		THREE.LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	};


	THREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;

	THREE.SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( object instanceof THREE.Bone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	THREE.SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new THREE.Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	// File:src/extras/helpers/SpotLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.SpotLightHelper = function ( light ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new THREE.BufferGeometry();

		var positions = [
			0, 0, 0,   0,   0,   1,
			0, 0, 0,   1,   0,   1,
			0, 0, 0, - 1,   0,   1,
			0, 0, 0,   0,   1,   1,
			0, 0, 0,   0, - 1,   1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );

		var material = new THREE.LineBasicMaterial( { fog: false } );

		this.cone = new THREE.LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	};

	THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;

	THREE.SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	THREE.SpotLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();
		var vector2 = new THREE.Vector3();

		return function update() {

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	// File:src/extras/helpers/VertexNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry instanceof THREE.BufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	};

	THREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;

	THREE.VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( objGeometry instanceof THREE.Geometry ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( objGeometry instanceof THREE.BufferGeometry ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	// File:src/extras/helpers/WireframeHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;

	// File:src/extras/objects/ImmediateRenderObject.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.ImmediateRenderObject = function ( material ) {

		THREE.Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	};

	THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;

	// File:src/extras/objects/MorphBlendMesh.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.MorphBlendMesh = function( geometry, material ) {

		THREE.Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	};

	THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;

	THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	THREE.MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};

	var Matrix3 = THREE.Matrix3;
	var Matrix4 = THREE.Matrix4;
	var Vector2 = THREE.Vector2;
	var Vector3 = THREE.Vector3;
	var Quaternion = THREE.Quaternion;
	var Sphere = THREE.Sphere;
	var Box3 = THREE.Box3;
	var Color = THREE.Color;

	var OrthographicCamera = THREE.OrthographicCamera;
	var PerspectiveCamera = THREE.PerspectiveCamera;

	var EventDispatcher = THREE.EventDispatcher;
	var BufferGeometry = THREE.BufferGeometry;
	var BufferAttribute = THREE.BufferAttribute;
	var Geometry = THREE.Geometry;
	var Face3 = THREE.Face3;
	var Uniform = THREE.Uniform;

	var CylinderGeometry = THREE.CylinderGeometry;
	var CylinderBufferGeometry = THREE.CylinderBufferGeometry;
	var ConeGeometry = THREE.ConeGeometry;
	var ConeBufferGeometry = THREE.ConeBufferGeometry;
	var IcosahedronGeometry = THREE.IcosahedronGeometry;
	var PlaneGeometry = THREE.PlaneGeometry;

	var Group = THREE.Group;
	var Points = THREE.Points;
	var Mesh = THREE.Mesh;
	var Line = THREE.Line;
	var LineSegments = THREE.LineSegments;

	var SpotLight = THREE.SpotLight;
	var AmbientLight = THREE.AmbientLight;

	var ShaderMaterial = THREE.ShaderMaterial;

	var WebGLRenderTarget = THREE.WebGLRenderTarget;
	var WebGLRenderer = THREE.WebGLRenderer;

	var ShaderChunk = THREE.ShaderChunk;
	var UniformsUtils = THREE.UniformsUtils;
	var UniformsLib = THREE.UniformsLib;

	var Fog = THREE.Fog;
	var Scene = THREE.Scene;

	var DataTexture = THREE.DataTexture;
	var CanvasTexture = THREE.CanvasTexture;

	var FrontSide = THREE.FrontSide;
	var BackSide = THREE.BackSide;
	var DoubleSide = THREE.DoubleSide;
	var VertexColors = THREE.VertexColors;
	var NormalBlending = THREE.NormalBlending;
	var AdditiveBlending = THREE.AdditiveBlending;
	var SmoothShading = THREE.SmoothShading;
	var FlatShading = THREE.FlatShading;
	var NearestFilter = THREE.NearestFilter;
	var RGBAFormat = THREE.RGBAFormat;
	var FloatType = THREE.FloatType;
	var HalfFloatType = THREE.HalfFloatType;
	var UnsignedByteType = THREE.UnsignedByteType;

	// changed to be usable as an es6 module, ASR

	/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */
	/*global define:false, require:false, exports:false, module:false, signals:false */

	/** @license
	 * JS Signals <http://millermedeiros.github.com/js-signals/>
	 * Released under the MIT license
	 * Author: Miller Medeiros
	 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
	 */


	    // SignalBinding -------------------------------------------------
	    //================================================================

	    /**
	     * Object that represents a binding between a Signal and a listener function.
	     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
	     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
	     * @author Miller Medeiros
	     * @constructor
	     * @internal
	     * @name SignalBinding
	     * @param {Signal} signal Reference to Signal object that listener is currently bound to.
	     * @param {Function} listener Handler function bound to the signal.
	     * @param {boolean} isOnce If binding should be executed just once.
	     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
	     * @param {Number} [priority] The priority level of the event listener. (default = 0).
	     */
	    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

	        /**
	         * Handler function bound to the signal.
	         * @type Function
	         * @private
	         */
	        this._listener = listener;

	        /**
	         * If binding should be executed just once.
	         * @type boolean
	         * @private
	         */
	        this._isOnce = isOnce;

	        /**
	         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
	         * @memberOf SignalBinding.prototype
	         * @name context
	         * @type Object|undefined|null
	         */
	        this.context = listenerContext;

	        /**
	         * Reference to Signal object that listener is currently bound to.
	         * @type Signal
	         * @private
	         */
	        this._signal = signal;

	        /**
	         * Listener priority
	         * @type Number
	         * @private
	         */
	        this._priority = priority || 0;
	    }

	    SignalBinding.prototype = {

	        /**
	         * If binding is active and should be executed.
	         * @type boolean
	         */
	        active : true,

	        /**
	         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
	         * @type Array|null
	         */
	        params : null,

	        /**
	         * Call listener passing arbitrary parameters.
	         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
	         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
	         * @return {*} Value returned by the listener.
	         */
	        execute : function (paramsArr) {
	            var handlerReturn, params;
	            if (this.active && !!this._listener) {
	                params = this.params? this.params.concat(paramsArr) : paramsArr;
	                handlerReturn = this._listener.apply(this.context, params);
	                if (this._isOnce) {
	                    this.detach();
	                }
	            }
	            return handlerReturn;
	        },

	        /**
	         * Detach binding from signal.
	         * - alias to: mySignal.remove(myBinding.getListener());
	         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
	         */
	        detach : function () {
	            return this.isBound()? this._signal.remove(this._listener, this.context) : null;
	        },

	        /**
	         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
	         */
	        isBound : function () {
	            return (!!this._signal && !!this._listener);
	        },

	        /**
	         * @return {boolean} If SignalBinding will only be executed once.
	         */
	        isOnce : function () {
	            return this._isOnce;
	        },

	        /**
	         * @return {Function} Handler function bound to the signal.
	         */
	        getListener : function () {
	            return this._listener;
	        },

	        /**
	         * @return {Signal} Signal that listener is currently bound to.
	         */
	        getSignal : function () {
	            return this._signal;
	        },

	        /**
	         * Delete instance properties
	         * @private
	         */
	        _destroy : function () {
	            delete this._signal;
	            delete this._listener;
	            delete this.context;
	        },

	        /**
	         * @return {string} String representation of the object.
	         */
	        toString : function () {
	            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
	        }

	    };


	/*global SignalBinding:false*/

	    // Signal --------------------------------------------------------
	    //================================================================

	    function validateListener(listener, fnName) {
	        if (typeof listener !== 'function') {
	            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
	        }
	    }

	    /**
	     * Custom event broadcaster
	     * <br />- inspired by Robert Penner's AS3 Signals.
	     * @name Signal
	     * @author Miller Medeiros
	     * @constructor
	     */
	    function Signal() {
	        /**
	         * @type Array.<SignalBinding>
	         * @private
	         */
	        this._bindings = [];
	        this._prevParams = null;

	        // enforce dispatch to aways work on same context (#47)
	        var self = this;
	        this.dispatch = function(){
	            Signal.prototype.dispatch.apply(self, arguments);
	        };
	    }

	    Signal.prototype = {

	        /**
	         * Signals Version Number
	         * @type String
	         * @const
	         */
	        VERSION : '1.0.0',

	        /**
	         * If Signal should keep record of previously dispatched parameters and
	         * automatically execute listener during `add()`/`addOnce()` if Signal was
	         * already dispatched before.
	         * @type boolean
	         */
	        memorize : false,

	        /**
	         * @type boolean
	         * @private
	         */
	        _shouldPropagate : true,

	        /**
	         * If Signal is active and should broadcast events.
	         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
	         * @type boolean
	         */
	        active : true,

	        /**
	         * @param {Function} listener
	         * @param {boolean} isOnce
	         * @param {Object} [listenerContext]
	         * @param {Number} [priority]
	         * @return {SignalBinding}
	         * @private
	         */
	        _registerListener : function (listener, isOnce, listenerContext, priority) {

	            var prevIndex = this._indexOfListener(listener, listenerContext),
	                binding;

	            if (prevIndex !== -1) {
	                binding = this._bindings[prevIndex];
	                if (binding.isOnce() !== isOnce) {
	                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
	                }
	            } else {
	                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
	                this._addBinding(binding);
	            }

	            if(this.memorize && this._prevParams){
	                binding.execute(this._prevParams);
	            }

	            return binding;
	        },

	        /**
	         * @param {SignalBinding} binding
	         * @private
	         */
	        _addBinding : function (binding) {
	            //simplified insertion sort
	            var n = this._bindings.length;
	            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
	            this._bindings.splice(n + 1, 0, binding);
	        },

	        /**
	         * @param {Function} listener
	         * @return {number}
	         * @private
	         */
	        _indexOfListener : function (listener, context) {
	            var n = this._bindings.length,
	                cur;
	            while (n--) {
	                cur = this._bindings[n];
	                if (cur._listener === listener && cur.context === context) {
	                    return n;
	                }
	            }
	            return -1;
	        },

	        /**
	         * Check if listener was attached to Signal.
	         * @param {Function} listener
	         * @param {Object} [context]
	         * @return {boolean} if Signal has the specified listener.
	         */
	        has : function (listener, context) {
	            return this._indexOfListener(listener, context) !== -1;
	        },

	        /**
	         * Add a listener to the signal.
	         * @param {Function} listener Signal handler function.
	         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
	         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
	         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
	         */
	        add : function (listener, listenerContext, priority) {
	            validateListener(listener, 'add');
	            return this._registerListener(listener, false, listenerContext, priority);
	        },

	        /**
	         * Add listener to the signal that should be removed after first execution (will be executed only once).
	         * @param {Function} listener Signal handler function.
	         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
	         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
	         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
	         */
	        addOnce : function (listener, listenerContext, priority) {
	            validateListener(listener, 'addOnce');
	            return this._registerListener(listener, true, listenerContext, priority);
	        },

	        /**
	         * Remove a single listener from the dispatch queue.
	         * @param {Function} listener Handler function that should be removed.
	         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
	         * @return {Function} Listener handler function.
	         */
	        remove : function (listener, context) {
	            validateListener(listener, 'remove');

	            var i = this._indexOfListener(listener, context);
	            if (i !== -1) {
	                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
	                this._bindings.splice(i, 1);
	            }
	            return listener;
	        },

	        /**
	         * Remove all listeners from the Signal.
	         */
	        removeAll : function () {
	            var n = this._bindings.length;
	            while (n--) {
	                this._bindings[n]._destroy();
	            }
	            this._bindings.length = 0;
	        },

	        /**
	         * @return {number} Number of listeners attached to the Signal.
	         */
	        getNumListeners : function () {
	            return this._bindings.length;
	        },

	        /**
	         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
	         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
	         * @see Signal.prototype.disable
	         */
	        halt : function () {
	            this._shouldPropagate = false;
	        },

	        /**
	         * Dispatch/Broadcast Signal to all listeners added to the queue.
	         * @param {...*} [params] Parameters that should be passed to each handler.
	         */
	        dispatch : function (params) {
	            if (! this.active) {
	                return;
	            }

	            var paramsArr = Array.prototype.slice.call(arguments),
	                n = this._bindings.length,
	                bindings;

	            if (this.memorize) {
	                this._prevParams = paramsArr;
	            }

	            if (! n) {
	                //should come after memorize
	                return;
	            }

	            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
	            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

	            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
	            //reverse loop since listeners with higher priority will be added at the end of the list
	            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
	        },

	        /**
	         * Forget memorized arguments.
	         * @see Signal.memorize
	         */
	        forget : function(){
	            this._prevParams = null;
	        },

	        /**
	         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
	         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
	         */
	        dispose : function () {
	            this.removeAll();
	            delete this._bindings;
	            delete this._prevParams;
	        },

	        /**
	         * @return {string} String representation of the object.
	         */
	        toString : function () {
	            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
	        }

	    };

	var kwd = {
	    "PROTEIN": 1,
	    "NUCLEIC": 2,
	    "RNA": 3,
	    "DNA": 4,
	    "POLYMER": 5,
	    "WATER": 6,
	    "HELIX": 7,
	    "SHEET": 8,
	    "BACKBONE": 9,
	    "SIDECHAIN": 10,
	    "ALL": 11,
	    "HETERO": 12,
	    "ION": 13,
	    "SACCHARIDE": 14
	};


	/**
	 * Selection
	 * @class
	 * @param {String} string - selection string, see {@tutorial selection-language}
	 */
	function Selection( string ){

	    this.signals = {
	        stringChanged: new Signal(),
	    };

	    this.setString( string );

	}

	Selection.prototype = {

	    constructor: Selection,

	    type: "selection",

	    setString: function( string, silent ){

	        if( string === undefined ) string = this.string || "";
	        if( string === this.string ) return;

	        //

	        try{
	            this.parse( string );
	        }catch( e ){
	            // Log.error( e.stack );
	            this.selection = { "error": e.message };
	        }

	        this.string = string;

	        this.test = this.makeAtomTest();
	        this.residueTest = this.makeResidueTest();
	        this.chainTest = this.makeChainTest();
	        this.modelTest = this.makeModelTest();

	        this.atomOnlyTest = this.makeAtomTest( true );
	        this.residueOnlyTest = this.makeResidueTest( true );
	        this.chainOnlyTest = this.makeChainTest( true );
	        this.modelOnlyTest = this.makeModelTest( true );

	        if( !silent ){
	            this.signals.stringChanged.dispatch( this.string );
	        }

	    },

	    parse: function( string ){

	        this.selection = {
	            operator: undefined,
	            rules: []
	        };

	        if( !string ) return;

	        var scope = this;

	        var selection = this.selection;
	        var selectionStack = [];
	        var newSelection, oldSelection;
	        var andContext = null;

	        string = string.replace( /\(/g, ' ( ' ).replace( /\)/g, ' ) ' ).trim();
	        if( string.charAt( 0 ) === "(" && string.substr( -1 ) === ")" ){
	            string = string.slice( 1, -1 ).trim();
	        }
	        var chunks = string.split( /\s+/ );

	        // Log.log( string, chunks )

	        var all = [ "*", "", "ALL" ];

	        var c, sele, i, error, not;
	        var atomname, chain, resno, resname, model, resi, altloc, inscode;
	        var j = 0;

	        var createNewContext = function( operator ){

	            newSelection = {
	                operator: operator,
	                rules: []
	            };
	            if( selection === undefined ){
	                selection = newSelection;
	                scope.selection = newSelection;
	            }else{
	                selection.rules.push( newSelection );
	                selectionStack.push( selection );
	                selection = newSelection;
	            }
	            j = 0;

	        };

	        var getPrevContext = function( operator ){

	            oldSelection = selection;
	            selection = selectionStack.pop();
	            if( selection === undefined ){
	                createNewContext( operator );
	                pushRule( oldSelection );
	            }else{
	                j = selection.rules.length;
	            }

	        };

	        var pushRule = function( rule ){

	            selection.rules.push( rule );
	            j += 1;

	        };

	        for( i = 0; i < chunks.length; ++i ){

	            c = chunks[ i ];

	            // handle parens

	            if( c === "(" ){

	                // Log.log( "(" );

	                not = false;
	                createNewContext();
	                continue;

	            }else if( c === ")" ){

	                // Log.log( ")" );

	                getPrevContext();
	                if( selection.negate ){
	                    getPrevContext();
	                }
	                continue;

	            }

	            // leave 'not' context

	            if( not > 0 ){

	                if( c.toUpperCase() === "NOT" ){

	                    not = 1;

	                }else if( not === 1 ){

	                    not = 2;

	                }else if( not === 2 ){

	                    not = false;
	                    getPrevContext();

	                }else{

	                    throw new Error( "something went wrong with 'not'" );

	                }

	            }

	            // handle logic operators

	            if( c.toUpperCase() === "AND" ){

	                // Log.log( "AND" );

	                if( selection.operator === "OR" ){
	                    var lastRule = selection.rules.pop();
	                    createNewContext( "AND" );
	                    pushRule( lastRule );
	                }else{
	                    selection.operator = "AND";
	                }
	                continue;

	            }else if( c.toUpperCase() === "OR" ){

	                // Log.log( "OR" );

	                if( selection.operator === "AND" ){
	                    getPrevContext( "OR" );
	                }else{
	                    selection.operator = "OR";
	                }
	                continue;

	            }else if( c.toUpperCase() === "NOT" ){

	                // Log.log( "NOT", j );

	                not = 1;
	                createNewContext();
	                selection.negate = true;
	                continue;

	            }else{

	                // Log.log( "chunk", c, j, selection );

	            }

	            // handle keyword attributes

	            sele = {};

	            if( c.toUpperCase() === "HETERO" ){
	                sele.keyword = kwd.HETERO;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "WATER" ){
	                sele.keyword = kwd.WATER;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "PROTEIN" ){
	                sele.keyword = kwd.PROTEIN;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "NUCLEIC" ){
	                sele.keyword = kwd.NUCLEIC;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "RNA" ){
	                sele.keyword = kwd.RNA;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "DNA" ){
	                sele.keyword = kwd.DNA;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "POLYMER" ){
	                sele.keyword = kwd.POLYMER;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "ION" ){
	                sele.keyword = kwd.ION;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "SACCHARIDE" || c.toUpperCase() === "SUGAR" ){
	                sele.keyword = kwd.SACCHARIDE;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "HYDROGEN" ){
	                sele.element = "H";
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "SMALL" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "GLY" },
	                        { resname: "ALA" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "NUCLEOPHILIC" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "SER" },
	                        { resname: "THR" },
	                        { resname: "CYS" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "HYDROPHOBIC" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "VAL" },
	                        { resname: "LEU" },
	                        { resname: "ILE" },
	                        { resname: "MET" },
	                        { resname: "PRO" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "AROMATIC" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "PHE" },
	                        { resname: "TYR" },
	                        { resname: "TRP" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "AMIDE" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "ASN" },
	                        { resname: "GLN" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "ACIDIC" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "ASP" },
	                        { resname: "GLU" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "BASIC" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "HIS" },
	                        { resname: "LYS" },
	                        { resname: "ARG" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "CHARGED" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "ASP" },
	                        { resname: "GLU" },
	                        { resname: "HIS" },
	                        { resname: "LYS" },
	                        { resname: "ARG" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "POLAR" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "ASP" },
	                        { resname: "GLU" },
	                        { resname: "HIS" },
	                        { resname: "LYS" },
	                        { resname: "ARG" },
	                        { resname: "ASN" },
	                        { resname: "GLN" },
	                        { resname: "SER" },
	                        { resname: "THR" },
	                        { resname: "TYR" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "NONPOLAR" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { resname: "ALA" },
	                        { resname: "CYS" },
	                        { resname: "GLY" },
	                        { resname: "ILE" },
	                        { resname: "LEU" },
	                        { resname: "MET" },
	                        { resname: "PHE" },
	                        { resname: "PRO" },
	                        { resname: "VAL" },
	                        { resname: "TRP" }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "HELIX" ){
	                sele.keyword = kwd.HELIX;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "SHEET" ){
	                sele.keyword = kwd.SHEET;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "TURN" ){
	                sele = {
	                    operator: "AND",
	                    rules: [
	                        {
	                            operator: "OR",
	                            negate: true,
	                            rules: [
	                                { keyword: kwd.HELIX },
	                                { keyword: kwd.SHEET }
	                            ]
	                        },
	                        {
	                            operator: "OR",
	                            rules: [
	                                { keyword: kwd.PROTEIN },
	                                { sstruc: "s" },
	                                { sstruc: "t" },
	                                { sstruc: "l" }
	                            ]
	                        }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "BACKBONE" ){
	                sele.keyword = kwd.BACKBONE;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "SIDECHAIN" ){
	                sele.keyword = kwd.SIDECHAIN;
	                pushRule( sele );
	                continue;
	            }

	            if( c.toUpperCase() === "SIDECHAINATTACHED" ){
	                sele = {
	                    operator: "OR",
	                    rules: [
	                        { keyword: kwd.SIDECHAIN },
	                        {
	                            operator: "AND",
	                            negate: false,
	                            rules: [
	                                { keyword: kwd.PROTEIN },
	                                {
	                                    operator: "OR",
	                                    negate: false,
	                                    rules: [
	                                        { atomname: "CA" },
	                                        { atomname: "BB" }
	                                    ]
	                                }
	                            ]
	                        },
	                        {
	                            operator: "AND",
	                            negate: false,
	                            rules: [
	                                { resname: "PRO" },
	                                { atomname: "N" }
	                            ]
	                        },
	                        {
	                            operator: "AND",
	                            negate: false,
	                            rules: [
	                                { keyword: kwd.NUCLEIC },
	                                {
	                                    operator: "OR",
	                                    negate: true,
	                                    rules: [
	                                        { atomname: "P" },
	                                        { atomname: "OP1" },
	                                        { atomname: "OP2" },
	                                        { atomname: "O3'" },
	                                        { atomname: "O3*" },
	                                        { atomname: "O5'" },
	                                        { atomname: "O5*" },
	                                        { atomname: "C5'" },
	                                        { atomname: "C5*" }
	                                    ]
	                                }
	                            ]
	                        }
	                    ]
	                };
	                pushRule( sele );
	                continue;
	            }

	            if( all.indexOf( c.toUpperCase() )!==-1 ){
	                sele.keyword = kwd.ALL;
	                pushRule( sele );
	                continue;
	            }

	            // handle atom expressions

	            if( c.charAt( 0 ) === "@" ){
	                var indexList = c.substr( 1 ).split( "," );
	                for( var k = 0, kl = indexList.length; k < kl; ++k ){
	                    indexList[ k ] = parseInt( indexList[ k ] );
	                }
	                indexList.sort( function( a, b ){ return a - b; } );
	                sele.atomindex = indexList;
	                pushRule( sele );
	                continue;
	            }

	            if( c.charAt( 0 ) === "#" ){
	                sele.element = c.substr( 1 ).toUpperCase();
	                pushRule( sele );
	                continue;
	            }

	            if( c[0] === "[" && c[c.length-1] === "]" ){
	                sele.resname = c.substr( 1, c.length-2 ).toUpperCase();
	                pushRule( sele );
	                continue;
	            }else if( ( c.length >= 1 && c.length <= 4 ) &&
	                    c[0] !== "^" && c[0] !== ":" && c[0] !== "." && c[0] !== "%" && c[0] !== "/" &&
	                    isNaN( parseInt( c ) ) ){

	                sele.resname = c.toUpperCase();
	                pushRule( sele );
	                continue;
	            }

	            // there must be only one constraint per rule
	            // otherwise a test quickly becomes not applicable
	            // e.g. chainTest for chainname when resno is present too

	            sele = {
	                operator: "AND",
	                rules: []
	            };

	            model = c.split("/");
	            if( model.length > 1 && model[1] ){
	                if( isNaN( parseInt( model[1] ) ) ){
	                    throw new Error( "model must be an integer" );
	                }
	                sele.rules.push( {
	                    model: parseInt( model[1] )
	                } );
	            }

	            altloc = model[0].split("%");
	            if( altloc.length > 1 ){
	                sele.rules.push( {
	                    altloc: altloc[1]
	                } );
	            }

	            atomname = altloc[0].split(".");
	            if( atomname.length > 1 && atomname[1] ){
	                if( atomname[1].length > 4 ){
	                    throw new Error( "atomname must be one to four characters" );
	                }
	                sele.rules.push( {
	                    atomname: atomname[1].substring( 0, 4 ).toUpperCase()
	                } );
	            }

	            chain = atomname[0].split(":");
	            if( chain.length > 1 && chain[1] ){
	                sele.rules.push( {
	                    chainname: chain[1]
	                } );
	            }

	            inscode = chain[0].split("^");
	            if( inscode.length > 1 ){
	                sele.rules.push( {
	                    inscode: inscode[1]
	                } );
	            }

	            if( inscode[0] ){
	                var negate, negate2;
	                if( inscode[0][0] === "-" ){
	                    inscode[0] = inscode[0].substr(1);
	                    negate = true;
	                }
	                if( inscode[0].indexOf( "--" ) !== -1 ){
	                    inscode[0] = inscode[0].replace( "--", "-" );
	                    negate2 = true;
	                }
	                resi = inscode[0].split("-");
	                if( resi.length === 1 ){
	                    resi = parseInt( resi[0] );
	                    if( isNaN( resi ) ){
	                        throw new Error( "resi must be an integer" );
	                    }
	                    if( negate ) resi *= -1;
	                    sele.rules.push( {
	                        resno: resi
	                    } );
	                }else if( resi.length === 2 ){
	                    if( negate ) resi[0] *= -1;
	                    if( negate2 ) resi[1] *= -1;
	                    sele.rules.push( {
	                        resno: [ parseInt( resi[0] ), parseInt( resi[1] ) ]
	                    } );
	                }else{
	                    throw new Error( "resi range must contain one '-'" );
	                }
	            }

	            // round up

	            if( sele.rules.length === 1 ){
	                pushRule( sele.rules[ 0 ] );
	            }else if( sele.rules.length > 1 ){
	                pushRule( sele );
	            }else{
	                throw new Error( "empty selection chunk" );
	            }

	        }

	        // cleanup

	        if( this.selection.operator === undefined &&
	                this.selection.rules.length === 1 &&
	                this.selection.rules[ 0 ].hasOwnProperty( "operator" ) ){

	            this.selection = this.selection.rules[ 0 ];

	        }

	    },

	    _makeTest: function( fn, selection ){

	        if( selection === undefined ) selection = this.selection;
	        if( selection === null ) return false;
	        if( selection.error ) return false;

	        var n = selection.rules.length;
	        if( n === 0 ) return false;

	        var t = selection.negate ? false : true;
	        var f = selection.negate ? true : false;

	        var s, and, ret, na;
	        var subTests = [];

	        for( var i = 0; i < n; ++i ){
	            s = selection.rules[ i ];
	            if( s.hasOwnProperty( "operator" ) ){
	                subTests[ i ] = this._makeTest( fn, s );
	            }
	        }

	        // ( x and y ) can short circuit on false
	        // ( x or y ) can short circuit on true
	        // not ( x and y )

	        return function( entity ){

	            and = selection.operator === "AND";
	            na = false;

	            for( var i = 0; i < n; ++i ){

	                s = selection.rules[ i ];

	                if( s.hasOwnProperty( "operator" ) ){

	                    if( subTests[ i ] ){
	                        ret = subTests[ i ]( entity );
	                    }else{
	                        ret = -1;
	                    }

	                    if( ret === -1 ){
	                        // return -1;
	                        na = true;
	                        continue;
	                    }else if( ret === true){
	                        if( and ){ continue; }else{ return t; }
	                    }else{
	                        if( and ){ return f; }else{ continue; }
	                    }

	                }else{

	                    if( s.keyword===kwd.ALL ){
	                        if( and ){ continue; }else{ return t; }
	                    }

	                    ret = fn( entity, s );

	                    // console.log( entity.qualifiedName(), ret, s, selection.negate, "t", t, "f", f )

	                    if( ret === -1 ){
	                        // return -1;
	                        na = true;
	                        continue;
	                    }else if( ret === true){
	                        if( and ){ continue; }else{ return t; }
	                    }else{
	                        if( and ){ return f; }else{ continue; }
	                    }

	                }

	            }

	            if( na ){
	                return -1;
	            }else{
	                if( and ){ return t; }else{ return f; }
	            }

	        };

	    },

	    _filter: function( fn, selection ){

	        if( selection === undefined ) selection = this.selection;
	        if( selection.error ) return selection;

	        var n = selection.rules.length;
	        if( n === 0 ) return selection;

	        var filtered = {
	            operator: selection.operator,
	            rules: []
	        };
	        if( selection.hasOwnProperty( "negate" ) ){
	            filtered.negate = selection.negate;
	        }

	        for( var i = 0; i < n; ++i ){

	            var s = selection.rules[ i ];
	            if( s.hasOwnProperty( "operator" ) ){
	                var fs = this._filter( fn, s );
	                if( fs !== null ) filtered.rules.push( fs );
	            }else if( !fn( s ) ){
	                filtered.rules.push( s );
	            }

	        }

	        if( filtered.rules.length > 0 ){

	            // TODO maybe the filtered rules could be returned
	            // in some case, but the way how tests are applied
	            // e.g. when traversing a structure would also need
	            // to change
	            return selection;
	            // return filtered;

	        }else{

	            return null;

	        }

	    },

	    makeAtomTest: function( atomOnly ){

	        var helixTypes = [ "h", "g", "i" ];
	        var sheetTypes = [ "e", "b" ];

	        var selection;

	        if( atomOnly ){

	            // console.log( this.selection )

	            selection = this._filter( function( s ){
	                if( s.keyword!==undefined &&
	                        s.keyword!==kwd.BACKBONE && s.keyword!==kwd.SIDECHAIN
	                ) return true;
	                if( s.model!==undefined ) return true;
	                if( s.chainname!==undefined ) return true;
	                if( s.resname!==undefined ) return true;
	                if( s.resno!==undefined ) return true;
	                if( s.sstruc!==undefined ) return true;
	                return false;
	            } );

	        }else{

	            selection = this.selection;

	        }

	        var fn = function( a, s ){

	            // returning -1 means the rule is not applicable
	            if( s.atomname===undefined && s.element===undefined &&
	                    s.altloc===undefined && s.atomindex===undefined &&
	                    // s.keyword!==kwd.BACKBONE && s.keyword!==kwd.SIDECHAIN &&
	                    s.keyword===undefined && s.inscode===undefined &&
	                    s.resname===undefined && s.sstruc===undefined &&
	                    s.resno===undefined && s.chainname===undefined &&
	                    s.model===undefined
	            ) return -1;

	            if( s.keyword!==undefined ){
	                if( s.keyword===kwd.BACKBONE && !a.isBackbone() ) return false;
	                if( s.keyword===kwd.SIDECHAIN && !a.isSidechain() ) return false;

	                if( s.keyword===kwd.HETERO && !a.isHetero() ) return false;
	                if( s.keyword===kwd.PROTEIN && !a.isProtein() ) return false;
	                if( s.keyword===kwd.NUCLEIC && !a.isNucleic() ) return false;
	                if( s.keyword===kwd.RNA && !a.isRna() ) return false;
	                if( s.keyword===kwd.DNA && !a.isDna() ) return false;
	                if( s.keyword===kwd.POLYMER && !a.isPolymer() ) return false;
	                if( s.keyword===kwd.WATER && !a.isWater() ) return false;
	                if( s.keyword===kwd.HELIX && helixTypes.indexOf( a.sstruc )===-1 ) return false;
	                if( s.keyword===kwd.SHEET && sheetTypes.indexOf( a.sstruc )===-1 ) return false;
	                if( s.keyword===kwd.ION && !a.isIon() ) return false;
	                if( s.keyword===kwd.SACCHARIDE && !a.isSaccharide() ) return false;
	            }

	            if( s.atomname!==undefined && s.atomname!==a.atomname ) return false;
	            if( s.element!==undefined && s.element!==a.element ) return false;
	            if( s.altloc!==undefined && s.altloc!==a.altloc ) return false;

	            if( s.atomindex!==undefined &&
	                    binarySearchIndexOf( s.atomindex, a.index ) < 0
	            ) return false;

	            if( s.resname!==undefined && s.resname!==a.resname ) return false;
	            if( s.sstruc!==undefined && s.sstruc!==a.sstruc ) return false;
	            if( s.resno!==undefined ){
	                if( Array.isArray( s.resno ) && s.resno.length===2 ){
	                    if( s.resno[0]>a.resno || s.resno[1]<a.resno ) return false;
	                }else{
	                    if( s.resno!==a.resno ) return false;
	                }
	            }
	            if( s.inscode!==undefined && s.inscode!==a.inscode ) return false;

	            if( s.chainname!==undefined && s.chainname!==a.chainname ) return false;
	            if( s.model!==undefined && s.model!==a.modelIndex ) return false;

	            return true;

	        };

	        return this._makeTest( fn, selection );

	    },

	    makeResidueTest: function( residueOnly ){

	        var helixTypes = [ "h", "g", "i" ];
	        var sheetTypes = [ "e", "b" ];

	        var selection;

	        if( residueOnly ){

	            // console.log( this.selection )

	            selection = this._filter( function( s ){
	                if( s.keyword===kwd.BACKBONE || s.keyword===kwd.SIDECHAIN ) return true;
	                if( s.model!==undefined ) return true;
	                if( s.chainname!==undefined ) return true;
	                if( s.atomname!==undefined ) return true;
	                if( s.element!==undefined ) return true;
	                if( s.altloc!==undefined ) return true;
	                if( s.atomindex!==undefined ) return true;
	                return false;
	            } );

	        }else{

	            selection = this.selection;

	        }

	        var fn = function( r, s ){

	            // returning -1 means the rule is not applicable
	            if( s.resname===undefined && s.resno===undefined && s.inscode===undefined &&
	                    s.sstruc===undefined && s.model===undefined && s.chainname===undefined &&
	                    ( s.keyword===undefined || s.keyword===kwd.BACKBONE || s.keyword===kwd.SIDECHAIN )
	            ) return -1;

	            if( s.keyword!==undefined ){
	                if( s.keyword===kwd.HETERO && !r.isHetero() ) return false;
	                if( s.keyword===kwd.PROTEIN && !r.isProtein() ) return false;
	                if( s.keyword===kwd.NUCLEIC && !r.isNucleic() ) return false;
	                if( s.keyword===kwd.RNA && !r.isRna() ) return false;
	                if( s.keyword===kwd.DNA && !r.isDna() ) return false;
	                if( s.keyword===kwd.POLYMER && !r.isPolymer() ) return false;
	                if( s.keyword===kwd.WATER && !r.isWater() ) return false;
	                if( s.keyword===kwd.HELIX && helixTypes.indexOf( r.sstruc )===-1 ) return false;
	                if( s.keyword===kwd.SHEET && sheetTypes.indexOf( r.sstruc )===-1 ) return false;
	                if( s.keyword===kwd.ION && !r.isIon() ) return false;
	                if( s.keyword===kwd.SACCHARIDE && !r.isSaccharide() ) return false;
	            }

	            if( s.resname!==undefined && s.resname!==r.resname ) return false;
	            if( s.sstruc!==undefined && s.sstruc!==r.sstruc ) return false;
	            if( s.resno!==undefined ){
	                if( Array.isArray( s.resno ) && s.resno.length===2 ){
	                    if( s.resno[0]>r.resno || s.resno[1]<r.resno ) return false;
	                }else{
	                    if( s.resno!==r.resno ) return false;
	                }
	            }
	            if( s.inscode!==undefined && s.inscode!==r.inscode ) return false;

	            if( s.chainname!==undefined && s.chainname!==r.chainname ) return false;
	            if( s.model!==undefined && s.model!==r.modelIndex ) return false;

	            return true;

	        };

	        return this._makeTest( fn, selection );

	    },

	    makeChainTest: function( chainOnly ){

	        var selection;

	        if( chainOnly ){

	            // console.log( this.selection )

	            selection = this._filter( function( s ){
	                if( s.keyword!==undefined ) return true;
	                // if( s.model!==undefined ) return true;
	                if( s.resname!==undefined ) return true;
	                if( s.resno!==undefined ) return true;
	                if( s.atomname!==undefined ) return true;
	                if( s.element!==undefined ) return true;
	                if( s.altloc!==undefined ) return true;
	                if( s.sstruc!==undefined ) return true;
	                if( s.inscode!==undefined ) return true;
	                if( s.atomindex!==undefined ) return true;
	                return false;
	            } );

	        }else{

	            selection = this.selection;

	        }

	        var fn = function( c, s ){

	            // returning -1 means the rule is not applicable
	            if( s.chainname===undefined && s.model===undefined ) return -1;

	            if( s.chainname!==undefined && s.chainname!==c.chainname ) return false;

	            if( s.model!==undefined && s.model!==c.modelIndex ) return false;

	            return true;

	        };

	        return this._makeTest( fn, selection );

	    },

	    makeModelTest: function( modelOnly ){

	        var selection;

	        if( modelOnly ){

	            // console.log( this.selection )

	            selection = this._filter( function( s ){
	                if( s.keyword!==undefined ) return true;
	                if( s.chainname!==undefined ) return true;
	                if( s.resname!==undefined ) return true;
	                if( s.resno!==undefined ) return true;
	                if( s.atomname!==undefined ) return true;
	                if( s.element!==undefined ) return true;
	                if( s.altloc!==undefined ) return true;
	                if( s.sstruc!==undefined ) return true;
	                if( s.inscode!==undefined ) return true;
	                if( s.atomindex!==undefined ) return true;
	                return false;
	            } );

	        }else{

	            selection = this.selection;

	        }

	        var fn = function( m, s ){

	            // returning -1 means the rule is not applicable
	            if( s.model===undefined ) return -1;

	            if( s.model!==undefined && s.model!==m.index ) return false;

	            return true;

	        };

	        return this._makeTest( fn, selection );

	    }

	};

	/**
	 * @file Math Utils
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function degToRad( deg ){
	    return deg * 0.01745;  // deg * Math.PI / 180
	}

	function radToDeg( rad ){
	    return rad * 57.29578;  // rad * 180 / Math.PI
	}


	var generateUUID = function(){

	    // http://www.broofa.com/Tools/Math.uuid.htm

	    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
	    var uuid = new Array( 36 );
	    var rnd = 0, r;

	    return function(){

	        for( var i = 0; i < 36; i ++ ){
	            if( i === 8 || i === 13 || i === 18 || i === 23 ){
	                uuid[ i ] = '-';
	            }else if( i === 14 ){
	                uuid[ i ] = '4';
	            }else{
	                if( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
	                r = rnd & 0xf;
	                rnd = rnd >> 4;
	                uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];
	            }
	        }

	        return uuid.join( '' );

	    };

	}();

	/**
	 * @file Structure Constants
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	// molecule types
	var UnknownType = 0;
	var WaterType = 1;
	var IonType = 2;
	var ProteinType = 3;
	var RnaType = 4;
	var DnaType = 5;
	var SaccharideType = 6;


	// backbone types
	var UnknownBackboneType = 0;
	var ProteinBackboneType = 1;
	var RnaBackboneType = 2;
	var DnaBackboneType = 3;
	var CgProteinBackboneType = 4;
	var CgRnaBackboneType = 5;
	var CgDnaBackboneType = 6;


	// chemical component types
	var ChemCompProtein = [
	    "D-BETA-PEPTIDE, C-GAMMA LINKING", "D-GAMMA-PEPTIDE, C-DELTA LINKING",
	    "D-PEPTIDE COOH CARBOXY TERMINUS", "D-PEPTIDE NH3 AMINO TERMINUS", "D-PEPTIDE LINKING",
	    "L-BETA-PEPTIDE, C-GAMMA LINKING", "L-GAMMA-PEPTIDE, C-DELTA LINKING",
	    "L-PEPTIDE COOH CARBOXY TERMINUS", "L-PEPTIDE NH3 AMINO TERMINUS", "L-PEPTIDE LINKING",
	    "PEPTIDE LINKING", "PEPTIDE-LIKE"
	];
	var ChemCompRna = [
	    "RNA OH 3 PRIME TERMINUS", "RNA OH 5 PRIME TERMINUS", "RNA LINKING"
	];
	var ChemCompDna = [
	    "DNA OH 3 PRIME TERMINUS", "DNA OH 5 PRIME TERMINUS", "DNA LINKING",
	    "L-DNA LINKING", "L-RNA LINKING"
	];
	var ChemCompSaccharide = [
	    "D-SACCHARIDE", "D-SACCHARIDE 1,4 AND 1,4 LINKING", "D-SACCHARIDE 1,4 AND 1,6 LINKING",
	    "L-SACCHARIDE", "L-SACCHARIDE 1,4 AND 1,4 LINKING", "L-SACCHARIDE 1,4 AND 1,6 LINKING",
	    "SACCHARIDE"
	];
	var ChemCompOther = [
	    "OTHER"
	];
	var ChemCompNonPolymer = [
	    "NON-POLYMER"
	];
	var ChemCompHetero = ChemCompNonPolymer.concat( ChemCompOther, ChemCompSaccharide );


	// http://dx.doi.org/10.1021/jp8111556 (or 2.0)
	var VdwRadii = {
	    "H": 1.1, "HE": 1.4, "LI": 1.81, "BE": 1.53, "B": 1.92, "C": 1.7,
	    "N": 1.55, "O": 1.52, "F": 1.47, "NE": 1.54, "NA": 2.27, "MG": 1.73, "AL": 1.84,
	    "SI": 2.1, "P": 1.8, "S": 1.8, "CL": 1.75, "AR": 1.88, "K": 2.75, "CA": 2.31,
	    "SC": 2.3, "TI": 2.15, "V": 2.05, "CR": 2.05, "MN": 2.05, "FE": 2.05, "CO": 2.0,
	    "NI": 2.0, "CU": 2.0, "ZN": 2.1, "GA": 1.87, "GE": 2.11, "AS": 1.85, "SE": 1.9,
	    "BR": 1.83, "KR": 2.02, "RB": 3.03, "SR": 2.49, "Y": 2.4, "ZR": 2.3, "NB": 2.15,
	    "MO": 2.1, "TC": 2.05, "RU": 2.05, "RH": 2.0, "PD": 2.05, "AG": 2.1, "CD": 2.2,
	    "IN": 2.2, "SN": 1.93, "SB": 2.17, "TE": 2.06, "I": 1.98, "XE": 2.16, "CS": 3.43,
	    "BA": 2.68, "LA": 2.5, "CE": 2.48, "PR": 2.47, "ND": 2.45, "PM": 2.43, "SM": 2.42,
	    "EU": 2.4, "GD": 2.38, "TB": 2.37, "DY": 2.35, "HO": 2.33, "ER": 2.32, "TM": 2.3,
	    "YB": 2.28, "LU": 2.27, "HF": 2.25, "TA": 2.2, "W": 2.1, "RE": 2.05, "OS": 2.0,
	    "IR": 2.0, "PT": 2.05, "AU": 2.1, "HG": 2.05, "TL": 1.96, "PB": 2.02, "BI": 2.07,
	    "PO": 1.97, "AT": 2.02, "RN": 2.2, "FR": 3.48, "RA": 2.83, "AC": 2.0, "TH": 2.4,
	    "PA": 2.0, "U": 2.3, "NP": 2.0, "PU": 2.0, "AM": 2.0, "CM": 2.0, "BK": 2.0,
	    "CF": 2.0, "ES": 2.0, "FM": 2.0, "MD": 2.0, "NO": 2.0, "LR": 2.0, "RF": 2.0,
	    "DB": 2.0, "SG": 2.0, "BH": 2.0, "HS": 2.0, "MT": 2.0, "DS": 2.0, "RG": 2.0,
	    "CN": 2.0, "UUT": 2.0, "FL": 2.0, "UUP": 2.0, "LV": 2.0, "UUH": 2.0
	};
	var DefaultVdwRadius = 2.0;


	// http://dx.doi.org/10.1039/b801115j (or 1.6)
	var CovalentRadii = {
	    "H": 0.31, "HE": 0.28, "LI": 1.28, "BE": 0.96, "B": 0.84, "C": 0.76,
	    "N": 0.71, "O": 0.66, "F": 0.57, "NE": 0.58, "NA": 1.66, "MG": 1.41, "AL": 1.21,
	    "SI": 1.11, "P": 1.07, "S": 1.05, "CL": 1.02, "AR": 1.06, "K": 2.03, "CA": 1.76,
	    "SC": 1.7, "TI": 1.6, "V": 1.53, "CR": 1.39, "MN": 1.39, "FE": 1.32, "CO": 1.26,
	    "NI": 1.24, "CU": 1.32, "ZN": 1.22, "GA": 1.22, "GE": 1.2, "AS": 1.19, "SE": 1.2,
	    "BR": 1.2, "KR": 1.16, "RB": 2.2, "SR": 1.95, "Y": 1.9, "ZR": 1.75, "NB": 1.64,
	    "MO": 1.54, "TC": 1.47, "RU": 1.46, "RH": 1.42, "PD": 1.39, "AG": 1.45, "CD": 1.44,
	    "IN": 1.42, "SN": 1.39, "SB": 1.39, "TE": 1.38, "I": 1.39, "XE": 1.4, "CS": 2.44,
	    "BA": 2.15, "LA": 2.07, "CE": 2.04, "PR": 2.03, "ND": 2.01, "PM": 1.99, "SM": 1.98,
	    "EU": 1.98, "GD": 1.96, "TB": 1.94, "DY": 1.92, "HO": 1.92, "ER": 1.89, "TM": 1.9,
	    "YB": 1.87, "LU": 1.87, "HF": 1.75, "TA": 1.7, "W": 1.62, "RE": 1.51, "OS": 1.44,
	    "IR": 1.41, "PT": 1.36, "AU": 1.36, "HG": 1.32, "TL": 1.45, "PB": 1.46, "BI": 1.48,
	    "PO": 1.4, "AT": 1.5, "RN": 1.5, "FR": 2.6, "RA": 2.21, "AC": 2.15, "TH": 2.06,
	    "PA": 2.0, "U": 1.96, "NP": 1.9, "PU": 1.87, "AM": 1.8, "CM": 1.69, "BK": 1.6,
	    "CF": 1.6, "ES": 1.6, "FM": 1.6, "MD": 1.6, "NO": 1.6, "LR": 1.6, "RF": 1.6,
	    "DB": 1.6, "SG": 1.6, "BH": 1.6, "HS": 1.6, "MT": 1.6, "DS": 1.6, "RG": 1.6,
	    "CN": 1.6, "UUT": 1.6, "FL": 1.6, "UUP": 1.6, "LV": 1.6, "UUH": 1.6
	};
	var DefaultCovalentRadius = 1.6;


	// http://blanco.biomol.uci.edu/Whole_residue_HFscales.txt
	var ResidueHydrophobicity = {
	    // AA  DGwif   DGwoct  Oct-IF
	    "ALA": [  0.17,  0.50,  0.33 ],
	    "ARG": [  0.81,  1.81,  1.00 ],
	    "ASN": [  0.42,  0.85,  0.43 ],
	    "ASP": [  1.23,  3.64,  2.41 ],
	    "ASH": [ -0.07,  0.43,  0.50 ],
	    "CYS": [ -0.24, -0.02,  0.22 ],
	    "GLN": [  0.58,  0.77,  0.19 ],
	    "GLU": [  2.02,  3.63,  1.61 ],
	    "GLH": [ -0.01,  0.11,  0.12 ],
	    "GLY": [  0.01,  1.15,  1.14 ],
	    // "His+": [  0.96,  2.33,  1.37 ],
	    "HIS": [  0.17,  0.11, -0.06 ],
	    "ILE": [ -0.31, -1.12, -0.81 ],
	    "LEU": [ -0.56, -1.25, -0.69 ],
	    "LYS": [  0.99,  2.80,  1.81 ],
	    "MET": [ -0.23, -0.67, -0.44 ],
	    "PHE": [ -1.13, -1.71, -0.58 ],
	    "PRO": [  0.45,  0.14, -0.31 ],
	    "SER": [  0.13,  0.46,  0.33 ],
	    "THR": [  0.14,  0.25,  0.11 ],
	    "TRP": [ -1.85, -2.09, -0.24 ],
	    "TYR": [ -0.94, -0.71,  0.23 ],
	    "VAL": [  0.07, -0.46, -0.53 ]
	};
	var DefaultResidueHydrophobicity = [ 0.00, 0.00, 0.00 ];


	var AA1 = {
	    'HIS': 'H',
	    'ARG': 'R',
	    'LYS': 'K',
	    'ILE': 'I',
	    'PHE': 'F',
	    'LEU': 'L',
	    'TRP': 'W',
	    'ALA': 'A',
	    'MET': 'M',
	    'PRO': 'P',
	    'CYS': 'C',
	    'ASN': 'N',
	    'VAL': 'V',
	    'GLY': 'G',
	    'SER': 'S',
	    'GLN': 'Q',
	    'TYR': 'Y',
	    'ASP': 'D',
	    'GLU': 'E',
	    'THR': 'T',

	    'ASH': 'D',
	    'GLH': 'E',

	    'UNK': '',
	};

	var AA3 = Object.keys( AA1 );

	var RnaBases = [ "A", "C", "T", "G", "U" ];

	var DnaBases = [ "DA", "DC", "DT", "DG", "DU", "TCY", "MCY", "5CM" ];

	var PurinBases = [ "A", "G", "DA", "DG" ];

	var WaterNames = [ "SOL", "WAT", "HOH", "H2O", "W", "DOD", "D3O" ];

	var IonNames = [
	    "3CO", "3NI", "4MO", "6MO", "AG", "AL", "AU", "AU3", "BA", "BR", "CA",
	    "CD", "CE", "CL", "CO", "CR", "CU", "CU1", "CU3", "F", "FE", "FE2", "GA",
	    "K", "LI", "MG", "MN", "MN3", "NA", "ND4", "NH4", "NI", "OH", "RB", "SR",
	    "V", "Y1", "YT3", "ZN"
	];


	var ProteinBackboneAtoms = [
	    "CA", "C", "N", "O",
	    "O1", "O2", "OC1", "OC2", "OX1", "OXT",
	    "H", "H1", "H2", "H3", "HA",
	    "BB"
	];

	var NucleicBackboneAtoms = [
	    "P", "O3'", "O5'", "C5'", "C4'", "C3'", "OP1", "OP2",
	    "O3*", "O5*", "C5*", "C4*", "C3*"
	];


	var ResidueTypeAtoms = {};

	ResidueTypeAtoms[ ProteinBackboneType ] = {
	    trace: "CA",
	    direction1: "C",
	    direction2: [ "O", "OC1", "O1", "OX1", "OXT" ],
	    backboneStart: "N",
	    backboneEnd: "C",
	};

	ResidueTypeAtoms[ RnaBackboneType ] = {
	    trace: [ "C4'", "C4*" ],
	    direction1: [ "C1'", "C1*" ],
	    direction2: [ "C3'", "C3*" ],
	    backboneStart: "P",
	    backboneEnd: [ "O3'", "O3*" ]
	};

	ResidueTypeAtoms[ DnaBackboneType ] = {
	    trace: [ "C3'", "C3*" ],
	    direction1: [ "C2'", "C2*" ],
	    direction2: [ "O4'", "O4*" ],
	    backboneStart: "P",
	    backboneEnd: [ "O3'", "O3*" ]
	};

	ResidueTypeAtoms[ CgProteinBackboneType ] = {
	    trace: [ "CA", "BB" ],
	    backboneStart: [ "CA", "BB" ],
	    backboneEnd: [ "CA", "BB" ],
	};

	ResidueTypeAtoms[ CgRnaBackboneType ] = {
	    trace: [ "C4'", "C4*", "P" ],
	    backboneStart: [ "C4'", "C4*", "P" ],
	    backboneEnd: [ "C4'", "C4*", "P" ],
	};

	ResidueTypeAtoms[ CgDnaBackboneType ] = {
	    trace: [ "C3'", "C3*", "C2'", "P" ],  // C2' is used in martini ff
	    backboneStart: [ "C3'", "C3*", "C2'", "P" ],
	    backboneEnd: [ "C3'", "C3*", "C2'", "P" ],
	};

	ResidueTypeAtoms[ UnknownBackboneType ] = {};

	// changed to be usable as an es6 module, ASR

	/**
	 * @license
	 *
	 * chroma.js - JavaScript library for color conversions
	 *
	 * Copyright (c) 2011-2015, Gregor Aisch
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice, this
	 *    list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 *    this list of conditions and the following disclaimer in the documentation
	 *    and/or other materials provided with the distribution.
	 *
	 * 3. The name Gregor Aisch may not be used to endorse or promote products
	 *    derived from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *
	 */

	  var Color$1;
	var DEG2RAD;
	var LAB_CONSTANTS;
	var PI;
	var PITHIRD;
	var RAD2DEG;
	var TWOPI;
	var _guess_formats;
	var _guess_formats_sorted;
	var _input;
	var _interpolators;
	var abs;
	var atan2;
	var bezier;
	var blend;
	var blend_f;
	var brewer;
	var burn;
	var chroma;
	var clip_rgb;
	var cmyk2rgb;
	var colors;
	var cos;
	var css2rgb;
	var darken;
	var dodge;
	var each;
	var floor;
	var hex2rgb;
	var hsi2rgb;
	var hsl2css;
	var hsl2rgb;
	var hsv2rgb;
	var interpolate;
	var interpolate_hsx;
	var interpolate_lab;
	var interpolate_num;
	var interpolate_rgb;
	var lab2lch;
	var lab2rgb;
	var lab_xyz;
	var lch2lab;
	var lch2rgb;
	var lighten;
	var limit;
	var log;
	var luminance_x;
	var m;
	var max;
	var multiply;
	var normal;
	var num2rgb;
	var overlay;
	var pow;
	var rgb2cmyk;
	var rgb2css;
	var rgb2hex;
	var rgb2hsi;
	var rgb2hsl;
	var rgb2hsv;
	var rgb2lab;
	var rgb2lch;
	var rgb2luminance;
	var rgb2num;
	var rgb2temperature;
	var rgb2xyz;
	var rgb_xyz;
	var rnd;
	var round;
	var screen$1;
	var sin;
	var sqrt;
	var temperature2rgb;
	var type;
	var unpack;
	var w3cx11;
	var xyz_lab;
	var xyz_rgb;
	var slice = [].slice;
	type = (function() {

	    /*
	    for browser-safe type checking+
	    ported from jQuery's $.type
	     */
	    var classToType, len, name, o, ref;
	    classToType = {};
	    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
	    for (o = 0, len = ref.length; o < len; o++) {
	      name = ref[o];
	      classToType["[object " + name + "]"] = name.toLowerCase();
	    }
	    return function(obj) {
	      var strType;
	      strType = Object.prototype.toString.call(obj);
	      return classToType[strType] || "object";
	    };
	  })();

	  limit = function(x, min, max) {
	    if (min == null) {
	      min = 0;
	    }
	    if (max == null) {
	      max = 1;
	    }
	    if (x < min) {
	      x = min;
	    }
	    if (x > max) {
	      x = max;
	    }
	    return x;
	  };

	  unpack = function(args) {
	    if (args.length >= 3) {
	      return [].slice.call(args);
	    } else {
	      return args[0];
	    }
	  };

	  clip_rgb = function(rgb) {
	    var i;
	    for (i in rgb) {
	      if (i < 3) {
	        if (rgb[i] < 0) {
	          rgb[i] = 0;
	        }
	        if (rgb[i] > 255) {
	          rgb[i] = 255;
	        }
	      } else if (i === 3) {
	        if (rgb[i] < 0) {
	          rgb[i] = 0;
	        }
	        if (rgb[i] > 1) {
	          rgb[i] = 1;
	        }
	      }
	    }
	    return rgb;
	  };

	  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

	  TWOPI = PI * 2;

	  PITHIRD = PI / 3;

	  DEG2RAD = PI / 180;

	  RAD2DEG = 180 / PI;

	  chroma = function() {
	    if (arguments[0] instanceof Color$1) {
	      return arguments[0];
	    }
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, arguments, function(){});
	  };

	  _interpolators = [];

	  chroma.version = '1.1.1';


	  /**
	      chroma.js

	      Copyright (c) 2011-2013, Gregor Aisch
	      All rights reserved.

	      Redistribution and use in source and binary forms, with or without
	      modification, are permitted provided that the following conditions are met:

	      * Redistributions of source code must retain the above copyright notice, this
	        list of conditions and the following disclaimer.

	      * Redistributions in binary form must reproduce the above copyright notice,
	        this list of conditions and the following disclaimer in the documentation
	        and/or other materials provided with the distribution.

	      * The name Gregor Aisch may not be used to endorse or promote products
	        derived from this software without specific prior written permission.

	      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	      @source: https://github.com/gka/chroma.js
	   */

	  _input = {};

	  _guess_formats = [];

	  _guess_formats_sorted = false;

	  Color$1 = (function() {
	    function Color() {
	      var arg, args, chk, len, len1, me, mode, o, w;
	      me = this;
	      args = [];
	      for (o = 0, len = arguments.length; o < len; o++) {
	        arg = arguments[o];
	        if (arg != null) {
	          args.push(arg);
	        }
	      }
	      mode = args[args.length - 1];
	      if (_input[mode] != null) {
	        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
	      } else {
	        if (!_guess_formats_sorted) {
	          _guess_formats = _guess_formats.sort(function(a, b) {
	            return b.p - a.p;
	          });
	          _guess_formats_sorted = true;
	        }
	        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
	          chk = _guess_formats[w];
	          mode = chk.test.apply(chk, args);
	          if (mode) {
	            break;
	          }
	        }
	        if (mode) {
	          me._rgb = clip_rgb(_input[mode].apply(_input, args));
	        }
	      }
	      if (me._rgb == null) {
	        console.warn('unknown format: ' + args);
	      }
	      if (me._rgb == null) {
	        me._rgb = [0, 0, 0];
	      }
	      if (me._rgb.length === 3) {
	        me._rgb.push(1);
	      }
	    }

	    Color.prototype.alpha = function(alpha) {
	      if (arguments.length) {
	        this._rgb[3] = alpha;
	        return this;
	      }
	      return this._rgb[3];
	    };

	    Color.prototype.toString = function() {
	      return this.name();
	    };

	    return Color;

	  })();

	  chroma._input = _input;


	  /**
	  	ColorBrewer colors for chroma.js

	  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
	  	Pennsylvania State University.

	  	Licensed under the Apache License, Version 2.0 (the "License");
	  	you may not use this file except in compliance with the License.
	  	You may obtain a copy of the License at
	  	http://www.apache.org/licenses/LICENSE-2.0

	  	Unless required by applicable law or agreed to in writing, software distributed
	  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
	  	specific language governing permissions and limitations under the License.

	      @preserve
	   */

	  chroma.brewer = brewer = {
	    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
	    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
	    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
	    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
	    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
	    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
	    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
	    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
	    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
	    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
	    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
	    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
	    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
	    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
	    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
	    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
	    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
	    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
	    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
	    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
	    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
	    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
	    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
	    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
	    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
	    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
	    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
	    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
	    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
	    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
	    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
	    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
	    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
	    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
	    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
	  };


	  /**
	  	X11 color names

	  	http://www.w3.org/TR/css3-color/#svg-color
	   */

	  w3cx11 = {
	    indigo: "#4b0082",
	    gold: "#ffd700",
	    hotpink: "#ff69b4",
	    firebrick: "#b22222",
	    indianred: "#cd5c5c",
	    yellow: "#ffff00",
	    mistyrose: "#ffe4e1",
	    darkolivegreen: "#556b2f",
	    olive: "#808000",
	    darkseagreen: "#8fbc8f",
	    pink: "#ffc0cb",
	    tomato: "#ff6347",
	    lightcoral: "#f08080",
	    orangered: "#ff4500",
	    navajowhite: "#ffdead",
	    lime: "#00ff00",
	    palegreen: "#98fb98",
	    darkslategrey: "#2f4f4f",
	    greenyellow: "#adff2f",
	    burlywood: "#deb887",
	    seashell: "#fff5ee",
	    mediumspringgreen: "#00fa9a",
	    fuchsia: "#ff00ff",
	    papayawhip: "#ffefd5",
	    blanchedalmond: "#ffebcd",
	    chartreuse: "#7fff00",
	    dimgray: "#696969",
	    black: "#000000",
	    peachpuff: "#ffdab9",
	    springgreen: "#00ff7f",
	    aquamarine: "#7fffd4",
	    white: "#ffffff",
	    orange: "#ffa500",
	    lightsalmon: "#ffa07a",
	    darkslategray: "#2f4f4f",
	    brown: "#a52a2a",
	    ivory: "#fffff0",
	    dodgerblue: "#1e90ff",
	    peru: "#cd853f",
	    lawngreen: "#7cfc00",
	    chocolate: "#d2691e",
	    crimson: "#dc143c",
	    forestgreen: "#228b22",
	    darkgrey: "#a9a9a9",
	    lightseagreen: "#20b2aa",
	    cyan: "#00ffff",
	    mintcream: "#f5fffa",
	    silver: "#c0c0c0",
	    antiquewhite: "#faebd7",
	    mediumorchid: "#ba55d3",
	    skyblue: "#87ceeb",
	    gray: "#808080",
	    darkturquoise: "#00ced1",
	    goldenrod: "#daa520",
	    darkgreen: "#006400",
	    floralwhite: "#fffaf0",
	    darkviolet: "#9400d3",
	    darkgray: "#a9a9a9",
	    moccasin: "#ffe4b5",
	    saddlebrown: "#8b4513",
	    grey: "#808080",
	    darkslateblue: "#483d8b",
	    lightskyblue: "#87cefa",
	    lightpink: "#ffb6c1",
	    mediumvioletred: "#c71585",
	    slategrey: "#708090",
	    red: "#ff0000",
	    deeppink: "#ff1493",
	    limegreen: "#32cd32",
	    darkmagenta: "#8b008b",
	    palegoldenrod: "#eee8aa",
	    plum: "#dda0dd",
	    turquoise: "#40e0d0",
	    lightgrey: "#d3d3d3",
	    lightgoldenrodyellow: "#fafad2",
	    darkgoldenrod: "#b8860b",
	    lavender: "#e6e6fa",
	    maroon: "#800000",
	    yellowgreen: "#9acd32",
	    sandybrown: "#f4a460",
	    thistle: "#d8bfd8",
	    violet: "#ee82ee",
	    navy: "#000080",
	    magenta: "#ff00ff",
	    dimgrey: "#696969",
	    tan: "#d2b48c",
	    rosybrown: "#bc8f8f",
	    olivedrab: "#6b8e23",
	    blue: "#0000ff",
	    lightblue: "#add8e6",
	    ghostwhite: "#f8f8ff",
	    honeydew: "#f0fff0",
	    cornflowerblue: "#6495ed",
	    slateblue: "#6a5acd",
	    linen: "#faf0e6",
	    darkblue: "#00008b",
	    powderblue: "#b0e0e6",
	    seagreen: "#2e8b57",
	    darkkhaki: "#bdb76b",
	    snow: "#fffafa",
	    sienna: "#a0522d",
	    mediumblue: "#0000cd",
	    royalblue: "#4169e1",
	    lightcyan: "#e0ffff",
	    green: "#008000",
	    mediumpurple: "#9370db",
	    midnightblue: "#191970",
	    cornsilk: "#fff8dc",
	    paleturquoise: "#afeeee",
	    bisque: "#ffe4c4",
	    slategray: "#708090",
	    darkcyan: "#008b8b",
	    khaki: "#f0e68c",
	    wheat: "#f5deb3",
	    teal: "#008080",
	    darkorchid: "#9932cc",
	    deepskyblue: "#00bfff",
	    salmon: "#fa8072",
	    darkred: "#8b0000",
	    steelblue: "#4682b4",
	    palevioletred: "#db7093",
	    lightslategray: "#778899",
	    aliceblue: "#f0f8ff",
	    lightslategrey: "#778899",
	    lightgreen: "#90ee90",
	    orchid: "#da70d6",
	    gainsboro: "#dcdcdc",
	    mediumseagreen: "#3cb371",
	    lightgray: "#d3d3d3",
	    mediumturquoise: "#48d1cc",
	    lemonchiffon: "#fffacd",
	    cadetblue: "#5f9ea0",
	    lightyellow: "#ffffe0",
	    lavenderblush: "#fff0f5",
	    coral: "#ff7f50",
	    purple: "#800080",
	    aqua: "#00ffff",
	    whitesmoke: "#f5f5f5",
	    mediumslateblue: "#7b68ee",
	    darkorange: "#ff8c00",
	    mediumaquamarine: "#66cdaa",
	    darksalmon: "#e9967a",
	    beige: "#f5f5dc",
	    blueviolet: "#8a2be2",
	    azure: "#f0ffff",
	    lightsteelblue: "#b0c4de",
	    oldlace: "#fdf5e6",
	    rebeccapurple: "#663399"
	  };

	  chroma.colors = colors = w3cx11;

	  lab2rgb = function() {
	    var a, args, b, g, l, r, x, y, z;
	    args = unpack(arguments);
	    l = args[0], a = args[1], b = args[2];
	    y = (l + 16) / 116;
	    x = isNaN(a) ? y : y + a / 500;
	    z = isNaN(b) ? y : y - b / 200;
	    y = LAB_CONSTANTS.Yn * lab_xyz(y);
	    x = LAB_CONSTANTS.Xn * lab_xyz(x);
	    z = LAB_CONSTANTS.Zn * lab_xyz(z);
	    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
	    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
	    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
	    r = limit(r, 0, 255);
	    g = limit(g, 0, 255);
	    b = limit(b, 0, 255);
	    return [r, g, b, args.length > 3 ? args[3] : 1];
	  };

	  xyz_rgb = function(r) {
	    return round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055));
	  };

	  lab_xyz = function(t) {
	    if (t > LAB_CONSTANTS.t1) {
	      return t * t * t;
	    } else {
	      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
	    }
	  };

	  LAB_CONSTANTS = {
	    Kn: 18,
	    Xn: 0.950470,
	    Yn: 1,
	    Zn: 1.088830,
	    t0: 0.137931034,
	    t1: 0.206896552,
	    t2: 0.12841855,
	    t3: 0.008856452
	  };

	  rgb2lab = function() {
	    var b, g, r, ref, ref1, x, y, z;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
	    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
	  };

	  rgb_xyz = function(r) {
	    if ((r /= 255) <= 0.04045) {
	      return r / 12.92;
	    } else {
	      return pow((r + 0.055) / 1.055, 2.4);
	    }
	  };

	  xyz_lab = function(t) {
	    if (t > LAB_CONSTANTS.t3) {
	      return pow(t, 1 / 3);
	    } else {
	      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
	    }
	  };

	  rgb2xyz = function() {
	    var b, g, r, ref, x, y, z;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    r = rgb_xyz(r);
	    g = rgb_xyz(g);
	    b = rgb_xyz(b);
	    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
	    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
	    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
	    return [x, y, z];
	  };

	  chroma.lab = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['lab']), function(){});
	  };

	  _input.lab = lab2rgb;

	  Color$1.prototype.lab = function() {
	    return rgb2lab(this._rgb);
	  };

	  bezier = function(colors) {
	    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
	    colors = (function() {
	      var len, o, results;
	      results = [];
	      for (o = 0, len = colors.length; o < len; o++) {
	        c = colors[o];
	        results.push(chroma(c));
	      }
	      return results;
	    })();
	    if (colors.length === 2) {
	      ref = (function() {
	        var len, o, results;
	        results = [];
	        for (o = 0, len = colors.length; o < len; o++) {
	          c = colors[o];
	          results.push(c.lab());
	        }
	        return results;
	      })(), lab0 = ref[0], lab1 = ref[1];
	      I = function(t) {
	        var i, lab;
	        lab = (function() {
	          var o, results;
	          results = [];
	          for (i = o = 0; o <= 2; i = ++o) {
	            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
	          }
	          return results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 3) {
	      ref1 = (function() {
	        var len, o, results;
	        results = [];
	        for (o = 0, len = colors.length; o < len; o++) {
	          c = colors[o];
	          results.push(c.lab());
	        }
	        return results;
	      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
	      I = function(t) {
	        var i, lab;
	        lab = (function() {
	          var o, results;
	          results = [];
	          for (i = o = 0; o <= 2; i = ++o) {
	            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
	          }
	          return results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 4) {
	      ref2 = (function() {
	        var len, o, results;
	        results = [];
	        for (o = 0, len = colors.length; o < len; o++) {
	          c = colors[o];
	          results.push(c.lab());
	        }
	        return results;
	      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
	      I = function(t) {
	        var i, lab;
	        lab = (function() {
	          var o, results;
	          results = [];
	          for (i = o = 0; o <= 2; i = ++o) {
	            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
	          }
	          return results;
	        })();
	        return chroma.lab.apply(chroma, lab);
	      };
	    } else if (colors.length === 5) {
	      I0 = bezier(colors.slice(0, 3));
	      I1 = bezier(colors.slice(2, 5));
	      I = function(t) {
	        if (t < 0.5) {
	          return I0(t * 2);
	        } else {
	          return I1((t - 0.5) * 2);
	        }
	      };
	    }
	    return I;
	  };

	  chroma.bezier = function(colors) {
	    var f;
	    f = bezier(colors);
	    f.scale = function() {
	      return chroma.scale(f);
	    };
	    return f;
	  };


	  /*
	      chroma.js

	      Copyright (c) 2011-2013, Gregor Aisch
	      All rights reserved.

	      Redistribution and use in source and binary forms, with or without
	      modification, are permitted provided that the following conditions are met:

	      * Redistributions of source code must retain the above copyright notice, this
	        list of conditions and the following disclaimer.

	      * Redistributions in binary form must reproduce the above copyright notice,
	        this list of conditions and the following disclaimer in the documentation
	        and/or other materials provided with the distribution.

	      * The name Gregor Aisch may not be used to endorse or promote products
	        derived from this software without specific prior written permission.

	      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	      @source: https://github.com/gka/chroma.js
	   */

	  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
	    var dh, dl, f;
	    if (start == null) {
	      start = 300;
	    }
	    if (rotations == null) {
	      rotations = -1.5;
	    }
	    if (hue == null) {
	      hue = 1;
	    }
	    if (gamma == null) {
	      gamma = 1;
	    }
	    if (lightness == null) {
	      lightness = [0, 1];
	    }
	    dl = lightness[1] - lightness[0];
	    dh = 0;
	    f = function(fract) {
	      var a, amp, b, cos_a, g, h, l, r, sin_a;
	      a = TWOPI * ((start + 120) / 360 + rotations * fract);
	      l = pow(lightness[0] + dl * fract, gamma);
	      h = dh !== 0 ? hue[0] + fract * dh : hue;
	      amp = h * l * (1 - l) / 2;
	      cos_a = cos(a);
	      sin_a = sin(a);
	      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
	      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
	      b = l + amp * (+1.97294 * cos_a);
	      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
	    };
	    f.start = function(s) {
	      if (s == null) {
	        return start;
	      }
	      start = s;
	      return f;
	    };
	    f.rotations = function(r) {
	      if (r == null) {
	        return rotations;
	      }
	      rotations = r;
	      return f;
	    };
	    f.gamma = function(g) {
	      if (g == null) {
	        return gamma;
	      }
	      gamma = g;
	      return f;
	    };
	    f.hue = function(h) {
	      if (h == null) {
	        return hue;
	      }
	      hue = h;
	      if (type(hue) === 'array') {
	        dh = hue[1] - hue[0];
	        if (dh === 0) {
	          hue = hue[1];
	        }
	      } else {
	        dh = 0;
	      }
	      return f;
	    };
	    f.lightness = function(h) {
	      if (h == null) {
	        return lightness;
	      }
	      lightness = h;
	      if (type(lightness) === 'array') {
	        dl = lightness[1] - lightness[0];
	        if (dl === 0) {
	          lightness = lightness[1];
	        }
	      } else {
	        dl = 0;
	      }
	      return f;
	    };
	    f.scale = function() {
	      return chroma.scale(f);
	    };
	    f.hue(hue);
	    return f;
	  };

	  chroma.random = function() {
	    var code, digits, i, o;
	    digits = '0123456789abcdef';
	    code = '#';
	    for (i = o = 0; o < 6; i = ++o) {
	      code += digits.charAt(floor(Math.random() * 16));
	    }
	    return new Color$1(code);
	  };

	  _input.rgb = function() {
	    var k, ref, results, v;
	    ref = unpack(arguments);
	    results = [];
	    for (k in ref) {
	      v = ref[k];
	      results.push(v);
	    }
	    return results;
	  };

	  chroma.rgb = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['rgb']), function(){});
	  };

	  Color$1.prototype.rgb = function() {
	    return this._rgb.slice(0, 3);
	  };

	  Color$1.prototype.rgba = function() {
	    return this._rgb;
	  };

	  _guess_formats.push({
	    p: 15,
	    test: function(n) {
	      var a;
	      a = unpack(arguments);
	      if (type(a) === 'array' && a.length === 3) {
	        return 'rgb';
	      }
	      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
	        return 'rgb';
	      }
	    }
	  });

	  hex2rgb = function(hex) {
	    var a, b, g, r, rgb, u;
	    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
	      if (hex.length === 4 || hex.length === 7) {
	        hex = hex.substr(1);
	      }
	      if (hex.length === 3) {
	        hex = hex.split("");
	        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	      }
	      u = parseInt(hex, 16);
	      r = u >> 16;
	      g = u >> 8 & 0xFF;
	      b = u & 0xFF;
	      return [r, g, b, 1];
	    }
	    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
	      if (hex.length === 9) {
	        hex = hex.substr(1);
	      }
	      u = parseInt(hex, 16);
	      r = u >> 24 & 0xFF;
	      g = u >> 16 & 0xFF;
	      b = u >> 8 & 0xFF;
	      a = round((u & 0xFF) / 0xFF * 100) / 100;
	      return [r, g, b, a];
	    }
	    if ((_input.css != null) && (rgb = _input.css(hex))) {
	      return rgb;
	    }
	    throw "unknown color: " + hex;
	  };

	  rgb2hex = function(channels, mode) {
	    var a, b, g, hxa, r, str, u;
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
	    u = r << 16 | g << 8 | b;
	    str = "000000" + u.toString(16);
	    str = str.substr(str.length - 6);
	    hxa = '0' + round(a * 255).toString(16);
	    hxa = hxa.substr(hxa.length - 2);
	    return "#" + (function() {
	      switch (mode.toLowerCase()) {
	        case 'rgba':
	          return str + hxa;
	        case 'argb':
	          return hxa + str;
	        default:
	          return str;
	      }
	    })();
	  };

	  _input.hex = function(h) {
	    return hex2rgb(h);
	  };

	  chroma.hex = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['hex']), function(){});
	  };

	  Color$1.prototype.hex = function(mode) {
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    return rgb2hex(this._rgb, mode);
	  };

	  _guess_formats.push({
	    p: 10,
	    test: function(n) {
	      if (arguments.length === 1 && type(n) === "string") {
	        return 'hex';
	      }
	    }
	  });

	  hsl2rgb = function() {
	    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
	    args = unpack(arguments);
	    h = args[0], s = args[1], l = args[2];
	    if (s === 0) {
	      r = g = b = l * 255;
	    } else {
	      t3 = [0, 0, 0];
	      c = [0, 0, 0];
	      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      t1 = 2 * l - t2;
	      h /= 360;
	      t3[0] = h + 1 / 3;
	      t3[1] = h;
	      t3[2] = h - 1 / 3;
	      for (i = o = 0; o <= 2; i = ++o) {
	        if (t3[i] < 0) {
	          t3[i] += 1;
	        }
	        if (t3[i] > 1) {
	          t3[i] -= 1;
	        }
	        if (6 * t3[i] < 1) {
	          c[i] = t1 + (t2 - t1) * 6 * t3[i];
	        } else if (2 * t3[i] < 1) {
	          c[i] = t2;
	        } else if (3 * t3[i] < 2) {
	          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
	        } else {
	          c[i] = t1;
	        }
	      }
	      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
	    }
	    if (args.length > 3) {
	      return [r, g, b, args[3]];
	    } else {
	      return [r, g, b];
	    }
	  };

	  rgb2hsl = function(r, g, b) {
	    var h, l, min, ref, s;
	    if (r !== void 0 && r.length >= 3) {
	      ref = r, r = ref[0], g = ref[1], b = ref[2];
	    }
	    r /= 255;
	    g /= 255;
	    b /= 255;
	    min = Math.min(r, g, b);
	    max = Math.max(r, g, b);
	    l = (max + min) / 2;
	    if (max === min) {
	      s = 0;
	      h = Number.NaN;
	    } else {
	      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
	    }
	    if (r === max) {
	      h = (g - b) / (max - min);
	    } else if (g === max) {
	      h = 2 + (b - r) / (max - min);
	    } else if (b === max) {
	      h = 4 + (r - g) / (max - min);
	    }
	    h *= 60;
	    if (h < 0) {
	      h += 360;
	    }
	    return [h, s, l];
	  };

	  chroma.hsl = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['hsl']), function(){});
	  };

	  _input.hsl = hsl2rgb;

	  Color$1.prototype.hsl = function() {
	    return rgb2hsl(this._rgb);
	  };

	  hsv2rgb = function() {
	    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
	    args = unpack(arguments);
	    h = args[0], s = args[1], v = args[2];
	    v *= 255;
	    if (s === 0) {
	      r = g = b = v;
	    } else {
	      if (h === 360) {
	        h = 0;
	      }
	      if (h > 360) {
	        h -= 360;
	      }
	      if (h < 0) {
	        h += 360;
	      }
	      h /= 60;
	      i = floor(h);
	      f = h - i;
	      p = v * (1 - s);
	      q = v * (1 - s * f);
	      t = v * (1 - s * (1 - f));
	      switch (i) {
	        case 0:
	          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
	          break;
	        case 1:
	          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
	          break;
	        case 2:
	          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
	          break;
	        case 3:
	          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
	          break;
	        case 4:
	          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
	          break;
	        case 5:
	          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
	      }
	    }
	    r = round(r);
	    g = round(g);
	    b = round(b);
	    return [r, g, b, args.length > 3 ? args[3] : 1];
	  };

	  rgb2hsv = function() {
	    var b, delta, g, h, min, r, ref, s, v;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    min = Math.min(r, g, b);
	    max = Math.max(r, g, b);
	    delta = max - min;
	    v = max / 255.0;
	    if (max === 0) {
	      h = Number.NaN;
	      s = 0;
	    } else {
	      s = delta / max;
	      if (r === max) {
	        h = (g - b) / delta;
	      }
	      if (g === max) {
	        h = 2 + (b - r) / delta;
	      }
	      if (b === max) {
	        h = 4 + (r - g) / delta;
	      }
	      h *= 60;
	      if (h < 0) {
	        h += 360;
	      }
	    }
	    return [h, s, v];
	  };

	  chroma.hsv = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['hsv']), function(){});
	  };

	  _input.hsv = hsv2rgb;

	  Color$1.prototype.hsv = function() {
	    return rgb2hsv(this._rgb);
	  };

	  num2rgb = function(num) {
	    var b, g, r;
	    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
	      r = num >> 16;
	      g = (num >> 8) & 0xFF;
	      b = num & 0xFF;
	      return [r, g, b, 1];
	    }
	    console.warn("unknown num color: " + num);
	    return [0, 0, 0, 1];
	  };

	  rgb2num = function() {
	    var b, g, r, ref;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    return (r << 16) + (g << 8) + b;
	  };

	  chroma.num = function(num) {
	    return new Color$1(num, 'num');
	  };

	  Color$1.prototype.num = function(mode) {
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    return rgb2num(this._rgb, mode);
	  };

	  _input.num = num2rgb;

	  _guess_formats.push({
	    p: 10,
	    test: function(n) {
	      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
	        return 'num';
	      }
	    }
	  });

	  css2rgb = function(css) {
	    var aa, ab, hsl, i, m, o, rgb, w;
	    css = css.toLowerCase();
	    if ((chroma.colors != null) && chroma.colors[css]) {
	      return hex2rgb(chroma.colors[css]);
	    }
	    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
	      rgb = m.slice(1, 4);
	      for (i = o = 0; o <= 2; i = ++o) {
	        rgb[i] = +rgb[i];
	      }
	      rgb[3] = 1;
	    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      rgb = m.slice(1, 5);
	      for (i = w = 0; w <= 3; i = ++w) {
	        rgb[i] = +rgb[i];
	      }
	    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
	      rgb = m.slice(1, 4);
	      for (i = aa = 0; aa <= 2; i = ++aa) {
	        rgb[i] = round(rgb[i] * 2.55);
	      }
	      rgb[3] = 1;
	    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      rgb = m.slice(1, 5);
	      for (i = ab = 0; ab <= 2; i = ++ab) {
	        rgb[i] = round(rgb[i] * 2.55);
	      }
	      rgb[3] = +rgb[3];
	    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
	      hsl = m.slice(1, 4);
	      hsl[1] *= 0.01;
	      hsl[2] *= 0.01;
	      rgb = hsl2rgb(hsl);
	      rgb[3] = 1;
	    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
	      hsl = m.slice(1, 4);
	      hsl[1] *= 0.01;
	      hsl[2] *= 0.01;
	      rgb = hsl2rgb(hsl);
	      rgb[3] = +m[4];
	    }
	    return rgb;
	  };

	  rgb2css = function(rgba) {
	    var mode;
	    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
	    if (mode === 'rgb') {
	      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
	    } else if (mode === 'rgba') {
	      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
	    } else {

	    }
	  };

	  rnd = function(a) {
	    return round(a * 100) / 100;
	  };

	  hsl2css = function(hsl, alpha) {
	    var mode;
	    mode = alpha < 1 ? 'hsla' : 'hsl';
	    hsl[0] = rnd(hsl[0] || 0);
	    hsl[1] = rnd(hsl[1] * 100) + '%';
	    hsl[2] = rnd(hsl[2] * 100) + '%';
	    if (mode === 'hsla') {
	      hsl[3] = alpha;
	    }
	    return mode + '(' + hsl.join(',') + ')';
	  };

	  _input.css = function(h) {
	    return css2rgb(h);
	  };

	  chroma.css = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['css']), function(){});
	  };

	  Color$1.prototype.css = function(mode) {
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    if (mode.slice(0, 3) === 'rgb') {
	      return rgb2css(this._rgb);
	    } else if (mode.slice(0, 3) === 'hsl') {
	      return hsl2css(this.hsl(), this.alpha());
	    }
	  };

	  _input.named = function(name) {
	    return hex2rgb(w3cx11[name]);
	  };

	  _guess_formats.push({
	    p: 20,
	    test: function(n) {
	      if (arguments.length === 1 && (w3cx11[n] != null)) {
	        return 'named';
	      }
	    }
	  });

	  Color$1.prototype.name = function(n) {
	    var h, k;
	    if (arguments.length) {
	      if (w3cx11[n]) {
	        this._rgb = hex2rgb(w3cx11[n]);
	      }
	      this._rgb[3] = 1;
	      this;
	    }
	    h = this.hex();
	    for (k in w3cx11) {
	      if (h === w3cx11[k]) {
	        return k;
	      }
	    }
	    return h;
	  };

	  lch2lab = function() {

	    /*
	    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
	    These formulas were invented by David Dalrymple to obtain maximum contrast without going
	    out of gamut if the parameters are in the range 0-1.

	    A saturation multiplier was added by Gregor Aisch
	     */
	    var c, h, l, ref;
	    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
	    h = h * DEG2RAD;
	    return [l, cos(h) * c, sin(h) * c];
	  };

	  lch2rgb = function() {
	    var L, a, args, b, c, g, h, l, r, ref, ref1;
	    args = unpack(arguments);
	    l = args[0], c = args[1], h = args[2];
	    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
	    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
	    return [limit(r, 0, 255), limit(g, 0, 255), limit(b, 0, 255), args.length > 3 ? args[3] : 1];
	  };

	  lab2lch = function() {
	    var a, b, c, h, l, ref;
	    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
	    c = sqrt(a * a + b * b);
	    h = (atan2(b, a) * RAD2DEG + 360) % 360;
	    if (round(c * 10000) === 0) {
	      h = Number.NaN;
	    }
	    return [l, c, h];
	  };

	  rgb2lch = function() {
	    var a, b, g, l, r, ref, ref1;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
	    return lab2lch(l, a, b);
	  };

	  chroma.lch = function() {
	    var args;
	    args = unpack(arguments);
	    return new Color$1(args, 'lch');
	  };

	  chroma.hcl = function() {
	    var args;
	    args = unpack(arguments);
	    return new Color$1(args, 'hcl');
	  };

	  _input.lch = lch2rgb;

	  _input.hcl = function() {
	    var c, h, l, ref;
	    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
	    return lch2rgb([l, c, h]);
	  };

	  Color$1.prototype.lch = function() {
	    return rgb2lch(this._rgb);
	  };

	  Color$1.prototype.hcl = function() {
	    return rgb2lch(this._rgb).reverse();
	  };

	  rgb2cmyk = function(mode) {
	    var b, c, f, g, k, m, r, ref, y;
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    r = r / 255;
	    g = g / 255;
	    b = b / 255;
	    k = 1 - Math.max(r, Math.max(g, b));
	    f = k < 1 ? 1 / (1 - k) : 0;
	    c = (1 - r - k) * f;
	    m = (1 - g - k) * f;
	    y = (1 - b - k) * f;
	    return [c, m, y, k];
	  };

	  cmyk2rgb = function() {
	    var alpha, args, b, c, g, k, m, r, y;
	    args = unpack(arguments);
	    c = args[0], m = args[1], y = args[2], k = args[3];
	    alpha = args.length > 4 ? args[4] : 1;
	    if (k === 1) {
	      return [0, 0, 0, alpha];
	    }
	    r = c >= 1 ? 0 : round(255 * (1 - c) * (1 - k));
	    g = m >= 1 ? 0 : round(255 * (1 - m) * (1 - k));
	    b = y >= 1 ? 0 : round(255 * (1 - y) * (1 - k));
	    return [r, g, b, alpha];
	  };

	  _input.cmyk = function() {
	    return cmyk2rgb(unpack(arguments));
	  };

	  chroma.cmyk = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['cmyk']), function(){});
	  };

	  Color$1.prototype.cmyk = function() {
	    return rgb2cmyk(this._rgb);
	  };

	  _input.gl = function() {
	    var i, k, o, rgb, v;
	    rgb = (function() {
	      var ref, results;
	      ref = unpack(arguments);
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push(v);
	      }
	      return results;
	    }).apply(this, arguments);
	    for (i = o = 0; o <= 2; i = ++o) {
	      rgb[i] *= 255;
	    }
	    return rgb;
	  };

	  chroma.gl = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['gl']), function(){});
	  };

	  Color$1.prototype.gl = function() {
	    var rgb;
	    rgb = this._rgb;
	    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
	  };

	  rgb2luminance = function(r, g, b) {
	    var ref;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    r = luminance_x(r);
	    g = luminance_x(g);
	    b = luminance_x(b);
	    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
	  };

	  luminance_x = function(x) {
	    x /= 255;
	    if (x <= 0.03928) {
	      return x / 12.92;
	    } else {
	      return pow((x + 0.055) / 1.055, 2.4);
	    }
	  };

	  _interpolators = [];

	  interpolate = function(col1, col2, f, m) {
	    var interpol, len, o, res;
	    if (f == null) {
	      f = 0.5;
	    }
	    if (m == null) {
	      m = 'rgb';
	    }

	    /*
	    interpolates between colors
	    f = 0 --> me
	    f = 1 --> col
	     */
	    if (type(col1) !== 'object') {
	      col1 = chroma(col1);
	    }
	    if (type(col2) !== 'object') {
	      col2 = chroma(col2);
	    }
	    for (o = 0, len = _interpolators.length; o < len; o++) {
	      interpol = _interpolators[o];
	      if (m === interpol[0]) {
	        res = interpol[1](col1, col2, f, m);
	        break;
	      }
	    }
	    if (res == null) {
	      throw "color mode " + m + " is not supported";
	    }
	    res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
	    return res;
	  };

	  chroma.interpolate = interpolate;

	  Color$1.prototype.interpolate = function(col2, f, m) {
	    return interpolate(this, col2, f, m);
	  };

	  chroma.mix = interpolate;

	  Color$1.prototype.mix = Color$1.prototype.interpolate;

	  interpolate_rgb = function(col1, col2, f, m) {
	    var xyz0, xyz1;
	    xyz0 = col1._rgb;
	    xyz1 = col2._rgb;
	    return new Color$1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
	  };

	  _interpolators.push(['rgb', interpolate_rgb]);

	  Color$1.prototype.luminance = function(lum, mode) {
	    var cur_lum, eps, max_iter, test;
	    if (mode == null) {
	      mode = 'rgb';
	    }
	    if (!arguments.length) {
	      return rgb2luminance(this._rgb);
	    }
	    if (lum === 0) {
	      this._rgb = [0, 0, 0, this._rgb[3]];
	    } else if (lum === 1) {
	      this._rgb = [255, 255, 255, this._rgb[3]];
	    } else {
	      eps = 1e-7;
	      max_iter = 20;
	      test = function(l, h) {
	        var lm, m;
	        m = l.interpolate(h, 0.5, mode);
	        lm = m.luminance();
	        if (Math.abs(lum - lm) < eps || !max_iter--) {
	          return m;
	        }
	        if (lm > lum) {
	          return test(l, m);
	        }
	        return test(m, h);
	      };
	      cur_lum = rgb2luminance(this._rgb);
	      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
	    }
	    return this;
	  };

	  temperature2rgb = function(kelvin) {
	    var b, g, r, temp;
	    temp = kelvin / 100;
	    if (temp < 66) {
	      r = 255;
	      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
	      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
	    } else {
	      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
	      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
	      b = 255;
	    }
	    return clip_rgb([r, g, b]);
	  };

	  rgb2temperature = function() {
	    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    minTemp = 1000;
	    maxTemp = 40000;
	    eps = 0.4;
	    while (maxTemp - minTemp > eps) {
	      temp = (maxTemp + minTemp) * 0.5;
	      rgb = temperature2rgb(temp);
	      if ((rgb[2] / rgb[0]) >= (b / r)) {
	        maxTemp = temp;
	      } else {
	        minTemp = temp;
	      }
	    }
	    return round(temp);
	  };

	  chroma.temperature = chroma.kelvin = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['temperature']), function(){});
	  };

	  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

	  Color$1.prototype.temperature = function() {
	    return rgb2temperature(this._rgb);
	  };

	  Color$1.prototype.kelvin = Color$1.prototype.temperature;

	  chroma.contrast = function(a, b) {
	    var l1, l2, ref, ref1;
	    if ((ref = type(a)) === 'string' || ref === 'number') {
	      a = new Color$1(a);
	    }
	    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
	      b = new Color$1(b);
	    }
	    l1 = a.luminance();
	    l2 = b.luminance();
	    if (l1 > l2) {
	      return (l1 + 0.05) / (l2 + 0.05);
	    } else {
	      return (l2 + 0.05) / (l1 + 0.05);
	    }
	  };

	  Color$1.prototype.get = function(modechan) {
	    var channel, i, me, mode, ref, src;
	    me = this;
	    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
	    src = me[mode]();
	    if (channel) {
	      i = mode.indexOf(channel);
	      if (i > -1) {
	        return src[i];
	      } else {
	        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
	      }
	    } else {
	      return src;
	    }
	  };

	  Color$1.prototype.set = function(modechan, value) {
	    var channel, i, me, mode, ref, src;
	    me = this;
	    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
	    if (channel) {
	      src = me[mode]();
	      i = mode.indexOf(channel);
	      if (i > -1) {
	        if (type(value) === 'string') {
	          switch (value.charAt(0)) {
	            case '+':
	              src[i] += +value;
	              break;
	            case '-':
	              src[i] += +value;
	              break;
	            case '*':
	              src[i] *= +(value.substr(1));
	              break;
	            case '/':
	              src[i] /= +(value.substr(1));
	              break;
	            default:
	              src[i] = +value;
	          }
	        } else {
	          src[i] = value;
	        }
	      } else {
	        console.warn('unknown channel ' + channel + ' in mode ' + mode);
	      }
	    } else {
	      src = value;
	    }
	    me._rgb = chroma(src, mode).alpha(me.alpha())._rgb;
	    return me;
	  };

	  Color$1.prototype.darken = function(amount) {
	    var lab, me;
	    if (amount == null) {
	      amount = 1;
	    }
	    me = this;
	    lab = me.lab();
	    lab[0] -= LAB_CONSTANTS.Kn * amount;
	    return chroma.lab(lab).alpha(me.alpha());
	  };

	  Color$1.prototype.brighten = function(amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    return this.darken(-amount);
	  };

	  Color$1.prototype.darker = Color$1.prototype.darken;

	  Color$1.prototype.brighter = Color$1.prototype.brighten;

	  Color$1.prototype.saturate = function(amount) {
	    var lch, me;
	    if (amount == null) {
	      amount = 1;
	    }
	    me = this;
	    lch = me.lch();
	    lch[1] += amount * LAB_CONSTANTS.Kn;
	    if (lch[1] < 0) {
	      lch[1] = 0;
	    }
	    return chroma.lch(lch).alpha(me.alpha());
	  };

	  Color$1.prototype.desaturate = function(amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    return this.saturate(-amount);
	  };

	  Color$1.prototype.premultiply = function() {
	    var a, rgb;
	    rgb = this.rgb();
	    a = this.alpha();
	    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
	  };

	  blend = function(bottom, top, mode) {
	    if (!blend[mode]) {
	      throw 'unknown blend mode ' + mode;
	    }
	    return blend[mode](bottom, top);
	  };

	  blend_f = function(f) {
	    return function(bottom, top) {
	      var c0, c1;
	      c0 = chroma(top).rgb();
	      c1 = chroma(bottom).rgb();
	      return chroma(f(c0, c1), 'rgb');
	    };
	  };

	  each = function(f) {
	    return function(c0, c1) {
	      var i, o, out;
	      out = [];
	      for (i = o = 0; o <= 3; i = ++o) {
	        out[i] = f(c0[i], c1[i]);
	      }
	      return out;
	    };
	  };

	  normal = function(a, b) {
	    return a;
	  };

	  multiply = function(a, b) {
	    return a * b / 255;
	  };

	  darken = function(a, b) {
	    if (a > b) {
	      return b;
	    } else {
	      return a;
	    }
	  };

	  lighten = function(a, b) {
	    if (a > b) {
	      return a;
	    } else {
	      return b;
	    }
	  };

	  screen$1 = function(a, b) {
	    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
	  };

	  overlay = function(a, b) {
	    if (b < 128) {
	      return 2 * a * b / 255;
	    } else {
	      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
	    }
	  };

	  burn = function(a, b) {
	    return 255 * (1 - (1 - b / 255) / (a / 255));
	  };

	  dodge = function(a, b) {
	    if (a === 255) {
	      return 255;
	    }
	    a = 255 * (b / 255) / (1 - a / 255);
	    if (a > 255) {
	      return 255;
	    } else {
	      return a;
	    }
	  };

	  blend.normal = blend_f(each(normal));

	  blend.multiply = blend_f(each(multiply));

	  blend.screen = blend_f(each(screen$1));

	  blend.overlay = blend_f(each(overlay));

	  blend.darken = blend_f(each(darken));

	  blend.lighten = blend_f(each(lighten));

	  blend.dodge = blend_f(each(dodge));

	  blend.burn = blend_f(each(burn));

	  chroma.blend = blend;

	  chroma.analyze = function(data) {
	    var len, o, r, val;
	    r = {
	      min: Number.MAX_VALUE,
	      max: Number.MAX_VALUE * -1,
	      sum: 0,
	      values: [],
	      count: 0
	    };
	    for (o = 0, len = data.length; o < len; o++) {
	      val = data[o];
	      if ((val != null) && !isNaN(val)) {
	        r.values.push(val);
	        r.sum += val;
	        if (val < r.min) {
	          r.min = val;
	        }
	        if (val > r.max) {
	          r.max = val;
	        }
	        r.count += 1;
	      }
	    }
	    r.domain = [r.min, r.max];
	    r.limits = function(mode, num) {
	      return chroma.limits(r, mode, num);
	    };
	    return r;
	  };

	  chroma.scale = function(colors, positions) {
	    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;
	    _mode = 'rgb';
	    _nacol = chroma('#ccc');
	    _spread = 0;
	    _fixed = false;
	    _domain = [0, 1];
	    _pos = [];
	    _padding = [0, 0];
	    _classes = false;
	    _colors = [];
	    _out = false;
	    _min = 0;
	    _max = 1;
	    _correctLightness = false;
	    _colorCache = {};
	    setColors = function(colors) {
	      var c, col, o, ref, ref1, ref2, w;
	      if (colors == null) {
	        colors = ['#fff', '#000'];
	      }
	      if ((colors != null) && type(colors) === 'string' && (((ref = chroma.brewer) != null ? ref[colors] : void 0) != null)) {
	        colors = chroma.brewer[colors];
	      }
	      if (type(colors) === 'array') {
	        colors = colors.slice(0);
	        for (c = o = 0, ref1 = colors.length - 1; 0 <= ref1 ? o <= ref1 : o >= ref1; c = 0 <= ref1 ? ++o : --o) {
	          col = colors[c];
	          if (type(col) === "string") {
	            colors[c] = chroma(col);
	          }
	        }
	        _pos.length = 0;
	        for (c = w = 0, ref2 = colors.length - 1; 0 <= ref2 ? w <= ref2 : w >= ref2; c = 0 <= ref2 ? ++w : --w) {
	          _pos.push(c / (colors.length - 1));
	        }
	      }
	      resetCache();
	      return _colors = colors;
	    };
	    getClass = function(value) {
	      var i, n;
	      if (_classes != null) {
	        n = _classes.length - 1;
	        i = 0;
	        while (i < n && value >= _classes[i]) {
	          i++;
	        }
	        return i - 1;
	      }
	      return 0;
	    };
	    tmap = function(t) {
	      return t;
	    };
	    classifyValue = function(value) {
	      var i, maxc, minc, n, val;
	      val = value;
	      if (_classes.length > 2) {
	        n = _classes.length - 1;
	        i = getClass(value);
	        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
	        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);
	        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);
	      }
	      return val;
	    };
	    getColor = function(val, bypassMap) {
	      var c, col, i, k, o, p, ref, t;
	      if (bypassMap == null) {
	        bypassMap = false;
	      }
	      if (isNaN(val)) {
	        return _nacol;
	      }
	      if (!bypassMap) {
	        if (_classes && _classes.length > 2) {
	          c = getClass(val);
	          t = c / (_classes.length - 2);
	          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
	        } else if (_max !== _min) {
	          t = (val - _min) / (_max - _min);
	          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
	          t = Math.min(1, Math.max(0, t));
	        } else {
	          t = 1;
	        }
	      } else {
	        t = val;
	      }
	      if (!bypassMap) {
	        t = tmap(t);
	      }
	      k = Math.floor(t * 10000);
	      if (_colorCache[k]) {
	        col = _colorCache[k];
	      } else {
	        if (type(_colors) === 'array') {
	          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
	            p = _pos[i];
	            if (t <= p) {
	              col = _colors[i];
	              break;
	            }
	            if (t >= p && i === _pos.length - 1) {
	              col = _colors[i];
	              break;
	            }
	            if (t > p && t < _pos[i + 1]) {
	              t = (t - p) / (_pos[i + 1] - p);
	              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
	              break;
	            }
	          }
	        } else if (type(_colors) === 'function') {
	          col = _colors(t);
	        }
	        _colorCache[k] = col;
	      }
	      return col;
	    };
	    resetCache = function() {
	      return _colorCache = {};
	    };
	    setColors(colors);
	    f = function(v) {
	      var c;
	      c = chroma(getColor(v));
	      if (_out && c[_out]) {
	        return c[_out]();
	      } else {
	        return c;
	      }
	    };
	    f.classes = function(classes) {
	      var d;
	      if (classes != null) {
	        if (type(classes) === 'array') {
	          _classes = classes;
	          _domain = [classes[0], classes[classes.length - 1]];
	        } else {
	          d = chroma.analyze(_domain);
	          if (classes === 0) {
	            _classes = [d.min, d.max];
	          } else {
	            _classes = chroma.limits(d, 'e', classes);
	          }
	        }
	        return f;
	      }
	      return _classes;
	    };
	    f.domain = function(domain) {
	      var c, d, k, len, o, ref, w;
	      if (!arguments.length) {
	        return _domain;
	      }
	      _min = domain[0];
	      _max = domain[domain.length - 1];
	      _pos = [];
	      k = _colors.length;
	      if (domain.length === k && _min !== _max) {
	        for (o = 0, len = domain.length; o < len; o++) {
	          d = domain[o];
	          _pos.push((d - _min) / (_max - _min));
	        }
	      } else {
	        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
	          _pos.push(c / (k - 1));
	        }
	      }
	      _domain = [_min, _max];
	      return f;
	    };
	    f.mode = function(_m) {
	      if (!arguments.length) {
	        return _mode;
	      }
	      _mode = _m;
	      resetCache();
	      return f;
	    };
	    f.range = function(colors, _pos) {
	      setColors(colors, _pos);
	      return f;
	    };
	    f.out = function(_o) {
	      _out = _o;
	      return f;
	    };
	    f.spread = function(val) {
	      if (!arguments.length) {
	        return _spread;
	      }
	      _spread = val;
	      return f;
	    };
	    f.correctLightness = function(v) {
	      if (v == null) {
	        v = true;
	      }
	      _correctLightness = v;
	      resetCache();
	      if (_correctLightness) {
	        tmap = function(t) {
	          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
	          L0 = getColor(0, true).lab()[0];
	          L1 = getColor(1, true).lab()[0];
	          pol = L0 > L1;
	          L_actual = getColor(t, true).lab()[0];
	          L_ideal = L0 + (L1 - L0) * t;
	          L_diff = L_actual - L_ideal;
	          t0 = 0;
	          t1 = 1;
	          max_iter = 20;
	          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
	            (function() {
	              if (pol) {
	                L_diff *= -1;
	              }
	              if (L_diff < 0) {
	                t0 = t;
	                t += (t1 - t) * 0.5;
	              } else {
	                t1 = t;
	                t += (t0 - t) * 0.5;
	              }
	              L_actual = getColor(t, true).lab()[0];
	              return L_diff = L_actual - L_ideal;
	            })();
	          }
	          return t;
	        };
	      } else {
	        tmap = function(t) {
	          return t;
	        };
	      }
	      return f;
	    };
	    f.padding = function(p) {
	      if (p != null) {
	        if (type(p) === 'number') {
	          p = [p, p];
	        }
	        _padding = p;
	        return f;
	      } else {
	        return _padding;
	      }
	    };
	    f.colors = function() {
	      var dd, dm, i, numColors, o, out, ref, results, samples, w;
	      numColors = 0;
	      out = 'hex';
	      if (arguments.length === 1) {
	        if (type(arguments[0]) === 'string') {
	          out = arguments[0];
	        } else {
	          numColors = arguments[0];
	        }
	      }
	      if (arguments.length === 2) {
	        numColors = arguments[0], out = arguments[1];
	      }
	      if (numColors) {
	        dm = _domain[0];
	        dd = _domain[1] - dm;
	        return (function() {
	          results = [];
	          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
	          return results;
	        }).apply(this).map(function(i) {
	          return f(dm + i / (numColors - 1) * dd)[out]();
	        });
	      }
	      colors = [];
	      samples = [];
	      if (_classes && _classes.length > 2) {
	        for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
	          samples.push((_classes[i - 1] + _classes[i]) * 0.5);
	        }
	      } else {
	        samples = _domain;
	      }
	      return samples.map(function(v) {
	        return f(v)[out]();
	      });
	    };
	    return f;
	  };

	  if (chroma.scales == null) {
	    chroma.scales = {};
	  }

	  chroma.scales.cool = function() {
	    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
	  };

	  chroma.scales.hot = function() {
	    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
	  };

	  chroma.analyze = function(data, key, filter) {
	    var add, k, len, o, r, val, visit;
	    r = {
	      min: Number.MAX_VALUE,
	      max: Number.MAX_VALUE * -1,
	      sum: 0,
	      values: [],
	      count: 0
	    };
	    if (filter == null) {
	      filter = function() {
	        return true;
	      };
	    }
	    add = function(val) {
	      if ((val != null) && !isNaN(val)) {
	        r.values.push(val);
	        r.sum += val;
	        if (val < r.min) {
	          r.min = val;
	        }
	        if (val > r.max) {
	          r.max = val;
	        }
	        r.count += 1;
	      }
	    };
	    visit = function(val, k) {
	      if (filter(val, k)) {
	        if ((key != null) && type(key) === 'function') {
	          return add(key(val));
	        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
	          return add(val[key]);
	        } else {
	          return add(val);
	        }
	      }
	    };
	    if (type(data) === 'array') {
	      for (o = 0, len = data.length; o < len; o++) {
	        val = data[o];
	        visit(val);
	      }
	    } else {
	      for (k in data) {
	        val = data[k];
	        visit(val, k);
	      }
	    }
	    r.domain = [r.min, r.max];
	    r.limits = function(mode, num) {
	      return chroma.limits(r, mode, num);
	    };
	    return r;
	  };

	  chroma.limits = function(data, mode, num) {
	    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, value, values, w;
	    if (mode == null) {
	      mode = 'equal';
	    }
	    if (num == null) {
	      num = 7;
	    }
	    if (type(data) === 'array') {
	      data = chroma.analyze(data);
	    }
	    min = data.min;
	    max = data.max;
	    sum = data.sum;
	    values = data.values.sort(function(a, b) {
	      return a - b;
	    });
	    limits = [];
	    if (mode.substr(0, 1) === 'c') {
	      limits.push(min);
	      limits.push(max);
	    }
	    if (mode.substr(0, 1) === 'e') {
	      limits.push(min);
	      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
	        limits.push(min + (i / num) * (max - min));
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'l') {
	      if (min <= 0) {
	        throw 'Logarithmic scales are only possible for values > 0';
	      }
	      min_log = Math.LOG10E * log(min);
	      max_log = Math.LOG10E * log(max);
	      limits.push(min);
	      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
	        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'q') {
	      limits.push(min);
	      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
	        p = values.length * i / num;
	        pb = floor(p);
	        if (pb === p) {
	          limits.push(values[pb]);
	        } else {
	          pr = p - pb;
	          limits.push(values[pb] * pr + values[pb + 1] * (1 - pr));
	        }
	      }
	      limits.push(max);
	    } else if (mode.substr(0, 1) === 'k') {

	      /*
	      implementation based on
	      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
	      simplified for 1-d input values
	       */
	      n = values.length;
	      assignments = new Array(n);
	      clusterSizes = new Array(num);
	      repeat = true;
	      nb_iters = 0;
	      centroids = null;
	      centroids = [];
	      centroids.push(min);
	      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
	        centroids.push(min + (i / num) * (max - min));
	      }
	      centroids.push(max);
	      while (repeat) {
	        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
	          clusterSizes[j] = 0;
	        }
	        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
	          value = values[i];
	          mindist = Number.MAX_VALUE;
	          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
	            dist = abs(centroids[j] - value);
	            if (dist < mindist) {
	              mindist = dist;
	              best = j;
	            }
	          }
	          clusterSizes[best]++;
	          assignments[i] = best;
	        }
	        newCentroids = new Array(num);
	        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
	          newCentroids[j] = null;
	        }
	        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
	          cluster = assignments[i];
	          if (newCentroids[cluster] === null) {
	            newCentroids[cluster] = values[i];
	          } else {
	            newCentroids[cluster] += values[i];
	          }
	        }
	        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
	          newCentroids[j] *= 1 / clusterSizes[j];
	        }
	        repeat = false;
	        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
	          if (newCentroids[j] !== centroids[i]) {
	            repeat = true;
	            break;
	          }
	        }
	        centroids = newCentroids;
	        nb_iters++;
	        if (nb_iters > 200) {
	          repeat = false;
	        }
	      }
	      kClusters = {};
	      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
	        kClusters[j] = [];
	      }
	      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
	        cluster = assignments[i];
	        kClusters[cluster].push(values[i]);
	      }
	      tmpKMeansBreaks = [];
	      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
	        tmpKMeansBreaks.push(kClusters[j][0]);
	        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
	      }
	      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
	        return a - b;
	      });
	      limits.push(tmpKMeansBreaks[0]);
	      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
	        if (!isNaN(tmpKMeansBreaks[i])) {
	          limits.push(tmpKMeansBreaks[i]);
	        }
	      }
	    }
	    return limits;
	  };

	  hsi2rgb = function(h, s, i) {

	    /*
	    borrowed from here:
	    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
	     */
	    var args, b, g, r;
	    args = unpack(arguments);
	    h = args[0], s = args[1], i = args[2];
	    h /= 360;
	    if (h < 1 / 3) {
	      b = (1 - s) / 3;
	      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      g = 1 - (b + r);
	    } else if (h < 2 / 3) {
	      h -= 1 / 3;
	      r = (1 - s) / 3;
	      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      b = 1 - (r + g);
	    } else {
	      h -= 2 / 3;
	      g = (1 - s) / 3;
	      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
	      r = 1 - (g + b);
	    }
	    r = limit(i * r * 3);
	    g = limit(i * g * 3);
	    b = limit(i * b * 3);
	    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
	  };

	  rgb2hsi = function() {

	    /*
	    borrowed from here:
	    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
	     */
	    var b, g, h, i, min, r, ref, s;
	    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
	    TWOPI = Math.PI * 2;
	    r /= 255;
	    g /= 255;
	    b /= 255;
	    min = Math.min(r, g, b);
	    i = (r + g + b) / 3;
	    s = 1 - min / i;
	    if (s === 0) {
	      h = 0;
	    } else {
	      h = ((r - g) + (r - b)) / 2;
	      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
	      h = Math.acos(h);
	      if (b > g) {
	        h = TWOPI - h;
	      }
	      h /= TWOPI;
	    }
	    return [h * 360, s, i];
	  };

	  chroma.hsi = function() {
	    return (function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Color$1, slice.call(arguments).concat(['hsi']), function(){});
	  };

	  _input.hsi = hsi2rgb;

	  Color$1.prototype.hsi = function() {
	    return rgb2hsi(this._rgb);
	  };

	  interpolate_hsx = function(col1, col2, f, m) {
	    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
	    if (m === 'hsl') {
	      xyz0 = col1.hsl();
	      xyz1 = col2.hsl();
	    } else if (m === 'hsv') {
	      xyz0 = col1.hsv();
	      xyz1 = col2.hsv();
	    } else if (m === 'hsi') {
	      xyz0 = col1.hsi();
	      xyz1 = col2.hsi();
	    } else if (m === 'lch' || m === 'hcl') {
	      m = 'hcl';
	      xyz0 = col1.hcl();
	      xyz1 = col2.hcl();
	    }
	    if (m.substr(0, 1) === 'h') {
	      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
	      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
	    }
	    if (!isNaN(hue0) && !isNaN(hue1)) {
	      if (hue1 > hue0 && hue1 - hue0 > 180) {
	        dh = hue1 - (hue0 + 360);
	      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
	        dh = hue1 + 360 - hue0;
	      } else {
	        dh = hue1 - hue0;
	      }
	      hue = hue0 + f * dh;
	    } else if (!isNaN(hue0)) {
	      hue = hue0;
	      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
	        sat = sat0;
	      }
	    } else if (!isNaN(hue1)) {
	      hue = hue1;
	      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
	        sat = sat1;
	      }
	    } else {
	      hue = Number.NaN;
	    }
	    if (sat == null) {
	      sat = sat0 + f * (sat1 - sat0);
	    }
	    lbv = lbv0 + f * (lbv1 - lbv0);
	    return res = chroma[m](hue, sat, lbv);
	  };

	  _interpolators = _interpolators.concat((function() {
	    var len, o, ref, results;
	    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch'];
	    results = [];
	    for (o = 0, len = ref.length; o < len; o++) {
	      m = ref[o];
	      results.push([m, interpolate_hsx]);
	    }
	    return results;
	  })());

	  interpolate_num = function(col1, col2, f, m) {
	    var n1, n2;
	    n1 = col1.num();
	    n2 = col2.num();
	    return chroma.num(n1 + (n2 - n1) * f, 'num');
	  };

	  _interpolators.push(['num', interpolate_num]);

	  interpolate_lab = function(col1, col2, f, m) {
	    var res, xyz0, xyz1;
	    xyz0 = col1.lab();
	    xyz1 = col2.lab();
	    return res = new Color$1(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
	  };

	  _interpolators.push(['lab', interpolate_lab]);



	var chroma$1 = chroma;

	// import Signal from "../../lib/signals.es6.js";


	// from Jmol http://jmol.sourceforge.net/jscolors/ (or 0xFFFFFF)
	var ElementColors = {
	    "H": 0xFFFFFF, "HE": 0xD9FFFF, "LI": 0xCC80FF, "BE": 0xC2FF00, "B": 0xFFB5B5,
	    "C": 0x909090, "N": 0x3050F8, "O": 0xFF0D0D, "F": 0x90E050, "NE": 0xB3E3F5,
	    "NA": 0xAB5CF2, "MG": 0x8AFF00, "AL": 0xBFA6A6, "SI": 0xF0C8A0, "P": 0xFF8000,
	    "S": 0xFFFF30, "CL": 0x1FF01F, "AR": 0x80D1E3, "K": 0x8F40D4, "CA": 0x3DFF00,
	    "SC": 0xE6E6E6, "TI": 0xBFC2C7, "V": 0xA6A6AB, "CR": 0x8A99C7, "MN": 0x9C7AC7,
	    "FE": 0xE06633, "CO": 0xF090A0, "NI": 0x50D050, "CU": 0xC88033, "ZN": 0x7D80B0,
	    "GA": 0xC28F8F, "GE": 0x668F8F, "AS": 0xBD80E3, "SE": 0xFFA100, "BR": 0xA62929,
	    "KR": 0x5CB8D1, "RB": 0x702EB0, "SR": 0x00FF00, "Y": 0x94FFFF, "ZR": 0x94E0E0,
	    "NB": 0x73C2C9, "MO": 0x54B5B5, "TC": 0x3B9E9E, "RU": 0x248F8F, "RH": 0x0A7D8C,
	    "PD": 0x006985, "AG": 0xC0C0C0, "CD": 0xFFD98F, "IN": 0xA67573, "SN": 0x668080,
	    "SB": 0x9E63B5, "TE": 0xD47A00, "I": 0x940094, "XE": 0x940094, "CS": 0x57178F,
	    "BA": 0x00C900, "LA": 0x70D4FF, "CE": 0xFFFFC7, "PR": 0xD9FFC7, "ND": 0xC7FFC7,
	    "PM": 0xA3FFC7, "SM": 0x8FFFC7, "EU": 0x61FFC7, "GD": 0x45FFC7, "TB": 0x30FFC7,
	    "DY": 0x1FFFC7, "HO": 0x00FF9C, "ER": 0x00E675, "TM": 0x00D452, "YB": 0x00BF38,
	    "LU": 0x00AB24, "HF": 0x4DC2FF, "TA": 0x4DA6FF, "W": 0x2194D6, "RE": 0x267DAB,
	    "OS": 0x266696, "IR": 0x175487, "PT": 0xD0D0E0, "AU": 0xFFD123, "HG": 0xB8B8D0,
	    "TL": 0xA6544D, "PB": 0x575961, "BI": 0x9E4FB5, "PO": 0xAB5C00, "AT": 0x754F45,
	    "RN": 0x428296, "FR": 0x420066, "RA": 0x007D00, "AC": 0x70ABFA, "TH": 0x00BAFF,
	    "PA": 0x00A1FF, "U": 0x008FFF, "NP": 0x0080FF, "PU": 0x006BFF, "AM": 0x545CF2,
	    "CM": 0x785CE3, "BK": 0x8A4FE3, "CF": 0xA136D4, "ES": 0xB31FD4, "FM": 0xB31FBA,
	    "MD": 0xB30DA6, "NO": 0xBD0D87, "LR": 0xC70066, "RF": 0xCC0059, "DB": 0xD1004F,
	    "SG": 0xD90045, "BH": 0xE00038, "HS": 0xE6002E, "MT": 0xEB0026, "DS": 0xFFFFFF,
	    "RG": 0xFFFFFF, "CN": 0xFFFFFF, "UUT": 0xFFFFFF, "FL": 0xFFFFFF, "UUP": 0xFFFFFF,
	    "LV": 0xFFFFFF, "UUH": 0xFFFFFF,

	    "D": 0xFFFFC0, "T": 0xFFFFA0
	};
	var DefaultElementColor = 0xFFFFFF;


	// from Jmol http://jmol.sourceforge.net/jscolors/ (protein + shapely for nucleic)
	var ResidueColors = {
	    "ALA": 0x8CFF8C,
	    "ARG": 0x00007C,
	    "ASN": 0xFF7C70,
	    "ASP": 0xA00042,
	    "CYS": 0xFFFF70,
	    "GLN": 0xFF4C4C,
	    "GLU": 0x660000,
	    "GLY": 0xFFFFFF,
	    "HIS": 0x7070FF,
	    "ILE": 0x004C00,
	    "LEU": 0x455E45,
	    "LYS": 0x4747B8,
	    "MET": 0xB8A042,
	    "PHE": 0x534C52,
	    "PRO": 0x525252,
	    "SER": 0xFF7042,
	    "THR": 0xB84C00,
	    "TRP": 0x4F4600,
	    "TYR": 0x8C704C,
	    "VAL": 0xFF8CFF,

	    "ASX": 0xFF00FF,
	    "GLX": 0xFF00FF,
	    "ASH": 0xFF00FF,
	    "GLH": 0xFF00FF,

	    "A": 0xA0A0FF,
	    "G": 0xFF7070,
	    "I": 0x80FFFF,
	    "C": 0xFF8C4B,
	    "T": 0xA0FFA0,
	    "U": 0xFF8080,

	    "DA": 0xA0A0FF,
	    "DG": 0xFF7070,
	    "DI": 0x80FFFF,
	    "DC": 0xFF8C4B,
	    "DT": 0xA0FFA0,
	    "DU": 0xFF8080
	};
	var DefaultResidueColor = 0xFF00FF;

	// from Jmol http://jmol.sourceforge.net/jscolors/ (shapely)
	var StructureColors = {
	    "alphaHelix": 0xFF0080,
	    "threeTenHelix": 0xA00080,
	    "piHelix": 0x600080,
	    "betaStrand": 0xFFC800,
	    "betaTurn": 0x6080FF,
	    "coil": 0xFFFFFF,

	    "dna": 0xAE00FE,
	    "rna": 0xFD0162,

	    "carbohydrate": 0xA6A6FA
	};
	var DefaultStructureColor = 0x808080;


	function ColorMakerRegistry$1(){

	}

	ColorMakerRegistry$1.prototype = {

	    signals: {

	        // typesChanged: new Signal(),

	    },

	    scales: {

	        "": "",

	        // Sequential
	        "OrRd": "[S] Orange-Red",
	        "PuBu": "[S] Purple-Blue",
	        "BuPu": "[S] Blue-Purple",
	        "Oranges": "[S] Oranges",
	        "BuGn": "[S] Blue-Green",
	        "YlOrBr": "[S] Yellow-Orange-Brown",
	        "YlGn": "[S] Yellow-Green",
	        "Reds": "[S] Reds",
	        "RdPu": "[S] Red-Purple",
	        "Greens": "[S] Greens",
	        "YlGnBu": "[S] Yellow-Green-Blue",
	        "Purples": "[S] Purples",
	        "GnBu": "[S] Green-Blue",
	        "Greys": "[S] Greys",
	        "YlOrRd": "[S] Yellow-Orange-Red",
	        "PuRd": "[S] Purple-Red",
	        "Blues": "[S] Blues",
	        "PuBuGn": "[S] Purple-Blue-Green",

	        // Diverging
	        "Spectral": "[D] Spectral",
	        "RdYlGn": "[D] Red-Yellow-Green",
	        "RdBu": "[D] Red-Blue",
	        "PiYG": "[D] Pink-Yellowgreen",
	        "PRGn": "[D] Purplered-Green",
	        "RdYlBu": "[D] Red-Yellow-Blue",
	        "BrBG": "[D] Brown-Bluegreen",
	        "RdGy": "[D] Red-Grey",
	        "PuOr": "[D] Purple-Orange",

	        // Qualitative
	        "Set1": "[Q] Set1",
	        "Set2": "[Q] Set2",
	        "Set3": "[Q] Set3",
	        "Dark2": "[Q] Dark2",
	        "Paired": "[Q] Paired",
	        "Pastel1": "[Q] Pastel1",
	        "Pastel2": "[Q] Pastel2",
	        "Accent": "[Q] Accent",

	        // Other
	        "roygb": "[?] Rainbow",
	        "rwb": "[?] Red-White-Blue",

	    },

	    modes: {

	        "": "",

	        "rgb": "Red Green Blue",
	        "hsv": "Hue Saturation Value",
	        "hsl": "Hue Saturation Lightness",
	        "hsi": "Hue Saturation Intensity",
	        "lab": "CIE L*a*b*",
	        "hcl": "Hue Chroma Lightness"

	    },

	    userSchemes: {},

	    getScheme: function( params ){

	        var p = params || {};

	        var id = p.scheme || "";

	        var schemeClass;

	        if( id in ColorMakerRegistry$1.types ){

	            schemeClass = ColorMakerRegistry$1.types[ id ];

	        }else if( id in this.userSchemes ){

	            schemeClass = this.userSchemes[ id ];

	        }else{

	            schemeClass = ColorMaker;

	        }

	        return new schemeClass( params );

	    },

	    getPickingScheme: function( params ){

	        var p = Object.assign( params || {} );
	        p.scheme = "picking";

	        return this.getScheme( p );

	    },

	    getTypes: function(){

	        var types = {};

	        Object.keys( ColorMakerRegistry$1.types ).forEach( function( k ){
	            types[ k ] = k;
	        } );

	        Object.keys( this.userSchemes ).forEach( function( k ){
	            types[ k ] = k.split( "|" )[ 1 ];
	        } );

	        return types;

	    },

	    getScales: function(){

	        return this.scales;

	    },

	    getModes: function(){

	        return this.modes;

	    },

	    addScheme: function( scheme, label ){

	        if( !( scheme instanceof ColorMaker ) ){

	            scheme = this.createScheme( scheme, label );

	        }

	        label = label || "";
	        var id = "" + generateUUID() + "|" + label;

	        this.userSchemes[ id ] = scheme;
	        // this.signals.typesChanged.dispatch();

	        return id;

	    },

	    removeScheme: function( id ){

	        delete this.userSchemes[ id ];
	        // this.signals.typesChanged.dispatch();

	    },

	    createScheme: function( constructor, label ){

	        var _ColorMaker = function( params ){

	            ColorMaker.call( this, params );

	            this.label = label || "";

	            constructor.call( this, params );

	        };

	        _ColorMaker.prototype = ColorMaker.prototype;

	        _ColorMaker.prototype.constructor = ColorMaker;

	        return _ColorMaker;

	    },

	    addSelectionScheme: function( pairList, label ){

	        return this.addScheme( function( params ){

	            var colorList = [];
	            var selectionList = [];

	            pairList.forEach( function( pair ){

	                colorList.push( new Color( pair[ 0 ] ).getHex() );
	                selectionList.push( new Selection( pair[ 1 ] ) );

	            } );

	            var n = pairList.length;

	            this.atomColor = function( a ){

	                for( var i = 0; i < n; ++i ){

	                    if( selectionList[ i ].test( a ) ){

	                        return colorList[ i ];

	                    }

	                }

	                return 0xFFFFFF;

	            };

	        }, label );

	    }

	};


	function ColorMaker( params ){

	    var p = params || {};

	    this.scale = p.scale || "uniform";
	    this.mode = p.mode || "hcl";
	    this.domain = p.domain || [ 0, 1 ];
	    this.value = new Color( p.value || 0xFFFFFF ).getHex();

	    this.structure = p.structure;
	    this.volume = p.volume;
	    this.surface = p.surface;

	    if( this.structure ){
	        this.atomProxy = this.structure.getAtomProxy();
	    }

	}

	ColorMaker.prototype = {

	    constructor: ColorMaker,

	    getScale: function( params ){

	        var p = params || {};

	        var scale = p.scale || this.scale;
	        if( scale === "rainbow" || scale === "roygb" ){
	            scale = [ "red", "orange", "yellow", "green", "blue" ];
	        }else if( scale === "rwb" ){
	            scale = [ "red", "white", "blue" ];
	        }

	        return chroma$1
	            .scale( scale )
	            .mode( p.mode || this.mode )
	            .domain( p.domain || this.domain )
	            .out( "num" );

	    },

	    colorToArray: function( color, array, offset ){

	        if( array === undefined ) array = [];
	        if( offset === undefined ) offset = 0;

	        array[ offset + 0 ] = ( color >> 16 & 255 ) / 255;
	        array[ offset + 1 ] = ( color >> 8 & 255 ) / 255;
	        array[ offset + 2 ] = ( color & 255 ) / 255;

	        return array;

	    },

	    atomColor: function( a ){

	        return 0xFFFFFF;

	    },

	    atomColorToArray: function( a, array, offset ){

	        return this.colorToArray(
	            this.atomColor( a ), array, offset
	        );

	    },

	    bondColor: function( b, fromTo ){

	        this.atomProxy.index = fromTo ? b.atomIndex1 : b.atomIndex2;
	        return this.atomColor( this.atomProxy );

	    },

	    bondColorToArray: function( b, fromTo, array, offset ){

	        return this.colorToArray(
	            this.bondColor( b, fromTo ), array, offset
	        );

	    },

	    volumeColor: function( i ){

	        return 0xFFFFFF;

	    },

	    volumeColorToArray: function( i, array, offset ){

	        return this.colorToArray(
	            this.volumeColor( i ), array, offset
	        );

	    },

	    positionColor: function( v ){

	        return 0xFFFFFF;

	    },

	    positionColorToArray: function( v, array, offset ){

	        return this.colorToArray(
	            this.positionColor( v ), array, offset
	        );

	    }

	};


	function VolumeColorMaker( params ){

	    ColorMaker.call( this, params );

	    var valueScale = this.getScale();
	    var volume = this.volume;
	    var inverseMatrix = volume.inverseMatrix;
	    var data = volume.__data;
	    var nx = volume.nx;
	    var ny = volume.ny;
	    var nz = volume.nz;
	    var vec = new Vector3();

	    this.positionColor = function( v ){

	        vec.copy( v );
	        vec.applyMatrix4( inverseMatrix );
	        vec.round();

	        var index = ( ( ( ( vec.z * ny ) + vec.y ) * nx ) + vec.x );

	        return valueScale( data[ index ] );

	    };

	}

	VolumeColorMaker.prototype = ColorMaker.prototype;

	VolumeColorMaker.prototype.constructor = VolumeColorMaker;


	function ValueColorMaker( params ){

	    ColorMaker.call( this, params );

	    var valueScale = this.getScale();

	    this.volumeColor = function( i ){

	        return valueScale( this.volume.data[ i ] );

	    };

	}

	ValueColorMaker.prototype = ColorMaker.prototype;

	ValueColorMaker.prototype.constructor = ValueColorMaker;


	function PickingColorMaker( params ){

	    ColorMaker.call( this, params );

	    var offset;
	    if( this.structure ){
	        offset = this.structure.atomStore.count;
	        if( params.backbone ){
	            offset += this.structure.bondStore.count;
	        }else if( params.rung ){
	            offset += this.structure.bondStore.count;
	            offset += this.structure.backboneBondStore.count;
	        }
	    }

	    this.atomColor = function( a ){

	        return GidPool.getGid( this.structure, a.index );

	    };

	    this.bondColor = function( b, fromTo ){

	        return GidPool.getGid( this.structure, offset + b.index );

	    };

	    this.volumeColor = function( i ){

	        return GidPool.getGid( this.volume, i );

	    };

	}

	PickingColorMaker.prototype = ColorMaker.prototype;

	PickingColorMaker.prototype.constructor = PickingColorMaker;


	function RandomColorMaker( params ){

	    ColorMaker.call( this, params );

	    this.atomColor = function( a ){

	        return Math.random() * 0xFFFFFF;

	    };

	}

	RandomColorMaker.prototype = ColorMaker.prototype;

	RandomColorMaker.prototype.constructor = RandomColorMaker;


	function UniformColorMaker( params ){

	    ColorMaker.call( this, params );

	    var color = this.value;

	    this.atomColor = function(){

	        return color;

	    };

	    this.bondColor = function(){

	        return color;

	    };

	    this.valueColor = function(){

	        return color;

	    };

	}

	UniformColorMaker.prototype = ColorMaker.prototype;

	UniformColorMaker.prototype.constructor = UniformColorMaker;


	function AtomindexColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "roygb";
	    }
	    if( !params.domain ){

	        var scalePerModel = {};

	        this.structure.eachModel( function( mp ){
	            this.domain = [ mp.atomOffset, mp.atomEnd ];
	            scalePerModel[ mp.index ] = this.getScale();
	        }.bind( this ) );

	        this.atomColor = function( a ){
	            return scalePerModel[ a.modelIndex ]( a.index );
	        };

	    }else{

	        var atomindexScale = this.getScale();

	        this.atomColor = function( a ){
	            return atomindexScale( a.index );
	        };

	    }

	}

	AtomindexColorMaker.prototype = ColorMaker.prototype;

	AtomindexColorMaker.prototype.constructor = AtomindexColorMaker;


	function ResidueindexColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "roygb";
	    }
	    if( !params.domain ){

	        // this.domain = [ 0, this.structure.residueStore.count ];

	        var scalePerChain = {};

	        this.structure.eachChain( function( cp ){
	            this.domain = [ cp.residueOffset, cp.residueEnd ];
	            scalePerChain[ cp.index ] = this.getScale();
	        }.bind( this ) );

	        this.atomColor = function( a ){
	            return scalePerChain[ a.chainIndex ]( a.residueIndex );
	        };

	    }else{

	        var residueindexScale = this.getScale();

	        this.atomColor = function( a ){
	            return residueindexScale( a.residueIndex );
	        };

	    }

	}

	ResidueindexColorMaker.prototype = ColorMaker.prototype;

	ResidueindexColorMaker.prototype.constructor = ResidueindexColorMaker;


	function ChainindexColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "Spectral";
	    }
	    if( !params.domain ){

	        // this.domain = [ 0, this.structure.chainStore.count ];

	        var scalePerModel = {};

	        this.structure.eachModel( function( mp ){
	            this.domain = [ mp.chainOffset, mp.chainEnd ];
	            scalePerModel[ mp.index ] = this.getScale();
	        }.bind( this ) );

	        this.atomColor = function( a ){
	            return scalePerModel[ a.modelIndex ]( a.chainIndex );
	        };

	    }else{

	        var chainindexScale = this.getScale();

	        this.atomColor = function( a ){
	            return chainindexScale( a.chainIndex );
	        };

	    }

	}

	ChainindexColorMaker.prototype = ColorMaker.prototype;

	ChainindexColorMaker.prototype.constructor = ChainindexColorMaker;


	function ModelindexColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "roygb";
	    }
	    if( !params.domain ){
	        this.domain = [ 0, this.structure.modelStore.count ];
	    }
	    var modelindexScale = this.getScale();

	    this.atomColor = function( a ){
	        return modelindexScale( a.modelIndex );
	    };

	}

	ModelindexColorMaker.prototype = ColorMaker.prototype;

	ModelindexColorMaker.prototype.constructor = ModelindexColorMaker;


	function SstrucColorMaker( params ){

	    ColorMaker.call( this, params );

	    var rp = this.structure.getResidueProxy();

	    this.atomColor = function( ap ){

	        var sstruc = ap.sstruc;

	        if( sstruc === "h" ){
	            return StructureColors.alphaHelix;
	        }else if( sstruc === "g" ){
	            return StructureColors.threeTenHelix;
	        }else if( sstruc === "i" ){
	            return StructureColors.piHelix;
	        }else if( sstruc === "e" || sstruc === "b" ){
	            return StructureColors.betaStrand;
	        }else{
	            rp.index = ap.residueIndex;
	            if( rp.isNucleic() ){
	                return StructureColors.dna;
	            }else if( rp.isProtein() || sstruc === "s" || sstruc === "t" || sstruc === "l" ){
	                return StructureColors.coil;
	            }else{
	                return DefaultStructureColor;
	            }
	        }

	    };

	}

	SstrucColorMaker.prototype = ColorMaker.prototype;

	SstrucColorMaker.prototype.constructor = SstrucColorMaker;


	function ElementColorMaker( params ){

	    ColorMaker.call( this, params );

	    var colorValue = this.value;
	    if( params.value === undefined ){
	        colorValue = ElementColors.C;
	    }

	    this.atomColor = function( a ){

	        var element = a.element;

	        if( element === "C" ){
	            return colorValue;
	        }else{
	            return ElementColors[ element ] || DefaultElementColor;
	        }

	    };

	}

	ElementColorMaker.prototype = ColorMaker.prototype;

	ElementColorMaker.prototype.constructor = ElementColorMaker;


	function ResnameColorMaker( params ){

	    ColorMaker.call( this, params );

	    this.atomColor = function( a ){
	        return ResidueColors[ a.resname ] || DefaultResidueColor;
	    };

	}

	ResnameColorMaker.prototype = ColorMaker.prototype;

	ResnameColorMaker.prototype.constructor = ResnameColorMaker;


	function BfactorColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "OrRd";
	    }

	    if( !params.domain ){

	        var selection;
	        var min = Infinity;
	        var max = -Infinity;

	        if( params.sele ){
	            selection = new Selection( params.sele );
	        }

	        this.structure.eachAtom( function( a ){
	            var bfactor = a.bfactor;
	            min = Math.min( min, bfactor );
	            max = Math.max( max, bfactor );
	        }, selection );

	        this.domain = [ min, max ];

	    }

	    var bfactorScale = this.getScale();

	    this.atomColor = function( a ){
	        return bfactorScale( a.bfactor );
	    };

	}

	BfactorColorMaker.prototype = ColorMaker.prototype;

	BfactorColorMaker.prototype.constructor = BfactorColorMaker;


	function OccupancyColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "PuBu";
	    }

	    if( !params.domain ){
	        this.domain = [ 0.0, 1.0 ];
	    }

	    var occupancyScale = this.getScale();

	    this.atomColor = function( a ){
	        return occupancyScale( a.occupancy );
	    };

	}

	OccupancyColorMaker.prototype = ColorMaker.prototype;

	OccupancyColorMaker.prototype.constructor = OccupancyColorMaker;


	function HydrophobicityColorMaker( params ){

	    ColorMaker.call( this, params );

	    if( !params.scale ){
	        this.scale = "RdYlGn";
	    }

	    var name;
	    var idx = 0;  // 0: DGwif, 1: DGwoct, 2: Oct-IF

	    var resHF = {};
	    for( name in ResidueHydrophobicity ){
	        resHF[ name ] = ResidueHydrophobicity[ name ][ idx ];
	    }

	    if( !params.domain ){

	        var val;
	        var min = Infinity;
	        var max = -Infinity;

	        for( name in resHF ){

	            val = resHF[ name ];
	            min = Math.min( min, val );
	            max = Math.max( max, val );

	        }

	        this.domain = [ min, 0, max ];

	    }

	    var hfScale = this.getScale();

	    this.atomColor = function( a ){
	        return hfScale( resHF[ a.resname ] || DefaultResidueHydrophobicity );
	    };

	}

	HydrophobicityColorMaker.prototype = ColorMaker.prototype;

	HydrophobicityColorMaker.prototype.constructor = HydrophobicityColorMaker;


	ColorMakerRegistry$1.types = {

	    "": ColorMaker,
	    "picking": PickingColorMaker,
	    "random": RandomColorMaker,
	    "uniform": UniformColorMaker,
	    "atomindex": AtomindexColorMaker,
	    "residueindex": ResidueindexColorMaker,
	    "chainindex": ChainindexColorMaker,
	    "modelindex": ModelindexColorMaker,
	    "sstruc": SstrucColorMaker,
	    "element": ElementColorMaker,
	    "resname": ResnameColorMaker,
	    "bfactor": BfactorColorMaker,
	    "hydrophobicity": HydrophobicityColorMaker,
	    "value": ValueColorMaker,
	    "volume": VolumeColorMaker,
	    "occupancy": OccupancyColorMaker

	};

	var Browser = getBrowser();

	var SupportsReadPixelsFloat = false;
	function setSupportsReadPixelsFloat( value ){
	    SupportsReadPixelsFloat = value;
	}

	var ExtensionFragDepth = false;
	function setExtensionFragDepth( value ){
	    ExtensionFragDepth = value;
	}

	var Log$1 = {
	    log: Function.prototype.bind.call( console.log, console ),
	    info: Function.prototype.bind.call( console.info, console ),
	    warn: Function.prototype.bind.call( console.warn, console ),
	    error: Function.prototype.bind.call( console.error, console ),
	    time: Function.prototype.bind.call( console.time, console ),
	    timeEnd: Function.prototype.bind.call( console.timeEnd, console )
	};

	exports.Debug = boolean( getQuery( "debug" ) );
	function setDebug( value ){
	    exports.Debug = value;
	}

	var GidPool = new GidPool$1();

	var WebglErrorMessage = "<div style=\"display:flex; align-items:center; justify-content:center; height:100%;\"><p style=\"padding:15px; text-align:center;\">Your browser/graphics card does not seem to support <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/WebGL\">WebGL</a>.<br /><br />Find out how to get it <a target=\"_blank\" href=\"http://get.webgl.org/\">here</a>.</p></div>";

	var WorkerRegistry = new WorkerRegistry$1();
	var ColorMakerRegistry = new ColorMakerRegistry$1();
	var DatasourceRegistry = new Registry( "datasource" );
	var RepresentationRegistry = new Registry( "representatation" );
	var ParserRegistry = new Registry( "parser" );

	function PassThroughDatasource(){

	    this.getUrl = function( path ){
	        return path;
	    };

	}


	function StaticDatasource( baseUrl ){

	    baseUrl = baseUrl || "";

	    this.getUrl = function( src ){
	        var info = getFileInfo( src );
	        return getAbsolutePath( baseUrl + info.path );
	    };

	}


	function RcsbDatasource(){

	    var baseUrl = "//files.rcsb.org/download/";
	    var mmtfBaseUrl = "//mmtf.rcsb.org/v0.2/full/";
	    var bbMmtfBaseUrl = "//mmtf.rcsb.org/v0.2/reduced/";

	    this.getUrl = function( src ){
	        // valid path are
	        // XXXX.pdb, XXXX.pdb.gz, XXXX.cif, XXXX.cif.gz, XXXX.mmtf, XXXX.bb.mmtf
	        // XXXX defaults to XXXX.cif
	        var info = getFileInfo( src );
	        var protocol = window.location.protocol;
	        var url;
	        if( [ "pdb", "cif" ].indexOf( info.ext ) !== -1 &&
	            ( info.compressed === false || info.compressed === "gz" )
	        ){
	            url = baseUrl + info.path;
	        }else if( info.ext === "mmtf" ){
	            protocol = "http:";
	            if( info.base.endsWith( ".bb" ) ){
	                url = bbMmtfBaseUrl + info.name;
	            }else{
	                url = mmtfBaseUrl + info.name;
	            }
	        }else if( !info.ext ){
	            url = baseUrl + info.name + ".cif";
	            // url = mmtfBaseUrl + info.name + ".mmtf";
	        }else{
	            Log$1.warn( "unsupported ext", info.ext );
	            url = mmtfBaseUrl + info.name;
	        }
	        return protocol + url;
	    };

	    this.getExt = function( src ){
	        var info = getFileInfo( src );
	        if( info.ext === "mmtf" || !info.ext ){
	            return "mmtf";
	        }
	    };

	}

	function Streamer( src, params ){

	    var p = params || {};

	    this.compressed = p.compressed !== undefined ? p.compressed : false;
	    this.binary = p.binary !== undefined ? p.binary : false;
	    this.json = p.json !== undefined ? p.json : false;

	    this.src = src;
	    this.chunkSize = 1024 * 1024 * 10;
	    this.newline = "\n";

	    this.__pointer = 0;
	    this.__partialLine = "";

	    if( this.__srcName ){
	        this[ this.__srcName ] = src;
	    }

	}

	Streamer.prototype = {

	    constructor: Streamer,

	    type: "",

	    __srcName: undefined,

	    onload: function(){},

	    onprogress: function(){},

	    onerror: function(){},

	    read: function( callback ){

	        this._read( function( data ){

	            if( this.compressed ){

	                this.data = decompress( data );

	            }else{

	                if( this.binary && data instanceof ArrayBuffer ){
	                    data = new Uint8Array( data );
	                }
	                this.data = data;

	            }

	            if( typeof this.onload === "function" ){
	                this.onload( this.data );
	            }
	            callback();

	        }.bind( this ) );

	    },

	    _read: function( callback ){

	        // overwrite this method when this.src does not contain the data

	        callback( this.src );

	    },

	    _chunk: function( start, end ){

	        end = Math.min( this.data.length, end );

	        if( start === 0 && this.data.length === end ){

	            return this.data;

	        }else{

	            if( this.binary || this.compressed ){
	                return this.data.subarray( start, end );
	            }else{
	                return this.data.substring( start, end );
	            }

	        }

	    },

	    chunk: function( start ){

	        var end = start + this.chunkSize;

	        return this._chunk( start, end );

	    },

	    peekLines: function( m ){

	        var data = this.data;
	        var n = data.length;

	        // FIXME does not work for multi-char newline
	        var newline = ( this.binary || this.compressed ) ? this.newline.charCodeAt( 0 ) : this.newline;

	        var i;
	        var count = 0;

	        for( i = 0; i < n; ++i ){

	            if( data[ i ] === newline ) ++count;
	            if( count === m ) break;

	        }

	        var chunk = this._chunk( 0, i + 1 );
	        var d = this.chunkToLines( chunk, "", i > n );

	        return d.lines;

	    },

	    lineCount: function(){

	        console.warn("lineCount - deprecated");

	        var data = this.data;
	        var n = data.length;

	        // FIXME does not work for multi-char newline
	        var newline = ( this.binary || this.compressed ) ? this.newline.charCodeAt( 0 ) : this.newline;

	        var count = 0;
	        for( var i = 0; i < n; ++i ){
	            if( data[ i ] === newline ) ++count;
	        }
	        if( data[ n - 1 ] !== newline ) ++count;

	        return count;

	    },

	    chunkCount: function(){

	        return Math.floor( this.data.length / this.chunkSize ) + 1;

	    },

	    asText: function(){

	        if( this.binary || this.compressed ){
	            return uint8ToString( this.data );
	        }else{
	            return this.data;
	        }

	    },

	    chunkToLines: function( chunk, partialLine, isLast ){

	        var newline = this.newline;

	        if( !this.binary && !this.compressed && chunk.length === this.data.length ){
	            return {
	                lines: chunk.split( newline ),
	                partialLine: ""
	            };
	        }

	        var str = ( this.binary || this.compressed ) ? uint8ToString( chunk ) : chunk;
	        var lines = [];
	        var idx = str.lastIndexOf( newline );

	        if( idx === -1 ){

	            partialLine += str;

	        }else{

	            var str2 = partialLine + str.substr( 0, idx );
	            lines = lines.concat( str2.split( newline ) );

	            if( idx === str.length - newline.length ){
	                partialLine = "";
	            }else{
	                partialLine = str.substr( idx + newline.length );
	            }

	        }

	        if( isLast && partialLine !== "" ){
	            lines.push( partialLine );
	        }

	        return {
	            lines: lines,
	            partialLine: partialLine
	        };

	    },

	    nextChunk: function(){

	        var start = this.__pointer;

	        if( start > this.data.length ){
	            return undefined;
	        }

	        this.__pointer += this.chunkSize;
	        return this.chunk( start );

	    },

	    nextChunkOfLines: function(){

	        var chunk = this.nextChunk();

	        if( chunk === undefined ){
	            return undefined;
	        }

	        var isLast = this.__pointer > this.data.length;
	        var d = this.chunkToLines( chunk, this.__partialLine, isLast );

	        this.__partialLine = d.partialLine;

	        return d.lines;

	    },

	    eachChunk: function( callback ){

	        var chunkSize = this.chunkSize;
	        var n = this.data.length;
	        var chunkCount = this.chunkCount();

	        for( var i = 0; i < n; i += chunkSize ){

	            var chunk = this.chunk( i );
	            var chunkNo = Math.round( i / chunkSize );

	            callback( chunk, chunkNo, chunkCount );

	        }

	    },

	    eachChunkOfLines: function( callback ){

	        var newline = this.newline;

	        this.eachChunk( function( chunk, chunkNo, chunkCount ){

	            var isLast = chunkNo === chunkCount + 1;
	            var d = this.chunkToLines( chunk, this.__partialLine, isLast );

	            this.__partialLine = d.partialLine;

	            callback( d.lines, chunkNo, chunkCount );

	        }.bind( this ) );

	    },

	    dispose: function(){

	        delete this.src;

	        if( this.__srcName ){
	            delete this[ this.__srcName ];
	        }

	    }

	};

	function FileStreamer( file, params ){

	    Streamer.call( this, file, params );

	}

	FileStreamer.prototype = Object.assign( Object.create(

	    Streamer.prototype ), {

	    constructor: FileStreamer,

	    type: "file",

	    __srcName: "file",

	    _read: function( callback ){

	        var reader;

	        if( typeof importScripts === 'function' ){

	            // Use FileReaderSync within Worker

	            reader = new FileReaderSync();
	            var data;
	            if( this.binary || this.compressed ){
	                data = reader.readAsArrayBuffer( this.file );
	            }else{
	                data = reader.readAsText( this.file );
	            }

	            //

	            callback( data );

	        }else{

	            reader = new FileReader();

	            //

	            reader.onload = function( event ){

	                callback( event.target.result );

	            }.bind( this );

	            //

	            if( typeof this.onprogress === "function" ){

	                reader.onprogress = function ( event ) {

	                    this.onprogress( event );

	                }.bind( this );

	            }

	            //

	            if( typeof this.onerror === "function" ){

	                reader.onerror = function ( event ) {

	                    this.onerror( event );

	                }.bind( this );

	            }

	            //

	            if( this.binary || this.compressed ){
	                reader.readAsArrayBuffer( this.file );
	            }else{
	                reader.readAsText( this.file );
	            }

	        }

	    }

	} );

	function NetworkStreamer( url, params ){

	    Streamer.call( this, url, params );

	}

	NetworkStreamer.prototype = Object.assign( Object.create(

	    Streamer.prototype ), {

	    constructor: NetworkStreamer,

	    type: "network",

	    __srcName: "url",

	    _read: function( callback ){

	        var url = this.src;

	        if( typeof importScripts === 'function' ){

	            // FIXME
	            // adjust relative path when inside a web worker
	            if( url.substr( 0, 3 ) === "../" ) url = "../" + url;

	        }

	        var xhr = new XMLHttpRequest();
	        xhr.open( "GET", url, true );

	        //

	        xhr.addEventListener( 'load', function ( event ) {

	            if( xhr.status === 200 || xhr.status === 304 ||
	                // when requesting from local file system
	                // the status in Google Chrome/Chromium is 0
	                xhr.status === 0
	             ){

	                callback( xhr.response );

	            } else {

	                if( typeof this.onerror === "function" ){

	                    this.onerror( xhr.status );

	                }

	                throw "NetworkStreamer._read: status code " + xhr.status;

	            }

	        }.bind( this ), false );

	        //

	        // if( typeof this.onprogress === "function" ){

	        //     xhr.addEventListener( 'progress', function ( event ) {

	        //         this.onprogress( event );

	        //     }.bind( this ), false );

	        // }

	        //

	        if( typeof this.onerror === "function" ){

	            xhr.addEventListener( 'error', function ( event ) {

	                this.onerror( event );

	            }.bind( this ), false );

	        }

	        //

	        if( this.compressed || this.binary ){
	            xhr.responseType = "arraybuffer";
	        }else if( this.json ){
	            xhr.responseType = "json";
	        }
	        // xhr.crossOrigin = true;

	        xhr.send( null );

	        // try {
	        //     xhr.send( null );
	        // }catch( e ){
	        //     if( typeof this.onerror === "function" ){
	        //         this.onerror( e.message );
	        //     }
	        // }

	    }

	} );

	function Loader( src, params ){

	    var p = Object.assign( {}, params );

	    var binaryExtList = [ "mmtf", "dcd", "mrc", "ccp4", "map", "dxbin" ];
	    var binary = binaryExtList.indexOf( p.ext ) !== -1;

	    this.compressed = p.compressed || false;
	    this.binary = p.binary !== undefined ? p.binary : binary;
	    this.name = p.name || "";
	    this.ext = p.ext || "";
	    this.dir = p.dir || "";
	    this.path = p.path || "";
	    this.protocol = p.protocol || "";

	    this.params = params;

	    //

	    var streamerParams = {
	        compressed: this.compressed,
	        binary: this.binary,
	        json: this.ext === "json"
	    };

	    if( ( self.File && src instanceof File ) ||
	        ( self.Blob && src instanceof self.Blob )
	    ){
	        this.streamer = new FileStreamer( src, streamerParams );
	    }else{
	        this.streamer = new NetworkStreamer( src, streamerParams );
	    }

	    if( typeof p.onProgress === "function" ){
	        this.streamer.onprogress = p.onprogress;
	    }

	}

	Loader.prototype = {

	    constructor: Loader,

	    load: function(){

	        return new Promise( function( resolve, reject ){

	            this.streamer.onerror = reject;

	            try{
	                this._load( resolve, reject );
	            }catch( e ){
	                reject( e );
	            }

	        }.bind( this ) );

	    },

	    _load: function( resolve, reject ){

	        reject( "not implemented" );

	    }

	};

	function ParserLoader( src, params ){

	    Loader.call( this, src, params );

	}

	ParserLoader.prototype = Object.assign( Object.create(

	    Loader.prototype ), {

	    constructor: ParserLoader,

	    _load: function( resolve, reject ){

	        var ParserClass = ParserRegistry.get( this.ext );
	        var parser = new ParserClass( this.streamer, this.params );

	        parser.parse( resolve );

	    }

	} );

	function Script( functionBody, name, path ){

	    this.signals = {

	        elementAdded: new Signal(),
	        elementRemoved: new Signal(),
	        nameChanged: new Signal(),

	    };

	    this.name = name;
	    this.path = path;
	    this.dir = path.substring( 0, path.lastIndexOf( '/' ) + 1 );

	    try {

	        // supress warning about string evaluation as code
	        // jshint evil:true
	        this.fn = new Function(

	            'stage', 'panel',
	            '__name__', '__path__', '__dir__',

	            functionBody

	        );

	    }catch( e ){

	        Log$1.error( "Script compilation failed", e );
	        this.fn = null;

	    }

	}

	Script.prototype = {

	    constructor: Script,

	    type: "Script",

	    call: function( stage, onFinish ){

	        var panel = {

	            add: function( element ){

	                this.signals.elementAdded.dispatch( arguments );

	            }.bind( this ),

	            remove: function( element ){

	                this.signals.elementRemoved.dispatch( arguments );

	            }.bind( this ),

	            setName: function( value ){

	                this.signals.nameChanged.dispatch( value );

	            }.bind( this )

	        };

	        if( this.fn ){

	            var args = [
	                stage, panel,
	                this.name, this.path, this.dir
	            ];

	            try{

	                this.fn.apply( null, args );
	                finish();

	            }catch( e ){

	                Log$1.error( "Script.fn", e );
	                error();

	            }

	        }else{

	            Log$1.log( "Script.call no function available" );
	            finish();

	        }

	        function finish(){
	            if( typeof onFinish === "function" ) onFinish();
	        }

	        function error(){
	            panel.add( new UI.Text( "ERROR" ) );
	            finish();
	        }

	    }

	};

	function ScriptLoader( src, params ){

	    Loader.call( this, src, params );

	}

	ScriptLoader.prototype = Object.assign( Object.create(

	    Loader.prototype ), {

	    constructor: ScriptLoader,

	    _load: function( resolve, reject ){

	        this.streamer.read( function(){

	            var text = this.streamer.asText();
	            var script = new Script( text, this.name, this.path );
	            resolve( script );

	        }.bind( this ) );

	    }

	} );

	function PluginLoader( src, params ){

	    Loader.call( this, src, params );

	}

	PluginLoader.prototype = Object.assign( Object.create(

	    Loader.prototype ), {

	    constructor: PluginLoader,

	    _load: function( resolve, reject ){

	        var basePath;
	        if( this.protocol ){
	            basePath = this.protocol + "://" + this.dir;
	        }else{
	            basePath = this.dir;
	        }

	        this.streamer.read( function(){

	            var manifest = JSON.parse( this.streamer.asText() );
	            var promiseList = [];

	            manifest.files.map( function( name ){

	                promiseList.push(
	                    autoLoad( basePath + name, {
	                        ext: "text", useWorker: false
	                    } )
	                );

	            } );

	            Promise.all( promiseList ).then( function( dataList ){

	                var text = dataList.reduce( function( text, value ){
	                    return text + "\n\n" + value.data;
	                }, "" );
	                text += manifest.source || "";

	                var script = new Script( text, this.name, this.path );
	                resolve( script );

	            }.bind( this ) );

	        }.bind( this ) );

	    }

	} );

	function getDataInfo( src ){

	    var info = getFileInfo( src );
	    var datasource = DatasourceRegistry.get( info.protocol );
	    if( datasource ){
	        info = getFileInfo( datasource.getUrl( info.src ) );
	        if( !info.ext && datasource.getExt ){
	            info.ext = datasource.getExt( src );
	        }
	    }
	    return info;
	}


	var loaderMap = {

	    "gro": ParserLoader,
	    "pdb": ParserLoader,
	    "pdb1": ParserLoader,
	    "ent": ParserLoader,
	    "pqr": ParserLoader,
	    "cif": ParserLoader,
	    "mcif": ParserLoader,
	    "mmcif": ParserLoader,
	    "sdf": ParserLoader,
	    "mol2": ParserLoader,
	    "mmtf":  ParserLoader,

	    "dcd": ParserLoader,

	    "mrc": ParserLoader,
	    "ccp4": ParserLoader,
	    "map": ParserLoader,
	    "cube": ParserLoader,
	    "dx": ParserLoader,
	    "dxbin": ParserLoader,

	    "obj": ParserLoader,
	    "ply": ParserLoader,

	    "txt": ParserLoader,
	    "text": ParserLoader,
	    "csv": ParserLoader,
	    "json": ParserLoader,
	    "xml": ParserLoader,

	    "ngl": ScriptLoader,
	    "plugin": PluginLoader,

	};


	/**
	 * Load a file
	 *
	 * @example
	 * // load from URL
	 * NGL.autoLoad( "http://files.rcsb.org/download/5IOS.cif" );
	 *
	 * @example
	 * // load binary data in CCP4 format via a Blob
	 * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
	 * NGL.autoLoad( binaryBlob, { ext: "ccp4" } );
	 *
	 * @example
	 * // load string data in PDB format via a Blob
	 * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
	 * NGL.autoLoad( stringBlob, { ext: "pdb" } );
	 *
	 * @example
	 * // load a File object
	 * NGL.autoLoad( file );
	 *
	 * @param  {String|File|Blob} file - either a URL or an object containing the file data
	 * @param  {Object} params - loading parameters
	 * @param  {String} params.ext - file extension, determines file type
	 * @return {Promise} Promise resolves to the loaded data
	 */
	function autoLoad( file, params ){

	    var p = Object.assign( getDataInfo( file ), params );
	    var loader = new loaderMap[ p.ext ]( p.src, p );

	    if( loader ){
	        return loader.load();
	    }else{
	        return Promise.reject( "autoLoad: ext '" + p.ext + "' unknown" );
	    }

	}

	// changed to be usable as an es6 module, ASR

	/*! sprintf-js v1.0.3 | Copyright (c) 2007-present, Alexandru Marasteanu <hello@alexei.ro> | BSD-3-Clause */

	    var re = {
	        not_string: /[^s]/,
	        not_bool: /[^t]/,
	        not_type: /[^T]/,
	        not_primitive: /[^v]/,
	        number: /[diefg]/,
	        numeric_arg: /bcdiefguxX/,
	        json: /[j]/,
	        not_json: /[^j]/,
	        text: /^[^\x25]+/,
	        modulo: /^\x25{2}/,
	        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
	        key: /^([a-z_][a-z_\d]*)/i,
	        key_access: /^\.([a-z_][a-z_\d]*)/i,
	        index_access: /^\[(\d+)\]/,
	        sign: /^[\+\-]/
	    }

	    function sprintf() {
	        var key = arguments[0], cache = sprintf.cache
	        if (!(cache[key] && cache.hasOwnProperty(key))) {
	            cache[key] = sprintf.parse(key)
	        }
	        return sprintf.format.call(null, cache[key], arguments)
	    }

	    sprintf.format = function(parse_tree, argv) {
	        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ''
	        for (i = 0; i < tree_length; i++) {
	            node_type = get_type(parse_tree[i])
	            if (node_type === 'string') {
	                output[output.length] = parse_tree[i]
	            }
	            else if (node_type === 'array') {
	                match = parse_tree[i] // convenience purposes only
	                if (match[2]) { // keyword argument
	                    arg = argv[cursor]
	                    for (k = 0; k < match[2].length; k++) {
	                        if (!arg.hasOwnProperty(match[2][k])) {
	                            throw new Error(sprintf('[sprintf] property "%s" does not exist', match[2][k]))
	                        }
	                        arg = arg[match[2][k]]
	                    }
	                }
	                else if (match[1]) { // positional argument (explicit)
	                    arg = argv[match[1]]
	                }
	                else { // positional argument (implicit)
	                    arg = argv[cursor++]
	                }

	                if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && get_type(arg) == 'function') {
	                    arg = arg()
	                }

	                if (re.numeric_arg.test(match[8]) && (get_type(arg) != 'number' && isNaN(arg))) {
	                    throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)))
	                }

	                if (re.number.test(match[8])) {
	                    is_positive = arg >= 0
	                }

	                switch (match[8]) {
	                    case 'b':
	                        arg = parseInt(arg, 10).toString(2)
	                    break
	                    case 'c':
	                        arg = String.fromCharCode(parseInt(arg, 10))
	                    break
	                    case 'd':
	                    case 'i':
	                        arg = parseInt(arg, 10)
	                    break
	                    case 'j':
	                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
	                    break
	                    case 'e':
	                        arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential()
	                    break
	                    case 'f':
	                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
	                    break
	                    case 'g':
	                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)
	                    break
	                    case 'o':
	                        arg = arg.toString(8)
	                    break
	                    case 's':
	                        arg = String(arg)
	                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
	                    break
	                    case 't':
	                        arg = String(!!arg)
	                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
	                    break
	                    case 'T':
	                        arg = get_type(arg)
	                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
	                    break
	                    case 'u':
	                        arg = parseInt(arg, 10) >>> 0
	                    break
	                    case 'v':
	                        arg = arg.valueOf()
	                        arg = (match[7] ? arg.substring(0, match[7]) : arg)
	                    break
	                    case 'x':
	                        arg = parseInt(arg, 10).toString(16)
	                    break
	                    case 'X':
	                        arg = parseInt(arg, 10).toString(16).toUpperCase()
	                    break
	                }
	                if (re.json.test(match[8])) {
	                    output[output.length] = arg
	                }
	                else {
	                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
	                        sign = is_positive ? '+' : '-'
	                        arg = arg.toString().replace(re.sign, '')
	                    }
	                    else {
	                        sign = ''
	                    }
	                    pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' '
	                    pad_length = match[6] - (sign + arg).length
	                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : '') : ''
	                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
	                }
	            }
	        }
	        return output.join('')
	    }

	    sprintf.cache = {}

	    sprintf.parse = function(fmt) {
	        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0
	        while (_fmt) {
	            if ((match = re.text.exec(_fmt)) !== null) {
	                parse_tree[parse_tree.length] = match[0]
	            }
	            else if ((match = re.modulo.exec(_fmt)) !== null) {
	                parse_tree[parse_tree.length] = '%'
	            }
	            else if ((match = re.placeholder.exec(_fmt)) !== null) {
	                if (match[2]) {
	                    arg_names |= 1
	                    var field_list = [], replacement_field = match[2], field_match = []
	                    if ((field_match = re.key.exec(replacement_field)) !== null) {
	                        field_list[field_list.length] = field_match[1]
	                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
	                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
	                                field_list[field_list.length] = field_match[1]
	                            }
	                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
	                                field_list[field_list.length] = field_match[1]
	                            }
	                            else {
	                                throw new SyntaxError("[sprintf] failed to parse named argument key")
	                            }
	                        }
	                    }
	                    else {
	                        throw new SyntaxError("[sprintf] failed to parse named argument key")
	                    }
	                    match[2] = field_list
	                }
	                else {
	                    arg_names |= 2
	                }
	                if (arg_names === 3) {
	                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
	                }
	                parse_tree[parse_tree.length] = match
	            }
	            else {
	                throw new SyntaxError("[sprintf] unexpected placeholder")
	            }
	            _fmt = _fmt.substring(match[0].length)
	        }
	        return parse_tree
	    }

	    /**
	     * helpers
	     */
	    function get_type(variable) {
	        if (typeof variable === 'number') {
	            return 'number'
	        }
	        else if (typeof variable === 'string') {
	            return 'string'
	        }
	        else {
	            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
	        }
	    }

	    var preformattedPadding = {
	        '0': ['', '0', '00', '000', '0000', '00000', '000000', '0000000'],
	        ' ': ['', ' ', '  ', '   ', '    ', '     ', '      ', '       '],
	        '_': ['', '_', '__', '___', '____', '_____', '______', '_______'],
	    }
	    function str_repeat(input, multiplier) {
	        if (multiplier >= 0 && multiplier <= 7 && preformattedPadding[input]) {
	            return preformattedPadding[input][multiplier]
	        }
	        return Array(multiplier + 1).join(input)
	    }

	function PdbWriter( structure, params ){

	    var p = Object.assign( {}, params );

	    var renumberSerial = p.renumberSerial !== undefined ? p.renumberSerial : true;
	    var remarks = p.remarks || [];
	    if( !Array.isArray( remarks ) ) remarks = [ remarks ];

	    var records;

	    function writeRecords(){

	        records = [];

	        writeTitle();
	        writeRemarks();
	        writeAtoms();

	    }

	    // http://www.wwpdb.org/documentation/file-format

	    // Sample PDB line, the coords X,Y,Z are fields 5,6,7 on each line.
	    // ATOM      1  N   ARG     1      29.292  13.212 -12.751  1.00 33.78      1BPT 108

	    function DEF( x, y ){
	        return x !== undefined ? x : y;
	    }

	    var atomFormat =
	        "ATOM  %5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s";

	    var hetatmFormat =
	        "HETATM%5d %-4s %3s %1s%4d    %8.3f%8.3f%8.3f%6.2f%6.2f      %4s%2s";

	    function writeTitle(){

	        // FIXME multiline if title line longer than 80 chars
	        records.push( sprintf( "TITEL %-74s", structure.name ) );

	    }

	    function writeRemarks(){

	        remarks.forEach( function( str ){
	            records.push( sprintf( "REMARK %-73s", str ) );
	        } );

	        if( structure.trajectory ){
	            records.push( sprintf(
	                "REMARK %-73s",
	                "Trajectory '" + structure.trajectory.name + "'"
	            ) );
	            records.push( sprintf(
	                "REMARK %-73s",
	                "Frame " + structure.trajectory.frame + ""
	            ) );
	        }

	    }

	    function writeAtoms(){

	        var ia = 1;
	        var im = 1;

	        structure.eachModel( function( m ){

	            records.push( sprintf( "MODEL %-74d", im++ ) );

	            m.eachAtom( function( a ){

	                var formatString = a.hetero ? hetatmFormat : atomFormat;
	                var serial = renumberSerial ? ia : a.serial;

	                // Alignment of one-letter atom name such as C starts at column 14,
	                // while two-letter atom name such as FE starts at column 13.
	                var atomname = a.atomname;
	                if( atomname.length === 1 ) atomname = " " + atomname;

	                records.push( sprintf(
	                    formatString,

	                    serial,
	                    atomname,
	                    a.resname,
	                    DEF( a.chainname, " " ),
	                    a.resno,
	                    a.x, a.y, a.z,
	                    DEF( a.occurence, 1.0 ),
	                    DEF( a.bfactor, 0.0 ),
	                    DEF( a.segid, "" ),
	                    DEF( a.element, "" )
	                ) );
	                ia += 1;

	            } );

	            records.push( sprintf( "%-80s", "ENDMDL" ) );
	            im += 1;

	        } );

	        records.push( sprintf( "%-80s", "END" ) );

	    }

	    function getString(){

	        writeRecords();
	        return records.join( "\n" );

	    }

	    function getBlob(){

	        return new Blob(
	            [ getString() ],
	            { type: 'text/plain' }
	        );

	    }

	    function _download( name, ext ){

	        name = name || "structure";
	        ext = ext || "pdb";

	        var file = name + "." + ext;
	        var blob = getBlob();

	        download( blob, file );

	    }

	    // API

	    this.getString = getString;
	    this.getBlob = getBlob;
	    this.download = _download;

	}

	/**
	 * {@link Signal}, dispatched when the `count` changes
	 * @example
	 * counter.signals.countChanged( function( delta ){ ... } );
	 * @event Counter#countChanged
	 * @type {Integer}
	 */


	/**
	 * Counter class for keeping track of counts
	 * @class
	 */
	function Counter(){

	    /**
	     * The `count`
	     * @member {Integer}
	     */
	    this.count = 0;

	    this.signals = {
	        countChanged: new Signal(),
	    };

	}

	Counter.prototype = {

	    /**
	     * Set the `count` to zero
	     */
	    clear: function(){

	        this.change( -this.count );

	    },

	    /**
	     * Change the `count`
	     * @fires Counter#countChanged
	     * @param {Integer} delta - count change
	     */
	    change: function( delta ){

	        this.count += delta;
	        this.signals.countChanged.dispatch( delta, this.count );

	        if( this.count < 0 ){
	            Log$1.warn( "Counter.count below zero", this.count );
	        }

	    },

	    /**
	     * Increments the `count` by one.
	     */
	    increment: function(){

	        this.change( 1 );

	    },

	    /**
	     * Decrements the `count` by one.
	     */
	    decrement: function(){

	        this.change( -1 );

	    },

	    /**
	     * Listen to another counter object and change this `count` by the
	     * same amount
	     * @param  {Counter} counter - the counter object to listen to
	     */
	    listen: function( counter ){

	        this.change( counter.count );
	        counter.signals.countChanged.add( this.change, this );

	    },

	    /**
	     * Stop listening to the other counter object
	     * @param  {Counter} counter - the counter object to stop listening to
	     */
	    unlisten: function( counter ){

	        var countChanged = counter.signals.countChanged;
	        if( countChanged.has( this.change, this ) ){
	            countChanged.remove( this.change, this );
	        }

	    },

	    /**
	     * Invole the callback function once, when the `count` becomes zero
	     * @param  {Function} callback - the callback function
	     * @param  {Object}   context - the context for the callback function
	     */
	    onZeroOnce: function( callback, context ){

	        if( this.count === 0 ){

	            callback.call( context, 0, 0 );

	        }else{

	            var fn = function(){

	                if( this.count === 0 ){
	                    this.signals.countChanged.remove( fn, this );
	                    callback.apply( context, arguments );
	                }

	            };
	            this.signals.countChanged.add( fn, this );

	        }

	    },

	    dispose: function(){

	        this.clear();
	        this.signals.countChanged.dispose();

	    }

	};

	function Stats(){

	    this.signals = {

	        updated: new Signal(),

	    };

	    this.begin();

	    this.maxDuration = -Infinity;
	    this.minDuration = Infinity;
	    this.avgDuration = 14;
	    this.lastDuration = Infinity;

	    this.prevFpsTime = 0;
	    this.lastFps = Infinity;
	    this.lastFrames = 1;
	    this.frames = 0;
	    this.count = 0;

	}

	Stats.prototype = {

	    update: function(){

	        this.startTime = this.end();
	        this.signals.updated.dispatch();

	    },

	    begin: function(){

	        this.startTime = performance.now();
	        this.lastFrames = this.frames;

	    },

	    end: function(){

	        var time = performance.now();

	        this.count += 1;
	        this.frames += 1;

	        this.lastDuration = time - this.startTime;
	        this.minDuration = Math.min( this.minDuration, this.lastDuration );
	        this.maxDuration = Math.max( this.maxDuration, this.lastDuration );
	        this.avgDuration -= this.avgDuration / 30;
	        this.avgDuration += this.lastDuration / 30;

	        if( time > this.prevFpsTime + 1000 ) {
	            this.lastFps = this.frames;
	            this.prevFpsTime = time;
	            this.frames = 0;
	        }

	        return time;

	    }

	};

	function TrackballControls( object, domElement ) {

	    var _this = this;
	    var STATE = { NONE: - 1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };

	    this.object = object;
	    this.domElement = ( domElement !== undefined ) ? domElement : document;

	    // API

	    this.enabled = true;

	    this.screen = { left: 0, top: 0, width: 0, height: 0 };

	    this.rotateSpeed = 1.0;
	    this.zoomSpeed = 1.2;
	    this.panSpeed = 0.3;

	    this.noRotate = false;
	    this.noZoom = false;
	    this.noPan = false;

	    this.staticMoving = false;
	    this.dynamicDampingFactor = 0.2;

	    this.minDistance = 0;
	    this.maxDistance = Infinity;

	    this.keys = [ 65 /*A*/, 83 /*S*/, 68 /*D*/ ];

	    // internals

	    this.target = new Vector3();

	    var EPS = 0.000001;

	    var lastPosition = new Vector3();

	    var _state = STATE.NONE,
	    _prevState = STATE.NONE,

	    _eye = new Vector3(),

	    _movePrev = new Vector2(),
	    _moveCurr = new Vector2(),

	    _lastAxis = new Vector3(),
	    _lastAngle = 0,

	    _zoomStart = new Vector2(),
	    _zoomEnd = new Vector2(),

	    _touchZoomDistanceStart = 0,
	    _touchZoomDistanceEnd = 0,

	    _panStart = new Vector2(),
	    _panEnd = new Vector2();

	    // for reset

	    this.target0 = this.target.clone();
	    this.position0 = this.object.position.clone();
	    this.up0 = this.object.up.clone();

	    // events

	    var changeEvent = { type: 'change' };
	    var startEvent = { type: 'start' };
	    var endEvent = { type: 'end' };


	    // methods

	    this.handleResize = function () {

	        if ( this.domElement === document ) {

	            this.screen.left = 0;
	            this.screen.top = 0;
	            this.screen.width = window.innerWidth;
	            this.screen.height = window.innerHeight;

	        } else {

	            var box = this.domElement.getBoundingClientRect();
	            // adjustments come from similar code in the jquery offset() function
	            var d = this.domElement.ownerDocument.documentElement;
	            this.screen.left = box.left + window.pageXOffset - d.clientLeft;
	            this.screen.top = box.top + window.pageYOffset - d.clientTop;
	            this.screen.width = box.width;
	            this.screen.height = box.height;

	        }

	    };

	    this.handleEvent = function ( event ) {

	        if ( typeof this[ event.type ] == 'function' ) {

	            this[ event.type ]( event );

	        }

	    };

	    var getMouseOnScreen = ( function () {

	        var vector = new Vector2();

	        return function getMouseOnScreen( pageX, pageY ) {

	            vector.set(
	                ( pageX - _this.screen.left ) / _this.screen.width,
	                ( pageY - _this.screen.top ) / _this.screen.height
	            );

	            return vector;

	        };

	    }() );

	    var getMouseOnCircle = ( function () {

	        var vector = new Vector2();

	        return function getMouseOnCircle( pageX, pageY ) {

	            vector.set(
	                ( ( pageX - _this.screen.width * 0.5 - _this.screen.left ) / ( _this.screen.width * 0.5 ) ),
	                ( ( _this.screen.height + 2 * ( _this.screen.top - pageY ) ) / _this.screen.width ) // screen.width intentional
	            );

	            return vector;

	        };

	    }() );

	    this.rotateCamera = ( function() {

	        var axis = new Vector3(),
	            quaternion = new Quaternion(),
	            eyeDirection = new Vector3(),
	            objectUpDirection = new Vector3(),
	            objectSidewaysDirection = new Vector3(),
	            moveDirection = new Vector3(),
	            angle;

	        return function rotateCamera() {

	            moveDirection.set( _moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0 );
	            angle = moveDirection.length();

	            if ( angle ) {

	                _eye.copy( _this.object.position ).sub( _this.target );

	                eyeDirection.copy( _eye ).normalize();
	                objectUpDirection.copy( _this.object.up ).normalize();
	                objectSidewaysDirection.crossVectors( objectUpDirection, eyeDirection ).normalize();

	                objectUpDirection.setLength( _moveCurr.y - _movePrev.y );
	                objectSidewaysDirection.setLength( _moveCurr.x - _movePrev.x );

	                moveDirection.copy( objectUpDirection.add( objectSidewaysDirection ) );

	                axis.crossVectors( moveDirection, _eye ).normalize();

	                angle *= _this.rotateSpeed;
	                quaternion.setFromAxisAngle( axis, angle );

	                _eye.applyQuaternion( quaternion );
	                _this.object.up.applyQuaternion( quaternion );

	                _lastAxis.copy( axis );
	                _lastAngle = angle;

	            } else if ( ! _this.staticMoving && _lastAngle ) {

	                _lastAngle *= Math.sqrt( 1.0 - _this.dynamicDampingFactor );
	                _eye.copy( _this.object.position ).sub( _this.target );
	                quaternion.setFromAxisAngle( _lastAxis, _lastAngle );
	                _eye.applyQuaternion( quaternion );
	                _this.object.up.applyQuaternion( quaternion );

	            }

	            _movePrev.copy( _moveCurr );

	        };

	    }() );


	    this.zoomCamera = function () {

	        var factor;

	        if ( _state === STATE.TOUCH_ZOOM_PAN ) {

	            factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
	            _touchZoomDistanceStart = _touchZoomDistanceEnd;
	            _eye.multiplyScalar( factor );

	            // ortho
	            if( _this.object.fov === undefined ) _this.object.zoom *= factor;

	        } else {

	            factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * _this.zoomSpeed;

	            if ( factor !== 1.0 && factor > 0.0 ) {

	                _eye.multiplyScalar( factor );

	                // ortho
	                if( _this.object.fov === undefined ) _this.object.zoom /= factor;

	                if ( _this.staticMoving ) {

	                    _zoomStart.copy( _zoomEnd );

	                } else {

	                    _zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;

	                }

	            }

	        }

	    };

	    this.panCamera = ( function() {

	        var mouseChange = new Vector2(),
	            objectUp = new Vector3(),
	            pan = new Vector3();

	        return function panCamera() {

	            mouseChange.copy( _panEnd ).sub( _panStart );

	            if ( mouseChange.lengthSq() ) {

	                if( _this.object.fov === undefined ){
	                    // Scale movement to keep clicked/dragged position under cursor
	                    var scale_x = ( _this.object.right - _this.object.left ) / _this.object.zoom;
	                    var scale_y = ( _this.object.top - _this.object.bottom ) / _this.object.zoom;
	                    mouseChange.x *= scale_x;
	                    mouseChange.y *= scale_y;
	                }else{
	                    mouseChange.multiplyScalar( _eye.length() * _this.panSpeed );
	                }

	                pan.copy( _eye ).cross( _this.object.up ).setLength( mouseChange.x );
	                pan.add( objectUp.copy( _this.object.up ).setLength( mouseChange.y ) );

	                _this.object.position.add( pan );
	                _this.target.add( pan );

	                if ( _this.staticMoving ) {

	                    _panStart.copy( _panEnd );

	                } else {

	                    _panStart.add( mouseChange.subVectors( _panEnd, _panStart ).multiplyScalar( _this.dynamicDampingFactor ) );

	                }

	            }

	        };

	    }() );

	    this.checkDistances = function () {

	        if ( ! _this.noZoom || ! _this.noPan ) {

	            if ( _eye.lengthSq() > _this.maxDistance * _this.maxDistance ) {

	                _this.object.position.addVectors( _this.target, _eye.setLength( _this.maxDistance ) );
	                _zoomStart.copy( _zoomEnd );

	            }

	            if ( _eye.lengthSq() < _this.minDistance * _this.minDistance ) {

	                _this.object.position.addVectors( _this.target, _eye.setLength( _this.minDistance ) );
	                _zoomStart.copy( _zoomEnd );

	            }

	        }

	    };

	    this.update = function () {

	        _eye.subVectors( _this.object.position, _this.target );

	        if ( ! _this.noRotate ) {

	            _this.rotateCamera();

	        }

	        if ( ! _this.noZoom ) {

	            _this.zoomCamera();

	        }

	        if ( ! _this.noPan ) {

	            _this.panCamera();

	        }

	        _this.object.position.addVectors( _this.target, _eye );

	        _this.checkDistances();

	        _this.object.lookAt( _this.target );

	        if ( lastPosition.distanceToSquared( _this.object.position ) > EPS ) {

	            _this.dispatchEvent( changeEvent );

	            lastPosition.copy( _this.object.position );

	        }

	    };

	    this.reset = function () {

	        _state = STATE.NONE;
	        _prevState = STATE.NONE;

	        _this.target.copy( _this.target0 );
	        _this.object.position.copy( _this.position0 );
	        _this.object.up.copy( _this.up0 );

	        _eye.subVectors( _this.object.position, _this.target );

	        _this.object.lookAt( _this.target );

	        _this.dispatchEvent( changeEvent );

	        lastPosition.copy( _this.object.position );

	    };

	    // listeners

	    function keydown( event ) {

	        if ( _this.enabled === false ) return;

	        _prevState = _state;

	        if ( _state !== STATE.NONE ) {

	            return;

	        } else if ( event.keyCode === _this.keys[ STATE.ROTATE ] && ! _this.noRotate ) {

	            _state = STATE.ROTATE;

	        } else if ( event.keyCode === _this.keys[ STATE.ZOOM ] && ! _this.noZoom ) {

	            _state = STATE.ZOOM;

	        } else if ( event.keyCode === _this.keys[ STATE.PAN ] && ! _this.noPan ) {

	            _state = STATE.PAN;

	        }

	    }

	    function keyup( event ) {

	        if ( _this.enabled === false ) return;

	        _state = _prevState;

	    }

	    function mousedown( event ) {

	        if ( _this.enabled === false ) return;

	        if ( _state === STATE.NONE ) {

	            _state = event.button;

	        }

	        if ( _state === STATE.ROTATE && ! _this.noRotate ) {

	            _moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );
	            _movePrev.copy( _moveCurr );

	        } else if ( _state === STATE.ZOOM && ! _this.noZoom ) {

	            _zoomStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
	            _zoomEnd.copy( _zoomStart );

	        } else if ( _state === STATE.PAN && ! _this.noPan ) {

	            _panStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
	            _panEnd.copy( _panStart );

	        }

	        document.addEventListener( 'mousemove', mousemove, false );
	        document.addEventListener( 'mouseup', mouseup, false );

	        _this.dispatchEvent( startEvent );

	    }

	    function mousemove( event ) {

	        if ( _this.enabled === false ) return;

	        if ( _state === STATE.ROTATE && ! _this.noRotate ) {

	            _movePrev.copy( _moveCurr );
	            _moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );

	        } else if ( _state === STATE.ZOOM && ! _this.noZoom ) {

	            _zoomEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

	        } else if ( _state === STATE.PAN && ! _this.noPan ) {

	            _panEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );

	        }

	    }

	    function mouseup( event ) {

	        if ( _this.enabled === false ) return;

	        _state = STATE.NONE;

	        document.removeEventListener( 'mousemove', mousemove );
	        document.removeEventListener( 'mouseup', mouseup );
	        _this.dispatchEvent( endEvent );

	    }

	    function mousewheel( event ) {

	        if ( _this.enabled === false ) return;

	        var delta = 0;

	        if ( event.wheelDelta ) {

	            // WebKit / Opera / Explorer 9

	            delta = event.wheelDelta / 40;

	        } else if ( event.detail ) {

	            // Firefox

	            delta = - event.detail / 3;

	        }

	        _zoomStart.y += delta * 0.01;
	        _this.dispatchEvent( startEvent );
	        _this.dispatchEvent( endEvent );

	    }

	    function touchstart( event ) {

	        if ( _this.enabled === false ) return;

	        switch ( event.touches.length ) {

	            case 1:
	                _state = STATE.TOUCH_ROTATE;
	                _moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
	                _movePrev.copy( _moveCurr );
	                break;

	            default: // 2 or more
	                _state = STATE.TOUCH_ZOOM_PAN;
	                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
	                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
	                _touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );

	                var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
	                var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
	                _panStart.copy( getMouseOnScreen( x, y ) );
	                _panEnd.copy( _panStart );
	                break;

	        }

	        _this.dispatchEvent( startEvent );

	    }

	    function touchmove( event ) {

	        if ( _this.enabled === false ) return;

	        switch ( event.touches.length ) {

	            case 1:
	                _movePrev.copy( _moveCurr );
	                _moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
	                break;

	            default: // 2 or more
	                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
	                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
	                _touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );

	                var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
	                var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
	                _panEnd.copy( getMouseOnScreen( x, y ) );
	                break;

	        }

	    }

	    function touchend( event ) {

	        if ( _this.enabled === false ) return;

	        switch ( event.touches.length ) {

	            case 0:
	                _state = STATE.NONE;
	                break;

	            case 1:
	                _state = STATE.TOUCH_ROTATE;
	                _moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
	                _movePrev.copy( _moveCurr );
	                break;

	        }

	        _this.dispatchEvent( endEvent );

	    }

	    function contextmenu( event ) {

	        event.preventDefault();

	    }

	    this.dispose = function() {

	        this.domElement.removeEventListener( 'contextmenu', contextmenu, false );
	        this.domElement.removeEventListener( 'mousedown', mousedown, false );
	        this.domElement.removeEventListener( 'mousewheel', mousewheel, false );
	        this.domElement.removeEventListener( 'MozMousePixelScroll', mousewheel, false ); // firefox

	        this.domElement.removeEventListener( 'touchstart', touchstart, false );
	        this.domElement.removeEventListener( 'touchend', touchend, false );
	        this.domElement.removeEventListener( 'touchmove', touchmove, false );

	        document.removeEventListener( 'mousemove', mousemove, false );
	        document.removeEventListener( 'mouseup', mouseup, false );

	        window.removeEventListener( 'keydown', keydown, false );
	        window.removeEventListener( 'keyup', keyup, false );

	    };

	    this.domElement.addEventListener( 'contextmenu', contextmenu, false );
	    this.domElement.addEventListener( 'mousedown', mousedown, false );
	    this.domElement.addEventListener( 'mousewheel', mousewheel, false );
	    this.domElement.addEventListener( 'MozMousePixelScroll', mousewheel, false ); // firefox

	    this.domElement.addEventListener( 'touchstart', touchstart, false );
	    this.domElement.addEventListener( 'touchend', touchend, false );
	    this.domElement.addEventListener( 'touchmove', touchmove, false );

	    window.addEventListener( 'keydown', keydown, false );
	    window.addEventListener( 'keyup', keyup, false );

	    this.handleResize();

	    // force an update at start
	    this.update();

	}

	TrackballControls.prototype = Object.create( EventDispatcher.prototype );
	TrackballControls.prototype.constructor = TrackballControls;

	var CylinderImpostor_vert = "// Open-Source PyMOL is Copyright (C) Schrodinger, LLC.\n//\n//  All Rights Reserved\n//\n//  Permission to use, copy, modify, distribute, and distribute modified\n//  versions of this software and its built-in documentation for any\n//  purpose and without fee is hereby granted, provided that the above\n//  copyright notice appears in all copies and that both the copyright\n//  notice and this permission notice appear in supporting documentation,\n//  and that the name of Schrodinger, LLC not be used in advertising or\n//  publicity pertaining to distribution of the software without specific,\n//  written prior permission.\n//\n//  SCHRODINGER, LLC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n//  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN\n//  NO EVENT SHALL SCHRODINGER, LLC BE LIABLE FOR ANY SPECIAL, INDIRECT OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n//  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n//  OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n//  USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Contributions by Alexander Rose\n// - ported to WebGL\n// - dual color\n// - picking color\n// - shift\n\nattribute vec3 mapping;\nattribute vec3 position1;\nattribute vec3 position2;\nattribute float radius;\n\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n\n#ifdef PICKING\n    attribute vec3 pickingColor;\n    attribute vec3 pickingColor2;\n    varying vec3 vPickingColor;\n    varying vec3 vPickingColor2;\n#else\n    // attribute vec3 color;\n    attribute vec3 color2;\n    varying vec3 vColor1;\n    varying vec3 vColor2;\n#endif\n\nuniform mat4 modelViewMatrixInverse;\nuniform float ortho;\n\nvoid main(){\n\n    #ifdef PICKING\n        vPickingColor = pickingColor;\n        vPickingColor2 = pickingColor2;\n    #else\n        vColor1 = color;\n        vColor2 = color2;\n    #endif\n\n    // vRadius = radius;\n    base_radius.w = radius;\n\n    vec3 center = position;\n    vec3 dir = normalize( position2 - position1 );\n    float ext = length( position2 - position1 ) / 2.0;\n\n    // using cameraPosition fails on some machines, not sure why\n    // vec3 cam_dir = normalize( cameraPosition - mix( center, vec3( 0.0 ), ortho ) );\n    vec3 cam_dir;\n    if( ortho == 0.0 ){\n        cam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 0, 1 ) ).xyz - center;\n    }else{\n        cam_dir = ( modelViewMatrixInverse * vec4( 0, 0, 1, 0 ) ).xyz;\n    }\n    cam_dir = normalize( cam_dir );\n\n    vec3 ldir;\n\n    float b = dot( cam_dir, dir );\n    end_b.w = b;\n    if( b < 0.0 ) // direction vector looks away, so flip\n        ldir = -ext * dir;\n    else // direction vector already looks in my direction\n        ldir = ext * dir;\n\n    vec3 left = normalize( cross( cam_dir, ldir ) );\n    left = radius * left;\n    vec3 up = radius * normalize( cross( left, ldir ) );\n\n    // transform to modelview coordinates\n    axis = normalize( normalMatrix * ldir );\n    U = normalize( normalMatrix * up );\n    V = normalize( normalMatrix * left );\n\n    vec4 base4 = modelViewMatrix * vec4( center - ldir, 1.0 );\n    base_radius.xyz = base4.xyz / base4.w;\n\n    vec4 top_position = modelViewMatrix * vec4( center + ldir, 1.0 );\n    vec4 end4 = top_position;\n    end_b.xyz = end4.xyz / end4.w;\n\n    w = modelViewMatrix * vec4(\n        center + mapping.x*ldir + mapping.y*left + mapping.z*up, 1.0\n    );\n\n    gl_Position = projectionMatrix * w;\n\n    // avoid clipping (1.0 seems to induce flickering with some drivers)\n    gl_Position.z = 0.99;\n\n}";

	var CylinderImpostor_frag = "#define STANDARD\n#define IMPOSTOR\n\n// Open-Source PyMOL is Copyright (C) Schrodinger, LLC.\n//\n//  All Rights Reserved\n//\n//  Permission to use, copy, modify, distribute, and distribute modified\n//  versions of this software and its built-in documentation for any\n//  purpose and without fee is hereby granted, provided that the above\n//  copyright notice appears in all copies and that both the copyright\n//  notice and this permission notice appear in supporting documentation,\n//  and that the name of Schrodinger, LLC not be used in advertising or\n//  publicity pertaining to distribution of the software without specific,\n//  written prior permission.\n//\n//  SCHRODINGER, LLC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\n//  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN\n//  NO EVENT SHALL SCHRODINGER, LLC BE LIABLE FOR ANY SPECIAL, INDIRECT OR\n//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n//  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n//  OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n//  USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Contributions by Alexander Rose\n// - ported to WebGL\n// - dual color\n// - picking color\n// - custom clipping\n// - three.js lighting\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform mat4 projectionMatrix;\nuniform float ortho;\n\nvarying vec3 axis;\nvarying vec4 base_radius;\nvarying vec4 end_b;\nvarying vec3 U;\nvarying vec3 V;\nvarying vec4 w;\n\n#ifdef PICKING\n    uniform float objectId;\n    varying vec3 vPickingColor;\n    varying vec3 vPickingColor2;\n#else\n    varying vec3 vColor1;\n    varying vec3 vColor2;\n    #include common\n    #include fog_pars_fragment\n    #include bsdfs\n    #include lights_pars\n    #include lights_physical_pars_fragment\n#endif\n\nbool interior = false;\n\nfloat distSq3( vec3 v3a, vec3 v3b ){\n\n    return (\n        ( v3a.x - v3b.x ) * ( v3a.x - v3b.x ) +\n        ( v3a.y - v3b.y ) * ( v3a.y - v3b.y ) +\n        ( v3a.z - v3b.z ) * ( v3a.z - v3b.z )\n    );\n\n}\n\n// round caps\n// http://sourceforge.net/p/pymol/code/HEAD/tree/trunk/pymol/data/shaders/cylinder.fs\n\n// void main2(void)\n// {\n//     #ifdef PICKING\n//         gl_FragColor = vec4( vPickingColor, 1.0 );\n//     #else\n//         gl_FragColor = vec4( vColor, 1.0 );\n//     #endif\n// }\n\n// Calculate depth based on the given camera position.\nfloat calcDepth( in vec3 cameraPos ){\n    vec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\n    return 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\n\nfloat calcClip( vec3 cameraPos ){\n    return dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\n\nvoid main(){\n\n    vec3 point = w.xyz / w.w;\n\n    // unpacking\n    vec3 base = base_radius.xyz;\n    float vRadius = base_radius.w;\n    vec3 end = end_b.xyz;\n    float b = end_b.w;\n\n    vec3 end_cyl = end;\n    vec3 surface_point = point;\n\n    vec3 ray_target = surface_point;\n    vec3 ray_origin = vec3(0.0);\n    vec3 ray_direction = mix(normalize(ray_origin - ray_target), vec3(0.0, 0.0, 1.0), ortho);\n    mat3 basis = mat3( U, V, axis );\n\n    vec3 diff = ray_target - 0.5 * (base + end_cyl);\n    vec3 P = diff * basis;\n\n    // angle (cos) between cylinder cylinder_axis and ray direction\n    float dz = dot( axis, ray_direction );\n\n    float radius2 = vRadius*vRadius;\n\n    // calculate distance to the cylinder from ray origin\n    vec3 D = vec3(dot(U, ray_direction),\n                dot(V, ray_direction),\n                dz);\n    float a0 = P.x*P.x + P.y*P.y - radius2;\n    float a1 = P.x*D.x + P.y*D.y;\n    float a2 = D.x*D.x + D.y*D.y;\n\n    // calculate a dicriminant of the above quadratic equation\n    float d = a1*a1 - a0*a2;\n    if (d < 0.0)\n        // outside of the cylinder\n        discard;\n\n    float dist = (-a1 + sqrt(d)) / a2;\n\n    // point of intersection on cylinder surface\n    vec3 new_point = ray_target + dist * ray_direction;\n\n    vec3 tmp_point = new_point - base;\n    vec3 _normal = normalize( tmp_point - axis * dot(tmp_point, axis) );\n\n    ray_origin = mix( ray_origin, surface_point, ortho );\n\n    // test front cap\n    float cap_test = dot( new_point - base, axis );\n\n    // to calculate caps, simply check the angle between\n    // the point of intersection - cylinder end vector\n    // and a cap plane normal (which is the cylinder cylinder_axis)\n    // if the angle < 0, the point is outside of cylinder\n    // test front cap\n\n    #ifndef CAP\n        vec3 new_point2 = ray_target + ( (-a1 - sqrt(d)) / a2 ) * ray_direction;\n        vec3 tmp_point2 = new_point2 - base;\n    #endif\n\n    // flat\n    if (cap_test < 0.0)\n    {\n        // ray-plane intersection\n        float dNV = dot(-axis, ray_direction);\n        if (dNV < 0.0)\n            discard;\n        float near = dot(-axis, (base)) / dNV;\n        new_point = ray_direction * near + ray_origin;\n        // within the cap radius?\n        if (dot(new_point - base, new_point-base) > radius2)\n            discard;\n\n        #ifdef CAP\n            _normal = axis;\n        #else\n            _normal = -normalize( tmp_point2 - axis * dot(tmp_point2, axis) );\n        #endif\n    }\n\n    // test end cap\n    cap_test = dot((new_point - end_cyl), axis);\n\n    // flat\n    if( cap_test > 0.0 )\n    {\n        // ray-plane intersection\n        float dNV = dot(axis, ray_direction);\n        if (dNV < 0.0)\n            discard;\n        float near = dot(axis, end_cyl) / dNV;\n        new_point = ray_direction * near + ray_origin;\n        // within the cap radius?\n        if( dot(new_point - end_cyl, new_point-base) > radius2 )\n            discard;\n\n        #ifdef CAP\n            _normal = axis;\n        #else\n            _normal = -normalize( tmp_point2 - axis * dot(tmp_point2, axis) );\n        #endif\n    }\n\n    gl_FragDepthEXT = calcDepth( new_point );\n\n    #ifdef NEAR_CLIP\n        if( calcClip( new_point ) > 0.0 ){\n            dist = (-a1 - sqrt(d)) / a2;\n            new_point = ray_target + dist * ray_direction;\n            if( calcClip( new_point ) > 0.0 )\n                discard;\n            interior = true;\n            gl_FragDepthEXT = calcDepth( new_point );\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n            }\n        }else if( gl_FragDepthEXT <= 0.0 ){\n            dist = (-a1 - sqrt(d)) / a2;\n            new_point = ray_target + dist * ray_direction;\n            interior = true;\n            gl_FragDepthEXT = calcDepth( new_point );\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n            }\n        }\n    #else\n        if( gl_FragDepthEXT <= 0.0 ){\n            dist = (-a1 - sqrt(d)) / a2;\n            new_point = ray_target + dist * ray_direction;\n            interior = true;\n            gl_FragDepthEXT = calcDepth( new_point );\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n            }\n        }\n    #endif\n\n    // this is a workaround necessary for Mac\n    // otherwise the modified fragment won't clip properly\n    if (gl_FragDepthEXT < 0.0)\n        discard;\n    if (gl_FragDepthEXT > 1.0)\n        discard;\n\n    #ifdef PICKING\n\n        if( distSq3( new_point, end_cyl ) < distSq3( new_point, base ) ){\n            if( b < 0.0 ){\n                gl_FragColor = vec4( vPickingColor, objectId );\n            }else{\n                gl_FragColor = vec4( vPickingColor2, objectId );\n            }\n        }else{\n            if( b > 0.0 ){\n                gl_FragColor = vec4( vPickingColor, objectId );\n            }else{\n                gl_FragColor = vec4( vPickingColor2, objectId );\n            }\n        }\n\n    #else\n\n        vec3 vViewPosition = -new_point;\n        vec3 vNormal = _normal;\n        vec3 vColor;\n\n        if( distSq3( new_point, end_cyl ) < distSq3( new_point, base ) ){\n            if( b < 0.0 ){\n                vColor = vColor1;\n            }else{\n                vColor = vColor2;\n            }\n        }else{\n            if( b > 0.0 ){\n                vColor = vColor1;\n            }else{\n                vColor = vColor2;\n            }\n        }\n\n        vec4 diffuseColor = vec4( diffuse, opacity );\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveLight = emissive;\n\n        #include color_fragment\n        #include roughnessmap_fragment\n        #include metalnessmap_fragment\n\n        vec3 normal = normalize( vNormal );  // don't use #include normal_fragment\n        if( interior ){\n            normal = vec3( 0.0, 0.0, 0.4 );\n        }\n\n        #include lights_physical_fragment\n        #include lights_template\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n\n        gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n        #include premultiplied_alpha_fragment\n        #include tonemapping_fragment\n        #include encodings_fragment\n        #include fog_fragment\n\n    #endif\n\n}";

	var HyperballStickImpostor_vert = "// Copyright (C) 2010-2011 by\n// Laboratoire de Biochimie Theorique (CNRS),\n// Laboratoire d'Informatique Fondamentale d'Orleans (Universite d'Orleans), (INRIA) and\n// Departement des Sciences de la Simulation et de l'Information (CEA).\n//\n// License: CeCILL-C license (http://www.cecill.info/)\n//\n// Contact: Marc Baaden\n// E-mail: baaden@smplinux.de\n// Webpage: http://hyperballs.sourceforge.net\n\n// Contributions by Alexander Rose\n// - ported to WebGL\n// - dual color\n// - picking color\n\nattribute vec3 mapping;\nattribute float radius;\nattribute float radius2;\nattribute vec3 position1;\nattribute vec3 position2;\n\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n\n#ifdef PICKING\n    attribute vec3 pickingColor;\n    attribute vec3 pickingColor2;\n    varying vec3 vPickingColor;\n    varying vec3 vPickingColor2;\n#else\n    // attribute vec3 color;\n    attribute vec3 color2;\n    varying vec3 vColor1;\n    varying vec3 vColor2;\n#endif\n\nuniform float shrink;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewProjectionMatrixInverse;\n\nvoid main(){\n\n    vRadius = radius;\n    vRadius2 = radius2;\n\n    vec4 spaceposition;\n    vec3 position_atom1;\n    vec3 position_atom2;\n    vec4 vertex_position;\n\n    #ifdef PICKING\n        vPickingColor = pickingColor;\n        vPickingColor2 = pickingColor2;\n    #else\n        vColor1 = color;\n        vColor2 = color2;\n    #endif\n\n    float radius1 = radius;\n\n    position_atom1 = position1;\n    position_atom2 = position2;\n\n    float distance = distance( position_atom1, position_atom2 );\n\n    spaceposition.z = mapping.z * distance;\n\n    if (radius1 > radius2) {\n        spaceposition.y = mapping.y * 1.5 * radius1;\n        spaceposition.x = mapping.x * 1.5 * radius1;\n    } else {\n        spaceposition.y = mapping.y * 1.5 * radius2;\n        spaceposition.x = mapping.x * 1.5 * radius2;\n    }\n    spaceposition.w = 1.0;\n\n    vec4 e3 = vec4( 1.0 );\n    vec3 e1, e1_temp, e2, e2_temp;\n\n    // Calculation of bond direction: e3\n    e3.xyz = normalize(position_atom1-position_atom2);\n\n    // little hack to avoid some problems of precision due to graphic card limitation using float: To improve soon\n    if (e3.z == 0.0) { e3.z = 0.0000000000001;}\n    if ( (position_atom1.x - position_atom2.x) == 0.0) { position_atom1.x += 0.001;}\n    if ( (position_atom1.y - position_atom2.y) == 0.0) { position_atom1.y += 0.001;}\n    if ( (position_atom1.z - position_atom2.z) == 0.0) { position_atom1.z += 0.001;}\n\n    // Focus calculation\n    vec4 focus = vec4( 1.0 );\n    focus.x = ( position_atom1.x*position_atom1.x - position_atom2.x*position_atom2.x +\n        ( radius2*radius2 - radius1*radius1 )*e3.x*e3.x/shrink )/(2.0*(position_atom1.x - position_atom2.x));\n    focus.y = ( position_atom1.y*position_atom1.y - position_atom2.y*position_atom2.y +\n        ( radius2*radius2 - radius1*radius1 )*e3.y*e3.y/shrink )/(2.0*(position_atom1.y - position_atom2.y));\n    focus.z = ( position_atom1.z*position_atom1.z - position_atom2.z*position_atom2.z +\n        ( radius2*radius2 - radius1*radius1 )*e3.z*e3.z/shrink )/(2.0*(position_atom1.z - position_atom2.z));\n\n    // e1 calculation\n    e1.x = 1.0;\n    e1.y = 1.0;\n    e1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\n    e1_temp = e1 - focus.xyz;\n    e1 = normalize(e1_temp);\n\n    // e2 calculation\n    e2_temp = e1.yzx * e3.zxy - e1.zxy * e3.yzx;\n    e2 = normalize(e2_temp);\n\n    //ROTATION:\n    // final form of change of basis matrix:\n    mat3 R= mat3( e1.xyz, e2.xyz, e3.xyz );\n    // Apply rotation and translation to the bond primitive\n    vertex_position.xyz = R * spaceposition.xyz;\n    vertex_position.w = 1.0;\n\n    // TRANSLATION:\n    vertex_position.x += (position_atom1.x+position_atom2.x) / 2.0;\n    vertex_position.y += (position_atom1.y+position_atom2.y) / 2.0;\n    vertex_position.z += (position_atom1.z+position_atom2.z) / 2.0;\n\n    // New position\n    gl_Position = modelViewProjectionMatrix * vertex_position;\n\n    vec4 i_near, i_far;\n\n    // Calculate near from position\n    vec4 near = gl_Position;\n    near.z = 0.0 ;\n    near = modelViewProjectionMatrixInverse * near;\n    i_near = near;\n\n    // Calculate far from position\n    vec4 far = gl_Position;\n    far.z = far.w ;\n    i_far = modelViewProjectionMatrixInverse * far;\n\n    prime1 = vec4( position_atom1 - (position_atom1 - focus.xyz)*shrink, 1.0 );\n    prime2 = vec4( position_atom2 - (position_atom2 - focus.xyz)*shrink, 1.0 );\n\n    float Rsquare = (radius1*radius1/shrink) - (\n                        (position_atom1.x - focus.x)*(position_atom1.x - focus.x) +\n                        (position_atom1.y - focus.y)*(position_atom1.y - focus.y) +\n                        (position_atom1.z - focus.z)*(position_atom1.z - focus.z)\n                    );\n\n    focus.w = Rsquare;\n\n    matrix_near = mat4( i_near, i_far, focus, e3 );\n\n    // avoid clipping\n    gl_Position.z = 1.0;\n\n}";

	var HyperballStickImpostor_frag = "#define STANDARD\n#define IMPOSTOR\n\n// Copyright (C) 2010-2011 by\n// Laboratoire de Biochimie Theorique (CNRS),\n// Laboratoire d'Informatique Fondamentale d'Orleans (Universite d'Orleans), (INRIA) and\n// Departement des Sciences de la Simulation et de l'Information (CEA).\n//\n// License: CeCILL-C license (http://www.cecill.info/)\n//\n// Contact: Marc Baaden\n// E-mail: baaden@smplinux.de\n// Webpage: http://hyperballs.sourceforge.net\n\n// Contributions by Alexander Rose\n// - ported to WebGL\n// - dual color\n// - picking color\n// - custom clipping\n// - three.js lighting\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform float shrink;\nuniform mat4 modelViewMatrix;\nuniform mat4 modelViewProjectionMatrix;\nuniform mat4 modelViewMatrixInverseTranspose;\nuniform mat4 projectionMatrix;\n\nvarying mat4 matrix_near;\nvarying vec4 prime1;\nvarying vec4 prime2;\nvarying float vRadius;\nvarying float vRadius2;\n\n#ifdef PICKING\n    uniform float objectId;\n    varying vec3 vPickingColor;\n    varying vec3 vPickingColor2;\n#else\n    varying vec3 vColor1;\n    varying vec3 vColor2;\n    #include common\n    #include fog_pars_fragment\n    #include bsdfs\n    #include lights_pars\n    #include lights_physical_pars_fragment\n#endif\n\nbool interior = false;\n\nfloat calcClip( vec4 cameraPos ){\n    return dot( cameraPos, vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\n\nfloat calcClip( vec3 cameraPos ){\n    return calcClip( vec4( cameraPos, 1.0 ) );\n}\n\nfloat calcDepth( in vec3 cameraPos ){\n    vec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\n    return 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\n\nstruct Ray {\n    vec3 origin ;\n    vec3 direction ;\n};\n\nbool cutoff_plane (vec3 M, vec3 cutoff, vec3 x3){\n    float a = x3.x;\n    float b = x3.y;\n    float c = x3.z;\n    float d = -x3.x*cutoff.x-x3.y*cutoff.y-x3.z*cutoff.z;\n    float l = a*M.x+b*M.y+c*M.z+d;\n    if (l<0.0) {return true;}\n    else{return false;}\n}\n\nvec3 isect_surf(Ray r, mat4 matrix_coef){\n    vec4 direction = vec4(r.direction, 0.0);\n    vec4 origin = vec4(r.origin, 1.0);\n    float a = dot(direction,(matrix_coef*direction));\n    float b = dot(origin,(matrix_coef*direction));\n    float c = dot(origin,(matrix_coef*origin));\n    float delta =b*b-a*c;\n    gl_FragColor.a = 1.0;\n    if (delta<0.0){\n        discard;\n        // gl_FragColor.a = 0.5;\n    }\n    float t1 =(-b-sqrt(delta))/a;\n\n    // Second solution not necessary if you don't want\n    // to see inside spheres and cylinders, save some fps\n    //float t2 = (-b+sqrt(delta)) / a  ;\n    //float t =(t1<t2) ? t1 : t2;\n\n    return r.origin+t1*r.direction;\n}\n\nvec3 isect_surf2(Ray r, mat4 matrix_coef){\n    vec4 direction = vec4(r.direction, 0.0);\n    vec4 origin = vec4(r.origin, 1.0);\n    float a = dot(direction,(matrix_coef*direction));\n    float b = dot(origin,(matrix_coef*direction));\n    float c = dot(origin,(matrix_coef*origin));\n    float delta =b*b-a*c;\n    gl_FragColor.a = 1.0;\n    if (delta<0.0){\n        discard;\n        // gl_FragColor.a = 0.5;\n    }\n    float t2 =(-b+sqrt(delta))/a;\n\n    return r.origin+t2*r.direction;\n}\n\nRay primary_ray(vec4 near1, vec4 far1){\n    vec3 near=near1.xyz/near1.w;\n    vec3 far=far1.xyz/far1.w;\n    return Ray(near,far-near);\n}\n\nfloat update_z_buffer(vec3 M, mat4 ModelViewP){\n    float  depth1;\n    vec4 Ms=(ModelViewP*vec4(M,1.0));\n    return depth1=(1.0+Ms.z/Ms.w)/2.0;\n}\n\nvoid main(){\n\n    float radius = max( vRadius, vRadius2 );\n\n    vec4 i_near, i_far, focus;\n    vec3 e3, e1, e1_temp, e2;\n\n    i_near = vec4(matrix_near[0][0],matrix_near[0][1],matrix_near[0][2],matrix_near[0][3]);\n    i_far  = vec4(matrix_near[1][0],matrix_near[1][1],matrix_near[1][2],matrix_near[1][3]);\n    focus = vec4(matrix_near[2][0],matrix_near[2][1],matrix_near[2][2],matrix_near[2][3]);\n    e3 = vec3(matrix_near[3][0],matrix_near[3][1],matrix_near[3][2]);\n\n    e1.x = 1.0;\n    e1.y = 1.0;\n    e1.z = ( (e3.x*focus.x + e3.y*focus.y + e3.z*focus.z) - e1.x*e3.x - e1.y*e3.y)/e3.z;\n    e1_temp = e1 - focus.xyz;\n    e1 = normalize(e1_temp);\n\n    e2 = normalize(cross(e1,e3));\n\n    vec4 equation = focus;\n\n    float shrinkfactor = shrink;\n    float t1 = -1.0/(1.0-shrinkfactor);\n    float t2 = 1.0/(shrinkfactor);\n    // float t3 = 2.0/(shrinkfactor);\n\n    vec4 colonne1, colonne2, colonne3, colonne4;\n    mat4 mat;\n\n    vec3 equation1 = vec3(t2,t2,t1);\n\n    float A1 = - e1.x*equation.x - e1.y*equation.y - e1.z*equation.z;\n    float A2 = - e2.x*equation.x - e2.y*equation.y - e2.z*equation.z;\n    float A3 = - e3.x*equation.x - e3.y*equation.y - e3.z*equation.z;\n\n    float A11 = equation1.x*e1.x*e1.x +  equation1.y*e2.x*e2.x + equation1.z*e3.x*e3.x;\n    float A21 = equation1.x*e1.x*e1.y +  equation1.y*e2.x*e2.y + equation1.z*e3.x*e3.y;\n    float A31 = equation1.x*e1.x*e1.z +  equation1.y*e2.x*e2.z + equation1.z*e3.x*e3.z;\n    float A41 = equation1.x*e1.x*A1   +  equation1.y*e2.x*A2   + equation1.z*e3.x*A3;\n\n    float A22 = equation1.x*e1.y*e1.y +  equation1.y*e2.y*e2.y + equation1.z*e3.y*e3.y;\n    float A32 = equation1.x*e1.y*e1.z +  equation1.y*e2.y*e2.z + equation1.z*e3.y*e3.z;\n    float A42 = equation1.x*e1.y*A1   +  equation1.y*e2.y*A2   + equation1.z*e3.y*A3;\n\n    float A33 = equation1.x*e1.z*e1.z +  equation1.y*e2.z*e2.z + equation1.z*e3.z*e3.z;\n    float A43 = equation1.x*e1.z*A1   +  equation1.y*e2.z*A2   + equation1.z*e3.z*A3;\n\n    float A44 = equation1.x*A1*A1 +  equation1.y*A2*A2 + equation1.z*A3*A3 - equation.w;\n\n    colonne1 = vec4(A11,A21,A31,A41);\n    colonne2 = vec4(A21,A22,A32,A42);\n    colonne3 = vec4(A31,A32,A33,A43);\n    colonne4 = vec4(A41,A42,A43,A44);\n\n    mat = mat4(colonne1,colonne2,colonne3,colonne4);\n\n    // Ray calculation using near and far\n    Ray ray = primary_ray(i_near,i_far) ;\n\n    // Intersection between ray and surface for each pixel\n    vec3 M;\n    M = isect_surf(ray, mat);\n\n    // cut the extremities of bonds to superimpose bond and spheres surfaces\n    if (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\n\n    // Transform normal to model space to view-space\n    vec4 M1 = vec4(M,1.0);\n    vec4 M2 =  mat*M1;\n    // vec3 _normal = normalize( ( modelViewMatrixInverseTranspose * M2 ).xyz );\n    vec3 _normal = ( modelViewMatrixInverseTranspose * M2 ).xyz;\n\n    // Recalculate the depth in function of the new pixel position\n    gl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n\n    #ifdef NEAR_CLIP\n        if( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 ){\n            M = isect_surf2(ray, mat);\n            if( calcClip( modelViewMatrix * vec4( M, 1.0 ) ) > 0.0 )\n                discard;\n            interior = true;\n            gl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / radius ) );\n            }\n        }else if( gl_FragDepthEXT <= 0.0 ){\n            M = isect_surf2(ray, mat);\n            interior = true;\n            gl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix);\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n            }\n        }\n    #else\n        if( gl_FragDepthEXT <= 0.0 ){\n            M = isect_surf2(ray, mat);\n            interior = true;\n            gl_FragDepthEXT = update_z_buffer(M, modelViewProjectionMatrix) ;\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / radius );\n            }\n        }\n    #endif\n\n    // cut the extremities of bonds to superimpose bond and spheres surfaces\n    if (cutoff_plane(M, prime1.xyz, -e3) || cutoff_plane(M, prime2.xyz, e3)){ discard; }\n\n    if (gl_FragDepthEXT < 0.0)\n        discard;\n    if (gl_FragDepthEXT > 1.0)\n        discard;\n\n    // Mix the color bond in function of the two atom colors\n    float distance_ratio = ((M.x-prime2.x)*e3.x + (M.y-prime2.y)*e3.y +(M.z-prime2.z)*e3.z) /\n                                distance(prime2.xyz,prime1.xyz);\n\n    #ifdef PICKING\n\n        if( distance_ratio > 0.5 ){\n            gl_FragColor = vec4( vPickingColor, objectId );\n        }else{\n            gl_FragColor = vec4( vPickingColor2, objectId );\n        }\n\n    #else\n\n        vec3 vViewPosition = -( modelViewMatrix * vec4( M, 1.0 ) ).xyz;\n        vec3 vNormal = _normal;\n        vec3 vColor;\n\n        if( distance_ratio>0.5 ){\n            vColor = vColor1;\n        }else{\n            vColor = vColor2;\n        }\n\n        vec4 diffuseColor = vec4( diffuse, opacity );\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveLight = emissive;\n\n        #include color_fragment\n        #include roughnessmap_fragment\n        #include metalnessmap_fragment\n\n        vec3 normal = normalize( vNormal );  // don't use #include normal_fragment\n        if( interior ){\n            normal = vec3( 0.0, 0.0, 0.4 );\n        }\n\n        #include lights_physical_fragment\n        #include lights_template\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n\n        gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n        #include premultiplied_alpha_fragment\n        #include tonemapping_fragment\n        #include encodings_fragment\n        #include fog_fragment\n\n    #endif\n\n}";

	var Line_vert = "uniform float nearClip;\n\nvarying vec3 vViewPosition;\n\n#include color_pars_vertex\n\nvoid main(){\n\n    #include color_vertex\n    #include begin_vertex\n    #include project_vertex\n\n    vViewPosition = -mvPosition.xyz;\n\n    #include nearclip_vertex\n\n}";

	var Line_frag = "uniform float opacity;\nuniform float nearClip;\n\nvarying vec3 vViewPosition;\n\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n\nvoid main(){\n\n    #include nearclip_fragment\n\n    gl_FragColor = vec4( vColor, opacity );\n\n    #include premultiplied_alpha_fragment\n    #include tonemapping_fragment\n    #include encodings_fragment\n    #include fog_fragment\n\n}";

	var BasicLine_vert = "void main(){\n\n    #include begin_vertex\n    #include project_vertex\n\n}";

	var BasicLine_frag = "uniform vec3 uColor;\n\n#include common\n#include fog_pars_fragment\n\nvoid main(){\n\n    gl_FragColor = vec4( uColor, 1.0 );\n\n    #include premultiplied_alpha_fragment\n    #include tonemapping_fragment\n    #include encodings_fragment\n    #include fog_fragment\n\n}";

	var Mesh_vert = "#define STANDARD\n\nuniform float nearClip;\n\n#if defined( NEAR_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\n    varying vec3 vViewPosition;\n#endif\n\n#if defined( PICKING )\n    attribute vec3 pickingColor;\n    varying vec3 vPickingColor;\n#elif defined( NOLIGHT )\n    varying vec3 vColor;\n#else\n    #include color_pars_vertex\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n#endif\n\n#include common\n\nvoid main(){\n\n    #if defined( PICKING )\n        vPickingColor = pickingColor;\n    #elif defined( NOLIGHT )\n        vColor = color;\n    #else\n        #include color_vertex\n        #include beginnormal_vertex\n        #include defaultnormal_vertex\n        #ifndef FLAT_SHADED  // Normal computed with derivatives when FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n        #endif\n    #endif\n\n    #include begin_vertex\n    #include project_vertex\n\n    #if defined( NEAR_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\n        vViewPosition = -mvPosition.xyz;\n    #endif\n\n    #include nearclip_vertex\n\n}";

	var Mesh_frag = "#define STANDARD\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\n\n#if defined( NEAR_CLIP ) || ( !defined( PICKING ) && !defined( NOLIGHT ) )\n    varying vec3 vViewPosition;\n#endif\n\n#if defined( PICKING )\n    uniform float objectId;\n    varying vec3 vPickingColor;\n#elif defined( NOLIGHT )\n    varying vec3 vColor;\n#else\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n    #include common\n    #include color_pars_fragment\n    #include fog_pars_fragment\n    #include bsdfs\n    #include lights_pars\n    #include lights_physical_pars_fragment\n#endif\n\nvoid main(){\n\n    #include nearclip_fragment\n\n    #if defined( PICKING )\n\n        gl_FragColor = vec4( vPickingColor, objectId );\n\n    #elif defined( NOLIGHT )\n\n        gl_FragColor = vec4( vColor, opacity );\n\n    #else\n\n        vec4 diffuseColor = vec4( diffuse, opacity );\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveLight = emissive;\n\n        #include color_fragment\n        #include roughnessmap_fragment\n        #include metalnessmap_fragment\n        #include normal_flip\n        #include normal_fragment\n\n        #include dull_interior_fragment\n\n        #include lights_physical_fragment\n        #include lights_template\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n\n        gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n        #include premultiplied_alpha_fragment\n        #include tonemapping_fragment\n        #include encodings_fragment\n        #include fog_fragment\n\n        #include opaque_back_fragment\n\n    #endif\n\n}";

	var Point_vert = "uniform float nearClip;\nuniform float size;\nuniform float canvasHeight;\nuniform float pixelRatio;\n\nvarying vec3 vViewPosition;\n\n#include color_pars_vertex\n#include common\n\nvoid main(){\n\n    #include color_vertex\n    #include begin_vertex\n    #include project_vertex\n\n    #ifdef USE_SIZEATTENUATION\n        gl_PointSize = size * pixelRatio * ( ( canvasHeight / 2.0 ) / -mvPosition.z );\n    #else\n        gl_PointSize = size * pixelRatio;\n    #endif\n\n    vViewPosition = -mvPosition.xyz;\n\n    #include nearclip_vertex\n\n}";

	var Point_frag = "uniform vec3 diffuse;\nuniform float opacity;\n\nvarying vec3 vViewPosition;\n\n#ifdef USE_MAP\n    uniform sampler2D map;\n#endif\n\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n\nvoid main(){\n\n    vec3 outgoingLight = vec3( 0.0 );\n    vec4 diffuseColor = vec4( diffuse, 1.0 );\n\n    #ifdef USE_MAP\n        diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n    #endif\n\n    #include color_fragment\n    #include alphatest_fragment\n\n    outgoingLight = diffuseColor.rgb;\n\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a * opacity );\n\n    #include premultiplied_alpha_fragment\n    #include tonemapping_fragment\n    #include encodings_fragment\n    #include fog_fragment\n\n}";

	var Quad_vert = "varying vec2 vUv;\n\nvoid main() {\n\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}";

	var Quad_frag = "varying vec2 vUv;\n\nuniform sampler2D tForeground;\nuniform float scale;\n\nvoid main() {\n\n    vec4 foreground = texture2D( tForeground, vUv );\n    gl_FragColor = foreground * scale;\n\n}";

	var Ribbon_vert = "#define STANDARD\n\nuniform float nearClip;\n\n#if defined( NEAR_CLIP ) || !defined( PICKING )\n    varying vec3 vViewPosition;\n#endif\n\nattribute vec3 dir;\nattribute float size;\n\n#ifdef PICKING\n    attribute vec3 pickingColor;\n    varying vec3 vPickingColor;\n#else\n    #include color_pars_vertex\n    #ifndef FLAT_SHADED\n        varying vec3 vNormal;\n    #endif\n#endif\n\n#include common\n\nvoid main(void){\n\n    #ifdef PICKING\n        vPickingColor = pickingColor;\n    #else\n        #include color_vertex\n        #include beginnormal_vertex\n        #include defaultnormal_vertex\n        #ifndef FLAT_SHADED  // Normal computed with derivatives when FLAT_SHADED\n            vNormal = normalize( transformedNormal );\n        #endif\n    #endif\n\n    #include begin_vertex\n\n    transformed += normalize( dir ) * size;\n\n    #include project_vertex\n\n    #if defined( NEAR_CLIP ) || !defined( PICKING )\n        vViewPosition = -mvPosition.xyz;\n    #endif\n\n    #include nearclip_vertex\n\n}";

	var SDFFont_vert = "uniform float nearClip;\nuniform float xOffset;\nuniform float yOffset;\nuniform float zOffset;\nuniform float ortho;\n\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n\nattribute vec2 mapping;\nattribute vec2 inputTexCoord;\nattribute float inputSize;\n\n#include color_pars_vertex\n#include common\n\nvoid main(void){\n\n    #include color_vertex\n    texCoord = inputTexCoord;\n\n    vec3 pos = position;\n    if( ortho != 0.0 ){\n        pos += normalize( cameraPosition ) * zOffset;\n    }\n    vec4 cameraPos = modelViewMatrix * vec4( pos, 1.0 );\n    vec4 cameraCornerPos = vec4( cameraPos.xyz, 1.0 );\n    cameraCornerPos.xy += mapping * inputSize * 0.01;\n    cameraCornerPos.x += xOffset;\n    cameraCornerPos.y += yOffset;\n    if( ortho == 0.0 ){\n        cameraCornerPos.xyz += normalize( -cameraCornerPos.xyz ) * zOffset;\n    }\n\n    gl_Position = projectionMatrix * cameraCornerPos;\n\n    vViewPosition = -cameraCornerPos.xyz;\n\n    #include nearclip_vertex\n\n}";

	var SDFFont_frag = "uniform sampler2D fontTexture;\nuniform float opacity;\n\nvarying vec3 vViewPosition;\nvarying vec2 texCoord;\n\n#include common\n#include color_pars_fragment\n#include fog_pars_fragment\n\n#ifdef SDF\n    const float smoothness = 16.0;\n#else\n    const float smoothness = 256.0;\n#endif\nconst float gamma = 2.2;\n\nvoid main(){\n\n    // retrieve signed distance\n    float sdf = texture2D( fontTexture, texCoord ).a;\n\n    // perform adaptive anti-aliasing of the edges\n    float w = clamp(\n        smoothness * ( abs( dFdx( texCoord.x ) ) + abs( dFdy( texCoord.y ) ) ),\n        0.0,\n        0.5\n    );\n    float a = smoothstep( 0.5 - w, 0.5 + w, sdf );\n\n    // gamma correction for linear attenuation\n    a = pow( a, 1.0 / gamma );\n    if( a < 0.2 ) discard;\n    a *= opacity;\n\n    vec3 outgoingLight = vColor;\n\n    gl_FragColor = vec4( outgoingLight, a );\n\n    #include premultiplied_alpha_fragment\n    #include tonemapping_fragment\n    #include encodings_fragment\n    #include fog_fragment\n\n}";

	var SphereImpostor_vert = "uniform mat4 projectionMatrixInverse;\nuniform float nearClip;\n\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n\nattribute vec2 mapping;\nattribute float radius;\n\n#ifdef PICKING\n    attribute vec3 pickingColor;\n    varying vec3 vPickingColor;\n#else\n    #include color_pars_vertex\n#endif\n\nconst mat4 D = mat4(\n    1.0, 0.0, 0.0, 0.0,\n    0.0, 1.0, 0.0, 0.0,\n    0.0, 0.0, 1.0, 0.0,\n    0.0, 0.0, 0.0, -1.0\n);\n\nmat4 transpose( in mat4 inMatrix ) {\n    vec4 i0 = inMatrix[0];\n    vec4 i1 = inMatrix[1];\n    vec4 i2 = inMatrix[2];\n    vec4 i3 = inMatrix[3];\n\n    mat4 outMatrix = mat4(\n        vec4(i0.x, i1.x, i2.x, i3.x),\n        vec4(i0.y, i1.y, i2.y, i3.y),\n        vec4(i0.z, i1.z, i2.z, i3.z),\n        vec4(i0.w, i1.w, i2.w, i3.w)\n    );\n    return outMatrix;\n}\n\n//------------------------------------------------------------------------------\n// Compute point size and center using the technique described in:\n// \"GPU-Based Ray-Casting of Quadratic Surfaces\"\n// by Christian Sigg, Tim Weyrich, Mario Botsch, Markus Gross.\n//\n// Code based on\n/*=========================================================================\n\n Program:   Visualization Toolkit\n Module:    Quadrics_fs.glsl and Quadrics_vs.glsl\n\n Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n All rights reserved.\n See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n This software is distributed WITHOUT ANY WARRANTY; without even\n the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n PURPOSE.  See the above copyright notice for more information.\n\n =========================================================================*/\n\n// .NAME Quadrics_fs.glsl and Quadrics_vs.glsl\n// .SECTION Thanks\n// <verbatim>\n//\n//  This file is part of the PointSprites plugin developed and contributed by\n//\n//  Copyright (c) CSCS - Swiss National Supercomputing Centre\n//                EDF - Electricite de France\n//\n//  John Biddiscombe, Ugo Varetto (CSCS)\n//  Stephane Ploix (EDF)\n//\n// </verbatim>\n//\n// Contributions by Alexander Rose\n// - ported to WebGL\n// - adapted to work with quads\nvoid ComputePointSizeAndPositionInClipCoordSphere(){\n\n    vec2 xbc;\n    vec2 ybc;\n\n    mat4 T = mat4(\n        radius, 0.0, 0.0, 0.0,\n        0.0, radius, 0.0, 0.0,\n        0.0, 0.0, radius, 0.0,\n        position.x, position.y, position.z, 1.0\n    );\n\n    mat4 R = transpose( projectionMatrix * modelViewMatrix * T );\n    float A = dot( R[ 3 ], D * R[ 3 ] );\n    float B = -2.0 * dot( R[ 0 ], D * R[ 3 ] );\n    float C = dot( R[ 0 ], D * R[ 0 ] );\n    xbc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\n    xbc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\n    float sx = abs( xbc[ 0 ] - xbc[ 1 ] ) * 0.5;\n\n    A = dot( R[ 3 ], D * R[ 3 ] );\n    B = -2.0 * dot( R[ 1 ], D * R[ 3 ] );\n    C = dot( R[ 1 ], D * R[ 1 ] );\n    ybc[ 0 ] = ( -B - sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\n    ybc[ 1 ] = ( -B + sqrt( B * B - 4.0 * A * C ) ) / ( 2.0 * A );\n    float sy = abs( ybc[ 0 ] - ybc[ 1 ]  ) * 0.5;\n\n    gl_Position.xy = vec2( 0.5 * ( xbc.x + xbc.y ), 0.5 * ( ybc.x + ybc.y ) );\n    gl_Position.xy -= mapping * vec2( sx, sy );\n    gl_Position.xy *= gl_Position.w;\n\n}\n\nvoid main(void){\n\n    #ifdef PICKING\n        vPickingColor = pickingColor;\n    #else\n        #include color_vertex\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    mvPosition.z -= radius;  // avoid clipping, added again in fragment shader\n\n    gl_Position = projectionMatrix * vec4( mvPosition.xyz, 1.0 );\n    ComputePointSizeAndPositionInClipCoordSphere();\n\n    vRadius = radius;\n    vRadiusSq = radius * radius;\n    vec4 vPoint4 = projectionMatrixInverse * gl_Position;\n    vPoint = vPoint4.xyz / vPoint4.w;\n    vPointViewPosition = -mvPosition.xyz / mvPosition.w;\n\n}";

	var SphereImpostor_frag = "#define STANDARD\n#define IMPOSTOR\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float nearClip;\nuniform mat4 projectionMatrix;\nuniform float ortho;\n\n// uniform vec3 specular;\n// uniform float shininess;\n\nvarying float vRadius;\nvarying float vRadiusSq;\nvarying vec3 vPoint;\nvarying vec3 vPointViewPosition;\n\n#ifdef PICKING\n    uniform float objectId;\n    varying vec3 vPickingColor;\n#else\n    #include common\n    #include color_pars_fragment\n    #include fog_pars_fragment\n    #include bsdfs\n    #include lights_pars\n    // #include lights_phong_pars_fragment\n    #include lights_physical_pars_fragment\n#endif\n\nbool flag2 = false;\nbool interior = false;\nvec3 cameraPos;\nvec3 cameraNormal;\n\n// vec4 poly_color = gl_Color;\n//   if(uf_use_border_hinting == 1.0)\n//   {\n//     vec3 wc_eye_dir = normalize(wc_sp_pt);\n//     float n_dot_e   = abs(dot(wc_sp_nrml,wc_eye_dir));\n//     float alpha     = max(uf_border_color_start_cosine - n_dot_e,0.0)/uf_border_color_start_cosine;\n//     poly_color      = mix(gl_Color,uf_border_color,0.75*alpha);\n//   }\n//   color += (diff + amb)*poly_color + spec*gl_FrontMaterial.specular;\n\n// Calculate depth based on the given camera position.\nfloat calcDepth( in vec3 cameraPos ){\n    vec2 clipZW = cameraPos.z * projectionMatrix[2].zw + projectionMatrix[3].zw;\n    return 0.5 + 0.5 * clipZW.x / clipZW.y;\n}\n\nfloat calcClip( vec3 cameraPos ){\n    return dot( vec4( cameraPos, 1.0 ), vec4( 0.0, 0.0, 1.0, nearClip - 0.5 ) );\n}\n\nbool Impostor( out vec3 cameraPos, out vec3 cameraNormal ){\n\n    vec3 cameraSpherePos = -vPointViewPosition;\n    cameraSpherePos.z += vRadius;\n\n    vec3 rayOrigin = mix( vec3( 0.0, 0.0, 0.0 ), vPoint, ortho );\n    vec3 rayDirection = mix( normalize( vPoint ), vec3( 0.0, 0.0, 1.0 ), ortho );\n    vec3 cameraSphereDir = mix( cameraSpherePos, rayOrigin - cameraSpherePos, ortho );\n\n    float B = dot( rayDirection, cameraSphereDir );\n    float det = B * B + vRadiusSq - dot( cameraSphereDir, cameraSphereDir );\n\n    if( det < 0.0 ){\n        discard;\n        return false;\n    }else{\n        float sqrtDet = sqrt( det );\n        float posT = mix( B + sqrtDet, B + sqrtDet, ortho );\n        float negT = mix( B - sqrtDet, sqrtDet - B, ortho );\n\n        cameraPos = rayDirection * negT + rayOrigin;\n\n        #ifdef NEAR_CLIP\n            if( calcDepth( cameraPos ) <= 0.0 ){\n                cameraPos = rayDirection * posT + rayOrigin;\n                interior = true;\n                return false;\n            }else if( calcClip( cameraPos ) > 0.0 ){\n                cameraPos = rayDirection * posT + rayOrigin;\n                interior = true;\n                flag2 = true;\n                return false;\n            }else{\n                cameraNormal = normalize( cameraPos - cameraSpherePos );\n            }\n        #else\n            if( calcDepth( cameraPos ) <= 0.0 ){\n                cameraPos = rayDirection * posT + rayOrigin;\n                interior = true;\n                return false;\n            }else{\n                cameraNormal = normalize( cameraPos - cameraSpherePos );\n            }\n        #endif\n\n        return true;\n    }\n\n    return false; // ensure that each control flow has a return\n\n}\n\nvoid main(void){\n\n    // vec3 specular = vec3( 1.0, 1.0, 1.0 );\n    // float specularStrength = 1.0;\n    // float shininess = 1.0;\n\n    bool flag = Impostor( cameraPos, cameraNormal );\n\n    #ifdef NEAR_CLIP\n        if( calcClip( cameraPos ) > 0.0 )\n            discard;\n    #endif\n\n    // FIXME not compatible with custom clipping plane\n    //Set the depth based on the new cameraPos.\n    gl_FragDepthEXT = calcDepth( cameraPos );\n    if( !flag ){\n\n        // clamp to near clipping plane and add a tiny value to\n        // make spheres with a greater radius occlude smaller ones\n        #ifdef NEAR_CLIP\n            if( flag2 ){\n                gl_FragDepthEXT = max( 0.0, calcDepth( vec3( - ( nearClip - 0.5 ) ) ) + ( 0.0000001 / vRadius ) );\n            }else if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n            }\n        #else\n            if( gl_FragDepthEXT >= 0.0 ){\n                gl_FragDepthEXT = 0.0 + ( 0.0000001 / vRadius );\n            }\n        #endif\n\n    }\n\n    // bugfix (mac only?)\n    if (gl_FragDepthEXT < 0.0)\n        discard;\n    if (gl_FragDepthEXT > 1.0)\n        discard;\n\n    #ifdef PICKING\n\n        gl_FragColor = vec4( vPickingColor, objectId );\n\n    #else\n\n        // vec3 specColor = vColor;  // vec3( 1.0, 1.0, 1.0 );\n        // vec3 lightDir = vec3( 0.0, 0.0, 1.0 );\n        // vec3 vNormal = cameraNormal;\n\n        // float lambertian = max(dot(lightDir,vNormal), 0.0);\n        // float specular = 0.0;\n\n        // if(lambertian > 0.0) {\n\n        //     vec3 reflectDir = reflect(-lightDir, vNormal);\n        //     vec3 viewDir = normalize(-cameraPos);\n\n        //     float specAngle = max(dot(reflectDir, viewDir), 0.0);\n        //     specular = pow(specAngle, 4.0);\n\n        //     // the exponent controls the shininess (try mode 2)\n        //     specular = pow(specAngle, 16.0);\n\n        //     // according to the rendering equation we would need to multiply\n        //     // with the the \"lambertian\", but this has little visual effect\n        //     specular *= lambertian;\n\n\n        // }\n\n        // gl_FragColor = vec4( lambertian*vColor + specular*specColor, opacity );\n\n        //\n\n        vec3 vNormal = cameraNormal;\n        vec3 vViewPosition = -cameraPos;\n\n        vec4 diffuseColor = vec4( diffuse, opacity );\n        ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n        vec3 totalEmissiveLight = emissive;\n\n        #include color_fragment\n        #include roughnessmap_fragment\n        #include metalnessmap_fragment\n        #include normal_flip\n        #include normal_fragment\n        if( interior ){\n            normal = vec3( 0.0, 0.0, 0.4 );\n        }\n\n        // #include lights_phong_fragment\n        #include lights_physical_fragment\n        #include lights_template\n\n        vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;\n\n        gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n        #include premultiplied_alpha_fragment\n        #include tonemapping_fragment\n        #include encodings_fragment\n        #include fog_fragment\n\n    #endif\n\n}";

	var DullInteriorFragment_glsl = "#ifdef DULL_INTERIOR\n    if( gl_FrontFacing == false ){\n        normal = vec3( 0.0, 0.0, 0.4 );\n    }\n#endif";

	var FogFragment_glsl = "#ifdef USE_FOG\n\n\t// #if defined( USE_LOGDEPTHBUF_EXT ) || defined( IMPOSTOR )\n\t//\n\t// \tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t//\n\t// #else\n\t//\n\t// \tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t//\n\t// #endif\n\n\tfloat depth = length( vViewPosition );\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif";

	var NearclipFragment_glsl = "#ifdef NEAR_CLIP\n    if( vViewPosition.z < nearClip )\n        discard;\n#endif";

	var NearclipVertex_glsl = "#ifdef NEAR_CLIP\n    if( vViewPosition.z < nearClip )\n        gl_Position.z = 2.0 * gl_Position.w;  // move out of [ -w, +w ]\n#endif";

	var OpaqueBackFragment_glsl = "#ifdef OPAQUE_BACK\n    #ifdef FLIP_SIDED\n        if( gl_FrontFacing == true ){\n            gl_FragColor.a = 1.0;\n        }\n    #else\n        if( gl_FrontFacing == false ){\n            gl_FragColor.a = 1.0;\n        }\n    #endif\n#endif";

	var Resources = {

	    // shaders
	    'shader/CylinderImpostor.vert': CylinderImpostor_vert,
	    'shader/CylinderImpostor.frag': CylinderImpostor_frag,
	    'shader/HyperballStickImpostor.vert': HyperballStickImpostor_vert,
	    'shader/HyperballStickImpostor.frag': HyperballStickImpostor_frag,
	    'shader/Line.vert': Line_vert,
	    'shader/Line.frag': Line_frag,
	    'shader/BasicLine.vert': BasicLine_vert,
	    'shader/BasicLine.frag': BasicLine_frag,
	    // 'shader/LineSprite.vert': null,
	    // 'shader/LineSprite.frag': null,
	    'shader/Mesh.vert': Mesh_vert,
	    'shader/Mesh.frag': Mesh_frag,
	    // 'shader/ParticleSprite.vert': null,
	    // 'shader/ParticleSprite.frag': null,
	    'shader/Point.vert': Point_vert,
	    'shader/Point.frag': Point_frag,
	    'shader/Quad.vert': Quad_vert,
	    'shader/Quad.frag': Quad_frag,
	    'shader/Ribbon.vert': Ribbon_vert,
	    'shader/SDFFont.vert': SDFFont_vert,
	    'shader/SDFFont.frag': SDFFont_frag,
	    // 'shader/SphereHalo.vert': null,
	    // 'shader/SphereHalo.frag': null,
	    'shader/SphereImpostor.vert': SphereImpostor_vert,
	    'shader/SphereImpostor.frag': SphereImpostor_frag,

	    // shader chunks
	    'shader/chunk/dull_interior_fragment.glsl': DullInteriorFragment_glsl,
	    'shader/chunk/fog_fragment.glsl': FogFragment_glsl,
	    'shader/chunk/nearclip_fragment.glsl': NearclipFragment_glsl,
	    'shader/chunk/nearclip_vertex.glsl': NearclipVertex_glsl,
	    'shader/chunk/opaque_back_fragment.glsl': OpaqueBackFragment_glsl,

	};


	function getDefines( defines ){

	    if( defines === undefined ) return "";

	    var lines = [];

	    for ( var name in defines ) {

	        var value = defines[ name ];

	        if ( value === false ) continue;

	        lines.push( '#define ' + name + ' ' + value );

	    }

	    return lines.join( '\n' ) + "\n";

	}


	var reInclude = /^(?!\/\/)\s*#include\s+(\S+)/gmi;
	var shaderCache = {};

	function getShader( name, defines ){

	    defines = defines || {};

	    var hash = name + "|";
	    for( var key in defines ){
	        hash += key + ":" + defines[ key ];
	    }

	    if( !shaderCache[ hash ] ){

	        var definesText = getDefines( defines );

	        var shaderText = Resources[ 'shader/' + name ];
	        if( !shaderText ){
	            throw "empty shader, '" + name + "'";
	        }
	        shaderText = shaderText.replace( reInclude, function( match, p1 ){

	            var path = 'shader/chunk/' + p1 + '.glsl';
	            var chunk = Resources[ path ] || ShaderChunk[ p1 ];

	            return chunk ? chunk : "";

	        } );

	        shaderCache[ hash ] = definesText + shaderText;

	    }

	    return shaderCache[ hash ];

	}

	/**
	 * @file Tiled Renderer
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function TiledRenderer( renderer, camera, viewer, params ){

	    var p = params || {};

	    var factor = p.factor!==undefined ? p.factor : 2;
	    var antialias = p.antialias!==undefined ? p.antialias : false;

	    var onProgress = p.onProgress;
	    var onFinish = p.onFinish;

	    //

	    if( antialias ) factor *= 2;
	    var n = factor * factor;

	    // canvas

	    var canvas = document.createElement( 'canvas' );
	    canvas.style.display = "none";
	    document.body.appendChild( canvas );

	    var width = viewer.width;
	    var height = viewer.height;

	    if( antialias ){
	        canvas.width = width * factor / 2;
	        canvas.height = height * factor / 2;
	    }else{
	        canvas.width = width * factor;
	        canvas.height = height * factor;
	    }

	    var ctx = canvas.getContext( '2d' );

	    var viewerSampleLevel = viewer.sampleLevel;
	    viewer.setSampling( -1 );

	    function renderTile( i ){

	        var x = i % factor;
	        var y = Math.floor( i / factor );

	        var offsetX = x * width;
	        var offsetY = y * height;

	        viewer.camera.setViewOffset(
	            width * factor,
	            height * factor,
	            offsetX,
	            offsetY,
	            width,
	            height
	        );

	        viewer.render();

	        if( antialias ){
	            ctx.drawImage(
	                renderer.domElement,
	                Math.floor( offsetX / 2 ),
	                Math.floor( offsetY / 2 ),
	                Math.ceil( width / 2 ),
	                Math.ceil( height / 2 )
	            );
	        }else{
	            ctx.drawImage(
	                renderer.domElement,
	                Math.floor( offsetX ),
	                Math.floor( offsetY ),
	                Math.ceil( width ),
	                Math.ceil( height )
	            );
	        }

	        if( typeof onProgress === "function" ){
	            onProgress( i + 1, n, false );
	        }

	    }

	    function finalize(){

	        viewer.setSampling( viewerSampleLevel );
	        viewer.camera.view = null;

	        if( typeof onFinish === "function" ){
	            onFinish( n + 1, n, false );
	        }

	    }

	    function render(){

	        for( var i = 0; i <= n; ++i ){
	            if( i === n ){
	                finalize();
	            }else{
	                renderTile( i );
	            }
	        }

	    }

	    function renderAsync(){

	        var count = 0;

	        function fn(){
	            if( count === n ){
	                finalize();
	            }else{
	                renderTile( count );
	            }
	            count += 1;
	        }

	        for( var i = 0; i <= n; ++i ){
	            setTimeout( fn, 0, i );
	        }

	    }

	    function dispose(){

	        document.body.removeChild( canvas );

	    }

	    // API

	    this.render = render;
	    this.renderAsync = renderAsync;
	    this.dispose = dispose;

	    this.canvas = canvas;

	}

	TiledRenderer.prototype.constructor = TiledRenderer;

	var TwoPI = 2 * Math.PI;

	function circularMean( array, max, stride, offset, indices ){

	    // http://en.wikipedia.org/wiki/Center_of_mass#Systems_with_periodic_boundary_conditions

	    // Bai, Linge; Breen, David (2008). Calculating Center of Mass in an Unbounded 2D Environment. Journal of Graphics, GPU, and Game Tools 13 (4): 53–60.

	    // http://stackoverflow.com/questions/18166507/using-fft-to-find-the-center-of-mass-under-periodic-boundary-conditions

	    stride = stride || 1;
	    offset = offset || 0;

	    var n = indices ? indices.length : array.length / stride;
	    var angle, i, c;

	    var cosMean = 0;
	    var sinMean = 0;

	    if( indices ){

	        for( i = 0; i < n; ++i ){

	            c = ( array[ indices[ i ] * stride + offset ] + max ) % max;

	            angle = ( c / max ) * TwoPI - Math.PI;

	            cosMean += Math.cos( angle );
	            sinMean += Math.sin( angle );

	        }

	    }else{

	        for( i = offset; i < n; i += stride ){

	            c = ( array[ i ] + max ) % max;

	            angle = ( c / max ) * TwoPI - Math.PI;

	            cosMean += Math.cos( angle );
	            sinMean += Math.sin( angle );

	        }

	    }

	    cosMean /= n;
	    sinMean /= n;

	    var meanAngle = Math.atan2( sinMean, cosMean );

	    var mean = ( meanAngle + Math.PI ) / TwoPI * max;

	    return mean;

	}


	function calculateCenterArray( array1, array2, center, offset ){

	    var n = array1.length;
	    center = center || new Float32Array( n );
	    offset = offset || 0;

	    for( var i = 0; i < n; i+=3 ){

	        center[ offset + i + 0 ] = ( array1[ i + 0 ] + array2[ i + 0 ] ) / 2.0;
	        center[ offset + i + 1 ] = ( array1[ i + 1 ] + array2[ i + 1 ] ) / 2.0;
	        center[ offset + i + 2 ] = ( array1[ i + 2 ] + array2[ i + 2 ] ) / 2.0;

	    }

	    return center;

	}


	function uniformArray( n, a ){

	    var array = new Float32Array( n );

	    for( var i = 0; i < n; ++i ){

	        array[ i ] = a;

	    }

	    return array;

	}


	function uniformArray3( n, a, b, c ){

	    var array = new Float32Array( n * 3 );

	    var j;

	    for( var i = 0; i < n; ++i ){

	        j = i * 3;

	        array[ j + 0 ] = a;
	        array[ j + 1 ] = b;
	        array[ j + 2 ] = c;

	    }

	    return array;

	}


	function calculateMinArray( array1, array2 ){

	    var n = array1.length;
	    var min = new Float32Array( n );

	    for( var i = 0; i < n; i++ ){

	        min[ i ] = Math.min( array1[ i ],  array2[ i ] );

	    }

	    return min;

	}


	function copyArray( src, dst, srcOffset, dstOffset, length ){

	    for( var i = 0; i < length; ++i ){
	        dst[ dstOffset + i ] = src[ srcOffset + i ];
	    }

	}


	function copyWithin( array, srcOffset, dstOffset, length ){

	    copyArray( array, array, srcOffset, dstOffset, length );

	}


	var swap = new Float32Array( 4 );
	var temp = new Float32Array( 4 );
	/**
	 * quicksortIP
	 * @function
	 * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
	 * @author I4DS http://www.fhnw.ch/i4ds, 2013
	 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
	 * @description
	 * In-place quicksort for typed arrays (e.g. for Float32Array)
	 * provides fast sorting
	 * useful e.g. for a custom shader and/or BufferGeometry
	 * Complexity: http://bigocheatsheet.com/ see Quicksort
	 *
	 * @example
	 * points: [x, y, z, x, y, z, x, y, z, ...]
	 * eleSize: 3 //because of (x, y, z)
	 * orderElement: 0 //order according to x
	 *
	 * @param {TypedArray} arr - array to be sorted
	 * @param {Integer} eleSize - element size
	 * @param {Integer} orderElement - index of element used for sorting, < eleSize
	 * @param {Integer} [begin] - start index for range to be sorted
	 * @param {Integer} [end] - end index for range to be sorted
	 */
	function quicksortIP( arr, eleSize, orderElement, begin, end ){

	    begin = begin || 0;
	    end = ( end || ( arr.length / eleSize ) ) - 1;

	    var stack = [];
	    var sp = -1;
	    var left = begin;
	    var right = end;
	    var tmp = 0.0, x = 0, y = 0;

	    var swapF = function ( a, b ) {
	        a *= eleSize; b *= eleSize;
	        for ( y = 0; y < eleSize; y ++ ) {
	            tmp = arr[ a + y ];
	            arr[ a + y ] = arr[ b + y ];
	            arr[ b + y ] = tmp;
	        }
	    };

	    var i, j;

	    while ( true ) {

	        if ( right - left <= 25 ) {

	            for ( j= left + 1; j <= right; j ++ ) {

	                for ( x = 0; x < eleSize; x ++ ) {
	                    swap[ x ] = arr[ j * eleSize + x ];
	                }

	                i = j - 1;

	                while ( i >= left && arr[ i * eleSize + orderElement ] > swap[orderElement ] ) {
	                    for ( x = 0; x < eleSize; x ++ ) {
	                        arr[ ( i + 1 ) * eleSize + x ] = arr[ i * eleSize + x ];
	                    }
	                    i --;
	                }

	                for ( x = 0; x < eleSize; x ++ ) {
	                    arr[ ( i + 1 ) * eleSize + x ] = swap[ x ];
	                }

	            }

	            if ( sp == -1 ) break;

	            right = stack[ sp -- ]; //?
	            left = stack[ sp -- ];

	        } else {

	            var median = ( left + right ) >> 1;

	            i = left + 1;
	            j = right;

	            swapF( median, i );

	            if ( arr[ left * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ){
	                swapF( left, right );
	            }

	            if ( arr[ i * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ) {
	                swapF( i, right );
	            }

	            if ( arr[ left * eleSize + orderElement ] > arr[ i * eleSize + orderElement ] ) {
	                swapF( left, i );
	            }

	            for ( x = 0; x < eleSize; x ++ ) {
	                temp[ x ] = arr[ i * eleSize + x ];
	            }

	            while ( true ) {
	                do i ++; while ( arr[ i * eleSize + orderElement ] < temp[ orderElement ] );
	                do j --; while ( arr[ j * eleSize + orderElement ] > temp[ orderElement ] );
	                if ( j < i ) break;
	                swapF( i, j );
	            }

	            for ( x = 0; x < eleSize; x ++ ) {
	                arr[ ( left + 1 ) * eleSize + x ] = arr[ j * eleSize + x ];
	                arr[ j * eleSize + x ] = temp[ x ];
	            }

	            if ( right - i + 1 >= j - left ) {
	                stack[ ++ sp ] = i;
	                stack[ ++ sp ] = right;
	                right = j - 1;
	            } else {
	                stack[ ++ sp ] = left;
	                stack[ ++ sp ] = j - 1;
	                left = i;
	            }

	        }

	    }

	    return arr;

	}

	function _trimCanvas( canvas, r, g, b, a ){

	    var canvasHeight = canvas.height;
	    var canvasWidth = canvas.width;

	    var ctx = canvas.getContext( '2d' );
	    var pixels = ctx.getImageData(0, 0, canvasWidth, canvasHeight ).data;

	    var x, y, doBreak, off;

	    doBreak = false;
	    for( y = 0; y < canvasHeight; y++ ) {
	        for( x = 0; x < canvasWidth; x++ ) {
	            off = ( y * canvasWidth + x ) * 4;
	            if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
	                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a ){
	                doBreak = true;
	                break;
	            }
	        }
	        if( doBreak ){
	            break;
	        }
	    }
	    var topY = y;

	    doBreak = false;
	    for( x = 0; x < canvasWidth; x++ ) {
	        for( y = 0; y < canvasHeight; y++ ) {
	            off = ( y * canvasWidth + x ) * 4;
	            if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
	                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a ){
	                doBreak = true;
	                break;
	            }
	        }
	        if( doBreak ){
	            break;
	        }
	    }
	    var topX = x;

	    doBreak = false;
	    for( y = canvasHeight-1; y >= 0; y-- ) {
	        for( x = canvasWidth-1; x >= 0; x-- ) {
	            off = ( y * canvasWidth + x ) * 4;
	            if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
	                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a ){
	                doBreak = true;
	                break;
	            }
	        }
	        if( doBreak ){
	            break;
	        }
	    }
	    var bottomY = y;

	    doBreak = false;
	    for( x = canvasWidth-1; x >= 0; x-- ) {
	        for( y = canvasHeight-1; y >= 0; y-- ) {
	            off = ( y * canvasWidth + x ) * 4;
	            if( pixels[ off ] !== r || pixels[ off + 1 ] !== g ||
	                    pixels[ off + 2 ] !== b || pixels[ off + 3 ] !== a ){
	                doBreak = true;
	                break;
	            }
	        }
	        if( doBreak ){
	            break;
	        }
	    }
	    var bottomX = x;

	    var trimedCanvas = document.createElement( 'canvas' );
	    trimedCanvas.style.display = "hidden";
	    document.body.appendChild( trimedCanvas );

	    trimedCanvas.width = bottomX - topX;
	    trimedCanvas.height = bottomY - topY;

	    var trimedCtx = trimedCanvas.getContext( '2d' );

	    trimedCtx.drawImage(
	        canvas,
	        topX, topY,
	        trimedCanvas.width, trimedCanvas.height,
	        0, 0,
	        trimedCanvas.width, trimedCanvas.height
	    );

	    return trimedCanvas;

	}


	function makeImage( viewer, params ){

	    var p = params || {};

	    var trim = p.trim!==undefined ? p.trim : false;
	    var factor = p.factor!==undefined ? p.factor : 1;
	    var antialias = p.antialias!==undefined ? p.antialias : false;
	    var transparent = p.transparent!==undefined ? p.transparent : false;

	    var renderer = viewer.renderer;
	    var camera = viewer.camera;

	    var originalClearAlpha = renderer.getClearAlpha();
	    var backgroundColor = renderer.getClearColor();

	    function setLineWidthAndPixelSize( invert ){
	        var _factor = factor;
	        if( antialias ) _factor *= 2;
	        if( invert ) _factor = 1 / _factor;
	        viewer.scene.traverse( function( o ){
	            var m = o.material;
	            if( m && m.linewidth ){
	                m.linewidth *= _factor;
	            }
	            if( m && m.uniforms && m.uniforms.size ){
	                if( m.uniforms.size.__seen === undefined ){
	                    m.uniforms.size.value *= _factor;
	                    m.uniforms.size.__seen = true;
	                }
	            }
	        } );
	        viewer.scene.traverse( function( o ){
	            var m = o.material;
	            if( m && m.uniforms && m.uniforms.size ){
	                delete m.uniforms.size.__seen;
	            }
	        } );
	    }

	    function trimCanvas( canvas ){
	        if( trim ){
	            var bg = backgroundColor;
	            var r = ( transparent ? 0 : bg.r * 255 ) | 0;
	            var g = ( transparent ? 0 : bg.g * 255 ) | 0;
	            var b = ( transparent ? 0 : bg.b * 255 ) | 0;
	            var a = ( transparent ? 0 : 255 ) | 0;
	            return _trimCanvas( canvas, r, g, b, a );
	        }else{
	            return canvas;
	        }
	    }

	    function onProgress( i, n, finished ){
	        if( typeof p.onProgress === "function" ){
	            p.onProgress( i, n, finished );
	        }
	    }

	    return new Promise( function( resolve, reject ){

	        var tiledRenderer = new TiledRenderer(
	            renderer, camera, viewer,
	            {
	                factor: factor,
	                antialias: antialias,
	                onProgress: onProgress,
	                onFinish: onFinish
	            }
	        );

	        renderer.setClearAlpha( transparent ? 0 : 1 );
	        setLineWidthAndPixelSize();
	        tiledRenderer.renderAsync();

	        function onFinish( i, n ){
	            var canvas = trimCanvas( tiledRenderer.canvas );
	            canvas.toBlob(
	                function( blob ){
	                    renderer.setClearAlpha( originalClearAlpha );
	                    setLineWidthAndPixelSize( true );
	                    viewer.requestRender();
	                    tiledRenderer.dispose();
	                    onProgress( n, n, true );
	                    resolve( blob );
	                },
	                "image/png"
	            );
	        }

	    } );

	}


	var vertex = new Vector3();
	var matrix = new Matrix4();
	var modelViewProjectionMatrix = new Matrix4();

	function sortProjectedPosition( scene, camera ){

	    // Log.time( "sort" );

	    var i;

	    scene.traverseVisible( function ( o ){

	        if( !( o instanceof Points ) || !o.sortParticles ){
	            return;
	        }

	        var attributes = o.geometry.attributes;
	        var n = attributes.position.count;

	        if( n === 0 ) return;

	        matrix.multiplyMatrices(
	            camera.matrixWorldInverse, o.matrixWorld
	        );
	        modelViewProjectionMatrix.multiplyMatrices(
	            camera.projectionMatrix, matrix
	        );

	        if( !o.userData.sortData ){
	            o.userData.sortData = {};
	        }

	        var sortData = o.userData.sortData;

	        if( !sortData.__sortArray ){
	            sortData.__sortArray = new Float32Array( n * 2 );
	        }

	        var sortArray = sortData.__sortArray;

	        for( i = 0; i < n; ++i ){

	            var i2 = 2 * i;

	            vertex.fromArray( attributes.position.array, i * 3 );
	            vertex.applyProjection( modelViewProjectionMatrix );

	            // negate, so that sorting order is reversed
	            sortArray[ i2 ] = -vertex.z;
	            sortArray[ i2 + 1 ] = i;

	        }

	        quicksortIP( sortArray, 2, 0 );

	        var index, indexSrc, indexDst, tmpTab;

	        for( var name in attributes ){

	            var attr = attributes[ name ];
	            var array = attr.array;
	            var itemSize = attr.itemSize;

	            if( !sortData[ name ] ){
	                sortData[ name ] = new Float32Array(
	                    itemSize * n
	                );
	            }

	            tmpTab = sortData[ name ];
	            sortData[ name ] = array;

	            for( i = 0; i < n; ++i ){

	                index = sortArray[ i * 2 + 1 ];

	                for( var j = 0; j < itemSize; ++j ){
	                    indexSrc = index * itemSize + j;
	                    indexDst = i * itemSize + j;
	                    tmpTab[ indexDst ] = array[ indexSrc ];
	                }

	            }

	            attributes[ name ].array = tmpTab;
	            attributes[ name ].needsUpdate = true;

	        }

	    } );

	    // Log.timeEnd( "sort" );

	}


	var projectionMatrixInverse = new Matrix4();
	var projectionMatrixTranspose = new Matrix4();

	function updateMaterialUniforms( group, camera, renderer, cDist, bRadius ){

	    var canvasHeight = renderer.getSize().height;
	    var pixelRatio = renderer.getPixelRatio();
	    var ortho = camera.type === "OrthographicCamera" ? 1.0 : 0.0;

	    projectionMatrixInverse.getInverse( camera.projectionMatrix );
	    projectionMatrixTranspose.copy( camera.projectionMatrix ).transpose();

	    group.traverse( function( o ){

	        var m = o.material;
	        if( !m ) return;

	        var u = o.material.uniforms;
	        if( !u ) return;

	        if( m.clipNear ){
	            var nearFactor = ( 50 - m.clipNear ) / 50;
	            var nearClip = cDist - ( bRadius * nearFactor );
	            u.nearClip.value = nearClip;
	        }

	        if( u.canvasHeight ){
	            u.canvasHeight.value = canvasHeight;
	        }

	        if( u.pixelRatio ){
	            u.pixelRatio.value = pixelRatio;
	        }

	        if( u.projectionMatrixInverse ){
	            u.projectionMatrixInverse.value.copy(
	                projectionMatrixInverse
	            );
	        }

	        if( u.projectionMatrixTranspose ){
	            u.projectionMatrixTranspose.value.copy(
	                projectionMatrixTranspose
	            );
	        }

	        if( u.ortho ){
	            u.ortho.value = ortho;
	        }

	    } );

	}

	var JitterVectors = [
	    [
	        [ 0, 0 ]
	    ],
	    [
	        [ 4, 4 ], [ - 4, - 4 ]
	    ],
	    [
	        [ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]
	    ],
	    [
	        [ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],
	        [ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]
	    ],
	    [
	        [ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],
	        [ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],
	        [ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],
	        [ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]
	    ],
	    [
	        [ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],
	        [ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],
	        [ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],
	        [ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],
	        [ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],
	        [ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],
	        [ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],
	        [ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]
	    ]
	];

	JitterVectors.forEach( function( offsetList ){
	    offsetList.forEach( function( offset ){
	        // 0.0625 = 1 / 16
	        offset[ 0 ] *= 0.0625;
	        offset[ 1 ] *= 0.0625;
	    } );
	} );


	/**
	 * [Viewer description]
	 * @class
	 * @param {String} eid
	 */
	function Viewer( eid, params ){

	    var _signals = {
	        orientationChanged: new Signal(),
	    };

	    var container;
	    if( eid ){
	        container = document.getElementById( eid );
	    }else{
	        container = document.createElement( 'div' );
	    }

	    var width, height;
	    if ( container === document ) {
	        width = window.innerWidth;
	        height = window.innerHeight;
	    } else {
	        var box = container.getBoundingClientRect();
	        width = box.width;
	        height = box.height;
	    }

	    var rendering, renderPending, sampleLevel, isStill, cDist, bRadius;

	    var parameters;
	    initParams();

	    var stats;
	    initStats();

	    var perspectiveCamera, orthographicCamera, camera;
	    initCamera();

	    var scene, pointLight, ambientLight;
	    var rotationGroup, modelGroup, pickingGroup, backgroundGroup, helperGroup;
	    initScene();

	    var renderer, indexUint16, supportsHalfFloat;
	    var pickingTarget, sampleTarget, holdTarget;
	    var compositeUniforms, compositeMaterial, compositeCamera, compositeScene;
	    if( initRenderer() === false ){
	        this.container = container;
	        return;
	    }

	    var controls;
	    initControls();

	    var boundingBoxMesh;
	    var boundingBox = new Box3();
	    initHelper();

	    // fog & background
	    setBackground();
	    setFog();

	    var distVector = new Vector3();

	    var info = {
	        memory: {
	            programs: 0,
	            geometries: 0,
	            textures: 0
	        },
	        render: {
	            calls: 0,
	            vertices: 0,
	            faces: 0,
	            points: 0
	        }
	    };

	    function initParams(){

	        parameters = {

	            fogColor: new Color( 0x000000 ),
	            fogNear: 50,
	            fogFar: 100,

	            backgroundColor: new Color( 0x000000 ),

	            cameraType: "perspective",
	            cameraFov: 40,
	            cameraZ: -80, // FIXME initial value should be automatically determined

	            clipNear: 0,
	            clipFar: 100,
	            clipDist: 10,

	            spinAxis: null,
	            spinAngle: 0.01,

	            lightColor: new Color( 0xdddddd ),
	            lightIntensity: 1.0,
	            ambientColor: new Color( 0xdddddd ),
	            ambientIntensity: 0.2,

	            holdRendering: false,
	            sampleLevel: 0

	        };

	    }

	    function initCamera(){

	        var lookAt = new Vector3( 0, 0, 0 );

	        perspectiveCamera = new PerspectiveCamera(
	            parameters.cameraFov, width / height, 0.1, 10000
	        );
	        perspectiveCamera.position.z = parameters.cameraZ;
	        perspectiveCamera.lookAt( lookAt );

	        orthographicCamera = new OrthographicCamera(
	            width / -2, width / 2,
	            height / 2, height / -2,
	            0.1, 10000
	        );
	        orthographicCamera.position.z = parameters.cameraZ;
	        orthographicCamera.lookAt( lookAt );

	        if( parameters.cameraType === "orthographic" ){
	            camera = orthographicCamera;
	        }else{  // parameters.cameraType === "perspective"
	            camera = perspectiveCamera;
	        }
	        camera.updateProjectionMatrix();

	    }

	    function initRenderer(){

	        try{
	            renderer = new WebGLRenderer( {
	                preserveDrawingBuffer: true,
	                alpha: true,
	                antialias: true
	            } );
	        }catch( e ){
	            container.innerHTML = WebglErrorMessage;
	            return false;
	        }
	        renderer.setPixelRatio( window.devicePixelRatio );
	        renderer.setSize( width, height );
	        renderer.autoClear = false;
	        renderer.sortObjects = true;

	        // var gl = renderer.getContext();
	        // console.log( gl.getContextAttributes().antialias );
	        // console.log( gl.getParameter(gl.SAMPLES) );

	        setExtensionFragDepth( renderer.extensions.get( "EXT_frag_depth" ) );
	        indexUint16 = !renderer.extensions.get( 'OES_element_index_uint' );

	        setSupportsReadPixelsFloat(
	            ( Browser === "Chrome" &&
	                renderer.extensions.get( 'OES_texture_float' ) ) ||
	            ( renderer.extensions.get( 'OES_texture_float' ) &&
	                renderer.extensions.get( "WEBGL_color_buffer_float" ) )
	        );

	        container.appendChild( renderer.domElement );

	        // picking texture

	        renderer.extensions.get( 'OES_texture_float' );
	        supportsHalfFloat = renderer.extensions.get( 'OES_texture_half_float' );
	        renderer.extensions.get( "WEBGL_color_buffer_float" );

	        pickingTarget = new WebGLRenderTarget(
	            width * window.devicePixelRatio,
	            height * window.devicePixelRatio,
	            {
	                minFilter: NearestFilter,
	                magFilter: NearestFilter,
	                stencilBuffer: false,
	                format: RGBAFormat,
	                type: SupportsReadPixelsFloat ? FloatType : UnsignedByteType
	            }
	        );
	        pickingTarget.texture.generateMipmaps = false;

	        // msaa textures

	        sampleTarget = new WebGLRenderTarget(
	            width * window.devicePixelRatio,
	            height * window.devicePixelRatio,
	            {
	                minFilter: NearestFilter,
	                magFilter: NearestFilter,
	                format: RGBAFormat,
	            }
	        );

	        holdTarget = new WebGLRenderTarget(
	            width * window.devicePixelRatio,
	            height * window.devicePixelRatio,
	            {
	                minFilter: NearestFilter,
	                magFilter: NearestFilter,
	                format: RGBAFormat,
	                type: supportsHalfFloat ? HalfFloatType : FloatType
	            }
	        );

	        compositeUniforms = {
	            "tForeground": { type: "t", value: null },
	            "scale": { type: "f", value: 1.0 }
	        };

	        compositeMaterial = new ShaderMaterial( {
	            uniforms: compositeUniforms,
	            vertexShader: getShader( "Quad.vert" ),
	            fragmentShader: getShader( "Quad.frag" ),
	            premultipliedAlpha: true,
	            transparent: true,
	            blending: AdditiveBlending,
	            depthTest: false,
	            depthWrite: false
	        } );

	        compositeCamera = new OrthographicCamera( -1, 1, 1, -1, 0, 1 );
	        compositeScene = new Scene().add( new Mesh(
	            new PlaneGeometry( 2, 2 ), compositeMaterial
	        ) );

	    }

	    function initScene(){

	        if( !scene ){
	            scene = new Scene();
	        }

	        rotationGroup = new Group();
	        rotationGroup.name = "rotationGroup";
	        scene.add( rotationGroup );

	        modelGroup = new Group();
	        modelGroup.name = "modelGroup";
	        rotationGroup.add( modelGroup );

	        pickingGroup = new Group();
	        pickingGroup.name = "pickingGroup";
	        rotationGroup.add( pickingGroup );

	        backgroundGroup = new Group();
	        backgroundGroup.name = "backgroundGroup";
	        rotationGroup.add( backgroundGroup );

	        helperGroup = new Group();
	        helperGroup.name = "helperGroup";
	        rotationGroup.add( helperGroup );

	        // fog

	        scene.fog = new Fog();

	        // light

	        pointLight = new SpotLight(
	            parameters.lightColor, parameters.lightIntensity
	        );
	        scene.add( pointLight );

	        ambientLight = new AmbientLight(
	            parameters.ambientLight, parameters.ambientIntensity
	        );
	        scene.add( ambientLight );

	    }

	    function initHelper(){

	        var indices = new Uint16Array( [
	            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,
	            6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7
	        ] );
	        var positions = new Float32Array( 8 * 3 );

	        var bbGeometry = new BufferGeometry();
	        bbGeometry.setIndex( new BufferAttribute( indices, 1 ) );
	        bbGeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
	        var bbMaterial = new ShaderMaterial( {
	            uniforms: { "uColor": { value: new Color( "skyblue" ) } },
	            vertexShader: getShader( "BasicLine.vert" ),
	            fragmentShader: getShader( "BasicLine.frag" ),
	            linewidth: 2
	        } );

	        boundingBoxMesh = new LineSegments( bbGeometry, bbMaterial );
	        helperGroup.add( boundingBoxMesh );

	    }

	    function updateHelper(){

	        var position = boundingBoxMesh.geometry.attributes.position;
	        var array = position.array;

	        var min = boundingBox.min;
	        var max = boundingBox.max;

	        array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
	        array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
	        array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
	        array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
	        array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
	        array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
	        array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
	        array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

	        position.needsUpdate = true;

	        if( !boundingBox.isEmpty() ){
	            boundingBoxMesh.geometry.computeBoundingSphere();
	        }

	    }

	    function initControls(){

	        function preventDefault( e ){
	            e.preventDefault();
	        }
	        renderer.domElement.addEventListener(
	            'mousewheel', preventDefault, false
	        );
	        renderer.domElement.addEventListener(  // firefox
	            'MozMousePixelScroll', preventDefault, false
	        );
	        renderer.domElement.addEventListener(
	            'touchmove', preventDefault, false
	        );

	        controls = new TrackballControls( camera, renderer.domElement );
	        controls.rotateSpeed = 2.0;
	        controls.zoomSpeed = 1.2;
	        controls.panSpeed = 0.8;
	        controls.staticMoving = true;
	        // controls.dynamicDampingFactor = 0.3;
	        controls.keys = [ 65, 83, 68 ];

	        controls.addEventListener( 'change', requestRender, false );

	        document.addEventListener(
	            'mousemove', controls.update.bind( controls ), false
	        );
	        document.addEventListener(
	            'touchmove', controls.update.bind( controls ), false
	        );

	        controls.addEventListener(
	            'change',
	            function(){
	                _signals.orientationChanged.dispatch();
	            },
	            false
	        );

	    }

	    function initStats(){

	        stats = new Stats();

	    }

	    function add( buffer, instanceList ){

	        // Log.time( "Viewer.add" );

	        if( instanceList ){

	            instanceList.forEach( function( instance ){
	                addBuffer( buffer, instance );
	            } );

	        }else{

	            addBuffer( buffer );

	        }

	        if( buffer.background ){
	            backgroundGroup.add( buffer.group );
	            backgroundGroup.add( buffer.wireframeGroup );
	        }else{
	            modelGroup.add( buffer.group );
	            modelGroup.add( buffer.wireframeGroup );
	        }

	        if( buffer.pickable ){
	            pickingGroup.add( buffer.pickingGroup );
	        }

	        rotationGroup.updateMatrixWorld();
	        if( exports.Debug ) updateHelper();

	        // requestRender();

	        // Log.timeEnd( "Viewer.add" );

	    }

	    function addBuffer( buffer, instance ){

	        // Log.time( "Viewer.addBuffer" );

	        var mesh = buffer.getMesh();
	        mesh.userData.buffer = buffer;
	        if( instance ){
	            mesh.applyMatrix( instance.matrix );
	            mesh.userData.instance = instance;
	        }
	        buffer.group.add( mesh );

	        var wireframeMesh = buffer.getWireframeMesh();
	        wireframeMesh.userData.buffer = buffer;
	        if( instance ){
	            // wireframeMesh.applyMatrix( instance.matrix );
	            wireframeMesh.matrix.copy( mesh.matrix );
	            wireframeMesh.position.copy( mesh.position );
	            wireframeMesh.quaternion.copy( mesh.quaternion );
	            wireframeMesh.scale.copy( mesh.scale );
	            wireframeMesh.userData.instance = instance;
	        }
	        buffer.wireframeGroup.add( wireframeMesh );

	        if( buffer.pickable ){

	            var pickingMesh = buffer.getPickingMesh();
	            pickingMesh.userData.buffer = buffer;
	            if( instance ){
	                // pickingMesh.applyMatrix( instance.matrix );
	                pickingMesh.matrix.copy( mesh.matrix );
	                pickingMesh.position.copy( mesh.position );
	                pickingMesh.quaternion.copy( mesh.quaternion );
	                pickingMesh.scale.copy( mesh.scale );
	                pickingMesh.userData.instance = instance;
	            }
	            buffer.pickingGroup.add( pickingMesh );

	        }

	        if( instance ){
	            updateBoundingBox( buffer.geometry, instance.matrix );
	        }else{
	            updateBoundingBox( buffer.geometry );
	        }

	        // Log.timeEnd( "Viewer.addBuffer" );

	    }

	    function remove( buffer ){

	        rotationGroup.children.forEach( function( group ){
	            group.remove( buffer.group );
	            group.remove( buffer.wireframeGroup );
	        } );

	        if( buffer.pickable ){
	            pickingGroup.remove( buffer.pickingGroup );
	        }

	        updateBoundingBox();
	        if( exports.Debug ) updateHelper();

	        // requestRender();

	    }

	    function updateBoundingBox( geometry, matrix ){

	        function updateGeometry( geometry, matrix ){

	            if( geometry.attributes.position.count === 0 ) return;

	            if( !geometry.boundingBox ){
	                geometry.computeBoundingBox();
	            }

	            var geoBoundingBox;
	            if( matrix ){
	                geoBoundingBox = geometry.boundingBox.clone();
	                geoBoundingBox.applyMatrix4( matrix );
	            }else{
	                geoBoundingBox = geometry.boundingBox;
	            }

	            if( geoBoundingBox.min.equals( geoBoundingBox.max ) ){
	                // mainly to give a single impostor geometry some volume
	                // as it is only expanded in the shader on the GPU
	                geoBoundingBox.expandByScalar( 5 );
	            }

	            boundingBox.expandByPoint( geoBoundingBox.min );
	            boundingBox.expandByPoint( geoBoundingBox.max );

	        }

	        function updateNode( node ){

	            if( node.geometry !== undefined ){
	                var matrix;
	                if( node.userData.instance ){
	                    matrix = node.userData.instance.matrix;
	                }
	                updateGeometry( node.geometry, matrix );
	            }

	        }

	        if( geometry ){
	            updateGeometry( geometry, matrix );
	        }else{
	            boundingBox.makeEmpty();
	            modelGroup.traverse( updateNode );
	            backgroundGroup.traverse( updateNode );
	        }

	        controls.maxDistance = boundingBox.size().length() * 10;

	    }

	    function getImage(){

	        return new Promise( function( resolve, reject ){
	            renderer.domElement.toBlob( resolve, "image/png" );
	        } );

	    }

	    function makeImage$$( params ){

	        return makeImage( this, params );

	    }

	    function setLight( color, intensity, ambientColor, ambientIntensity ){

	        var p = parameters;

	        if( color !== undefined ) p.lightColor.set( color );
	        if( intensity !== undefined ) p.lightIntensity = intensity;
	        if( ambientColor !== undefined ) p.ambientColor.set( ambientColor );
	        if( ambientIntensity !== undefined ) p.ambientIntensity = ambientIntensity;

	        requestRender();

	    }

	    function setFog( color, near, far ){

	        var p = parameters;

	        if( color !== undefined ) p.fogColor.set( color );
	        if( near !== undefined ) p.fogNear = near;
	        if( far !== undefined ) p.fogFar = far;

	        requestRender();

	    }

	    function setBackground( color ){

	        var p = parameters;

	        if( color ) p.backgroundColor.set( color );

	        setFog( p.backgroundColor );
	        renderer.setClearColor( p.backgroundColor, 0 );
	        renderer.domElement.style.backgroundColor = p.backgroundColor.getStyle();

	        requestRender();

	    }

	    function setSampling( level ){

	        if( level !== undefined ){
	            parameters.sampleLevel = level;
	            sampleLevel = level;
	        }

	        requestRender();

	    }

	    function setCamera( type, fov ){

	        var p = parameters;

	        if( type ) p.cameraType = type;
	        if( fov ) p.cameraFov = fov;

	        if( p.cameraType === "orthographic" ){
	            if( camera !== orthographicCamera ){
	                camera = orthographicCamera;
	                camera.position.copy( perspectiveCamera.position );
	                camera.up.copy( perspectiveCamera.up );
	                __updateZoom();
	            }
	        }else{  // p.cameraType === "perspective"
	            if( camera !== perspectiveCamera ){
	                camera = perspectiveCamera;
	                camera.position.copy( orthographicCamera.position );
	                camera.up.copy( orthographicCamera.up );
	            }
	        }

	        perspectiveCamera.fov = p.cameraFov;
	        controls.object = camera;
	        camera.lookAt( controls.target );
	        camera.updateProjectionMatrix();

	        requestRender();

	    }

	    function setClip( near, far, dist ){

	        var p = parameters;

	        if( near !== undefined ) p.clipNear = near;
	        if( far !== undefined ) p.clipFar = far;
	        if( dist !== undefined ) p.clipDist = dist;

	        requestRender();

	    }

	    function setSpin( axis, angle ){

	        if( axis !== undefined ) parameters.spinAxis = axis;
	        if( angle !== undefined ) parameters.spinAngle = angle;

	    }

	    function setSize( _width, _height ){

	        width = _width;
	        height = _height;

	        perspectiveCamera.aspect = width / height;
	        orthographicCamera.left = -width / 2;
	        orthographicCamera.right = width / 2;
	        orthographicCamera.top = height / 2;
	        orthographicCamera.bottom = -height / 2;
	        camera.updateProjectionMatrix();

	        renderer.setPixelRatio( window.devicePixelRatio );
	        renderer.setSize( width, height );

	        var dprWidth = width * window.devicePixelRatio;
	        var dprHeight = height * window.devicePixelRatio;

	        pickingTarget.setSize( dprWidth, dprHeight );
	        sampleTarget.setSize( dprWidth, dprHeight );
	        holdTarget.setSize( dprWidth, dprHeight );

	        controls.handleResize();

	        requestRender();

	    }

	    function handleResize(){

	        if( container === document ){
	            setSize( window.innerWidth, window.innerHeight );
	        }else{
	            var box = container.getBoundingClientRect();
	            setSize( box.width, box.height );
	        }

	    }

	    function updateInfo( reset ){

	        var memory = info.memory;
	        var render = info.render;

	        if( reset ){

	            memory.programs = 0;
	            memory.geometries = 0;
	            memory.textures = 0;

	            render.calls = 0;
	            render.vertices = 0;
	            render.faces = 0;
	            render.points = 0;

	        }else{

	            var rInfo = renderer.info;
	            var rMemory = rInfo.memory;
	            var rRender = rInfo.render;

	            memory.programs = rMemory.programs;
	            memory.geometries = rMemory.geometries;
	            memory.textures = rMemory.textures;

	            render.calls += rRender.calls;
	            render.vertices += rRender.vertices;
	            render.faces += rRender.faces;
	            render.points += rRender.points;

	        }

	    }

	    var rotate = function(){

	        var eye = new Vector3();
	        var quaternion = new Quaternion();
	        var eyeDirection = new Vector3();
	        var upDirection = new Vector3();
	        var sidewaysDirection = new Vector3();
	        var moveDirection = new Vector3();

	        return function( axis, angle ){

	            eye.copy( camera.position ).sub( controls.target );
	            eyeDirection.copy( eye ).normalize();
	            upDirection.copy( camera.up ).normalize();
	            sidewaysDirection.crossVectors( upDirection, eyeDirection ).normalize();

	            eyeDirection.setLength( axis.z );
	            upDirection.setLength( axis.y );
	            sidewaysDirection.setLength( axis.x );
	            moveDirection.copy( sidewaysDirection.sub( upDirection ).add( eyeDirection ) );

	            quaternion.setFromAxisAngle( moveDirection.normalize(), angle );
	            eye.applyQuaternion( quaternion );

	            camera.up.applyQuaternion( quaternion );
	            camera.position.addVectors( controls.target, eye );
	            camera.lookAt( controls.target );

	        };

	    }();

	    var zoom = function(){

	        var eye = new Vector3();
	        var eyeDirection = new Vector3();

	        return function( distance, set ){

	            eye.copy( camera.position ).sub( controls.target );
	            eyeDirection.copy( eye ).normalize();

	            eyeDirection.setLength( distance );
	            if( set ){
	                eye.copy( eyeDirection );
	            }else{
	                eye.add( eyeDirection );
	            }

	            camera.position.addVectors( controls.target, eye );
	            camera.lookAt( controls.target );

	            __updateZoom();

	        };

	    }();

	    function translate( vector ){

	        controls.target.add( vector );
	        camera.position.add( vector );

	    }

	    var center = function(){

	        var vector = new Vector3();

	        return function( position ){

	            vector.copy( position ).sub( controls.target );
	            translate( vector );

	        };

	    }();

	    function animate(){

	        controls.update();
	        var delta = performance.now() - stats.startTime;

	        if( delta > 500 && !isStill && sampleLevel < 3 && sampleLevel !== -1 ){
	            var currentSampleLevel = sampleLevel;
	            sampleLevel = 3;
	            renderPending = true;
	            render();
	            isStill = true;
	            sampleLevel = currentSampleLevel;
	            if( exports.Debug ) Log$1.log( "rendered still frame" );
	        }

	        // spin

	        var p = parameters;
	        if( p.spinAxis && p.spinAngle ){
	            rotate( p.spinAxis, p.spinAngle * stats.lastDuration / 16 );
	            requestRender();
	        }

	        requestAnimationFrame( animate );

	    }

	    var pick = function(){

	        var pixelBufferFloat = new Float32Array( 4 );
	        var pixelBufferUint = new Uint8Array( 4 );

	        return function( x, y ){

	            x *= window.devicePixelRatio;
	            y *= window.devicePixelRatio;

	            var gid, object, instance, bondId;
	            var pixelBuffer = SupportsReadPixelsFloat ? pixelBufferFloat : pixelBufferUint;

	            render( true );
	            renderer.readRenderTargetPixels(
	                pickingTarget, x, y, 1, 1, pixelBuffer
	            );

	            if( SupportsReadPixelsFloat ){
	                gid =
	                    ( ( Math.round( pixelBuffer[0] * 255 ) << 16 ) & 0xFF0000 ) |
	                    ( ( Math.round( pixelBuffer[1] * 255 ) << 8 ) & 0x00FF00 ) |
	                    ( ( Math.round( pixelBuffer[2] * 255 ) ) & 0x0000FF );
	            }else{
	                gid =
	                    ( pixelBuffer[0] << 16 ) |
	                    ( pixelBuffer[1] << 8 ) |
	                    ( pixelBuffer[2] );
	            }

	            object = pickingGroup.getObjectById(
	                Math.round( pixelBuffer[ 3 ] )
	            );

	            if( object && object.userData.instance ){
	                instance = object.userData.instance;
	            }

	            // if( Debug ){
	            //     var rgba = Array.apply( [], pixelBuffer );
	            //     Log.log( pixelBuffer );
	            //     Log.log(
	            //         "picked color",
	            //         [
	            //             ( rgba[0] ).toPrecision(2),
	            //             ( rgba[1] ).toPrecision(2),
	            //             ( rgba[2] ).toPrecision(2),
	            //             ( rgba[3] ).toPrecision(2)
	            //         ]
	            //     );
	            //     Log.log( "picked gid", gid );
	            //     Log.log( "picked instance", instance );
	            //     Log.log( "picked position", x, y );
	            //     Log.log( "devicePixelRatio", window.devicePixelRatio );
	            // }

	            return {
	                "gid": gid,
	                "instance": instance
	            };

	        };

	    }();

	    function requestRender(){

	        if( renderPending ){
	            // Log.info( "there is still a 'render' call pending" );
	            return;
	        }

	        // start gathering stats anew after inactivity
	        if( performance.now() - stats.startTime > 22 ){
	            stats.begin();
	            isStill = false;
	        }

	        renderPending = true;

	        requestAnimationFrame( function(){
	            render();
	            stats.update();
	        } );

	    }

	    function __updateClipping(){

	        var p = parameters;

	        // clipping

	        cDist = distVector.copy( camera.position )
	                    .sub( controls.target ).length();
	        // console.log( "cDist", cDist )
	        if( !cDist ){
	            // recover from a broken (NaN) camera position
	            camera.position.set( 0, 0, p.cameraZ );
	            cDist = Math.abs( p.cameraZ );
	        }

	        bRadius = Math.max( 10, boundingBox.size( distVector ).length() * 0.5 );
	        bRadius += boundingBox.center( distVector ).length();
	        // console.log( "bRadius", bRadius )
	        if( bRadius === Infinity || bRadius === -Infinity || isNaN( bRadius ) ){
	            // console.warn( "something wrong with bRadius" );
	            bRadius = 50;
	        }

	        var nearFactor = ( 50 - p.clipNear ) / 50;
	        var farFactor = - ( 50 - p.clipFar ) / 50;
	        camera.near = Math.max( 0.1, p.clipDist, cDist - ( bRadius * nearFactor ) );
	        camera.far = Math.max( 1, cDist + ( bRadius * farFactor ) );

	        // fog

	        var fogNearFactor = ( 50 - p.fogNear ) / 50;
	        var fogFarFactor = - ( 50 - p.fogFar ) / 50;
	        var fog = scene.fog;
	        fog.color.set( p.fogColor );
	        fog.near = Math.max( 0.1, cDist - ( bRadius * fogNearFactor ) );
	        fog.far = Math.max( 1, cDist + ( bRadius * fogFarFactor ) );

	    }

	    function __updateZoom(){

	        __updateClipping();
	        var fov = degToRad( perspectiveCamera.fov );
	        var hyperfocus = ( camera.near + camera.far ) / 2;
	        var _height = 2 * Math.tan( fov / 2 ) * hyperfocus;
	        orthographicCamera.zoom = height / _height;

	    }

	    function __updateCamera(){

	        camera.updateMatrix();
	        camera.updateMatrixWorld( true );
	        camera.matrixWorldInverse.getInverse( camera.matrixWorld );
	        camera.updateProjectionMatrix();

	        updateMaterialUniforms( scene, camera, renderer, cDist, bRadius );
	        sortProjectedPosition( scene, camera );

	    }

	    function __setVisibility( model, picking, background, helper ){

	        modelGroup.visible = model;
	        pickingGroup.visible = picking;
	        backgroundGroup.visible = background;
	        helperGroup.visible = helper;

	    }

	    function __updateLights(){

	        distVector.copy( camera.position ).sub( controls.target )
	            .normalize().multiplyScalar( 1000 );

	        pointLight.position.copy( camera.position ).add( distVector );
	        pointLight.color.set( parameters.lightColor );
	        pointLight.intensity = parameters.lightIntensity;

	        ambientLight.color.set( parameters.ambientColor );
	        ambientLight.intensity = parameters.ambientIntensity;

	    }

	    function __renderPickingGroup(){

	        renderer.clearTarget( pickingTarget );
	        __setVisibility( false, true, false, false );
	        renderer.render( scene, camera, pickingTarget );
	        updateInfo();
	        renderer.setRenderTarget( null );  // back to standard render target

	        // if( Debug ){
	        //     __setVisibility( false, true, false, true );

	        //     renderer.clear();
	        //     renderer.render( scene, camera );
	        // }

	    }

	    function __renderModelGroup( renderTarget ){

	        if( renderTarget ){
	            renderer.clearTarget( renderTarget );
	        }else{
	            renderer.clear();
	        }

	        __setVisibility( false, false, true, false );
	        renderer.render( scene, camera, renderTarget );
	        if( renderTarget ){
	            renderer.clearTarget( renderTarget, false, true, false );
	        }else{
	            renderer.clearDepth();
	        }
	        updateInfo();

	        __setVisibility( true, false, false, exports.Debug );
	        renderer.render( scene, camera, renderTarget );
	        updateInfo();

	    }

	    function __renderMultiSample(){

	        // based on the Manual Multi-Sample Anti-Aliasing Render Pass
	        // contributed to three.js by bhouston / http://clara.io/
	        //
	        // This manual approach to MSAA re-renders the scene ones for
	        // each sample with camera jitter and accumulates the results.
	        // References: https://en.wikipedia.org/wiki/Multisample_anti-aliasing

	        var offsetList = JitterVectors[ Math.max( 0, Math.min( sampleLevel, 5 ) ) ];

	        var baseSampleWeight = 1.0 / offsetList.length;
	        var roundingRange = 1 / 32;

	        compositeUniforms.tForeground.value = sampleTarget.texture;
	        compositeUniforms.tForeground.needsUpdate = true;
	        compositeMaterial.needsUpdate = true;

	        var _width = sampleTarget.width;
	        var _height = sampleTarget.height;

	        // render the scene multiple times, each slightly jitter offset
	        // from the last and accumulate the results.
	        for ( var i = 0; i < offsetList.length; ++i ){

	            var offset = offsetList[ i ];
	            camera.setViewOffset(
	                _width, _height, offset[ 0 ], offset[ 1 ], _width, _height
	            );
	            __updateCamera();

	            var sampleWeight = baseSampleWeight;
	            // the theory is that equal weights for each sample lead to an accumulation of rounding errors.
	            // The following equation varies the sampleWeight per sample so that it is uniformly distributed
	            // across a range of values whose rounding errors cancel each other out.
	            var uniformCenteredDistribution = ( -0.5 + ( i + 0.5 ) / offsetList.length );
	            sampleWeight += roundingRange * uniformCenteredDistribution;
	            compositeUniforms.scale.value = sampleWeight;

	            __renderModelGroup( sampleTarget );
	            renderer.render(
	                compositeScene, compositeCamera, holdTarget, ( i === 0 )
	            );

	        }

	        renderer.setRenderTarget( null );

	        compositeUniforms.scale.value = 1.0;
	        compositeUniforms.tForeground.value = holdTarget.texture;
	        compositeUniforms.tForeground.needsUpdate = true;
	        compositeMaterial.needsUpdate = true;

	        renderer.clear();
	        renderer.render( compositeScene, compositeCamera );

	        camera.view = null;

	    }

	    function render( picking ){

	        if( rendering ){
	            Log$1.warn( "tried to call 'render' from within 'render'" );
	            return;
	        }

	        // Log.time( "Viewer.render" );

	        rendering = true;

	        __updateClipping();
	        __updateCamera();
	        __updateLights();

	        // render

	        updateInfo( true );

	        if( picking ){
	            __renderPickingGroup();
	        }else if( sampleLevel > 0 ){
	            __renderMultiSample();
	        }else{
	            __renderModelGroup();
	        }

	        rendering = false;
	        renderPending = false;

	        // Log.timeEnd( "Viewer.render" );
	        // Log.log( info.memory, info.render );

	    }

	    function clear(){

	        Log$1.log( "scene cleared" );
	        scene.remove( rotationGroup );
	        initScene();
	        renderer.clear();

	    }

	    var centerView = function(){

	        var t = new Vector3();
	        var eye = new Vector3();
	        var eyeDirection = new Vector3();
	        var bbSize = new Vector3();

	        return function( _zoom, position ){

	            if( position === undefined ){
	                if( !boundingBox.isEmpty() ){
	                    center( boundingBox.center() );
	                }
	            }else{
	                center( position );
	            }

	            if( _zoom ){

	                var distance;

	                if( _zoom === true ){

	                    // distance = boundingBox.size( bbSize ).length();

	                    boundingBox.size( bbSize );
	                    var maxSize = Math.max( bbSize.x, bbSize.y, bbSize.z );
	                    var minSize = Math.min( bbSize.x, bbSize.y, bbSize.z );
	                    // var avgSize = ( bbSize.x + bbSize.y + bbSize.z ) / 3;
	                    distance = maxSize + Math.sqrt( minSize );

	                }else{

	                    distance = _zoom;

	                }

	                var fov = degToRad( perspectiveCamera.fov );
	                var aspect = width / height;
	                var aspectFactor = ( height < width ? 1 : aspect );

	                distance = Math.abs(
	                    ( ( distance * 0.5 ) / aspectFactor ) / Math.sin( fov / 2 )
	                );

	                zoom( distance, true );

	            }

	            requestRender();

	            _signals.orientationChanged.dispatch();

	        };

	    }();

	    var alignView = function(){

	        var currentEye = new Vector3();
	        var currentUp = new Vector3();
	        var vn = new Vector3();
	        var vc = new Vector3();
	        var vz = new Vector3( 0, 0, 1 );

	        return function( eye, up, position, zoom ){

	            controls.reset();
	            centerView( zoom, position );

	            currentEye.copy( camera.position ).sub( controls.target ).normalize();
	            vn.crossVectors( currentEye, eye );
	            rotate( vn, -currentEye.angleTo( eye ) );

	            currentUp.copy( camera.up ).normalize();
	            vc.crossVectors( currentUp, up ).normalize();

	            var angle = currentUp.angleTo( up );
	            if( vz.dot( vc ) < 0 ) angle *= -1;

	            currentEye.copy( camera.position ).sub( controls.target ).normalize();
	            if( currentEye.dot( vz ) < 0 ) angle *= -1;

	            rotate( vz, angle );

	        };

	    }();

	    function getOrientation(){

	        return [
	            controls.target.toArray(),
	            camera.position.toArray(),
	            camera.up.toArray()
	        ];

	    }

	    function setOrientation( orientation ){

	        controls.target.fromArray( orientation[ 0 ] );
	        camera.position.fromArray( orientation[ 1 ] );
	        camera.up.fromArray( orientation[ 2 ] );

	        requestRender();

	        _signals.orientationChanged.dispatch();

	    }

	    // API

	    this.container = container;
	    this.stats = stats;
	    this.signals = _signals;
	    this.rotationGroup = rotationGroup;

	    this.add = add;
	    this.remove = remove;
	    this.clear = clear;

	    this.getImage = getImage;
	    this.makeImage = makeImage$$;

	    this.setLight = setLight;
	    this.setFog = setFog;
	    this.setBackground = setBackground;
	    this.setSampling = setSampling;
	    this.setCamera = setCamera;
	    this.setClip = setClip;
	    this.setSpin = setSpin;
	    this.setSize = setSize;
	    this.handleResize = handleResize;

	    this.rotate = rotate;
	    this.zoom = zoom;
	    this.center = center;
	    this.centerView = centerView;
	    this.alignView = alignView;
	    this.getOrientation = getOrientation;
	    this.setOrientation = setOrientation;

	    this.pick = pick;
	    this.requestRender = requestRender;
	    this.render = render;
	    this.animate = animate;
	    this.updateHelper = updateHelper;

	    this.controls = controls;
	    this.renderer = renderer;
	    this.scene = scene;

	    Object.defineProperties( this, {
	        camera: { get: function(){ return camera; } },
	        width: { get: function(){ return width; } },
	        height: { get: function(){ return height; } },
	        sampleLevel: { get: function(){ return sampleLevel; } }
	    } );

	}

	Viewer.prototype.constructor = Viewer;

	var MiddleMouseButton = 2;
	var RightMouseButton = 3;

	/**
	 * Picking data object.
	 * @typedef {Object} PickingData - picking data
	 * @property {AtomProxy} [pickedAtom] - picked atom
	 * @property {BondProxy} [pickedBond] - picked bond
	 * @property {Volume} [pickedVolume] - picked volume
	 * @property {Object} [instance] - instance data
	 * @property {Integer} instance.id - instance id
	 * @property {String|Integer} instance.name - instance name
	 * @property {Matrix4} instance.matrix - transformation matrix of the instance
	 */


	var PickingControls = function( viewer, params ){

	    var hoverTimeout = 50;
	    setParameters( params );

	    var signals = {
	        clicked: new Signal(),
	        hovered: new Signal()
	    };

	    var position = new Vector3();

	    var mouse = {
	        position: new Vector2(),
	        down: new Vector2(),
	        canvasPosition: new Vector2(),
	        moving: false,
	        hovering: true,
	        lastMoved: Infinity,
	        which: undefined,
	        distance: function(){
	            return mouse.position.distanceTo( mouse.down );
	        },
	        setCanvasPosition: function( e ){
	            var box = viewer.renderer.domElement.getBoundingClientRect();
	            var offsetX = e.clientX - box.left;
	            var offsetY = e.clientY - box.top;
	            mouse.canvasPosition.set( offsetX, box.height - offsetY );
	        }
	    };

	    function setParameters( params ){
	        var p = Object.assign( {}, params );
	        hoverTimeout = defaults( p.hoverTimeout, hoverTimeout );
	    }

	    /**
	     * pick helper function
	     * @param  {Object} mouse
	     * @return {PickingData} picking data
	     */
	    function pick( mouse, clicked ){
	        var pickingData = viewer.pick(
	            mouse.canvasPosition.x, mouse.canvasPosition.y
	        );
	        var instance = pickingData.instance;
	        var picked = GidPool.getByGid( pickingData.gid );

	        var pickedAtom, pickedBond, pickedVolume;
	        if( picked && picked.type === "AtomProxy" ){
	            pickedAtom = picked;
	        }else if( picked && picked.type === "BondProxy" ){
	            pickedBond = picked;
	        }else if( picked && picked.volume.type === "Volume" ){
	            pickedVolume = picked;
	        }

	        if( ( pickedAtom || pickedBond || pickedVolume ) &&
	                mouse.which === MiddleMouseButton && clicked
	        ){
	            if( pickedAtom ){
	                position.copy( pickedAtom );
	            }else if( pickedBond ){
	                position.copy( pickedBond.atom1 )
	                    .add( pickedBond.atom2 )
	                    .multiplyScalar( 0.5 );
	            }else if( pickedVolume ){
	                position.copy( pickedVolume );
	            }

	            if( instance ){
	                position.applyProjection( instance.matrix );
	            }
	            viewer.centerView( false, position );
	        }

	        return {
	            "atom": pickedAtom,
	            "bond": pickedBond,
	            "volume": pickedVolume,
	            "instance": instance
	        };
	    }

	    function listen(){
	        if( performance.now() - mouse.lastMoved > hoverTimeout ){
	            mouse.moving = false;
	        }
	        if( !mouse.moving && !mouse.hovering ){
	            mouse.hovering = true;
	            var pd = pick( mouse );
	            signals.hovered.dispatch( pd );
	            // if( Debug ) Log.log( "hovered", pd );
	        }
	        requestAnimationFrame( listen );
	    }
	    listen();

	    viewer.renderer.domElement.addEventListener( 'mousemove', function( e ){
	        e.preventDefault();
	        // e.stopPropagation();
	        mouse.moving = true;
	        mouse.hovering = false;
	        mouse.lastMoved = performance.now();
	        mouse.position.set( e.layerX, e.layerY );
	        mouse.setCanvasPosition( e );
	    } );

	    viewer.renderer.domElement.addEventListener( 'mousedown', function( e ){
	        e.preventDefault();
	        // e.stopPropagation();
	        mouse.moving = false;
	        mouse.hovering = false;
	        mouse.down.set( e.layerX, e.layerY );
	        mouse.which = e.which;
	        mouse.setCanvasPosition( e );
	    } );

	    viewer.renderer.domElement.addEventListener( 'mouseup', function( e ){
	        e.preventDefault();
	        // e.stopPropagation();
	        if( mouse.distance() > 3 || e.which === RightMouseButton ) return;
	        var pd = pick( mouse, true );
	        mouse.which = undefined;
	        signals.clicked.dispatch( pd );
	        if( exports.Debug ) Log$1.log( "clicked", pd );
	    } );

	    // API

	    this.signals = signals;
	    this.setParameters = setParameters;

	};

	/**
	 * @file Bitset
	 * @private
	 *
	 * @description
	 * FastBitSet.js : a fast bit set implementation in JavaScript.
	 * (c) the authors
	 * Licensed under the Apache License, Version 2.0.
	 *
	 * Speed-optimized BitSet implementation for modern browsers and JavaScript engines.
	 *
	 * A BitSet is an ideal data structure to implement a Set when values being stored are
	 * reasonably small integers. It can be orders of magnitude faster than a generic set implementation.
	 * The FastBitSet implementation optimizes for speed, leveraging commonly available features
	 * like typed arrays.
	 *
	 * Simple usage :
	 *  var b = new TypedFastBitSet();// initially empty
	 *         // will throw exception if typed arrays are not supported
	 *  b.add(1);// add the value "1"
	 *  b.has(1); // check that the value is present! (will return true)
	 *  b.add(2);
	 *  console.log(""+b);// should display {1,2}
	 *  b.add(10);
	 *  b.array(); // would return [1,2,10]
	 *
	 *  var c = new TypedFastBitSet([1,2,3,10]); // create bitset initialized with values 1,2,3,10
	 *  c.difference(b); // from c, remove elements that are in b
	 *  var su = c.union_size(b);// compute the size of the union (bitsets are unchanged)
	 * c.union(b); // c will contain all elements that are in c and b
	 * var s1 = c.intersection_size(b);// compute the size of the intersection (bitsets are unchanged)
	 * c.intersection(b); // c will only contain elements that are in both c and b
	 * c = b.clone(); // create a (deep) copy of b and assign it to c.
	 * c.equals(b); // check whether c and b are equal
	 *
	 *   See README.md file for a more complete description.
	 *
	 * You can install the library under node with the command line
	 *   npm install fastbitset
	 */


	// you can provide an iterable
	// an exception is thrown if typed arrays are not supported
	// - added size argument, ASR
	// - added flip argument, ASR
	/**
	 * Bitset
	 * @class
	 * @param {Integer} size - how many element to store
	 * @param {Boolean} [flip] - set to true to set all bits to 1
	 */
	function TypedFastBitSet(size, flip) {
	  this.count = 0 | 0;
	  this.words = new Uint32Array(8);
	  this.resize(size);
	  if (flip) {
	    this.flip_all();
	  }
	}

	// Add the value (Set the bit at index to true)
	TypedFastBitSet.prototype.add = function(index) {
	  if ((this.count << 5) <= index) {
	    this.resize(index);
	  }
	  this.words[index >>> 5] |= 1 << index ;
	};

	// Add the value (Set the bit at index to true)
	// - unsafe because size is not checked, added by ASR
	TypedFastBitSet.prototype.add_unsafe = function(index) {
	  this.words[index >>> 5] |= 1 << index ;
	};

	// If the value was not in the set, add it, otherwise remove it (flip bit at index)
	TypedFastBitSet.prototype.flip = function(index) {
	  if ((this.count << 5) <= index) {
	    this.resize(index);
	  }
	  this.words[index >>> 5] ^= 1 << index ;
	};

	// If the value was not in the set, add it, otherwise remove it (flip bit at index)
	// - unsafe because size is not checked, added by ASR
	TypedFastBitSet.prototype.flip_unsafe = function(index) {
	  this.words[index >>> 5] ^= 1 << index ;
	};

	// Flip all bits, added by ASR
	TypedFastBitSet.prototype.flip_all = function() {
	  // FIXME sets values beyond this.length
	  var count = this.count;
	  var k = 0 | 0;
	  for (; k + 7 < count; k += 8) {
	    this.words[k    ] = ~this.words[k    ];
	    this.words[k + 1] = ~this.words[k + 1];
	    this.words[k + 2] = ~this.words[k + 2];
	    this.words[k + 3] = ~this.words[k + 3];
	    this.words[k + 4] = ~this.words[k + 4];
	    this.words[k + 5] = ~this.words[k + 5];
	    this.words[k + 6] = ~this.words[k + 6];
	    this.words[k + 7] = ~this.words[k + 7];
	  }
	  for (; k < count; ++k) {
	    this.words[k] = ~this.words[k];
	  }
	  return this;
	};

	// Set all bits to value, added by ASR
	TypedFastBitSet.prototype.set_all = function(value) {
	  if (this.length <= 0) return this;
	  this.set_range( 0, this.length-1, value );
	  return this;
	};

	// Set all bits in range to value, added by ASR
	TypedFastBitSet.prototype.set_range = function(from, to, value) {
	  // set complete words when applicable
	  value = value ? 0xFFFFFFFF : 0x00000000;
	  var wordStart = (from >>> 5) + 1;
	  var wordEnd = (to >>> 5) - 1;
	  var k = wordStart | 0;
	  for (; k + 7 < wordEnd; k += 8) {
	    this.words[k    ] = value;
	    this.words[k + 1] = value;
	    this.words[k + 2] = value;
	    this.words[k + 3] = value;
	    this.words[k + 4] = value;
	    this.words[k + 5] = value;
	    this.words[k + 6] = value;
	    this.words[k + 7] = value;
	  }
	  for (; k < wordEnd; ++k) {
	    this.words[k] = value;
	  }
	  // set parts of the range not spanning complete words
	  var i, n;
	  if (value){
	    for (i = from, n = (wordStart << 5) + 1; i < n; ++i) {
	      this.words[i >>> 5] |= 1 << i ;
	    }
	    for (i = (wordEnd << 5), n = to + 1; i < n; ++i) {
	      this.words[i >>> 5] |= 1 << i ;
	    }
	  }else{
	    for (i = from, n = (wordStart << 5) + 1; i < n; ++i) {
	      this.words[i >>> 5] &= ~(1 << i);
	    }
	    for (i = (wordEnd << 5), n = to + 1; i < n; ++i) {
	      this.words[i >>> 5] &= ~(1 << i);
	    }
	  }
	  return this;
	};

	// Remove all values, reset memory usage
	TypedFastBitSet.prototype.clear = function() {
	  this.count = 0 | 0;
	  this.length = 0 | 0;
	  this.words = new Uint32Array(count);
	  return this;
	};

	// Set the bit at index to false
	TypedFastBitSet.prototype.remove = function(index) {
	  if ((this.count << 5) <= index) {
	    this.resize(index);
	  }
	  this.words[index >>> 5] &= ~(1 << index);
	};

	// Set the bit at index to false
	// - unsafe because size is not checked, added by ASR
	TypedFastBitSet.prototype.remove_unsafe = function(index) {
	  this.words[index >>> 5] &= ~(1 << index);
	};

	// Return true if no bit is set
	TypedFastBitSet.prototype.isEmpty = function(index) {
	  var c = this.count;
	  for (var  i = 0; i < c; i++) {
	    if (this.words[i] !== 0) return false;
	  }
	  return true;
	};

	// Is the value contained in the set? Is the bit at index true or false? Returns a boolean
	TypedFastBitSet.prototype.has = function(index) {
	  return (this.words[index >>> 5] & (1 << index)) !== 0;
	};

	// Reduce the memory usage to a minimum
	TypedFastBitSet.prototype.trim = function(index) {
	  while (this.count > 0) {
	    if (this.words[this.count - 1] === 0)
	      this.count--;
	  }
	  this.words = this.words.slice(0,this.count);
	};

	// Resize the bitset so that we can write a value at index
	TypedFastBitSet.prototype.resize = function(index) {
	  this.length = index;
	  if ((this.count << 5) > index) {
	    return; //nothing to do
	  }
	  this.count = (index + 32) >>> 5;// just what is needed
	  if ((this.words.length << 5) <= index) {
	    var newwords = new Uint32Array(this.count << 1);
	    newwords.set(this.words);// hopefully, this copy is fast
	    this.words = newwords;
	  }
	};

	// fast function to compute the Hamming weight of a 32-bit unsigned integer
	TypedFastBitSet.prototype.hammingWeight = function(v) {
	  v -= ((v >>> 1) & 0x55555555);// works with signed or unsigned shifts
	  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
	  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
	};


	// How many values stored in the set? How many set bits?
	TypedFastBitSet.prototype.size = function() {
	  var answer = 0;
	  var c = this.count;
	  for (var i = 0; i < c; i++) {
	    answer += this.hammingWeight(this.words[i] | 0);
	  }
	  return Math.min( answer, this.length );
	};

	// How many bits are set in the given range of the set?
	// - added by ASR
	TypedFastBitSet.prototype.sizeRange = function(offset, count) {
	  var size = 0;
	  var end = offset + count;
	  this.forEach( function( index ){
	      if( index >= offset && index < end ) ++size;
	  } );
	  return size;
	};

	// Return an array with the set bit locations (values)
	// - use Uint32Array instead of Array, ASR
	TypedFastBitSet.prototype.array = function() {
	  var answer = new Uint32Array(this.size());
	  var pos = 0 | 0;
	  var c = this.count | 0;
	  for (var k = 0; k < c; ++k) {
	    var w =  this.words[k];
	    while (w !== 0) {
	      var t = w & -w;
	      answer[pos++] = (k << 5) + this.hammingWeight((t - 1) | 0);
	      w ^= t;
	    }
	  }
	  return answer;
	};


	// Call fnc with the set bit locations (values)
	// - fixed method description, ASR
	TypedFastBitSet.prototype.forEach = function(fnc) {
	  var c = this.count | 0;
	  var i = 0 | 0;
	  for (var k = 0; k < c; ++k) {
	    var w = this.words[k];
	    while (w !== 0) {
	      var t = w & -w;
	      var index = (k << 5) + this.hammingWeight((t - 1) | 0);
	      // FIXME workaround, it should not be required to check the length
	      if(index < this.length) fnc(index,i);
	      w ^= t;
	      i += 1;
	    }
	  }
	};

	TypedFastBitSet.forEach = function(fnc, bitmap1, bitmap2) {
	  var c = Math.min(bitmap1.count, bitmap2.count) | 0;
	  for (var k = 0; k < c; ++k) {
	    var w1 = bitmap1.words[k];
	    var w2 = bitmap2.words[k];
	    while (w1 !== 0 && w2 !== 0) {
	      var t1 = w1 & -w1;
	      var t2 = w2 & -w2;
	      var kShift = k << 5;
	      fnc(
	        kShift + bitmap1.hammingWeight((t1 - 1) | 0),
	        kShift + bitmap2.hammingWeight((t2 - 1) | 0)
	      );
	      w1 ^= t1;
	      w2 ^= t2;
	    }
	  }
	};

	// Creates a copy of this bitmap
	TypedFastBitSet.prototype.clone = function() {
	  var clone = Object.create(TypedFastBitSet.prototype);
	  clone.count = this.count;
	  clone.length = this.length;
	  clone.words = new Uint32Array(this.words);
	  return clone;
	};

	// Check if this bitset intersects with another one,
	// no bitmap is modified
	TypedFastBitSet.prototype.intersects = function(otherbitmap) {
	  var newcount = Math.min(this.count,otherbitmap.count);
	  for (var k = 0 | 0; k < newcount; ++k) {
	    if ((this.words[k] & otherbitmap.words[k]) !== 0) return true;
	  }
	  return false;
	};

	// Computes the intersection between this bitset and another one,
	// the current bitmap is modified  (and returned by the function)
	TypedFastBitSet.prototype.intersection = function(otherbitmap) {
	  var newcount = Math.min(this.count,otherbitmap.count);
	  var k = 0 | 0;
	  for (; k + 7 < newcount; k += 8) {
	    this.words[k    ] &= otherbitmap.words[k    ];
	    this.words[k + 1] &= otherbitmap.words[k + 1];
	    this.words[k + 2] &= otherbitmap.words[k + 2];
	    this.words[k + 3] &= otherbitmap.words[k + 3];
	    this.words[k + 4] &= otherbitmap.words[k + 4];
	    this.words[k + 5] &= otherbitmap.words[k + 5];
	    this.words[k + 6] &= otherbitmap.words[k + 6];
	    this.words[k + 7] &= otherbitmap.words[k + 7];
	  }
	  for (; k < newcount; ++k) {
	    this.words[k] &= otherbitmap.words[k];
	  }
	  var c = this.count;
	  for (k = newcount; k < c; ++k) {
	    this.words[k] = 0;
	  }
	  this.count = newcount;
	  return this;
	};

	// Computes the size of the intersection between this bitset and another one
	TypedFastBitSet.prototype.intersection_size = function(otherbitmap) {
	  var newcount = Math.min(this.count,otherbitmap.count);
	  var answer = 0 | 0;
	  for (var k = 0 | 0; k < newcount; ++k) {
	    answer += this.hammingWeight(this.words[k] & otherbitmap.words[k]);
	  }
	  return answer;
	};

	// Computes the intersection between this bitset and another one,
	// a new bitmap is generated
	TypedFastBitSet.prototype.new_intersection = function(otherbitmap) {
	  var answer = Object.create(TypedFastBitSet.prototype);
	  answer.count = Math.min(this.count,otherbitmap.count);
	  answer.words = new Uint32Array(answer.count);
	  answer.length = Math.min(this.length,otherbitmap.length);
	  var c = answer.count;
	  for (var k = 0 | 0; k < c; ++k) {
	    answer.words[k] = this.words[k] & otherbitmap.words[k];
	  }
	  return answer;
	};

	// Computes the intersection between this bitset and another one,
	// the current bitmap is modified
	TypedFastBitSet.prototype.equals = function(otherbitmap) {
	  var mcount = Math.min(this.count , otherbitmap.count);
	  var k, c;
	  for (k = 0 | 0; k < mcount; ++k) {
	    if (this.words[k] != otherbitmap.words[k]) return false;
	  }
	  if (this.count < otherbitmap.count) {
	    c = otherbitmap.count;
	    for (k = this.count; k < c; ++k) {
	      if (otherbitmap.words[k] !== 0) return false;
	    }
	  } else if (otherbitmap.count < this.count) {
	    c = this.count;
	    for (k = otherbitmap.count; k < c; ++k) {
	      if (this.words[k] !== 0) return false;
	    }
	  }
	  return true;
	};

	// Computes the difference between this bitset and another one,
	// the current bitset is modified (and returned by the function)
	TypedFastBitSet.prototype.difference = function(otherbitmap) {
	  var newcount = Math.min(this.count,otherbitmap.count);
	  var k = 0 | 0;
	  for (; k + 7 < newcount; k += 8) {
	    this.words[k    ] &= ~otherbitmap.words[k    ];
	    this.words[k + 1] &= ~otherbitmap.words[k + 1];
	    this.words[k + 2] &= ~otherbitmap.words[k + 2];
	    this.words[k + 3] &= ~otherbitmap.words[k + 3];
	    this.words[k + 4] &= ~otherbitmap.words[k + 4];
	    this.words[k + 5] &= ~otherbitmap.words[k + 5];
	    this.words[k + 6] &= ~otherbitmap.words[k + 6];
	    this.words[k + 7] &= ~otherbitmap.words[k + 7];
	  }
	  for (; k < newcount; ++k) {
	    this.words[k] &= ~otherbitmap.words[k];
	  }
	  return this;
	};

	// Computes the size of the difference between this bitset and another one
	TypedFastBitSet.prototype.difference_size = function(otherbitmap) {
	  var newcount = Math.min(this.count,otherbitmap.count);
	  var answer = 0 | 0;
	  var k = 0 | 0;
	  for (; k < newcount; ++k) {
	    answer += this.hammingWeight(this.words[k] & (~otherbitmap.words[k]));
	  }
	  var c = this.count;
	  for (; k < c; ++k) {
	    answer += this.hammingWeight(this.words[k]);
	  }
	  return answer;
	};

	// Returns a string representation
	TypedFastBitSet.prototype.toString = function() {
	  return '{' + this.array().join(',') + '}';
	};

	// Computes the union between this bitset and another one,
	// the current bitset is modified  (and returned by the function)
	TypedFastBitSet.prototype.union = function(otherbitmap) {
	  var mcount = Math.min(this.count,otherbitmap.count);
	  var k = 0 | 0;
	  for (; k + 7  < mcount; k += 8) {
	    this.words[k    ] |= otherbitmap.words[k    ];
	    this.words[k + 1] |= otherbitmap.words[k + 1];
	    this.words[k + 2] |= otherbitmap.words[k + 2];
	    this.words[k + 3] |= otherbitmap.words[k + 3];
	    this.words[k + 4] |= otherbitmap.words[k + 4];
	    this.words[k + 5] |= otherbitmap.words[k + 5];
	    this.words[k + 6] |= otherbitmap.words[k + 6];
	    this.words[k + 7] |= otherbitmap.words[k + 7];
	  }
	  for (; k < mcount; ++k) {
	    this.words[k] |= otherbitmap.words[k];
	  }
	  if (this.count < otherbitmap.count) {
	    this.resize((otherbitmap.count  << 5) - 1);
	    var c = otherbitmap.count;
	    for (k = mcount; k < c; ++k) {
	      this.words[k] = otherbitmap.words[k];
	    }
	    this.count = otherbitmap.count;
	  }
	  return this;
	};

	// Computes the union between this bitset and another one,
	// a new bitmap is generated
	TypedFastBitSet.prototype.new_union = function(otherbitmap) {
	  var answer = Object.create(TypedFastBitSet.prototype);
	  answer.count = Math.max(this.count,otherbitmap.count);
	  answer.words = new Uint32Array(answer.count);
	  var mcount = Math.min(this.count,otherbitmap.count);
	  var k;
	  for (k = 0; k < mcount; ++k) {
	      answer.words[k] = this.words[k] | otherbitmap.words[k];
	  }
	  var c = this.count;
	  for (k = mcount; k < c; ++k) {
	      answer.words[k] = this.words[k] ;
	  }
	  var c2 = otherbitmap.count;
	  for (k = mcount; k < c2; ++k) {
	      answer.words[k] = otherbitmap.words[k] ;
	  }
	  return answer;
	};

	// Computes the difference between this bitset and another one,
	// a new bitmap is generated
	TypedFastBitSet.prototype.new_difference = function(otherbitmap) {
	  return this.clone().difference(otherbitmap);// should be fast enough
	};

	// Computes the size union between this bitset and another one
	TypedFastBitSet.prototype.union_size = function(otherbitmap) {
	  var mcount = Math.min(this.count,otherbitmap.count);
	  var answer = 0 | 0;
	  var k, c;
	  for (k = 0 | 0; k < mcount; ++k) {
	    answer += this.hammingWeight(this.words[k] | otherbitmap.words[k]);
	  }
	  if (this.count < otherbitmap.count) {
	    c = otherbitmap.count;
	    for (k = this.count ; k < c; ++k) {
	      answer += this.hammingWeight(otherbitmap.words[k] | 0);
	    }
	  } else {
	    c = this.count;
	    for (k = otherbitmap.count ; k < c; ++k) {
	      answer += this.hammingWeight(this.words[k] | 0);
	    }
	  }
	  return answer;
	};

	// Get transferable objects, added by ASR
	TypedFastBitSet.prototype.getTransferable = function() {
	  return [ this.words ];
	};

	// Serialize to JSON, added by ASR
	TypedFastBitSet.prototype.toJSON = function() {
	  return {
	    count: this.count,
	    length: this.length,
	    words: this.words
	  };
	};

	// De-serialize from JSON, added by ASR
	TypedFastBitSet.prototype.fromJSON = function(input) {
	  this.count = input.count;
	  this.length = input.length;
	  this.words = input.words;
	  return this;
	};


	var Bitset = TypedFastBitSet;

	function RadiusFactory( type, scale ){

	    this.type = type;
	    this.scale = scale || 1.0;

	    this.max = 10;

	}

	RadiusFactory.prototype = {

	    constructor: RadiusFactory,

	    atomRadius: function( a ){

	        var type = this.type;
	        var scale = this.scale;

	        var r;

	        switch( type ){

	            case "vdw":

	                r = VdwRadii[ a.element ] || DefaultVdwRadius;
	                break;

	            case "covalent":

	                r = CovalentRadii[ a.element ] || DefaultCovalentRadius;
	                break;

	            case "bfactor":

	                r = a.bfactor || 1.0;
	                break;

	            case "sstruc":

	                var sstruc = a.sstruc;
	                if( sstruc === "h" ){
	                    r = 0.25;
	                }else if( sstruc === "g" ){
	                    r = 0.25;
	                }else if( sstruc === "i" ){
	                    r = 0.25;
	                }else if( sstruc === "e" ){
	                    r = 0.25;
	                }else if( sstruc === "b" ){
	                    r = 0.25;
	                }else if( NucleicBackboneAtoms.indexOf( a.atomname ) !== -1 ){
	                    r = 0.4;
	                }else{
	                    r = 0.1;
	                }
	                break;

	            default:

	                r = type || 1.0;
	                break;

	        }

	        return Math.min( r * scale, this.max );

	    }

	};

	RadiusFactory.types = {

	    "": "",
	    "vdw": "by vdW radius",
	    "covalent": "by covalent radius",
	    "sstruc": "by secondary structure",
	    "bfactor": "by bfactor",
	    "size": "size"

	};

	function calculateMeanVector3( array ){

	    var n = array.length;
	    var m = array.length / 3;

	    var x = 0;
	    var y = 0;
	    var z = 0;

	    var i;

	    for( i = 0; i < n; i += 3 ){

	        x += array[ i + 0 ];
	        y += array[ i + 1 ];
	        z += array[ i + 2 ];

	    }

	    return new Vector3( x / m, y / m, z / m );

	}


	var pointVectorIntersection = function(){

	    var v = new Vector3();
	    var v1 = new Vector3();

	    return function( point, origin, vector ){

	        v.copy( vector );
	        v1.subVectors( point, origin );
	        var distOriginI = Math.cos( v.angleTo( v1 ) ) * v1.length();
	        var vectorI = v.normalize().multiplyScalar( distOriginI );
	        var pointI = new Vector3().addVectors( vectorI, origin );

	        return pointI;

	    };

	}();


	function computeBoundingBox( array ){
	    var minX = +Infinity;
	    var minY = +Infinity;
	    var minZ = +Infinity;
	    var maxX = -Infinity;
	    var maxY = -Infinity;
	    var maxZ = -Infinity;
	    for ( var i = 0, l = array.length; i < l; i += 3 ){
	        var x = array[ i ];
	        var y = array[ i + 1 ];
	        var z = array[ i + 2 ];
	        if ( x < minX ) minX = x;
	        if ( y < minY ) minY = y;
	        if ( z < minZ ) minZ = z;
	        if ( x > maxX ) maxX = x;
	        if ( y > maxY ) maxY = y;
	        if ( z > maxZ ) maxZ = z;
	    }
	    return [
	        v3new([ minX, minY, minZ ]),
	        v3new([ maxX, maxY, maxZ ])
	    ];
	}
	function applyMatrix4toVector3array( m, a ){
	    for( var i = 0, il = a.length; i < il; i+=3 ){
	        var x = a[ i ], y = a[ i + 1 ], z = a[ i + 2 ];
	        a[ i     ] = m[ 0 ] * x + m[ 4 ] * y + m[ 8 ]  * z + m[ 12 ];
	        a[ i + 1 ] = m[ 1 ] * x + m[ 5 ] * y + m[ 9 ]  * z + m[ 13 ];
	        a[ i + 2 ] = m[ 2 ] * x + m[ 6 ] * y + m[ 10 ] * z + m[ 14 ];
	    }
	}


	function applyMatrix3toVector3array( m, a ){
	    for( var i = 0, il = a.length; i < il; i+=3 ){
	        var x = a[ i ], y = a[ i + 1 ], z = a[ i + 2 ];
	        a[ i     ] = m[ 0 ] * x + m[ 3 ] * y + m[ 6 ] * z;
	        a[ i + 1 ] = m[ 1 ] * x + m[ 4 ] * y + m[ 7 ] * z;
	        a[ i + 2 ] = m[ 2 ] * x + m[ 5 ] * y + m[ 8 ] * z;
	    }
	}


	function normalizeVector3array( a ){
	    for( var i = 0, il = a.length; i < il; i+=3 ){
	        var x = a[ i ], y = a[ i + 1 ], z = a[ i + 2 ];
	        var s = 1 / Math.sqrt( x*x + y*y + z*z );
	        a[ i     ] = x * s;
	        a[ i + 1 ] = y * s;
	        a[ i + 2 ] = z * s;
	    }
	}


	function v3new( array ){
	    return new Float32Array( array || 3 );
	}

	function v3cross( out, a, b ){
	    var ax = a[0], ay = a[1], az = a[2];
	    var bx = b[0], by = b[1], bz = b[2];
	    out[0] = ay * bz - az * by;
	    out[1] = az * bx - ax * bz;
	    out[2] = ax * by - ay * bx;
	}

	function v3sub( out, a, b ){
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	}

	function v3fromArray( out, array, offset ){
	    out[0] = array[offset];
	    out[1] = array[offset+1];
	    out[2] = array[offset+2];
	}

	function v3divideScalar( out, a, s ){
	    v3multiplyScalar( out, a, 1 / s );
	}
	v3divideScalar.__deps = [ v3multiplyScalar ];

	function v3multiplyScalar( out, a, s ){
	    out[0] = a[0] * s;
	    out[1] = a[1] * s;
	    out[2] = a[2] * s;
	}

	function v3subScalar( out, a, s ){
	    out[0] = a[0] - s;
	    out[1] = a[1] - s;
	    out[2] = a[2] - s;
	}

	function v3addScalar( out, a, s ){
	    out[0] = a[0] + s;
	    out[1] = a[1] + s;
	    out[2] = a[2] + s;
	}

	function v3floor( out, a ){
	    out[0] = Math.floor( a[0] );
	    out[1] = Math.floor( a[1] );
	    out[2] = Math.floor( a[2] );
	}

	function v3ceil( out, a ){
	    out[0] = Math.ceil( a[0] );
	    out[1] = Math.ceil( a[1] );
	    out[2] = Math.ceil( a[2] );
	}

	function v3negate( out, a ){
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	}

	function Matrix( columns, rows ){

	    this.cols = columns;
	    this.rows = rows;
	    this.size = this.cols * this.rows;

	    this.data = new Float32Array( this.size );

	}

	Matrix.prototype = {

	    copyTo: function( matrix ){
	        matrix.data.set( this.data );
	    }

	};


	function transpose( At, A ){
	    var i=0,j=0,nrows=A.rows,ncols=A.cols;
	    var Ai=0,Ati=0,pAt=0;
	    var ad=A.data,atd=At.data;

	    for (; i < nrows; Ati += 1, Ai += ncols, i++) {
	        pAt = Ati;
	        for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai+j];
	    }
	}


	// C = A * B'
	function multiply_ABt( C, A, B ){
	    var i=0,j=0,k=0;
	    var Ap=0,pA=0,pB=0,Cp=0;
	    var ncols=A.cols,nrows=A.rows,mrows=B.rows;
	    var ad=A.data,bd=B.data,cd=C.data;
	    var sum=0.0;

	    for (; i < nrows; Ap += ncols, i++) {
	        for (pB = 0, j = 0; j < mrows; Cp++, j++) {
	            pA = Ap;
	            sum = 0.0;
	            for (k = 0; k < ncols; pA++, pB++, k++) {
	                sum += ad[pA] * bd[pB];
	            }
	            cd[Cp] = sum;
	        }
	    }
	}


	function invert_3x3( from, to ){
	    var A = from.data, invA = to.data;
	    var t1 = A[4];
	    var t2 = A[8];
	    var t4 = A[5];
	    var t5 = A[7];
	    var t8 = A[0];

	    var t9 = t8*t1;
	    var t11 = t8*t4;
	    var t13 = A[3];
	    var t14 = A[1];
	    var t15 = t13*t14;
	    var t17 = A[2];
	    var t18 = t13*t17;
	    var t20 = A[6];
	    var t21 = t20*t14;
	    var t23 = t20*t17;
	    var t26 = 1.0/(t9*t2-t11*t5-t15*t2+t18*t5+t21*t4-t23*t1);
	    invA[0] = (t1*t2-t4*t5)*t26;
	    invA[1] = -(t14*t2-t17*t5)*t26;
	    invA[2] = -(-t14*t4+t17*t1)*t26;
	    invA[3] = -(t13*t2-t4*t20)*t26;
	    invA[4] = (t8*t2-t23)*t26;
	    invA[5] = -(t11-t18)*t26;
	    invA[6] = -(-t13*t5+t1*t20)*t26;
	    invA[7] = -(t8*t5-t21)*t26;
	    invA[8] = (t9-t15)*t26;
	}


	function mat3x3_determinant( M ){
	    var md=M.data;
	    return  md[0] * md[4] * md[8] -
	            md[0] * md[5] * md[7] -
	            md[3] * md[1] * md[8] +
	            md[3] * md[2] * md[7] +
	            md[6] * md[1] * md[5] -
	            md[6] * md[2] * md[4];
	}


	// C = A * B
	function multiply_3x3( C, A, B ){
	    var Cd=C.data, Ad=A.data, Bd=B.data;
	    var m1_0 = Ad[0], m1_1 = Ad[1], m1_2 = Ad[2];
	    var m1_3 = Ad[3], m1_4 = Ad[4], m1_5 = Ad[5];
	    var m1_6 = Ad[6], m1_7 = Ad[7], m1_8 = Ad[8];

	    var m2_0 = Bd[0], m2_1 = Bd[1], m2_2 = Bd[2];
	    var m2_3 = Bd[3], m2_4 = Bd[4], m2_5 = Bd[5];
	    var m2_6 = Bd[6], m2_7 = Bd[7], m2_8 = Bd[8];

	    Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;
	    Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;
	    Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;
	    Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;
	    Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;
	    Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;
	    Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;
	    Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;
	    Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;
	}


	function mean_rows( A ){
	    var i, j;
	    var p = 0;
	    var nrows = A.rows;
	    var ncols = A.cols;
	    var sum = 0.0;
	    var Ad = A.data;
	    var mean = new Array( ncols );

	    for( j = 0; j < ncols; ++j ){
	        mean[ j ] = 0.0;
	    }

	    for( i = 0; i < nrows; ++i ){
	        for( j = 0; j < ncols; ++j, ++p ){
	            mean[ j ] += Ad[ p ];
	        }
	    }

	    for( j = 0; j < ncols; ++j ){
	        mean[ j ] /= nrows;
	    }

	    return mean;
	}


	function sub_rows( A, row ){
	    var i, j;
	    var p = 0;
	    var nrows = A.rows;
	    var ncols = A.cols;
	    var sum = 0.0;
	    var Ad = A.data;

	    for( i = 0; i < nrows; ++i ){
	        for( j = 0; j < ncols; ++j, ++p ){
	            Ad[ p ] -= row[ j ];
	        }
	    }
	}


	function add_rows( A, row ){
	    var i, j;
	    var p = 0;
	    var nrows = A.rows;
	    var ncols = A.cols;
	    var sum = 0.0;
	    var Ad = A.data;

	    for( i = 0; i < nrows; ++i ){
	        for( j = 0; j < ncols; ++j, ++p ){
	            Ad[ p ] += row[ j ];
	        }
	    }
	}


	function swap$1( A, i0, i1, t ){
	    t = A[i0];
	    A[i0] = A[i1];
	    A[i1] = t;
	}


	function hypot( a, b ){
	    a = Math.abs(a);
	    b = Math.abs(b);
	    if( a > b ) {
	        b /= a;
	        return a*Math.sqrt(1.0 + b*b);
	    }
	    if( b > 0 ) {
	        a /= b;
	        return b*Math.sqrt(1.0 + a*a);
	    }
	    return 0.0;
	}


	var EPSILON = 0.0000001192092896;
	var FLT_MIN = 1E-37;


	function JacobiSVDImpl( At, astep, _W, Vt, vstep, m, n, n1 ){
	    var eps = EPSILON * 2.0;
	    var minval = FLT_MIN;
	    var i=0,j=0,k=0,iter=0,max_iter=Math.max(m, 30);
	    var Ai=0,Aj=0,Vi=0,Vj=0,changed=0;
	    var c=0.0, s=0.0, t=0.0;
	    var t0=0.0,t1=0.0,sd=0.0,beta=0.0,gamma=0.0,delta=0.0,a=0.0,p=0.0,b=0.0;
	    var seed = 0x1234;
	    var val=0.0,val0=0.0,asum=0.0;

	    var W = new Float64Array( n<<3 );

	    for(; i < n; i++) {
	        for(k = 0, sd = 0; k < m; k++) {
	            t = At[i*astep + k];
	            sd += t*t;
	        }
	        W[i] = sd;

	        if(Vt) {
	            for(k = 0; k < n; k++) {
	                Vt[i*vstep + k] = 0;
	            }
	            Vt[i*vstep + i] = 1;
	        }
	    }

	    for(; iter < max_iter; iter++) {
	        changed = 0;

	        for(i = 0; i < n-1; i++) {
	            for(j = i+1; j < n; j++) {
	                Ai = (i*astep)|0;
	                Aj = (j*astep)|0;
	                a = W[i];
	                p = 0;
	                b = W[j];

	                k = 2;
	                p += At[Ai]*At[Aj];
	                p += At[Ai+1]*At[Aj+1];

	                for(; k < m; k++)
	                    p += At[Ai+k]*At[Aj+k];

	                if(Math.abs(p) <= eps*Math.sqrt(a*b)) continue;

	                p *= 2.0;
	                beta = a - b;
	                gamma = hypot(p, beta);
	                if( beta < 0 ) {
	                    delta = (gamma - beta)*0.5;
	                    s = Math.sqrt(delta/gamma);
	                    c = (p/(gamma*s*2.0));
	                } else {
	                    c = Math.sqrt((gamma + beta)/(gamma*2.0));
	                    s = (p/(gamma*c*2.0));
	                }

	                a=0.0;
	                b=0.0;

	                k = 2; // unroll
	                t0 = c*At[Ai] + s*At[Aj];
	                t1 = -s*At[Ai] + c*At[Aj];
	                At[Ai] = t0; At[Aj] = t1;
	                a += t0*t0; b += t1*t1;

	                t0 = c*At[Ai+1] + s*At[Aj+1];
	                t1 = -s*At[Ai+1] + c*At[Aj+1];
	                At[Ai+1] = t0; At[Aj+1] = t1;
	                a += t0*t0; b += t1*t1;

	                for( ; k < m; k++ )
	                {
	                    t0 = c*At[Ai+k] + s*At[Aj+k];
	                    t1 = -s*At[Ai+k] + c*At[Aj+k];
	                    At[Ai+k] = t0; At[Aj+k] = t1;

	                    a += t0*t0; b += t1*t1;
	                }

	                W[i] = a;
	                W[j] = b;

	                changed = 1;

	                if(Vt) {
	                    Vi = (i*vstep)|0;
	                    Vj = (j*vstep)|0;

	                    k = 2;
	                    t0 = c*Vt[Vi] + s*Vt[Vj];
	                    t1 = -s*Vt[Vi] + c*Vt[Vj];
	                    Vt[Vi] = t0; Vt[Vj] = t1;

	                    t0 = c*Vt[Vi+1] + s*Vt[Vj+1];
	                    t1 = -s*Vt[Vi+1] + c*Vt[Vj+1];
	                    Vt[Vi+1] = t0; Vt[Vj+1] = t1;

	                    for(; k < n; k++) {
	                        t0 = c*Vt[Vi+k] + s*Vt[Vj+k];
	                        t1 = -s*Vt[Vi+k] + c*Vt[Vj+k];
	                        Vt[Vi+k] = t0; Vt[Vj+k] = t1;
	                    }
	                }
	            }
	        }
	        if(changed === 0) break;
	    }

	    for(i = 0; i < n; i++) {
	        for(k = 0, sd = 0; k < m; k++) {
	            t = At[i*astep + k];
	            sd += t*t;
	        }
	        W[i] = Math.sqrt(sd);
	    }

	    for(i = 0; i < n-1; i++) {
	        j = i;
	        for(k = i+1; k < n; k++) {
	            if(W[j] < W[k])
	                j = k;
	        }
	        if(i != j) {
	            swap$1(W, i, j, sd);
	            if(Vt) {
	                for(k = 0; k < m; k++) {
	                    swap$1(At, i*astep + k, j*astep + k, t);
	                }

	                for(k = 0; k < n; k++) {
	                    swap$1(Vt, i*vstep + k, j*vstep + k, t);
	                }
	            }
	        }
	    }

	    for(i = 0; i < n; i++) {
	        _W[i] = W[i];
	    }

	    if(!Vt) {
	        return;
	    }

	    for(i = 0; i < n1; i++) {

	        sd = i < n ? W[i] : 0;

	        while(sd <= minval) {
	            // if we got a zero singular value, then in order to get the corresponding left singular vector
	            // we generate a random vector, project it to the previously computed left singular vectors,
	            // subtract the projection and normalize the difference.
	            val0 = (1.0/m);
	            for(k = 0; k < m; k++) {
	                seed = (seed * 214013 + 2531011);
	                val = (((seed >> 16) & 0x7fff) & 256) !== 0 ? val0 : -val0;
	                At[i*astep + k] = val;
	            }
	            for(iter = 0; iter < 2; iter++) {
	                for(j = 0; j < i; j++) {
	                    sd = 0;
	                    for(k = 0; k < m; k++) {
	                        sd += At[i*astep + k]*At[j*astep + k];
	                    }
	                    asum = 0.0;
	                    for(k = 0; k < m; k++) {
	                        t = (At[i*astep + k] - sd*At[j*astep + k]);
	                        At[i*astep + k] = t;
	                        asum += Math.abs(t);
	                    }
	                    asum = asum ? 1.0/asum : 0;
	                    for(k = 0; k < m; k++) {
	                        At[i*astep + k] *= asum;
	                    }
	                }
	            }
	            sd = 0;
	            for(k = 0; k < m; k++) {
	                t = At[i*astep + k];
	                sd += t*t;
	            }
	            sd = Math.sqrt(sd);
	        }

	        s = (1.0/sd);
	        for(k = 0; k < m; k++) {
	            At[i*astep + k] *= s;
	        }
	    }
	}


	function svd( A, W, U, V ){
	    var at=0,i=0,j=0,_m=A.rows,_n=A.cols,m=_m,n=_n;

	    if(m < n) {
	        at = 1;
	        i = m;
	        m = n;
	        n = i;
	    }

	    var a_mt = new Matrix( m, m );
	    var w_mt = new Matrix( 1, n );
	    var v_mt = new Matrix( n, n );

	    if(at === 0) {
	        transpose(a_mt, A);
	    } else {
	        for(i = 0; i < _n*_m; i++) {
	            a_mt.data[i] = A.data[i];
	        }
	        for(; i < n*m; i++) {
	            a_mt.data[i] = 0;
	        }
	    }

	    JacobiSVDImpl( a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m );

	    if(W) {
	        for(i=0; i < n; i++) {
	            W.data[i] = w_mt.data[i];
	        }
	        for(; i < _n; i++) {
	            W.data[i] = 0;
	        }
	    }

	    if (at === 0) {
	        if( U ) transpose(U, a_mt);
	        if( V ) transpose(V, v_mt);
	    } else {
	        if( U ) transpose(U, v_mt);
	        if( V ) transpose(V, a_mt);
	    }
	}


	function principalAxes( points ){

	    // console.time( "principalAxes" );

	    var n = points.rows;
	    var pointsT = new Matrix( n, 3 );
	    var A = new Matrix( 3, 3 );
	    var W = new Matrix( 1, 3 );
	    var U = new Matrix( 3, 3 );
	    var V = new Matrix( 3, 3 );

	    var mean = mean_rows( points );
	    sub_rows( points, mean );
	    transpose( pointsT, points );
	    multiply_ABt( A, pointsT, pointsT );
	    svd( A, W, U, V );

	    // console.log( points, pointsT, mean )
	    // console.log( n, A, W, U, V );

	    var vm = new Vector3( mean[0], mean[1], mean[2] );
	    var va = new Vector3( U.data[0], U.data[3], U.data[6] );
	    var vb = new Vector3( U.data[1], U.data[4], U.data[7] );
	    var vc = new Vector3( U.data[2], U.data[5], U.data[8] );

	    va.multiplyScalar( Math.sqrt( W.data[0] / ( n / 3 ) ) );
	    vb.multiplyScalar( Math.sqrt( W.data[1] / ( n / 3 ) ) );
	    vc.multiplyScalar( Math.sqrt( W.data[2] / ( n / 3 ) ) );

	    var begA = new Vector3().copy( vm ).sub( va );
	    var endA = new Vector3().copy( vm ).add( va );
	    var begB = new Vector3().copy( vm ).sub( vb );
	    var endB = new Vector3().copy( vm ).add( vb );
	    var begC = new Vector3().copy( vm ).sub( vc );
	    var endC = new Vector3().copy( vm ).add( vc );

	    // console.timeEnd( "principalAxes" );

	    return [ [ begA, endA ], [ begB, endB ], [ begC, endC ], vm ];
	}

	//

	function m4new(){
	    return new Float32Array([
	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1
	    ]);
	}

	function m4set( out, n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ){
	    out[ 0 ] = n11; out[ 4 ] = n12; out[ 8 ] = n13; out[ 12 ] = n14;
	    out[ 1 ] = n21; out[ 5 ] = n22; out[ 9 ] = n23; out[ 13 ] = n24;
	    out[ 2 ] = n31; out[ 6 ] = n32; out[ 10 ] = n33; out[ 14 ] = n34;
	    out[ 3 ] = n41; out[ 7 ] = n42; out[ 11 ] = n43; out[ 15 ] = n44;
	}

	function m4multiply( out, a, b ){
	    var a11 = a[ 0 ], a12 = a[ 4 ], a13 = a[ 8 ], a14 = a[ 12 ];
	    var a21 = a[ 1 ], a22 = a[ 5 ], a23 = a[ 9 ], a24 = a[ 13 ];
	    var a31 = a[ 2 ], a32 = a[ 6 ], a33 = a[ 10 ], a34 = a[ 14 ];
	    var a41 = a[ 3 ], a42 = a[ 7 ], a43 = a[ 11 ], a44 = a[ 15 ];

	    var b11 = b[ 0 ], b12 = b[ 4 ], b13 = b[ 8 ], b14 = b[ 12 ];
	    var b21 = b[ 1 ], b22 = b[ 5 ], b23 = b[ 9 ], b24 = b[ 13 ];
	    var b31 = b[ 2 ], b32 = b[ 6 ], b33 = b[ 10 ], b34 = b[ 14 ];
	    var b41 = b[ 3 ], b42 = b[ 7 ], b43 = b[ 11 ], b44 = b[ 15 ];

	    out[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
	    out[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
	    out[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
	    out[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

	    out[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
	    out[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
	    out[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
	    out[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

	    out[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
	    out[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
	    out[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
	    out[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

	    out[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
	    out[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
	    out[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
	    out[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}

	function m4makeScale( out, x, y, z ){
	    m4set( out,
	        x, 0, 0, 0,
	        0, y, 0, 0,
	        0, 0, z, 0,
	        0, 0, 0, 1
	    );
	}
	m4makeScale.__deps = [ m4set ];

	function m4makeTranslation( out, x, y, z ){
	    m4set( out,
	        1, 0, 0, x,
	        0, 1, 0, y,
	        0, 0, 1, z,
	        0, 0, 0, 1
	    );
	}
	m4makeTranslation.__deps = [ m4set ];

	function m4makeRotationY( out, theta ){
	    var c = Math.cos( theta ), s = Math.sin( theta );
	    m4set( out,
	        c, 0, s, 0,
	        0, 1, 0, 0,
	        -s, 0, c, 0,
	        0, 0, 0, 1
	    );
	}
	m4makeRotationY.__deps = [ m4set ];

	//

	function m3new(){
	    return new Float32Array([
	        1, 0, 0,
	        0, 1, 0,
	        0, 0, 1
	    ]);
	}

	function m3makeNormal( out, m4 ){
	    var r0 = v3new([ m4[0], m4[1], m4[2] ]);
	    var r1 = v3new([ m4[4], m4[5], m4[6] ]);
	    var r2 = v3new([ m4[8], m4[9], m4[10] ]);
	    var cp = v3new();
	    //        [ r0 ]       [ r1 x r2 ]
	    // M3x3 = [ r1 ]   N = [ r2 x r0 ]
	    //        [ r2 ]       [ r0 x r1 ]
	    v3cross( cp, r1, r2 );
	    out[ 0 ] = cp[ 0 ];
	    out[ 1 ] = cp[ 1 ];
	    out[ 2 ] = cp[ 2 ];
	    v3cross( cp, r2, r0 );
	    out[ 3 ] = cp[ 0 ];
	    out[ 4 ] = cp[ 1 ];
	    out[ 5 ] = cp[ 2 ];
	    v3cross( cp, r0, r1 );
	    out[ 6 ] = cp[ 0 ];
	    out[ 7 ] = cp[ 1 ];
	    out[ 8 ] = cp[ 2 ];
	}
	m3makeNormal.__deps = [ v3new, v3cross ];

	function Unitcell( a, b, c, alpha, beta, gamma, spacegroup, cartToFrac ){

	    this.a = a || 1;
	    this.b = b || 1;
	    this.c = c || 1;

	    this.alpha = alpha || 90;
	    this.beta = beta || 90;
	    this.gamma = gamma || 90;

	    this.spacegroup = spacegroup || "P 1";

	    //

	    var alphaRad = degToRad( this.alpha );
	    var betaRad = degToRad( this.beta );
	    var gammaRad = degToRad( this.gamma );
	    var cosAlpha = Math.cos( alphaRad );
	    var cosBeta = Math.cos( betaRad );
	    var cosGamma = Math.cos( gammaRad );
	    var sinAlpha = Math.sin( alphaRad );
	    var sinBeta = Math.sin( betaRad );
	    var sinGamma = Math.sin( gammaRad );

	    this.volume = (
	        this.a * this.b * this.c *
	        Math.sqrt(
	            1 - cosAlpha * cosAlpha - cosBeta * cosBeta - cosGamma * cosGamma +
	            2.0 * cosAlpha * cosBeta * cosGamma
	        )
	    );

	    //

	    if( cartToFrac === undefined ){

	        // https://github.com/biojava/biojava/blob/master/biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalCell.java

	        var cStar = ( this.a * this.b * sinGamma ) / this.volume;
	        var cosAlphaStar = (
	            ( cosBeta * cosGamma - cosAlpha ) /
	            ( sinBeta * sinGamma )
	        );

	        this.fracToCart = new Matrix4().set(
	            this.a, 0, 0, 0,
	            this.b * cosGamma, this.b * sinGamma, 0, 0,
	            this.c * cosBeta, -this.c * sinBeta * cosAlphaStar, 1.0 / cStar, 0,
	            0, 0, 0, 1
	        ).transpose();
	        this.cartToFrac = new Matrix4().getInverse( this.fracToCart );

	    }else{

	        this.cartToFrac = cartToFrac;
	        this.fracToCart = new Matrix4().getInverse( this.cartToFrac );

	    }

	}


	Unitcell.prototype = {

	    constructor: Unitcell,

	};

	/**
	 * Assembly of transformed parts of a {@link Structure}
	 * @class
	 * @param {String} name - assembly name
	 */
	function Assembly( name ){

	    this.name = name || "";
	    this.partList = [];

	}

	Assembly.prototype = {

	    constructor: Assembly,
	    type: "Assembly",

	    /**
	     * Add transformed parts to the assembly
	     * @example
	     * var m1 = new NGL.Matrix4().set( ... );
	     * var m2 = new NGL.Matrix4().set( ... );
	     * var assembly = new NGL.Assembly( "myAssembly" );
	     * // add part that transforms chain 'A' and 'B' using matrices `m1` and `m2`
	     * assembly.addPart( [ m1, m2 ], [ "A", "B" ] )
	     *
	     * @param {Matrix4[]} matrixList - array of 4x4 transformation matrices
	     * @param {String[]} chainList - array of chain names
	     */
	    addPart: function( matrixList, chainList ){
	        var part = new AssemblyPart( matrixList, chainList );
	        this.partList.push( part );
	        return part;
	    },

	    /**
	     * Get the number of atom for a given structure
	     * @param  {Structure} structure - the given structure
	     * @return {Integer} number of atoms in the assembly
	     */
	    getAtomCount: function( structure ){

	        var atomCount = 0;

	        this.partList.forEach( function( part ){
	            atomCount += part.getAtomCount( structure );
	        } );

	        return atomCount;

	    },

	    /**
	     * Get number of instances the assembly will produce, i.e.
	     * the number of transformations performed by the assembly
	     * @return {Integer} number of instances
	     */
	    getInstanceCount: function(){

	        var instanceCount = 0;

	        this.partList.forEach( function( part ){
	            instanceCount += part.matrixList.length;
	        } );

	        return instanceCount;

	    },

	    /**
	     * Determine if the assembly is contains the full and untransformed structure
	     * @param  {Structure}  structure - the given structure
	     * @return {Boolean} whether the assembly is identical to the structure
	     */
	    isIdentity: function( structure ){

	        if( this.partList.length !== 1 ) return false;

	        var part = this.partList[ 0 ];
	        if( part.matrixList.length !== 1 ) return false;

	        var identityMatrix = new Matrix4();
	        if( !identityMatrix.equals( part.matrixList[ 0 ] ) ) return false;

	        var structureChainList = [];
	        structure.eachChain( function( cp ){
	            structureChainList.push( cp.chainname );
	        } );
	        structureChainList = uniqueArray( structureChainList );
	        if( part.chainList.length !== structureChainList.length ) return false;

	        return true;

	    },

	    getBoundingBox: function( structure ){

	        var boundingBox = new Box3();

	        this.partList.forEach( function( part ){
	            var partBox = part.getBoundingBox( structure );
	            boundingBox.expandByPoint( partBox.min );
	            boundingBox.expandByPoint( partBox.max );
	        } );

	        return boundingBox;

	    }

	};


	function AssemblyPart( matrixList, chainList ){

	    this.matrixList = matrixList || [];
	    this.chainList = chainList || [];

	}

	AssemblyPart.prototype = {

	    constructor: AssemblyPart,
	    type: "AssemblyPart",

	    getAtomCount: function( structure ){

	        var atomCount = 0;
	        var chainList = this.chainList;

	        structure.eachChain( function( cp ){
	            if( chainList.length === 0 || chainList.indexOf( cp.chainname ) != -1 ){
	                atomCount += cp.atomCount;
	            }
	        } );

	        return this.matrixList.length * atomCount;

	    },

	    getBoundingBox: function( structure ){

	        var partBox = new Box3();
	        var instanceBox = new Box3();

	        var selection = this.getSelection();
	        var structureBox = structure.getBoundingBox( selection );

	        this.matrixList.forEach( function( matrix ){
	            instanceBox.copy( structureBox ).applyMatrix4( matrix );
	            partBox.expandByPoint( instanceBox.min );
	            partBox.expandByPoint( instanceBox.max );
	        } );

	        return partBox;

	    },

	    getSelection: function(){
	        if( this.chainList.length > 0 ){
	            var chainList = uniqueArray( this.chainList );
	            var sele = ":" + chainList.join( " OR :" );
	            return new Selection( sele );
	        }else{
	            return new Selection( "" );
	        }
	    },

	    getView: function( structure ){
	        var selection = this.getSelection();
	        if( selection ){
	            return structure.getView( selection );
	        }else{
	            return structure;
	        }
	    },

	    getInstanceList: function(){
	        var instanceList = [];
	        for ( var j = 0, jl = this.matrixList.length; j < jl; ++j ){
	            instanceList.push( {
	                id: j + 1,
	                name: j,
	                matrix: this.matrixList[ j ]
	            } );
	        }
	        return instanceList;
	    }

	};

	function Store( sizeOrObject ){

	    if( sizeOrObject === undefined ){

	        this.init( 0 );

	    }else if( Number.isInteger( sizeOrObject ) ){

	        this.init( sizeOrObject );

	    }else{

	        this.fromJSON( sizeOrObject );

	    }

	}

	Store.prototype = {

	    constructor: Store,

	    type: "Store",

	    init: function( size ){

	        this.length = size;
	        this.count = 0;

	        for( var i = 0, il = this.__fields.length; i < il; ++i ){

	            var name = this.__fields[ i ][ 0 ];
	            var itemSize = this.__fields[ i ][ 1 ];
	            var arrayType = this.__fields[ i ][ 2 ];
	            var arraySize = this.length * itemSize;

	            switch( arrayType ){

	                case "int8":
	                    this[ name ] = new Int8Array( arraySize );
	                    break;

	                case "int16":
	                    this[ name ] = new Int16Array( arraySize );
	                    break;

	                case "int32":
	                    this[ name ] = new Int32Array( arraySize );
	                    break;

	                case "uint8":
	                    this[ name ] = new Uint8Array( arraySize );
	                    break;

	                case "uint16":
	                    this[ name ] = new Uint16Array( arraySize );
	                    break;

	                case "uint32":
	                    this[ name ] = new Uint32Array( arraySize );
	                    break;

	                case "float32":
	                    this[ name ] = new Float32Array( arraySize );
	                    break;

	                default:
	                    Log$1.warn( "arrayType unknown: " + arrayType );

	            }

	        }

	    },

	    resize: function( size ){

	        // Log.time( "Store.resize" );

	        this.length = Math.round( size || 0 );
	        this.count = Math.min( this.count, this.length );

	        for( var i = 0, il = this.__fields.length; i < il; ++i ){

	            var name = this.__fields[ i ][ 0 ];
	            var itemSize = this.__fields[ i ][ 1 ];
	            var arraySize = this.length * itemSize;
	            var tmpArray = new this[ name ].constructor( arraySize );

	            if( this[ name ].length > arraySize ){
	                tmpArray.set( this[ name ].subarray( 0, arraySize ) );
	            }else{
	                tmpArray.set( this[ name ] );
	            }
	            this[ name ] = tmpArray;

	        }

	        // Log.timeEnd( "Store.resize" );

	    },

	    growIfFull: function(){

	        if( this.count >= this.length ){
	            var size = Math.round( this.length * 1.5 );
	            this.resize( Math.max( 256, size ) );
	        }

	    },

	    copyFrom: function( other, thisOffset, otherOffset, length ){

	        for( var i = 0, il = this.__fields.length; i < il; ++i ){

	            var name = this.__fields[ i ][ 0 ];
	            var itemSize = this.__fields[ i ][ 1 ];
	            var thisField = this[ name ];
	            var otherField = other[ name ];

	            for( var j = 0; j < length; ++j ){
	                var thisIndex = itemSize * ( thisOffset + j );
	                var otherIndex = itemSize * ( otherOffset + j );
	                for( var k = 0; k < itemSize; ++k ){
	                    thisField[ thisIndex + k ] = otherField[ otherIndex + k ];
	                }
	            }

	        }

	    },

	    copyWithin: function( offsetTarget, offsetSource, length ){

	        for( var i = 0, il = this.__fields.length; i < il; ++i ){

	            var name = this.__fields[ i ][ 0 ];
	            var itemSize = this.__fields[ i ][ 1 ];
	            var thisField = this[ name ];

	            for( var j = 0; j < length; ++j ){
	                var targetIndex = itemSize * ( offsetTarget + j );
	                var sourceIndex = itemSize * ( offsetSource + j );
	                for( var k = 0; k < itemSize; ++k ){
	                    thisField[ targetIndex + k ] = thisField[ sourceIndex + k ];
	                }
	            }

	        }

	    },

	    sort: function( compareFunction ){

	        Log$1.time( "Store.sort" );

	        var thisStore = this;
	        var tmpStore = new this.constructor( 1 );

	        function swap( index1, index2 ){
	            if( index1 === index2 ) return;
	            tmpStore.copyFrom( thisStore, 0, index1, 1 );
	            thisStore.copyWithin( index1, index2, 1 );
	            thisStore.copyFrom( tmpStore, index2, 0, 1 );
	        }

	        function quicksort( left, right ){
	            if( left < right ){
	                var pivot = Math.floor( ( left + right ) / 2 );
	                var left_new = left;
	                var right_new = right;
	                do{
	                    while( compareFunction( left_new, pivot ) < 0 ){
	                        left_new += 1;
	                    }
	                    while( compareFunction( right_new, pivot ) > 0 ){
	                        right_new -= 1;
	                    }
	                    if( left_new <= right_new ){
	                        if( left_new === pivot ){
	                            pivot = right_new;
	                        }else if( right_new === pivot ){
	                            pivot = left_new;
	                        }
	                        swap( left_new, right_new );
	                        left_new += 1;
	                        right_new -= 1;
	                    }
	                }while( left_new <= right_new );
	                quicksort( left, right_new );
	                quicksort( left_new, right );
	            }
	        }

	        quicksort( 0, this.count - 1 );

	        Log$1.timeEnd( "Store.sort" );

	    },

	    clear: function(){

	        this.count = 0;

	    },

	    dispose: function(){

	        delete this.length;
	        delete this.count;

	        for( var i = 0, il = this.__fields.length; i < il; ++i ){

	            var name = this.__fields[ i ][ 0 ];
	            delete this[ name ];

	        }

	    }

	};

	function BondStore( sizeOrObject ){

	    Store.call( this, sizeOrObject );

	}

	BondStore.prototype = Object.assign( Object.create(

	    Store.prototype ), {

	    constructor: BondStore,

	    type: "BondStore",

	    __fields: [

	        [ "atomIndex1", 1, "int32" ],
	        [ "atomIndex2", 1, "int32" ],
	        [ "bondOrder", 1, "int8" ],

	    ],

	    addBond: function( atom1, atom2, bondOrder ){

	        this.growIfFull();

	        var i = this.count;
	        this.atomIndex1[ i ] = atom1.index;
	        this.atomIndex2[ i ] = atom2.index;
	        if( bondOrder ) this.bondOrder[ i ] = bondOrder;

	        this.count += 1;

	    },

	    addBondIfConnected: function( atom1, atom2, bondOrder ){

	        if( atom1.connectedTo( atom2 ) ){
	            this.addBond( atom1, atom2, bondOrder );
	            return true;
	        }

	        return false;

	    }

	} );

	function AtomStore( sizeOrObject ){

	    Store.call( this, sizeOrObject );

	}

	AtomStore.prototype = Object.assign( Object.create(

	    Store.prototype ), {

	    constructor: AtomStore,

	    type: "AtomStore",

	    __fields: [

	        [ "residueIndex", 1, "uint32" ],
	        [ "atomTypeId", 1, "uint16" ],

	        [ "x", 1, "float32" ],
	        [ "y", 1, "float32" ],
	        [ "z", 1, "float32" ],
	        [ "serial", 1, "int32" ],
	        [ "bfactor", 1, "float32" ],
	        [ "altloc", 1, "uint8" ],
	        [ "occupancy", 1, "float32" ]

	    ],

	    setAltloc: function( i, str ){
	        this.altloc[ i ] = str.charCodeAt( 0 );
	    },

	    getAltloc: function( i ){
	        var code = this.altloc[ i ];
	        return code ? String.fromCharCode( code ) : "";
	    }

	} );

	function ResidueStore( sizeOrObject ){

	    Store.call( this, sizeOrObject );

	}

	ResidueStore.prototype = Object.assign( Object.create(

	    Store.prototype ), {

	    constructor: ResidueStore,

	    type: "ResidueStore",

	    __fields: [

	        [ "chainIndex", 1, "uint32" ],
	        [ "atomOffset", 1, "uint32" ],
	        [ "atomCount", 1, "uint16" ],
	        [ "residueTypeId", 1, "uint16" ],

	        [ "resno", 1, "int32" ],
	        [ "sstruc", 1, "uint8" ],
	        [ "inscode", 1, "uint8" ]

	    ],

	    setSstruc: function( i, str ){
	        this.sstruc[ i ] = str.charCodeAt( 0 );
	    },

	    getSstruc: function( i ){
	        var code = this.sstruc[ i ];
	        return code ? String.fromCharCode( code ) : "";
	    },

	    setInscode: function( i, str ){
	        this.inscode[ i ] = str.charCodeAt( 0 );
	    },

	    getInscode: function( i ){
	        var code = this.inscode[ i ];
	        return code ? String.fromCharCode( code ) : "";
	    }

	} );

	function ChainStore( sizeOrObject ){

	    Store.call( this, sizeOrObject );

	}

	ChainStore.prototype = Object.assign( Object.create(

	    Store.prototype ), {

	    constructor: ChainStore,

	    type: "ChainStore",

	    __fields: [

	        [ "modelIndex", 1, "uint16" ],
	        [ "residueOffset", 1, "uint32" ],
	        [ "residueCount", 1, "uint32" ],

	        [ "chainname", 4, "uint8" ]

	    ],

	    setChainname: function( i, str ){

	        var j = 4 * i;
	        this.chainname[ j ] = str.charCodeAt( 0 );
	        this.chainname[ j + 1 ] = str.charCodeAt( 1 );
	        this.chainname[ j + 2 ] = str.charCodeAt( 2 );
	        this.chainname[ j + 3 ] = str.charCodeAt( 3 );

	    },

	    getChainname: function( i ){

	        var chainname = "";
	        for( var k = 0; k < 4; ++k ){
	            var code = this.chainname[ 4 * i + k ];
	            if( code ){
	                chainname += String.fromCharCode( code );
	            }else{
	                break;
	            }
	        }
	        return chainname;

	    }

	} );

	function ModelStore( sizeOrObject ){

	    Store.call( this, sizeOrObject );

	}

	ModelStore.prototype = Object.assign( Object.create(

	    Store.prototype ), {

	    constructor: ModelStore,

	    type: "ModelStore",

	    __fields: [

	        [ "chainOffset", 1, "uint32" ],
	        [ "chainCount", 1, "uint32" ]

	    ]

	} );

	function Helixorient( polymer ){

	    this.polymer = polymer;

	    this.size = polymer.residueCount;

	}

	Helixorient.prototype = {

	    constructor: Helixorient,

	    getCenterIterator: function( smooth ){

	        var center = this.getPosition().center;
	        var n = center.length / 3;

	        var i = 0;
	        var j = -1;

	        var cache = [
	            new Vector3(),
	            new Vector3(),
	            new Vector3(),
	            new Vector3()
	        ];

	        function next(){
	            var vector = this.get( j );
	            j += 1;
	            return vector;
	        }

	        function get( idx ){
	            idx = Math.min( n - 1, Math.max( 0, idx ) );
	            var v = cache[ i % 4 ];
	            var idx3 = 3 * idx;
	            v.fromArray( center, idx3 );
	            if( smooth ){
	                var l, k, t;
	                var w = Math.min( smooth, idx, n - idx - 1 );
	                for( k = 1; k <= w; ++k ){
	                    l = k * 3;
	                    t = ( w + 1 - k ) / ( w + 1 );
	                    v.x += t * center[ idx3 - l + 0 ] + t * center[ idx3 + l + 0 ];
	                    v.y += t * center[ idx3 - l + 1 ] + t * center[ idx3 + l + 1 ];
	                    v.z += t * center[ idx3 - l + 2 ] + t * center[ idx3 + l + 2 ];
	                }
	                v.x /= w + 1;
	                v.y /= w + 1;
	                v.z /= w + 1;
	            }
	            i += 1;
	            return v;
	        }

	        function reset(){
	            i = 0;
	            j = -1;
	        }

	        return {
	            size: n,
	            next: next,
	            get: get,
	            reset: reset
	        };

	    },

	    getColor: function( params ){

	        var polymer = this.polymer;
	        var structure = polymer.structure;
	        var n = polymer.residueCount;
	        var residueIndexStart = polymer.residueIndexStart;

	        var col = new Float32Array( n * 3 );
	        var pcol = new Float32Array( n * 3 );

	        var p = params || {};
	        p.structure = structure;

	        var colorMaker = ColorMakerRegistry.getScheme( p );
	        var pickingColorMaker = ColorMakerRegistry.getPickingScheme( p );

	        var rp = structure.getResidueProxy();
	        var ap = structure.getAtomProxy();

	        for( var i = 0; i < n; ++i ){

	            rp.index = residueIndexStart + i;
	            ap.index = rp.traceAtomIndex;

	            var i3 = i * 3;
	            colorMaker.atomColorToArray( ap, col, i3 );
	            pickingColorMaker.atomColorToArray( ap, pcol, i3 );

	        }

	        return {
	            "color": col,
	            "pickingColor": pcol
	        };

	    },

	    getSize: function( type, scale ){

	        var polymer = this.polymer;
	        var structure = polymer.structure;
	        var n = polymer.residueCount;
	        var residueIndexStart = polymer.residueIndexStart;

	        var size = new Float32Array( n );
	        var radiusFactory = new RadiusFactory( type, scale );

	        var rp = structure.getResidueProxy();
	        var ap = structure.getAtomProxy();

	        for( var i = 0; i < n; ++i ){

	            rp.index = residueIndexStart + i;
	            ap.index = rp.traceAtomIndex;
	            size[ i ] = radiusFactory.atomRadius( ap );

	        }

	        return {
	            "size": size
	        };

	    },

	    getPosition: function(){

	        var polymer = this.polymer;
	        var structure = polymer.structure;
	        var n = polymer.residueCount;
	        var n3 = n - 3;

	        var center = new Float32Array( 3 * n );
	        var axis = new Float32Array( 3 * n );
	        var diff = new Float32Array( n );
	        var radius = new Float32Array( n );
	        var rise = new Float32Array( n );
	        var twist = new Float32Array( n );
	        var resdir = new Float32Array( 3 * n );

	        var tmp, j, i;
	        var diff13Length, diff24Length;

	        var r12 = new Vector3();
	        var r23 = new Vector3();
	        var r34 = new Vector3();

	        var diff13 = new Vector3();
	        var diff24 = new Vector3();

	        var v1 = new Vector3();
	        var v2 = new Vector3();

	        var _axis = new Vector3();
	        var _prevAxis = new Vector3();

	        var _resdir = new Vector3();
	        var _crossdir = new Vector3();
	        var _center = new Vector3( 0, 0, 0 );

	        var type = "trace";
	        var a1 = structure.getAtomProxy();
	        var a2 = structure.getAtomProxy( polymer.getAtomIndexByType( 0, type ) );
	        var a3 = structure.getAtomProxy( polymer.getAtomIndexByType( 1, type ) );
	        var a4 = structure.getAtomProxy( polymer.getAtomIndexByType( 2, type ) );

	        for( i = 0; i < n3; ++i ){

	            a1.index = a2.index;
	            a2.index = a3.index;
	            a3.index = a4.index;
	            a4.index = polymer.getAtomIndexByType( i + 3, type );

	            j = 3 * i;

	            // ported from GROMACS src/tools/gmx_helixorient.c

	            r12.subVectors( a2, a1 );
	            r23.subVectors( a3, a2 );
	            r34.subVectors( a4, a3 );

	            diff13.subVectors( r12, r23 );
	            diff24.subVectors( r23, r34 );

	            _axis.crossVectors( diff13, diff24 ).normalize();
	            _axis.toArray( axis, j );

	            if( i > 0 ){
	                diff[ i ] = _axis.angleTo( _prevAxis );
	            }

	            tmp = Math.cos( diff13.angleTo( diff24 ) );
	            twist[ i ] = 180.0 / Math.PI * Math.acos( tmp );

	            diff13Length = diff13.length();
	            diff24Length = diff24.length();

	            radius[ i ] = (
	                Math.sqrt( diff24Length * diff13Length ) /
	                // clamp, to avoid instabilities for when
	                // angle between diff13 and diff24 is near 0
	                Math.max( 2.0, 2.0 * ( 1.0 - tmp ) )
	            );

	            rise[ i ] = Math.abs( r23.dot( _axis ) );

	            //

	            v1.copy( diff13 ).multiplyScalar( radius[ i ] / diff13Length );
	            v2.copy( diff24 ).multiplyScalar( radius[ i ] / diff24Length );

	            v1.subVectors( a2, v1 );
	            v2.subVectors( a3, v2 );

	            v1.toArray( center, j + 3 );
	            v2.toArray( center, j + 6 );

	            //

	            _resdir.subVectors( a1, _center );
	            _resdir.toArray( resdir, j );

	            _prevAxis.copy( _axis );
	            _center.copy( v1 );

	        }

	        //

	        // calc axis as dir of second and third center pos
	        // project first traceAtom onto axis to get first center pos
	        v1.fromArray( center, 3 );
	        v2.fromArray( center, 6 );
	        _axis.subVectors( v1, v2 ).normalize();
	        // _center.copy( res[ 0 ].getTraceAtom() );
	        a1.index = polymer.getAtomIndexByType( 0, type );
	        _center.copy( a1 );
	        v1 = pointVectorIntersection( _center, v1, _axis );
	        v1.toArray( center, 0 );

	        // calc first resdir
	        _resdir.subVectors( _center, v1 );
	        _resdir.toArray( resdir, 0 );

	        // calc axis as dir of n-1 and n-2 center pos
	        // project last traceAtom onto axis to get last center pos
	        v1.fromArray( center, 3 * n - 6 );
	        v2.fromArray( center, 3 * n - 9 );
	        _axis.subVectors( v1, v2 ).normalize();
	        // _center.copy( res[ n - 1 ].getTraceAtom() );
	        a1.index = polymer.getAtomIndexByType( n - 1, type );
	        _center.copy( a1 );
	        v1 = pointVectorIntersection( _center, v1, _axis );
	        v1.toArray( center, 3 * n - 3 );

	        // calc last three resdir
	        for( i = n - 3; i < n; ++i ){

	            v1.fromArray( center, 3 * i );
	            // _center.copy( res[ i ].getTraceAtom() );
	            a1.index = polymer.getAtomIndexByType( i, type );
	            _center.copy( a1 );

	            _resdir.subVectors( _center, v1 );
	            _resdir.toArray( resdir, 3 * i );

	        }

	        // average measures to define them on the residues

	        var resRadius = new Float32Array( n );
	        var resTwist = new Float32Array( n );
	        var resRise = new Float32Array( n );
	        var resBending = new Float32Array( n );

	        resRadius[ 1 ] = radius[ 0 ];
	        resTwist[ 1 ] = twist[ 0 ];
	        resRise[ 1 ] = radius[ 0 ];

	        for( i = 2; i < n - 2; ++i ){

	            resRadius[ i ] = 0.5 * ( radius[ i - 2 ] + radius[ i - 1 ] );
	            resTwist[ i ] = 0.5 * ( twist[ i - 2 ] + twist[ i - 1 ] );
	            resRise[ i ] = 0.5 * ( rise[ i - 2 ] + rise[ i - 1 ] );

	            v1.fromArray( axis, 3 * ( i - 2 ) );
	            v2.fromArray( axis, 3 * ( i - 1 ) );
	            resBending[ i ] = 180.0 / Math.PI * Math.acos( Math.cos( v1.angleTo( v2 ) ) );

	        }

	        resRadius[ n - 2 ] = radius[ n - 4 ];
	        resTwist[ n - 2 ] = twist[ n - 4 ];
	        resRise[ n - 2 ] = rise[ n - 4 ];

	        // average helix axes to define them on the residues

	        var resAxis = new Float32Array( 3 * n );

	        copyArray( axis, resAxis, 0, 0, 3 );
	        copyArray( axis, resAxis, 0, 3, 3 );

	        for( i = 2; i < n - 2; ++i ){

	            v1.fromArray( axis, 3 * ( i - 2 ) );
	            v2.fromArray( axis, 3 * ( i - 1 ) );

	            _axis.addVectors( v2, v1 ).multiplyScalar( 0.5 ).normalize();
	            _axis.toArray( resAxis, 3 * i );

	        }

	        copyArray( axis, resAxis, 3 * n - 12, 3 * n - 6, 3 );
	        copyArray( axis, resAxis, 3 * n - 12, 3 * n - 3, 3 );

	        return {
	            "center": center,
	            "axis": resAxis,
	            "bending": resBending,
	            "radius": resRadius,
	            "rise": resRise,
	            "twist": resTwist,
	            "resdir": resdir,
	        };

	    }

	};

	function Helixbundle( polymer ){

	    this.polymer = polymer;

	    this.helixorient = new Helixorient( polymer );
	    this.position = this.helixorient.getPosition();

	}

	Helixbundle.prototype = {

	    constructor: Helixbundle,

	    getAxis: function( localAngle, centerDist, ssBorder, colorParams, radius, scale ){

	        localAngle = localAngle || 30;
	        centerDist = centerDist || 2.5;
	        ssBorder = ssBorder === undefined ? false : ssBorder;

	        var polymer = this.polymer;
	        var structure = polymer.structure;
	        var n = polymer.residueCount;
	        var residueIndexStart = polymer.residueIndexStart;

	        var pos = this.position;

	        var cp = colorParams || {};
	        cp.structure = structure;

	        var colorMaker = ColorMakerRegistry.getScheme( cp );
	        var pickingColorMaker = ColorMakerRegistry.getPickingScheme( cp );

	        var radiusFactory = new RadiusFactory( radius, scale );

	        var j = 0;
	        var k = 0;

	        var axis = [];
	        var center = [];
	        var beg = [];
	        var end = [];
	        var col = [];
	        var pcol = [];
	        var size = [];
	        var residueOffset = [];
	        var residueCount = [];

	        var tmpAxis = [];
	        var tmpCenter = [];

	        var _axis, _center;
	        var _beg = new Vector3();
	        var _end = new Vector3();

	        var rp1 = structure.getResidueProxy();
	        var rp2 = structure.getResidueProxy();
	        var ap = structure.getAtomProxy();

	        var c1 = new Vector3();
	        var c2 = new Vector3();

	        var split = false;

	        for( var i = 0; i < n; ++i ){

	            rp1.index = residueIndexStart + i;
	            c1.fromArray( pos.center, i * 3 );

	            if( i === n - 1 ){
	                split = true;
	            }else{

	                rp2.index = residueIndexStart + i + 1;
	                c2.fromArray( pos.center, i * 3 + 3 );

	                if( ssBorder && rp1.sstruc !== rp2.sstruc ){
	                    split = true;
	                }else if( c1.distanceTo( c2 ) > centerDist ){
	                    split = true;
	                }else if( pos.bending[ i ] > localAngle ){
	                    split = true;
	                }

	            }

	            if( split ){

	                if( i - j < 4 ){
	                    j = i;
	                    split = false;
	                    continue;
	                }

	                ap.index = rp1.traceAtomIndex;

	                // ignore first and last axis
	                tmpAxis = pos.axis.subarray( j * 3 + 3, i * 3 );
	                tmpCenter = pos.center.subarray( j * 3, i * 3 + 3 );

	                _axis = calculateMeanVector3( tmpAxis ).normalize();
	                _center = calculateMeanVector3( tmpCenter );

	                _beg.fromArray( tmpCenter );
	                _beg = pointVectorIntersection( _beg, _center, _axis );

	                _end.fromArray( tmpCenter, tmpCenter.length - 3 );
	                _end = pointVectorIntersection( _end, _center, _axis );

	                _axis.subVectors( _end, _beg );

	                _axis.toArray( axis, k );
	                _center.toArray( center, k );
	                _beg.toArray( beg, k );
	                _end.toArray( end, k );

	                colorMaker.atomColorToArray( ap, col, k );
	                pickingColorMaker.atomColorToArray( ap, pcol, k );

	                size.push( radiusFactory.atomRadius( ap ) );

	                residueOffset.push( residueIndexStart + j );
	                residueCount.push( residueIndexStart + i + 1 - j );

	                k += 3;
	                j = i;
	                split = false;

	            }

	        }

	        return {
	            "axis": new Float32Array( axis ),
	            "center": new Float32Array( center ),
	            "begin": new Float32Array( beg ),
	            "end": new Float32Array( end ),
	            "color": new Float32Array( col ),
	            "pickingColor": new Float32Array( pcol ),
	            "size": new Float32Array( size ),
	            "residueOffset": residueOffset,
	            "residueCount": residueCount
	        };

	    }

	};

	/**
	 * @file Binary Heap
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	/**
	 * Binary heap implementation
	 * @class
	 * @author http://eloquentjavascript.net/appendix2.htm
	 */
	function BinaryHeap( scoreFunction ){

	    this.content = [];
	    this.scoreFunction = scoreFunction;

	}

	BinaryHeap.prototype = {

	    push: function ( element ) {

	        // Add the new element to the end of the array.
	        this.content.push( element );

	        // Allow it to bubble up.
	        this.bubbleUp( this.content.length - 1 );

	    },

	    pop: function () {

	        // Store the first element so we can return it later.
	        var result = this.content[ 0 ];

	        // Get the element at the end of the array.
	        var end = this.content.pop();

	        // If there are any elements left, put the end element at the
	        // start, and let it sink down.
	        if ( this.content.length > 0 ) {

	            this.content[ 0 ] = end;
	            this.sinkDown( 0 );

	        }

	        return result;

	    },

	    peek: function () {

	        return this.content[ 0 ];

	    },

	    remove: function ( node ) {

	        var len = this.content.length;

	        // To remove a value, we must search through the array to find it.
	        for ( var i = 0; i < len; i ++ ) {

	            if ( this.content[ i ] == node ) {

	                // When it is found, the process seen in 'pop' is repeated
	                // to fill up the hole.
	                var end = this.content.pop();

	                if ( i != len - 1 ) {

	                    this.content[ i ] = end;

	                    if ( this.scoreFunction( end ) < this.scoreFunction( node ) ) {
	                        this.bubbleUp( i );
	                    } else {
	                        this.sinkDown( i );
	                    }

	                }

	                return;

	            }

	        }

	        throw new Error( "Node not found." );

	    },

	    size: function () {

	        return this.content.length;

	    },

	    bubbleUp: function ( n ) {

	        // Fetch the element that has to be moved.
	        var element = this.content[ n ];

	        // When at 0, an element can not go up any further.
	        while ( n > 0 ) {

	            // Compute the parent element's index, and fetch it.
	            var parentN = Math.floor( ( n + 1 ) / 2 ) - 1,
	                parent = this.content[ parentN ];

	            // Swap the elements if the parent is greater.
	            if ( this.scoreFunction( element ) < this.scoreFunction( parent ) ) {

	                this.content[ parentN ] = element;
	                this.content[ n ] = parent;

	                // Update 'n' to continue at the new position.
	                n = parentN;

	            } else {
	                // Found a parent that is less, no need to move it further.
	                break;
	            }

	        }

	    },

	    sinkDown: function ( n ) {

	        // Look up the target element and its score.
	        var length = this.content.length,
	            element = this.content[ n ],
	            elemScore = this.scoreFunction( element );

	        var child1Score, child2Score;

	        while ( true ) {

	            // Compute the indices of the child elements.
	            var child2N = ( n + 1 ) * 2, child1N = child2N - 1;

	            // This is used to store the new position of the element, if any.
	            var swap = null;

	            // If the first child exists (is inside the array)...
	            if ( child1N < length ) {

	                // Look it up and compute its score.
	                var child1 = this.content[ child1N ];
	                child1Score = this.scoreFunction( child1 );

	                // If the score is less than our element's, we need to swap.
	                if ( child1Score < elemScore ) swap = child1N;

	            }

	            // Do the same checks for the other child.
	            if ( child2N < length ) {

	                var child2 = this.content[ child2N ];
	                child2Score = this.scoreFunction( child2 );

	                if ( child2Score < ( swap === null ? elemScore : child1Score ) ) swap = child2N;

	            }

	            // If the element needs to be moved, swap it, and continue.
	            if ( swap !== null ) {

	                this.content[ n ] = this.content[ swap ];
	                this.content[ swap ] = element;
	                n = swap;

	            } else {

	                // Otherwise, we are done.
	                break;

	            }

	        }

	    }

	};

	/**
	 * Kdtree
	 * @class
	 * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013
	 * @author I4DS http://www.fhnw.ch/i4ds, 2013
	 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
	 * @description
	 * k-d Tree for typed arrays (e.g. for Float32Array), in-place
	 * provides fast nearest neighbour search
	 * useful e.g. for a custom shader and/or BufferGeometry, saves tons of memory
	 * has no insert and remove, only buildup and nearest neighbour search
	 *
	 * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs
	 *
	 * Requires typed array quicksort
	 *
	 * Further information (including mathematical properties)
	 * http://en.wikipedia.org/wiki/Binary_tree
	 * http://en.wikipedia.org/wiki/K-d_tree
	 *
	 * If you want to further minimize memory usage, remove Node.depth and replace
	 * in search algorithm with a traversal to root node (see comments at Node)
	 *
	 * @example
	 * points: [x, y, z, x, y, z, x, y, z, ...]
	 * metric: function(a, b){
	 *    return Math.pow(a[0]-b[0], 2) + Math.pow(a[1]-b[1], 2) + Math.pow(a[2]-b[2], 2);
	 * }  //Manhatten distance
	 * eleSize: 3 //because of (x, y, z)
	 *
	 * @param {Float32Array} points - points
	 * @param {Function} metric - metric
	 * @param {Integer} eleSize - eleSize
	 * @param {Integer} dimSize - dimSize
	 */
	function Kdtree$1( points, metric, eleSize, dimSize ){

		var self = this;

		var maxDepth = 0;

		function buildTree( depth, parent, arrBegin, arrEnd ){

			var dim = depth % eleSize,
				median,
				node,
				plength = ( arrEnd - arrBegin );

			if( depth > maxDepth ) maxDepth = depth;

			if( plength === 0 ) return null;
			if( plength === 1 ) new Node( ( 0 + arrBegin ) * eleSize, parent );

			if( dim < dimSize ){
				quicksortIP( points, eleSize, dim, arrBegin, arrEnd );
			}

			median = Math.floor( plength / 2 );

			node = new Node( ( median + arrBegin ) * eleSize, parent );
			node.left = buildTree( depth + 1, node, arrBegin, arrBegin + median );
			node.right = buildTree( depth + 1, node, arrBegin + median + 1, arrEnd );

			return node;

		}

		function getNodeDepth( node ){

			if( node.parent === null ){
				return 0;
			}else{
				return getNodeDepth( node.parent ) + 1;
			}

		}

		function getNodePos( node ){

			// TODO
			//
		}

		this.root = buildTree( 0, null, 0, points.length / eleSize );

		this.getMaxDepth = function(){ return maxDepth; };

		this.nearest = function( point, maxNodes, maxDistance ){

			/*  point: array of elements with size eleSize
				maxNodes: max amount of nodes to return
				maxDistance: maximum distance of point to result nodes
			*/

			var i,
				result,
				bestNodes;

			bestNodes = new BinaryHeap(

				function ( e ) { return -e[ 1 ]; }

			);

			function nearestSearch( node ) {

				var bestChild,
					dimension = getNodeDepth( node ) % eleSize,
					ownPoint = [
						points[ node.pos + 0 ],
						points[ node.pos + 1 ],
						points[ node.pos + 2 ]
					],
					ownDistance = metric( point, ownPoint ),
					linearDistance = 0,
					otherChild,
					i,
					linearPoint = [];

				function saveNode( node, distance ) {
					bestNodes.push( [ node, distance ] );
					if ( bestNodes.size() > maxNodes ) {
						bestNodes.pop();
					}
				}

				for ( i = 0; i < dimSize; i += 1 ) {
					if ( i === getNodeDepth( node ) % eleSize ) {
						linearPoint[ i ] = point[ i ];
					} else {
						linearPoint[ i ] = points[ node.pos + i ];
					}
				}

				linearDistance = metric( linearPoint, ownPoint );

				// if it's a leaf

				if ( node.right === null && node.left === null ) {
					if ( ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) && ownDistance < maxDistance ) {
						saveNode( node, ownDistance );
					}
					return;
				}

				if ( node.right === null ) {
					bestChild = node.left;
				} else if ( node.left === null ) {
					bestChild = node.right;
				} else {
					if ( point[ dimension ] < points[ node.pos + dimension ] ) {
						bestChild = node.left;
					} else {
						bestChild = node.right;
					}
				}

				// recursive search

				nearestSearch( bestChild );

				if ( ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) && ownDistance <= maxDistance ) {

					saveNode( node, ownDistance );

				}

				// if there's still room or the current distance is nearer than the best distance

				if ( ( bestNodes.size() < maxNodes || Math.abs( linearDistance ) < bestNodes.peek()[ 1 ] ) && Math.abs( linearDistance ) <= maxDistance ) {

					if ( bestChild === node.left ) {
						otherChild = node.right;
					} else {
						otherChild = node.left;
					}

					if ( otherChild !== null ) {
						nearestSearch( otherChild );
					}

				}

			}

			nearestSearch( self.root );

			result = [];

			for ( i = 0; i < Math.min( bestNodes.size(), maxNodes ); i += 1 ) {
				var inode = bestNodes.content[ i ];
				if ( inode && inode[ 0 ] ) {
					result.push( [ inode[ 0 ], inode[ 1 ] ] );
				}
			}

			return result;

		};

	}

	/**
	 * Node
	 * @class
	 * @private
	 * @description
	 * If you need to free up additional memory and agree with an additional O( log n ) traversal time you can get rid of "depth" and "pos" in Node:
	 * Depth can be easily done by adding 1 for every parent (care: root node has depth 0, not 1)
	 * Pos is a bit tricky: Assuming the tree is balanced (which is the case when after we built it up), perform the following steps:
	 *   By traversing to the root store the path e.g. in a bit pattern (01001011, 0 is left, 1 is right)
	 *   From buildTree we know that "median = Math.floor( plength / 2 );", therefore for each bit...
	 *     0: amountOfNodesRelevantForUs = Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );
	 *     1: amountOfNodesRelevantForUs = Math.ceil( (pamountOfNodesRelevantForUs - 1) / 2 );
	 *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );
	 *     when recursion done, we still need to add all left children of target node:
	 *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );
	 *        and I think you need to +1 for the current position, not sure.. depends, try it out ^^
	 *
	 * I experienced that for 200'000 nodes you can get rid of 4 MB memory each, leading to 8 MB memory saved.
	 *
	 * @param {Integer} pos - index of position
	 * @param {Integer} parent - index of parent Node
	 */
	function Node( pos, parent ){
		this.pos = pos;
		this.left = null;
		this.right = null;
		this.parent = parent;
	}

	function Kdtree( entity, useSquaredDist ){

	    if( exports.Debug ) Log$1.time( "Kdtree build" );

	    var metric;

	    if( useSquaredDist ){

	        metric = function( a, b ){
	            var dx = a[0] - b[0];
	            var dy = a[1] - b[1];
	            var dz = a[2] - b[2];
	            return dx*dx + dy*dy + dz*dz;
	        };

	    }else{

	        metric = function( a, b ){
	            var dx = a[0] - b[0];
	            var dy = a[1] - b[1];
	            var dz = a[2] - b[2];
	            return Math.sqrt( dx*dx + dy*dy + dz*dz );
	        };

	    }

	    var points = new Float32Array( entity.atomCount * 4 );
	    var i = 0;

	    entity.eachAtom( function( ap ){
	        points[ i + 0 ] = ap.x;
	        points[ i + 1 ] = ap.y;
	        points[ i + 2 ] = ap.z;
	        points[ i + 3 ] = ap.index;
	        i += 4;
	    } );

	    this.points = points;
	    this.kdtree = new Kdtree$1( points, metric, 4, 3 );

	    if( exports.Debug ) Log$1.timeEnd( "Kdtree build" );

	}

	Kdtree.prototype = {

	    nearest: function(){

	        var pointArray = new Float32Array( 3 );

	        return function( point, maxNodes, maxDistance ){

	            // Log.time( "Kdtree nearest" );

	            if( point instanceof Vector3 ){

	                point.toArray( pointArray );

	            }else if( point.type === "AtomProxy" ){

	                point.positionToArray( pointArray );

	            }

	            var nodeList = this.kdtree.nearest(
	                pointArray, maxNodes, maxDistance
	            );

	            var points = this.points;
	            var resultList = [];

	            for( var i = 0, n = nodeList.length; i < n; ++i ){

	                var d = nodeList[ i ];
	                var node = d[ 0 ];
	                var dist = d[ 1 ];

	                resultList.push( {
	                    index: points[ node.pos + 3 ],
	                    distance: dist
	                } );

	            }

	            // Log.timeEnd( "Kdtree nearest" );

	            return resultList;

	        };

	    }()

	};

	/**
	 * @file Symmetry Constants
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	var SymOpCode = {
	    " ": "X",
	    "!": "Y",
	    "#": "Z",
	    "$": "-X",
	    "%": "-Y",
	    "&": "-Z",
	    "'": "Y+1/2",
	    "(": "1/2+X",
	    ")": "1/2+Y",
	    "*": "1/2-X",
	    "+": "1/2+Z",
	    ",": "1/2-Y",
	    "-": "1/2-Z",
	    ".": "X+1/2",
	    "/": "Z+1/2",
	    "0": "-X+1/2",
	    "1": "-Y+1/2",
	    "2": "-Z+1/2",
	    "3": "1/4+X",
	    "4": "1/4-Y",
	    "5": "1/4+Z",
	    "6": "1/4-X",
	    "7": "1/4+Y",
	    "8": "3/4-Y",
	    "9": "3/4+Z",
	    ":": "3/4+Y",
	    ";": "3/4+X",
	    "<": "3/4-X",
	    "=": "1/4-Z",
	    ">": "3/4-Z",
	    "?": "X-Y",
	    "@": "Y-X",
	    "A": "Z+1/3",
	    "B": "Z+2/3",
	    "C": "X+2/3",
	    "D": "Y+1/3",
	    "E": "-Y+2/3",
	    "F": "X-Y+1/3",
	    "G": "Y-X+2/3",
	    "H": "-X+1/3",
	    "I": "X+1/3",
	    "J": "Y+2/3",
	    "K": "-Y+1/3",
	    "L": "X-Y+2/3",
	    "M": "Y-X+1/3",
	    "N": "-X+2/3",
	    "O": "2/3+X",
	    "P": "1/3+Y",
	    "Q": "1/3+Z",
	    "R": "2/3-Y",
	    "S": "1/3+X-Y",
	    "T": "2/3+Y-X",
	    "U": "1/3-X",
	    "V": "2/3-X",
	    "W": "1/3-Y",
	    "X": "1/3-Z",
	    "Y": "2/3+Y",
	    "Z": "1/3+Y-X",
	    "[": "2/3+X-Y",
	    "]": "1/3+X",
	    "^": "2/3+Z",
	    "_": "2/3-Z",
	    "`": "5/6+Z",
	    "a": "1/6+Z",
	    "b": "5/6-Z",
	    "c": "1/6-Z",
	    "d": "Z+5/6",
	    "e": "Z+1/6",
	    "f": "Z+1/4",
	    "g": "+Y"
	};

	// encoded, originally from CCP4 symop.lib
	var EncodedSymOp = {
	    "P 1": " !#",
	    "P -1": " !#$%&",
	    "P 1 2 1": " !#$!&",
	    "P 1 21 1": " !#$'&",
	    "C 1 2 1": " !#$!&()#*)&",
	    "P 1 m 1": " !# %#",
	    "P 1 c 1": " !# %+",
	    "C 1 m 1": " !# %#()#(,#",
	    "C 1 c 1": " !# %+()#(,+",
	    "P 1 2/m 1": " !# %#$!&$%&",
	    "P 1 21/m 1": " !#$)&$%& ,#",
	    "C 1 2/m 1": " !# %#$!&$%&()#(,#*)&*,&",
	    "P 1 2/c 1": " !#$!-$%& %+",
	    "P 1 21/c 1": " !#$%&$)- ,+",
	    "C 1 2/c 1": " !#$!-$%& %+()#*)-*,&(,+",
	    "P 2 2 2": " !#$%#$!& %&",
	    "P 2 2 21": " !#$%+$!- %&",
	    "P 21 21 2": " !#$%#*)&(,&",
	    "P 21 21 21": " !#*%+$)-(,&",
	    "C 2 2 21": " !#$%+$!- %&()#*,+*)-(,&",
	    "C 2 2 2": " !#$%#$!& %&()#*,#*)&(,&",
	    "F 2 2 2": " !#$%#$!& %& )+$,+$)- ,-(!+*%+*!-(%-()#*,#*)&(,&",
	    "I 2 2 2": " !#$%# %&$!&.'/01/.120'2",
	    "I 21 21 21": " !#*%+$)-(,&()+$,#*!& %-",
	    "P m m 2": " !#$%# %#$!#",
	    "P m c 21": " !#$%+ %+$!#",
	    "P c c 2": " !#$%# %+$!+",
	    "P m a 2": " !#$%#(%#*!#",
	    "P c a 21": " !#$%+(%#*!+",
	    "P n c 2": " !#$%# ,+$)+",
	    "P m n 21": " !#*%+(%+$!#",
	    "P b a 2": " !#$%#(,#*)#",
	    "P n a 21": " !#$%+(,#*)+",
	    "P n n 2": " !#$%#(,+*)+",
	    "C m m 2": " !#$%# %#$!#()#*,#(,#*)#",
	    "C m c 21": " !#$%+ %+$!#()#*,+(,+*)#",
	    "C c c 2": " !#$%# %+$!+()#*,#(,+*)+",
	    "A m m 2": " !#$%# %#$!# )+$,+ ,+$)+",
	    "A b m 2": " !#$%# ,#$)# )+$,+ %+$!+",
	    "A m a 2": " !#$%#(%#*!# )+$,+(,+*)+",
	    "A b a 2": " !#$%#(,#*)# )+$,+(%+*!+",
	    "F m m 2": " !#$%# %#$!# )+$,+ ,+$)+(!+*%+(%+*!+()#*,#(,#*)#",
	    "F d d 2": " !#$%#345675 )+$,+3896:9(!+*%+;49<79()#*,#;85<:5",
	    "I m m 2": " !#$%# %#$!#()+*,+(,+*)+",
	    "I b a 2": " !#$%#(,#*)#()+*,+ %+$!+",
	    "I m a 2": " !#$%#(%#*!#()+*,+ ,+$)+",
	    "P 2/m 2/m 2/m": " !#$%#$!& %&$%& !& %#$!#",
	    "P 2/n 2/n 2/n": " !#$%#$!& %&*,-()-(,+*)+",
	    "P 2/c 2/c 2/m": " !#$%#$!- %-$%& !& %+$!+",
	    "P 2/b 2/a 2/n": " !#$%#$!& %&*,&()&(,#*)#",
	    "P 21/m 2/m 2/a": " !#*%#$!&(%&$%&(!& %#*!#",
	    "P 2/n 21/n 2/a": " !#*%#*)- ,-$%&(!&(,+$)+",
	    "P 2/m 2/n 21/a": " !#*%+*!- %&$%&(!-(%+$!#",
	    "P 21/c 2/c 2/a": " !#*%#$!-(%-$%&(!& %+*!+",
	    "P 21/b 21/a 2/m": " !#$%#*)&(,&$%& !&(,#*)#",
	    "P 21/c 21/c 2/n": " !#*,#$)-(%-$%&()& ,+*!+",
	    "P 2/b 21/c 21/m": " !#$%+$)- ,&$%& !- ,+$)#",
	    "P 21/n 21/n 2/m": " !#$%#*)-(,-$%& !&(,+*)+",
	    "P 21/m 21/m 2/n": " !#$%#*'&.,&*,&.'& %#$!#",
	    "P 21/b 2/c 21/n": " !#*,+$!-(,&$%&()- %+*)#",
	    "P 21/b 21/c 21/a": " !#*%+$)-(,&$%&(!- ,+*)#",
	    "P 21/n 21/m 21/a": " !#0%/$'&.12$%&.!2 1#0'/",
	    "C 2/m 2/c 21/m": " !#$%+$!- %&$%& !- %+$!#()#*,+*)-(,&*,&()-(,+*)#",
	    "C 2/m 2/c 21/a": " !#$,+$)- %&$%& )- ,+$!#()#*%+*!-(,&*,&(!-(%+*)#",
	    "C 2/m 2/m 2/m": " !#$%#$!& %&$%& !& %#$!#()#*,#*)&(,&*,&()&(,#*)#",
	    "C 2/c 2/c 2/m": " !#$%#$!- %-$%& !& %+$!+()#*,#*)-(,-*,&()&(,+*)+",
	    "C 2/m 2/m 2/a": " !#$,#$)& %&$%& )& ,#$!#()#*%#*!&(,&*,&(!&(%#*)#",
	    "C 2/c 2/c 2/a": " !#*,#$!&(,&$,-(!- ,+*!+()#$%#*)& %&*%- )-(%+$)+",
	    "F 2/m 2/m 2/m": " !#$%#$!& %&$%& !& %#$!# )+$,+$)- ,-$,- )- ,+$)+(!+*%+*!-(%-*%-(!-(%+*!+()#*,#*)&(,&*,&()&(,#*)#",
	    "F 2/d 2/d 2/d": " !#$%#$!& %&64=37=345675 )+$,+$)- ,-68>3:>3896:9(!+*%+*!-(%-<4>;7>;49<79()#*,#*)&(,&<8=;:=;85<:5",
	    "I 2/m 2/m 2/m": " !#$%#$!& %&$%& !& %#$!#()+*,+*)-(,-*,-()-(,+*)+",
	    "I 2/b 2/a 2/m": " !#$%#*)&(,&$%& !&(,#*)#()+*,+$!- %-*,-()- %+$!+",
	    "I 21/b 21/c 21/a": " !#*%+$)-(,&$%&(!- ,+*)#()+$,#*!& %-*,- )&(%#$!+",
	    "I 21/m 21/m 21/a": " !#$,#$)& %&$%& )& ,#$!#()+*%+*!-(,-*,-(!-(%+*)+",
	    "P 4": " !#$%#% #!$#",
	    "P 41": " !#$%+% 5!$9",
	    "P 42": " !#$%#% +!$+",
	    "P 43": " !#$%+% 9!$5",
	    "I 4": " !#$%#% #!$#()+*,+,(+)*+",
	    "I 41": " !#*,+%(5)$9()+$%#, 9!*5",
	    "P -4": " !#$%#!$&% &",
	    "I -4": " !#$%#!$&% &()+*,+)*-,(-",
	    "P 4/m": " !#$%#% #!$#$%& !&!$&% &",
	    "P 42/m": " !#$%#% +!$+$%& !&!$-% -",
	    "P 4/n": " !#$%#,(#)*#*,&()&!$&% &",
	    "P 42/n": " !#$%#,(+)*+*,-()-!$&% &",
	    "I 4/m": " !#$%#% #!$#$%& !&!$&% &()+*,+,(+)*+*,-()-)*-,(-",
	    "I 41/a": " !#*,+%(5)$9$,=(!>!$&,(-()+$%#, 9!*5*%> )=)*-% &",
	    "P 4 2 2": " !#$%#% #!$#$!& %&! &%$&",
	    "P 4 21 2": " !#$%#,(#)*#*)&(,&! &%$&",
	    "P 41 2 2": " !#$%+% 5!$9$!& %-! >%$=",
	    "P 41 21 2": " !#$%+,(5)*9*)=(,>! &%$-",
	    "P 42 2 2": " !#$%#% +!$+$!& %&! -%$-",
	    "P 42 21 2": " !#$%#,(+)*+*)-(,-! &%$&",
	    "P 43 2 2": " !#$%+% 9!$5$!& %-! =%$>",
	    "P 43 21 2": " !#$%+,(9)*5*)>(,=! &%$-",
	    "I 4 2 2": " !#$%#% #!$#$!& %&! &%$&()+*,+,(+)*+*)-(,-)(-,*-",
	    "I 41 2 2": " !#*,+%(5)$9*!> ,=)(-%$&()+$%#, 9!*5$)=(%>! &,*-",
	    "P 4 m m": " !#$%#% #!$# %#$!#%$#! #",
	    "P 4 b m": " !#$%#% #!$#(,#*)#,*#)(#",
	    "P 42 c m": " !#$%#% +!$+ %+$!+%$#! #",
	    "P 42 n m": " !#$%#,(+)*+(,+*)+%$#! #",
	    "P 4 c c": " !#$%#% #!$# %+$!+%$+! +",
	    "P 4 n c": " !#$%#% #!$#(,+*)+,*+)(+",
	    "P 42 m c": " !#$%#% +!$+ %#$!#%$+! +",
	    "P 42 b c": " !#$%#% +!$+(,#*)#,*+)(+",
	    "I 4 m m": " !#$%#% #!$# %#$!#%$#! #()+*,+,(+)*+(,+*)+,*+)(+",
	    "I 4 c m": " !#$%#% #!$# %+$!+%$+! +()+*,+,(+)*+(,#*)#,*#)(#",
	    "I 41 m d": " !#*,+%(5)$9 %#*)+%*5) 9()+$%#, 9!*5(,+$!#,$9!(5",
	    "I 41 c d": " !#*,+%(5)$9 %+*)#%*9) 5()+$%#, 9!*5(,#$!+,$5!(9",
	    "P -4 2 m": " !#$%#% &!$&$!& %&%$#! #",
	    "P -4 2 c": " !#$%#% &!$&$!- %-%$+! +",
	    "P -4 21 m": " !#$%#% &!$&*)&(,&,*#)(#",
	    "P -4 21 c": " !#$%#% &!$&*)-(,-,*+)(+",
	    "P -4 m 2": " !#$%#!$&% & %#$!#! &%$&",
	    "P -4 c 2": " !#$%#% &!$& %+$!+! -%$-",
	    "P -4 b 2": " !#$%#% &!$&(,#*)#)(&,*&",
	    "P -4 n 2": " !#$%#% &!$&(,+*)+)(-,*-",
	    "I -4 m 2": " !#$%#% &!$& %#$!#! &%$&()+*,+,(-)*-(,+*)+)(-,*-",
	    "I -4 c 2": " !#$%#% &!$& %+$!+! -%$-()+*,+,(-)*-(,#*)#)(&,*&",
	    "I -4 2 m": " !#$%#% &!$&$!& %&%$#! #()+*,+,(-)*-*)-(,-,*+)(+",
	    "I -4 2 d": " !#$%#% &!$&*!>(%>,$9) 9()+*,+,(-)*-$)= ,=%*5!(5",
	    "P 4/m 2/m 2/m": " !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #",
	    "P 4/m 2/c 2/c": " !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +",
	    "P 4/n 2/b 2/m": " !#$%#% #!$#$!& %&! &%$&*,&()&)*&,(&(,#*)#,*#)(#",
	    "P 4/n 2/n 2/c": " !#$%#% #!$#$!& %&! &%$&*,-()-)*-,(-(,+*)+,*+)(+",
	    "P 4/m 21/b 2/m": " !#$%#% #!$#*)&(,&)(&,*&$%& !&!$&% &(,#*)#,*#)(#",
	    "P 4/m 21/n 2/c": " !#$%#% #!$#*)-(,-)(-,*-$%& !&!$&% &(,+*)+,*+)(+",
	    "P 4/n 21/m 2/m": " !#$%#,(#)*#*)&(,&! &%$&*,&()&!$&% & %#$!#,*#)(#",
	    "P 4/n 2/c 2/c": " !#$%#,(#)*#*)-(,-! -%$-*,&()&!$&% & %+$!+,*+)(+",
	    "P 42/m 2/m 2/c": " !#$%#% +!$+$!& %&! -%$-$%& !&!$-% - %#$!#%$+! +",
	    "P 42/m 2/c 2/m": " !#$%#% +!$+$!- %-! &%$&$%& !&!$-% - %+$!+%$#! #",
	    "P 42/n 2/b 2/c": " !#$%#,(+)*+$!- %-)(&,*&*,-()-!$&% &(,#*)#%$+! +",
	    "P 42/n 2/n 2/m": " !#$%#,(+)*+$!& %&)(-,*-*,-()-!$&% &(,+*)+%$#! #",
	    "P 42/m 21/b 2/c": " !#$%#% +!$+*)&(,&)(-,*-$%& !&!$-% -(,#*)#,*+)(+",
	    "P 42/m 21/n 2/m": " !#$%#,./'*/*'-.,-! &%$&$%& !&'*-,.-.,/*'/%$#! #",
	    "P 42/n 21/m 2/c": " !#$%#,(+)*+*)-(,-! &%$&*,-()-!$&% & %#$!#,*+)(+",
	    "P 42/n 21/c 2/m": " !#$%#,(+)*+*)&(,&! -%$-*,-()-!$&% & %+$!+,*#)(#",
	    "I 4/m 2/m 2/m": " !#$%#% #!$#$!& %&! &%$&$%& !&!$&% & %#$!#%$#! #()+*,+,(+)*+*)-(,-)(-,*-*,-()-)*-,(-(,+*)+,*+)(+",
	    "I 4/m 2/c 2/m": " !#$%#% #!$#$!- %-! -%$-$%& !&!$&% & %+$!+%$+! +()+*,+,(+)*+*)&(,&)(&,*&*,-()-)*-,(-(,#*)#,*#)(#",
	    "I 41/a 2/m 2/d": " !#*,+%(5)$9*!> ,=)(-%$&$,=(!>!$&,(-(,+$!#,$9!(5()+$%#, 9!*5$)=(%>! &,*-*%> )=)*-% & %#*)+%*5) 9",
	    "I 41/a 2/c 2/d": " !#*,+%(5)$9*!= ,>)(&%$-$,=(!>!$&,(-(,#$!+,$5!(9()+$%#, 9!*5$)>(%=! -,*&*%> )=)*-% & %+*)#%*9) 5",
	    "P 3": " !#%?#@$#",
	    "P 31": " !#%?A@$B",
	    "P 32": " !#%?B@$A",
	    "H 3": " !#%?#@$#CDAEFAGHAIJBKLBMNB",
	    "R 3": " !## !!# ",
	    "P -3": " !#%?#@$#$%&!@&? &",
	    "H -3": " !#%?#@$#$%&!@&? &OPQRSQTUQVWXYZX[]X]Y^W[^ZV^UR_PT_SO_",
	    "R -3": " !## !!# $%&&$%%&$",
	    "P 3 1 2": " !#%?#@$#%$&@!& ?&",
	    "P 3 2 1": " !#%?#@$#! &?%&$@&",
	    "P 31 1 2": " !#%?Q@$^%$_@!X ?&",
	    "P 31 2 1": " !#%?A@$B! &?%_$@X",
	    "P 32 1 2": " !#%?^@$Q%$X@!_ ?&",
	    "P 32 2 1": " !#%?B@$A! &?%X$@_",
	    "H 3 2": " !#%?#@$#! &?%&$@&OPQRSQTUQY]X[WXVZX]Y^W[^ZV^PO_SR_UT_",
	    "R 3 2": " !## !!# %$&$&%&%$",
	    "P 3 m 1": " !#%?#@$#%$#@!# ?#",
	    "P 3 1 m": " !#%?#@$#! #?%#$@#",
	    "P 3 c 1": " !#%?#@$#%$+@!+ ?+",
	    "P 3 1 c": " !#%?#@$#! +?%+$@+",
	    "H 3 m": " !#%?#@$#%$#@!# ?#OPQRSQTUQRUQTPQOSQ]Y^W[^ZV^WV^ZY^][^",
	    "R 3 m": " !## !!# ! # #!#! ",
	    "H 3 c": " !#%?#@$#%$+@!+ ?+OPQRSQTUQRU`TP`OS`]Y^W[^ZV^WVaZYa][a",
	    "R 3 c": " !## !!# '././'/'.",
	    "P -3 1 2/m": " !#%?#@$#%$&@!& ?&$%&!@&? &! #?%#$@#",
	    "P -3 1 2/c": " !#%?#@$#%$-@!- ?-$%&!@&? &! +?%+$@+",
	    "P -3 2/m 1": " !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#",
	    "P -3 2/c 1": " !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+",
	    "H -3 2/m": " !#%?#@$#! &?%&$@&$%&!@&? &%$#@!# ?#OPQRSQTUQY]X[WXVZXVWXYZX[]XRUQTPQOSQ]Y^W[^ZV^PO_SR_UT_UR_PT_SO_WV^ZY^][^",
	    "R -3 2/m": " !## !!# %$&$&%&%$$%&&$%%&$! # #!#! ",
	    "H -3 2/c": " !#%?#@$#! -?%-$@-$%&!@&? &%$+@!+ ?+OPQRSQTUQY]b[WbVZbVWXYZX[]XRU`TP`OS`]Y^W[^ZV^POcSRcUTcUR_PT_SO_WVaZYa][a",
	    "R -3 2/c": " !## !!# 102021210$%&&$%%&$'././'/'.",
	    "P 6": " !#%?#@$#$%#!@#? #",
	    "P 61": " !#%?A@$B$%/!@d? e",
	    "P 65": " !#%?B@$A$%/!@e? d",
	    "P 62": " !#%?^@$Q$%#!@^? Q",
	    "P 64": " !#%?Q@$^$%#!@Q? ^",
	    "P 63": " !#%?#@$#$%+!@+? +",
	    "P -6": " !#%?#@$# !&%?&@$&",
	    "P 6/m": " !#%?#@$#$%#!@#? #$%&!@&? & !&%?&@$&",
	    "P 63/m": " !#%?#@$#$%+!@+? +$%&!@&? & !-%?-@$-",
	    "P 6 2 2": " !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&",
	    "P 61 2 2": " !#%?Q@$^$%+!@`? a! X?%&$@_%$b@!- ?c",
	    "P 65 2 2": " !#%?^@$Q$%+!@a? `! _?%&$@X%$c@!- ?b",
	    "P 62 2 2": " !#%?^@$Q$%#!@^? Q! _?%&$@X%$_@!& ?X",
	    "P 64 2 2": " !#%?Q@$^$%#!@Q? ^! X?%&$@_%$X@!& ?_",
	    "P 63 2 2": " !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-",
	    "P 6 m m": " !#%?#@$#$%#!@#? #%$#@!# ?#! #?%#$@#",
	    "P 6 c c": " !#%?#@$#$%#!@#? #%$+@!+ ?+! +?%+$@+",
	    "P 63 c m": " !#%?#@$#$%+!@+? +%$+@!+ ?+! #?%#$@#",
	    "P 63 m c": " !#%?#@$#$%+!@+? +%$#@!# ?#! +?%+$@+",
	    "P -6 m 2": " !#%?#@$# !&%?&@$&%$#@!# ?#%$&@!& ?&",
	    "P -6 c 2": " !#%?#@$# !-%?-@$-%$+@!+ ?+%$&@!& ?&",
	    "P -6 2 m": " !#%?#@$# !&%?&@$&! &?%&$@&! #?%#$@#",
	    "P -6 2 c": " !#%?#@$# !-%?-@$-! &?%&$@&! +?%+$@+",
	    "P 6/m 2/m 2/m": " !#%?#@$#$%#!@#? #! &?%&$@&%$&@!& ?&$%&!@&? & !&@$&%?&%$#@!# ?#! #?%#$@#",
	    "P 6/m 2/c 2/c": " !#%?#@$#$%#!@#? #! -?%-$@-%$-@!- ?-$%&!@&? & !&@$&%?&%$+@!+ ?+! +?%+$@+",
	    "P 63/m 2/c 2/m": " !#%?#@$#$%+!@+? +! -?%-$@-%$&@!& ?&$%&!@&? & !-@$-%?-%$+@!+ ?+! #?%#$@#",
	    "P 63/m 2/m 2/c": " !#%?#@$#$%+!@+? +! &?%&$@&%$-@!- ?-$%&!@&? & !-@$-%?-%$#@!# ?#! +?%+$@+",
	    "P 2 3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ",
	    "F 2 3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%&  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ",
	    "I 2 3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(",
	    "P 21 3": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(",
	    "I 21 3": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- ",
	    "P 2/m -3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$",
	    "P 2/n -3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& *,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*",
	    "F 2/m -3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-($,- )- ,+$)+&*,&()#(,#*)%-*!-(%+(!+*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(*%-(!-(%+*!+-$,- )+ ,+$),&*)&(,#()#*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- *,&()&(,#*)#-*%-(!+(%+*!,-$)- ,+ )+$",
	    "F 2/d -3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& 64=37=345675=64=375345674=67=3453756 )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(68>3:>3896:9=<8=;:5;85<:4><7>;49;79<(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(<4>;7>;49<79>68>3:93896:8=<:=;85;:5<()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- <8=;:=;8f<:f><4>;79;49<78>6:>3893:96",
	    "I 2/m -3": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& $%& !& %#$!#&$%& !# %#$!%&$!& %# !#$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-(*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*",
	    "P 21/a -3": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*",
	    "I 21/a -3": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&($%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*()+$,#*g& %-+()#$,&*!- %)+(,#$!&*%- *,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$",
	    "P 4 3 2": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$",
	    "P 42 3 2": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*",
	    "F 4 3 2": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$ )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(-%*-!*+%(+ +,$+)$-, -)#)*#,(&)(&,*(!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() -,$-)$+, +(#,*#)*&,(&)+!*+%(-!(-%*()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(&,*&)*#,(#(+%*+!*-%(-!+)$+, -) -,$",
	    "F 41 3 2": " !#$,+*)&(%-# !+$,&*)-(%!# ,+$)&*%-(:3>46=7<98;5;58<976=43>:97<58;>:3=46 )+$%#*!-(,&#()+*%&$!- ,!+(,#*)-$%& :;=4<>765839;94<5:6>83=79:6543>7;=8<(!+*,#$)- %&+ )#$%-*!&(,)#(%+*!&$,- 73=86>:<54;935469:<=8;>7576983=:;>4<()#*%+$!& ,-+(!#*,-$)& %)+ %#$!-*,&(7;>8<=:69435398657<>4;=:5:<94;=73>86",
	    "I 4 3 2": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*",
	    "P 43 3 2": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7;>46=:<5839398<5:6=4;>75:<983>7;=46",
	    "P 41 3 2": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<",
	    "I 41 3 2": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46",
	    "P -4 3 m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ",
	    "F -4 3 m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&%  )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-(!(+%*+!*-%(- +)$+,$-) -,#)(#,*&)*&,((!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&() +,$+)$-, -(#)*#,*&)(&,+!(+%*-!*-%(()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- )(#,*#)*&,(&(+!*+%*-!(-%+) +,$-)$-, ",
	    "I -4 3 m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! #%$#!$&% & #!$#%$&! &%#! #%$&!$&% ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(",
	    "P -4 3 n": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,(",
	    "F -4 3 c": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(+,*+)*-,(-(+)*+,*-)(-,+)(+,*-)*-,( )+$,+$)- ,-#()#*,&*)&(,!+(%+*!-*%-() #,$#)$&, &(#!*#%*&!(&%+! +%$-!$-% (!+*%+*!-(%-+ )+$,-$)- ,)#(,#*)&*,&(!(#%*#!*&%(& +!$+%$-! -%#) #,$&)$&, ()#*,#*)&(,&+(!+*%-*!-(%)+ ,+$)-$,- ! +%$+!$-% - #)$#,$&) &,#!(#%*&!*&%(",
	    "I -4 3 d": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(7354<9:6>8;=357<946>:;=857394<>:6=8;()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- :;98657<=43>;9:658<=73>49:;586=7<>43",
	    "P 4/m -3 2/m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ",
	    "P 4/n -3 2/n": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$*,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(",
	    "P 42/m -3 2/n": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,*$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(",
	    "P 42/n -3 2/m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& )(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ",
	    "F 4/m -3 2/m
	    "F 4/m -3 2/c
	    "F 41/d -3 2/m
	    "F 41/d -3 2/c
	    "I 4/m -3 2/m": " !#$%#$!& %&# !#$%&$!& %!# %#$!&$%& ! &%$&!$#% # #%$#!$&% &!#!$#% &! &%$$%& !& %#$!#&$%& !# %#$!%&$!& %# !#$%$#! #% &!$&$&! &% #!$#%&% &!$#%$#! ()+*,+*)-(,-+()+*,-*)-(,)+(,+*)-*,-()(-,*-)*+,(+(+,*+)*-,(-)+)*+,(-)(-,**,-()-(,+*)+-*,-()+(,+*),-*)-(,+()+*,*+)(+,(-)*-*-)(-,(+)*+,-,(-)*+,*+)(",
	    "I 41/a -3 2/d": " !#*%+$)-(,&# !+*%-$)&(,!# %+*)-$,&(:3=8<>7694;5;54697<>83=:97654;=:3>8<$%&(!- ,+*)#&$%-(!+ ,#*)%&$!-(,+ )#*4<97358;=:6>6>:;=8357<94=8;>:694<573()+$,#*!& %-+()#$,&*!- %)+(,#$!&*%- 7;>46=:<5839398<5:6=4;>75:<983>7;=46*,- )&(%#$!+-*,& )#(%+$!,-*)& %#(!+$865:;943>7<=<=73>4;9:658>43=7<5869:;",
	    "P 1 1 2": " !#$%#",
	    "P 1 1 21": " !#$%+",
	    "B 1 1 2": " !#$%#(g+*%+",
	    "A 1 2 1": " !#$!& )+$)-",
	    "C 1 21 1": " !#$)&()#*!&",
	    "I 1 2 1": " !#$!&.'/0'2",
	    "I 1 21 1": " !#$)&.'/0!-",
	    "P 1 1 m": " !# !&",
	    "P 1 1 b": " !# )&",
	    "B 1 1 m": " !# !&(!+(!-",
	    "B 1 1 b": " !# )&(!+()-",
	    "P 1 1 2/m": " !# !&$%#$%&",
	    "P 1 1 21/m": " !#$%+$%& !-",
	    "B 1 1 2/m": " !# !&$%#$%&(!+(!-*%+*%-",
	    "P 1 1 2/b": " !#$,#$%& )&",
	    "P 1 1 21/b": " !#$%&$,+ )-",
	    "B 1 1 2/b": " !#$,#$%& )&(!+*,+*%-()-",
	    "P 21 2 2": " !#$!&(%&*%#",
	    "P 2 21 2": " !# ,&$)&$%#",
	    "P 21 21 2 (a)": " !#*,#.%&$'&",
	    "P 21 2 21": " !#$!&(%-*%+",
	    "P 2 21 21": " !# %&$)-$,+",
	    "C 2 2 21a)": " !#*%+(,&$)-()#$,+ %&*!-",
	    "C 2 2 2a": " !#*,#.%&$'&()#$%# ,&*!&",
	    "F 2 2 2a": " !#*,#.%&$'& '/*%/.12$!2.!/$,/ %20'2.'#$%# 1&0!&",
	    "I 2 2 2a": " !#*,#.%&$'&()+$%+*!- ,-",
	    "P 21/m 21/m 2/n a": " !#*,#$)&(%&$%&.'& ,#*!#",
	    "P 42 21 2a": " !#*,#%.+'$+$'&.%&! -,*-",
	    "I 2 3a": " !#*,#.%&$'&!# ,- '&$%/$# !-*!/$%&.%()+$%+ ,-*!-)+(%&(!-*,#*+()&$)#*,- ,"
	};

	function getSymmetryOperations( spacegroup ){

	    var encodedSymopList = EncodedSymOp[ spacegroup ];
	    var matrixDict = {};

	    if( encodedSymopList === undefined ){
	        console.warn(
	            "getSymmetryOperations: spacegroup '" +
	            spacegroup + "' not found in symop library"
	        );
	        return matrixDict;
	    }

	    var symopList = [];

	    for( var i = 0, il = encodedSymopList.length; i < il; i+=3 ){
	        var symop = [];
	        for( var j = 0; j < 3; ++j ){
	            symop.push( SymOpCode[ encodedSymopList[ i + j ] ] );
	        }
	        symopList.push( symop );
	    }

	    var reInteger = /^[1-9]$/;

	    symopList.forEach( function( symop ){

	        // console.log( "symop", symop );

	        var row = 0;
	        var matrix = new Matrix4().set(
	            0, 0, 0, 0,
	            0, 0, 0, 0,
	            0, 0, 0, 0,
	            0, 0, 0, 1
	        );
	        var me = matrix.elements;

	        matrixDict[ symop ] = matrix;

	        symop.forEach( function( elm ){

	            // console.log( "row", row );

	            var negate = false;
	            var denominator = false;

	            for( var i = 0, n = elm.length; i < n; ++i ){

	                var c = elm[ i ];

	                if( c === "-" ){

	                    negate = true;

	                }else if( c === "+" ){

	                    negate = false;

	                }else if( c === "/" ){

	                    denominator = true;

	                }else if( c === "X" ){

	                    me[ 0 + row ] = negate ? -1 : 1;

	                }else if( c === "Y" ){

	                    me[ 4 + row ] = negate ? -1 : 1;

	                }else if( c === "Z" ){

	                    me[ 8 + row ] = negate ? -1 : 1;

	                }else if( reInteger.test( c ) ){

	                    var integer = parseInt( c );

	                    if( denominator ){

	                        me[ 12 + row ] /= integer;

	                    }else{

	                        me[ 12 + row ] = integer;

	                    }

	                }else{

	                    Log.warn(
	                        "getSymmetryOperations: unknown token " +
	                        "'" + c + "'"
	                    );

	                }

	                // console.log( "token", c )

	            }

	            row += 1;

	        } );

	        // console.log( "matrix", me )

	    } );

	    return matrixDict;

	}

	function reorderAtoms( structure ){

	    if( exports.Debug ) Log$1.time( "reorderAtoms" );

	    var ap1 = structure.getAtomProxy();
	    var ap2 = structure.getAtomProxy();

	    function compareModelChainResno( index1, index2 ){
	        ap1.index = index1;
	        ap2.index = index2;
	        if( ap1.modelindex < ap2.modelindex ){
	            return -1;
	        }else if( ap1.modelindex > ap2.modelindex ){
	            return 1;
	        }else{
	            if( ap1.chainname < ap2.chainname ){
	                return -1;
	            }else if( ap1.chainname > ap2.chainname ){
	                return 1;
	            }else{
	                if( ap1.resno < ap2.resno ){
	                    return -1;
	                }else if( ap1.resno > ap2.resno ){
	                    return 1;
	                }else{
	                    return 0;
	                }
	            }
	        }
	    }

	    structure.atomStore.sort( compareModelChainResno );

	    if( exports.Debug ) Log$1.timeEnd( "reorderAtoms" );

	}


	function assignSecondaryStructure( structure ){

	    if( exports.Debug ) Log$1.time( "assignSecondaryStructure" );

	    var chainnames = [];
	    structure.eachModel( function( mp ){
	        mp.eachChain( function( cp ){
	            chainnames.push( cp.chainname );
	        } );
	    } );

	    var chainnamesSorted = chainnames.slice().sort();
	    var chainnamesIndex = [];
	    chainnamesSorted.forEach( function( c ){
	        chainnamesIndex.push( chainnames.indexOf( c ) );
	    } );

	    // helix assignment

	    var helices = structure.helices || [];

	    helices = helices.filter( function( h ){
	        return binarySearchIndexOf( chainnamesSorted, h[ 0 ] ) >= 0;
	    } );

	    helices.sort( function( h1, h2 ){

	        var c1 = h1[ 0 ];
	        var c2 = h2[ 0 ];
	        var r1 = h1[ 1 ];
	        var r2 = h2[ 1 ];

	        if( c1 === c2 ){
	            if( r1 === r2 ){
	                return 0;
	            }else{
	                return r1 < r2 ? -1 : 1;
	            }
	        }else{
	            var idx1 = binarySearchIndexOf( chainnamesSorted, c1 );
	            var idx2 = binarySearchIndexOf( chainnamesSorted, c2 );
	            return chainnamesIndex[ idx1 ] < chainnamesIndex[ idx2 ] ? -1 : 1;
	        }

	    } );

	    var residueStore = structure.residueStore;

	    structure.eachModel( function( mp ){

	        var i = 0;
	        var n = helices.length;
	        if( n === 0 ) return;
	        var helix = helices[ i ];
	        var helixRun = false;
	        var done = false;

	        mp.eachChain( function( cp ){

	            var chainChange = false;

	            if( cp.chainname === helix[ 0 ] ){

	                var count = cp.residueCount;
	                var offset = cp.residueOffset;
	                var end = offset + count;

	                for( var j = offset; j < end; ++j ){

	                    if( residueStore.resno[ j ] === helix[ 1 ] &&  // resnoBeg
	                        residueStore.getInscode( j ) === helix[ 2 ]   // inscodeBeg
	                    ){
	                        helixRun = true;
	                    }

	                    if( helixRun ){

	                        residueStore.sstruc[ j ] = helix[ 6 ];

	                        if( residueStore.resno[ j ] === helix[ 4 ] &&  // resnoEnd
	                            residueStore.getInscode( j ) === helix[ 5 ]   // inscodeEnd
	                        ){

	                            helixRun = false;
	                            i += 1;

	                            if( i < n ){
	                                // must look at previous residues as
	                                // residues may not be ordered by resno
	                                j = offset - 1;
	                                helix = helices[ i ];
	                                chainChange = cp.chainname !== helix[ 0 ];
	                            }else{
	                                done = true;
	                            }

	                        }

	                    }

	                    if( chainChange || done ) return;

	                }

	            }

	        } );

	    } );

	    // sheet assignment

	    var sheets = structure.sheets || [];

	    sheets = sheets.filter( function( s ){
	        return binarySearchIndexOf( chainnamesSorted, s[ 0 ] ) >= 0;
	    } );

	    sheets.sort( function( s1, s2 ){

	        var c1 = s1[ 0 ];
	        var c2 = s2[ 0 ];

	        if( c1 === c2 ) return 0;
	        var idx1 = binarySearchIndexOf( chainnamesSorted, c1 );
	        var idx2 = binarySearchIndexOf( chainnamesSorted, c2 );
	        return chainnamesIndex[ idx1 ] < chainnamesIndex[ idx2 ] ? -1 : 1;

	    } );

	    var strandCharCode = "e".charCodeAt( 0 );
	    structure.eachModel( function( mp ){

	        var i = 0;
	        var n = sheets.length;
	        if( n === 0 ) return;
	        var sheet = sheets[ i ];
	        var sheetRun = false;
	        var done = false;

	        mp.eachChain( function( cp ){

	            var chainChange = false;

	            if( cp.chainname === sheet[ 0 ] ){

	                var count = cp.residueCount;
	                var offset = cp.residueOffset;
	                var end = offset + count;

	                for( var j = offset; j < end; ++j ){

	                    if( residueStore.resno[ j ] === sheet[ 1 ] &&  // resnoBeg
	                        residueStore.getInscode( j ) === sheet[ 2 ]   // inscodeBeg
	                    ){
	                        sheetRun = true;
	                    }

	                    if( sheetRun ){

	                        residueStore.sstruc[ j ] = strandCharCode;

	                        if( residueStore.resno[ j ] === sheet[ 4 ] &&  // resnoEnd
	                            residueStore.getInscode( j ) === sheet[ 5 ]   // inscodeEnd
	                        ){

	                            sheetRun = false;
	                            i += 1;

	                            if( i < n ){
	                                // must look at previous residues as
	                                // residues may not be ordered by resno
	                                j = offset - 1;
	                                sheet = sheets[ i ];
	                                chainChange = cp.chainname !== sheet[ 0 ];
	                            }else{
	                                done = true;
	                            }

	                        }

	                    }

	                    if( chainChange || done ) return;

	                }

	            }

	        } );

	    } );

	    if( exports.Debug ) Log$1.timeEnd( "assignSecondaryStructure" );

	}


	var calculateSecondaryStructure = function(){

	    // Implementation for proteins based on "pv"
	    //
	    // assigns secondary structure information based on a simple and very fast
	    // algorithm published by Zhang and Skolnick in their TM-align paper.
	    // Reference:
	    //
	    // TM-align: a protein structure alignment algorithm based on the Tm-score
	    // (2005) NAR, 33(7) 2302-2309

	    var zhangSkolnickSS = function( polymer, i, distances, delta ){

	        var structure = polymer.structure;
	        var offset = polymer.residueIndexStart;
	        var rp1 = structure.getResidueProxy();
	        var rp2 = structure.getResidueProxy();
	        var ap1 = structure.getAtomProxy();
	        var ap2 = structure.getAtomProxy();

	        for( var j = Math.max( 0, i - 2 ); j <= i; ++j ){

	            for( var k = 2;  k < 5; ++k ){

	                if( j + k >= polymer.residueCount ){
	                    continue;
	                }

	                rp1.index = offset + j;
	                rp2.index = offset + j + k;
	                ap1.index = rp1.traceAtomIndex;
	                ap2.index = rp2.traceAtomIndex;

	                var d = ap1.distanceTo( ap2 );

	                if( Math.abs( d - distances[ k - 2 ] ) > delta ){
	                    return false;
	                }

	            }

	        }

	        return true;

	    };

	    var isHelical = function( polymer, i ){
	        var helixDistances = [ 5.45, 5.18, 6.37 ];
	        var helixDelta = 2.1;
	        return zhangSkolnickSS( polymer, i, helixDistances, helixDelta );
	    };

	    var isSheet = function( polymer, i ){
	        var sheetDistances = [ 6.1, 10.4, 13.0 ];
	        var sheetDelta = 1.42;
	        return zhangSkolnickSS( polymer, i, sheetDistances, sheetDelta );
	    };

	    var proteinPolymer = function( p ){
	        var residueStore = p.residueStore;
	        var offset = p.residueIndexStart;
	        for( var i = 0, il = p.residueCount; i < il; ++i ){
	            var sstruc = "c";
	            if( isHelical( p, i ) ){
	                sstruc = "h";
	            }else if( isSheet( p, i ) ){
	                sstruc = "s";
	            }
	            residueStore.sstruc[ offset + i ] = sstruc.charCodeAt( 0 );
	        }
	    };

	    var cgPolymer = function( p ){

	        var localAngle = 20;
	        var centerDist = 2.0;

	        var residueStore = p.residueStore;
	        var offset = p.residueIndexStart;

	        var helixbundle = new Helixbundle( p );
	        var pos = helixbundle.position;

	        var c1 = new Vector3();
	        var c2 = new Vector3();

	        for( var i = 0, il = p.residueCount; i < il; ++i ){

	            c1.fromArray( pos.center, i * 3 );
	            c2.fromArray( pos.center, i * 3 + 3 );
	            var d = c1.distanceTo( c2 );

	            if( d < centerDist && d > 1.0 && pos.bending[ i ] < localAngle ){
	                residueStore.sstruc[ offset + i ] = "h".charCodeAt( 0 );
	                residueStore.sstruc[ offset + i + 1 ] = "h".charCodeAt( 0 );
	            }

	        }

	    };

	    return function( structure ){

	        if( exports.Debug ) Log$1.time( "calculateSecondaryStructure" );

	        structure.eachPolymer( function( p ){

	            // assign secondary structure
	            if( p.residueCount < 4 ) return;
	            if( p.isCg() ){
	                cgPolymer( p );
	            }else if( p.isProtein() ){
	                proteinPolymer( p );
	            }else{
	                return;
	            }

	            // set lone secondary structure assignments to "c"
	            var prevSstruc;
	            var sstrucCount = 0;
	            p.eachResidue( function( r ){
	                if( r.sstruc === prevSstruc ){
	                    sstrucCount += 1;
	                }else{
	                    if( sstrucCount === 1 ){
	                        r.index -= 1;
	                        r.sstruc = "c";
	                    }
	                    sstrucCount = 1;
	                    prevSstruc = r.sstruc;
	                }
	            } );

	        } );

	        if( exports.Debug ) Log$1.timeEnd( "calculateSecondaryStructure" );

	    };

	}();


	function calculateChainnames( structure ){

	    if( exports.Debug ) Log$1.time( "calculateChainnames" );

	    var doAutoChainName = true;
	    structure.eachChain( function( c ){
	        if( c.chainname ) doAutoChainName = false;
	    } );

	    if( doAutoChainName ){

	        // var names = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
	        //             "abcdefghijklmnopqrstuvwxyz" +
	        //             "0123456789";
	        var names = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	        var n = names.length;

	        var modelStore = structure.modelStore;
	        var chainStore = structure.chainStore;
	        var residueStore = structure.residueStore;

	        var addChain = function( mIndex, chainname, rOffset, rCount ){
	            var ci = chainStore.count;
	            for( var i = 0; i < rCount; ++i ){
	                residueStore.chainIndex[ rOffset + i ] = ci;
	            }
	            chainStore.growIfFull();
	            chainStore.modelIndex[ ci ] = mIndex;
	            chainStore.setChainname( ci, chainname );
	            chainStore.residueOffset[ ci ] = rOffset;
	            chainStore.residueCount[ ci ] = rCount;
	            chainStore.count += 1;
	            modelStore.chainCount[ mIndex ] += 1;
	        };

	        var getName = function( i ){
	            var j = i;
	            var k = 0;
	            var chainname = names[ j % n ];
	            while( j >= n ){
	                j = Math.floor( j / n );
	                chainname += names[ j % n ];
	                k += 1;
	            }
	            if( k >= 5 ){
	                Log$1.warn( "chainname overflow" );
	            }
	            return chainname;
	        };

	        var ap1 = structure.getAtomProxy();
	        var ap2 = structure.getAtomProxy();

	        var i = 0;
	        var mi = 0;
	        var rStart = 0;
	        var rEnd = 0;
	        var chainData = [];

	        if( residueStore.count === 1 ){

	            chainData.push( {
	                mIndex: 0,
	                chainname: "A",
	                rStart: 0,
	                rCount: 1
	            } );

	        }else{

	            structure.eachResidueN( 2, function( rp1, rp2 ){

	                var newChain = false;

	                var bbType1 = rp1.backboneType;
	                var bbType2 = rp2.backboneType;
	                var bbTypeUnk = UnknownBackboneType;

	                rEnd = rp1.index;

	                if( rp1.modelIndex !== rp2.modelIndex ){
	                    newChain = true;
	                }else if( rp1.moleculeType !== rp2.moleculeType ){
	                    newChain = true;
	                }else if( bbType1 !== bbTypeUnk && bbType1 === bbType2 ){
	                    ap1.index = rp1.backboneEndAtomIndex;
	                    ap2.index = rp2.backboneStartAtomIndex;
	                    if( !ap1.connectedTo( ap2 ) ){
	                        newChain = true;
	                    }
	                }

	                // current chain goes to end of the structure
	                if( !newChain && rp2.index === residueStore.count - 1 ){
	                    newChain = true;
	                    rEnd = rp2.index;
	                }

	                if( newChain ){

	                    chainData.push( {
	                        mIndex: mi,
	                        chainname: getName( i ),
	                        rStart: rStart,
	                        rCount: rEnd - rStart + 1
	                    } );

	                    i += 1;

	                    if( rp1.modelIndex !== rp2.modelIndex ){
	                        i = 0;
	                        mi += 1;
	                    }

	                    // new chain for the last residue of the structure
	                    if( rp2.index === residueStore.count - 1 ){
	                        chainData.push( {
	                            mIndex: mi,
	                            chainname: getName( i ),
	                            rStart: residueStore.count - 1,
	                            rCount: 1
	                        } );
	                    }

	                    rStart = rp2.index;
	                    rEnd = rp2.index;

	                }

	            } );

	        }

	        //

	        chainStore.count = 0;
	        chainData.forEach( function( d ){
	            addChain( d.mIndex, d.chainname, d.rStart, d.rCount );
	        } );

	        var chainOffset = 0;
	        structure.eachModel( function( mp ){
	            modelStore.chainOffset[ mp.index ] = chainOffset;
	            modelStore.chainCount[ mp.index ] -= 1;
	            chainOffset += modelStore.chainCount[ mp.index ];
	        } );

	    }

	    if( exports.Debug ) Log$1.timeEnd( "calculateChainnames" );

	}


	function calculateBonds( structure ){

	    if( exports.Debug ) Log$1.time( "calculateBonds" );

	    calculateBondsWithin( structure );
	    calculateBondsBetween( structure );

	    if( exports.Debug ) Log$1.timeEnd( "calculateBonds" );

	}


	function calculateResidueBonds( r ){

	    var structure = r.structure;
	    var a1 = structure.getAtomProxy();
	    var a2 = structure.getAtomProxy();

	    var count = r.atomCount;
	    var offset = r.atomOffset;
	    var end = offset + count;
	    var end1 = end - 1;

	    if( count > 500 ){
	        if( exports.Debug ) Log$1.warn( "more than 500 atoms, skip residue for auto-bonding", r.qualifiedName() );
	        return;
	    }

	    var i, j;
	    var atomIndices1 = [];
	    var atomIndices2 = [];
	    var bondOrders = [];

	    if( count > 50 ){

	        var kdtree = new Kdtree( r, true );
	        var radius = r.isCg() ? 1.2 : 2.3;

	        for( i = offset; i < end1; ++i ){
	            a1.index = i;
	            var maxd = a1.covalent + radius + 0.3;
	            var nearestAtoms = kdtree.nearest(
	                a1, Infinity, maxd * maxd
	            );
	            var m = nearestAtoms.length;
	            for( j = 0; j < m; ++j ){
	                a2.index = nearestAtoms[ j ].index;
	                if( a1.index < a2.index ){
	                    if( a1.connectedTo( a2 ) ){
	                        atomIndices1.push( a1.index - offset );
	                        atomIndices2.push( a2.index - offset );
	                        bondOrders.push( 1 );
	                    }
	                }
	            }
	        }

	    }else{

	        for( i = offset; i < end1; ++i ){
	            a1.index = i;
	            for( j = i + 1; j <= end1; ++j ){
	                a2.index = j;
	                if( a1.connectedTo( a2 ) ){
	                    atomIndices1.push( i - offset );
	                    atomIndices2.push( j - offset );
	                    bondOrders.push( 1 );
	                }
	            }
	        }

	    }

	    return {
	        atomIndices1: atomIndices1,
	        atomIndices2: atomIndices2,
	        bondsOrders: bondOrders
	    };

	}


	function calculateBondsWithin( structure, onlyAddRung ){

	    if( exports.Debug ) Log$1.time( "calculateBondsWithin" );

	    var bondStore = structure.bondStore;
	    var rungBondStore = structure.rungBondStore;
	    var rungAtomSet = structure.getAtomSet( false );
	    var a1 = structure.getAtomProxy();
	    var a2 = structure.getAtomProxy();

	    structure.eachResidue( function( r ){

	        if( !onlyAddRung ){

	            var count = r.atomCount;
	            var offset = r.atomOffset;
	            var end = offset + count;
	            var end1 = end - 1;

	            if( count > 500 ){
	                Log$1.warn( "more than 500 atoms, skip residue for auto-bonding", r.qualifiedName() );
	                return;
	            }

	            var bonds = r.getBonds();
	            var atomIndices1 = bonds.atomIndices1;
	            var atomIndices2 = bonds.atomIndices2;
	            var nn = atomIndices1.length;

	            for( var i = 0; i < nn; ++i ){
	                a1.index = atomIndices1[ i ] + offset;
	                a2.index = atomIndices2[ i ] + offset;
	                bondStore.addBond( a1, a2, 1 );  // assume single bond
	            }

	        }

	        // get RNA/DNA rung pseudo bonds
	        var traceAtomIndex = r.residueType.traceAtomIndex;
	        var rungEndAtomIndex = r.residueType.rungEndAtomIndex;
	        if( traceAtomIndex !== -1 && rungEndAtomIndex !== -1 ){
	            a1.index = r.traceAtomIndex;
	            a2.index = r.rungEndAtomIndex;
	            rungBondStore.addBond( a1, a2 );
	            rungAtomSet.add_unsafe( a1.index );
	            rungAtomSet.add_unsafe( a2.index );
	        }

	    } );

	    structure.atomSetDict.rung = rungAtomSet;

	    if( exports.Debug ) Log$1.timeEnd( "calculateBondsWithin" );

	}


	function calculateBondsBetween( structure, onlyAddBackbone ){

	    if( exports.Debug ) Log$1.time( "calculateBondsBetween" );

	    var bondStore = structure.bondStore;
	    var backboneBondStore = structure.backboneBondStore;
	    var backboneAtomSet = structure.getAtomSet( false );
	    var ap1 = structure.getAtomProxy();
	    var ap2 = structure.getAtomProxy();

	    if( backboneBondStore.count === 0 ){
	        backboneBondStore.resize( structure.residueStore.count );
	    }

	    function addBondIfConnected( rp1, rp2 ){
	        var bbType1 = rp1.backboneType;
	        var bbType2 = rp2.backboneType;
	        if( bbType1 !== UnknownBackboneType && bbType1 === bbType2 ){
	            ap1.index = rp1.backboneEndAtomIndex;
	            ap2.index = rp2.backboneStartAtomIndex;
	            if( ap1.connectedTo( ap2 ) ){
	                if( !onlyAddBackbone ){
	                    bondStore.addBond( ap1, ap2, 1 );  // assume single bond
	                }
	                ap1.index = rp1.traceAtomIndex;
	                ap2.index = rp2.traceAtomIndex;
	                backboneBondStore.addBond( ap1, ap2 );
	                backboneAtomSet.add_unsafe( ap1.index );
	                backboneAtomSet.add_unsafe( ap2.index );
	            }
	        }
	    }

	    structure.eachResidueN( 2, addBondIfConnected );

	    var rp1 = structure.getResidueProxy();
	    var rp2 = structure.getResidueProxy();

	    // check for cyclic chains
	    structure.eachChain( function( cp ){
	        if( cp.residueCount === 0 ) return;
	        rp1.index = cp.residueOffset;
	        rp2.index = cp.residueOffset + cp.residueCount - 1;
	        addBondIfConnected( rp2, rp1 );
	    } );

	    structure.atomSetDict.backbone = backboneAtomSet;

	    if( exports.Debug ) Log$1.timeEnd( "calculateBondsBetween" );

	}


	function buildUnitcellAssembly( structure ){

	    if( exports.Debug ) Log$1.time( "buildUnitcellAssembly" );

	    var uc = structure.unitcell;

	    var centerFrac = structure.center.clone().applyMatrix4( uc.cartToFrac );
	    var symopDict = getSymmetryOperations( uc.spacegroup );

	    var positionFrac = new Vector3();
	    var centerFracSymop = new Vector3();
	    var positionFracSymop = new Vector3();

	    if( centerFrac.x > 1 ) positionFrac.x -= 1;
	    if( centerFrac.x < 0 ) positionFrac.x += 1;
	    if( centerFrac.y > 1 ) positionFrac.y -= 1;
	    if( centerFrac.y < 0 ) positionFrac.y += 1;
	    if( centerFrac.z > 1 ) positionFrac.z -= 1;
	    if( centerFrac.z < 0 ) positionFrac.z += 1;

	    function getMatrixList( shift ){

	        var matrixList = [];

	        Object.keys( symopDict ).forEach( function( name ){

	            var m = symopDict[ name ].clone();

	            centerFracSymop.copy( centerFrac ).applyMatrix4( m );
	            positionFracSymop.setFromMatrixPosition( m );
	            positionFracSymop.sub( positionFrac );

	            if( centerFracSymop.x > 1 ) positionFracSymop.x -= 1;
	            if( centerFracSymop.x < 0 ) positionFracSymop.x += 1;
	            if( centerFracSymop.y > 1 ) positionFracSymop.y -= 1;
	            if( centerFracSymop.y < 0 ) positionFracSymop.y += 1;
	            if( centerFracSymop.z > 1 ) positionFracSymop.z -= 1;
	            if( centerFracSymop.z < 0 ) positionFracSymop.z += 1;

	            if( shift ) positionFracSymop.add( shift );

	            m.setPosition( positionFracSymop );
	            m.multiplyMatrices( uc.fracToCart, m );
	            m.multiply( uc.cartToFrac );

	            matrixList.push( m );

	        } );

	        return matrixList;

	    }

	    var unitcellAssembly = new Assembly( "UNITCELL" );
	    var unitcellMatrixList = getMatrixList();
	    var ncsMatrixList;
	    if( structure.biomolDict.NCS ){
	        ncsMatrixList = [ new Matrix4() ].concat(
	            structure.biomolDict.NCS.partList[ 0 ].matrixList
	        );
	        var ncsUnitcellMatrixList = [];
	        unitcellMatrixList.forEach( function( sm ){
	            ncsMatrixList.forEach( function( nm ){
	                ncsUnitcellMatrixList.push( sm.clone().multiply( nm ) );
	            } );
	        } );
	        unitcellAssembly.addPart( ncsUnitcellMatrixList );
	    }else{
	        unitcellAssembly.addPart( unitcellMatrixList );
	    }

	    var vec = new Vector3();
	    var supercellAssembly = new Assembly( "SUPERCELL" );
	    var supercellMatrixList = Array.prototype.concat.call(
	        getMatrixList(),                         // 555
	        getMatrixList( vec.set(  1,  1,  1 ) ),  // 666
	        getMatrixList( vec.set( -1, -1, -1 ) ),  // 444

	        getMatrixList( vec.set(  1,  0,  0 ) ),  // 655
	        getMatrixList( vec.set(  1,  1,  0 ) ),  // 665
	        getMatrixList( vec.set(  1,  0,  1 ) ),  // 656
	        getMatrixList( vec.set(  0,  1,  0 ) ),  // 565
	        getMatrixList( vec.set(  0,  1,  1 ) ),  // 566
	        getMatrixList( vec.set(  0,  0,  1 ) ),  // 556

	        getMatrixList( vec.set( -1,  0,  0 ) ),  // 455
	        getMatrixList( vec.set( -1, -1,  0 ) ),  // 445
	        getMatrixList( vec.set( -1,  0, -1 ) ),  // 454
	        getMatrixList( vec.set(  0, -1,  0 ) ),  // 545
	        getMatrixList( vec.set(  0, -1, -1 ) ),  // 544
	        getMatrixList( vec.set(  0,  0, -1 ) ),  // 554

	        getMatrixList( vec.set(  1, -1, -1 ) ),  // 644
	        getMatrixList( vec.set(  1,  1, -1 ) ),  // 664
	        getMatrixList( vec.set(  1, -1,  1 ) ),  // 646
	        getMatrixList( vec.set( -1,  1,  1 ) ),  // 466
	        getMatrixList( vec.set( -1, -1,  1 ) ),  // 446
	        getMatrixList( vec.set( -1,  1, -1 ) ),  // 464

	        getMatrixList( vec.set(  0,  1, -1 ) ),  // 564
	        getMatrixList( vec.set(  0, -1,  1 ) ),  // 546
	        getMatrixList( vec.set(  1,  0, -1 ) ),  // 654
	        getMatrixList( vec.set( -1,  0,  1 ) ),  // 456
	        getMatrixList( vec.set(  1, -1,  0 ) ),  // 645
	        getMatrixList( vec.set( -1,  1,  0 ) )   // 465
	    );
	    if( structure.biomolDict.NCS ){
	        var ncsSupercellMatrixList = [];
	        supercellMatrixList.forEach( function( sm ){
	            ncsMatrixList.forEach( function( nm ){
	                ncsSupercellMatrixList.push( sm.clone().multiply( nm ) );
	            } );
	        } );
	        supercellAssembly.addPart( ncsSupercellMatrixList );
	    }else{
	        supercellAssembly.addPart( supercellMatrixList );
	    }

	    structure.biomolDict.UNITCELL = unitcellAssembly;
	    structure.biomolDict.SUPERCELL = supercellAssembly;

	    if( exports.Debug ) Log$1.timeEnd( "buildUnitcellAssembly" );

	}


	var guessElement = function(){

	    var elm1 = [ "H", "C", "O", "N", "S", "P" ];
	    var elm2 = [ "NA", "CL" ];

	    return function( atomName ){

	        var at = atomName.trim().toUpperCase();
	        if( parseInt( at.charAt( 0 ) ) ) at = at.substr( 1 );
	        // parse again to check for a second integer
	        if( parseInt( at.charAt( 0 ) ) ) at = at.substr( 1 );
	        var n = at.length;

	        if( n===0 ) return "";

	        if( n===1 ) return at;

	        if( n===2 ){

	            if( elm2.indexOf( at )!==-1 ) return at;

	            if( elm1.indexOf( at[0] )!==-1 ) return at[0];

	        }

	        if( n>=3 ){

	            if( elm1.indexOf( at[0] )!==-1 ) return at[0];

	        }

	        return "";

	    };

	}();


	function getAtomToBondMapping( structure ){

	    // if( Debug ) Log.time( "getAtomToBondMapping" );

	    var n = structure.atomStore.count;
	    var atomToBondMap = new Array( n );

	    function add( idx1, bondIndex ){
	        if( atomToBondMap[ idx1 ] === undefined ){
	            atomToBondMap[ idx1 ] = [ bondIndex ];
	        }else{
	            atomToBondMap[ idx1 ].push( bondIndex );
	        }
	    }

	    structure.eachBond( function( bp ){
	        add( bp.atomIndex1, bp.index );
	        add( bp.atomIndex2, bp.index );
	    } );

	    // if( Debug ) Log.timeEnd( "getAtomToBondMapping" );

	    return atomToBondMap;

	}


	function assignResidueTypeBonds( structure ){

	    // if( Debug ) Log.time( "assignResidueTypeBonds" );

	    var atomToBondMap = getAtomToBondMapping( structure );
	    var bp = structure.getBondProxy();

	    structure.eachResidue( function( rp ){

	        var residueType = rp.residueType;
	        if( residueType.bonds !== undefined ) return;

	        var atomOffset = rp.atomOffset;
	        var atomIndices1 = [];
	        var atomIndices2 = [];
	        var bondOrders = [];
	        var bondDict = {};

	        rp.eachAtom( function( ap ){

	            var index = ap.index;
	            var atomBonds = atomToBondMap[ index ];
	            if( atomBonds ){
	                for( var i = 0, il = atomBonds.length; i < il; ++i ){
	                    bp.index = atomBonds[ i ];
	                    var idx1 = bp.atomIndex1;
	                    var idx2 = bp.atomIndex2;
	                    if( idx1 > idx2 ){
	                        var tmp = idx2;
	                        idx2 = idx1;
	                        idx1 = tmp;
	                    }
	                    var hash = idx1 + "|" + idx2;
	                    if( bondDict[ hash ] === undefined ){
	                        bondDict[ hash ] = true;
	                        atomIndices1.push( idx1 - atomOffset );
	                        atomIndices2.push( idx2 - atomOffset );
	                        bondOrders.push( bp.bondOrder );
	                    }
	                }
	            }

	        } );

	        residueType.bonds = {
	            atomIndices1: atomIndices1,
	            atomIndices2: atomIndices2,
	            bondOrders: bondOrders
	        };

	    } );

	    // if( Debug ) Log.timeEnd( "assignResidueTypeBonds" );

	}

	function AtomType( structure, atomname, element ){

	    this.structure = structure;

	    element = element || guessElement( atomname );

	    this.atomname = atomname;
	    this.element = element;
	    this.vdw = VdwRadii[ element ];
	    this.covalent = CovalentRadii[ element ];

	}

	AtomType.prototype = {

	    constructor: AtomType,
	    type: "AtomType",

	    atomname: undefined,
	    element: undefined,
	    vdw: undefined,
	    covalent: undefined,

	};

	function AtomMap( structure ){

	    var idDict = {};
	    var typeList = [];

	    function getHash( atomname, element ){
	        return atomname + "|" + element;
	    }

	    function add( atomname, element ){
	        element = element || guessElement( atomname );
	        var hash = getHash( atomname, element );
	        var id = idDict[ hash ];
	        if( id === undefined ){
	            var atomType = new AtomType( structure, atomname, element );
	            id = typeList.length;
	            idDict[ hash ] = id;
	            typeList.push( atomType );
	        }
	        return id;
	    }

	    function get( id ){
	        return typeList[ id ];
	    }

	    // API

	    this.add = add;
	    this.get = get;

	    this.list = typeList;
	    this.dict = idDict;

	    this.toJSON = function(){
	        var output = {
	            metadata: {
	                version: 0.1,
	                type: 'AtomMap',
	                generator: 'AtomMapExporter'
	            },
	            idDict: idDict,
	            typeList: typeList.map( function( atomType ){
	                return atomType.toJSON();
	            } )
	        };
	        return output;
	    };

	    this.fromJSON = function( input ){
	        idDict = input.idDict;
	        typeList = input.typeList.map( function( input ){
	            return new AtomType( structure, input.atomname, input.element );
	        } );
	        this.list = typeList;
	        this.dict = idDict;
	    };

	}

	/**
	 * Propagates a depth-first search.
	 * The current set of neighbours bondGraph[visited[visited.length-1]] is
	 * always checked.
	 * If maxDepth is positive, search propagates (decrementing maxDepth).
	 * TODO: Iterative deepening search instead?
	 *
	 * @private
	 * @param {Array[]} bondGraph - bond graph, array of array of bonded atom indices
	 * @param {Array} visited - current path of atoms
	 * @param {Integer} maxDepth - max recursion depth
	 * @return {Boolean} whether to propagate the search or not
	 */
	function propagateSearch( bondGraph, visited, maxDepth ) {

	    var current = visited[visited.length-1];
	    var neighbours = bondGraph[current];

	    for (var i = 0; i < neighbours.length; ++i) {

	        // Does this close the ring?
	        if( visited.length >= 3 && visited[0] === neighbours[i] ) {
	            // Hoorah, this is a ring!
	            return true;
	        }
	        if( maxDepth > 0 ) {
	            if (visited.indexOf(neighbours[i]) !== -1) {
	                continue;
	            }
	            // Propagate
	            visited.push(neighbours[i]);
	            if (propagateSearch( bondGraph, visited, maxDepth-1)) {
	                return true;
	            }
	            visited.pop();
	        }

	    }

	}


	function ResidueType( structure, resname, atomTypeIdList, hetero, chemCompType, bonds ){

	    this.structure = structure;

	    this.resname = resname;
	    this.atomTypeIdList = atomTypeIdList;
	    this.hetero = hetero ? 1 : 0;
	    this.chemCompType = chemCompType;
	    this.bonds = bonds;
	    this.atomCount = atomTypeIdList.length;

	    this.moleculeType = this.getMoleculeType();
	    this.backboneType = this.getBackboneType( 0 );
	    this.backboneEndType = this.getBackboneType( -1 );
	    this.backboneStartType = this.getBackboneType( 1 );
	    this.backboneIndexList = this.getBackboneIndexList();

	    var atomnames = ResidueTypeAtoms[ this.backboneType ];
	    var atomnamesStart = ResidueTypeAtoms[ this.backboneStartType ];
	    var atomnamesEnd = ResidueTypeAtoms[ this.backboneEndType ];

	    var traceIndex = this.getAtomIndexByName( atomnames.trace );
	    this.traceAtomIndex = traceIndex !== undefined ? traceIndex : -1;

	    var dir1Index = this.getAtomIndexByName( atomnames.direction1 );
	    this.direction1AtomIndex = dir1Index !== undefined ? dir1Index : -1;

	    var dir2Index = this.getAtomIndexByName( atomnames.direction2 );
	    this.direction2AtomIndex = dir2Index !== undefined ? dir2Index : -1;

	    var bbStartIndex = this.getAtomIndexByName( atomnamesStart.backboneStart );
	    this.backboneStartAtomIndex = bbStartIndex !== undefined ? bbStartIndex : -1;

	    var bbEndIndex = this.getAtomIndexByName( atomnamesEnd.backboneEnd );
	    this.backboneEndAtomIndex = bbEndIndex !== undefined ? bbEndIndex : -1;

	    var rungEndIndex;
	    if( PurinBases.indexOf( resname ) !== -1 ){
	        rungEndIndex = this.getAtomIndexByName( "N1" );
	    }else{
	        rungEndIndex = this.getAtomIndexByName( "N3" );
	    }
	    this.rungEndAtomIndex = rungEndIndex !== undefined ? rungEndIndex : -1;

	    // Sparse array containing the reference atom index for each bond.
	    this.bondReferenceAtomIndices = [];

	}

	ResidueType.prototype = {

	    constructor: ResidueType,
	    type: "ResidueType",

	    resname: undefined,
	    atomTypeIdList: undefined,
	    atomCount: undefined,

	    getBackboneIndexList: function(){
	        var backboneIndexList = [];
	        var atomnameList;
	        switch( this.moleculeType ){
	            case ProteinType:
	                atomnameList = ProteinBackboneAtoms;
	                break;
	            case RnaType:
	            case DnaType:
	                atomnameList = NucleicBackboneAtoms;
	                break;
	            default:
	                return backboneIndexList;
	        }
	        var atomMap = this.structure.atomMap;
	        var atomTypeIdList = this.atomTypeIdList;
	        for( var i = 0, il = this.atomCount; i < il; ++i ){
	            var atomType = atomMap.get( atomTypeIdList[ i ] );
	            if( atomnameList.indexOf( atomType.atomname ) !== -1 ){
	                backboneIndexList.push( i );
	            }
	        }
	        return backboneIndexList;
	    },

	    getMoleculeType: function(){
	        if( this.isProtein() ){
	            return ProteinType;
	        }else if( this.isRna() ){
	            return RnaType;
	        }else if( this.isDna() ){
	            return DnaType;
	        }else if( this.isWater() ){
	            return WaterType;
	        }else if( this.isIon() ){
	            return IonType;
	        }else if( this.isSaccharide() ){
	            return SaccharideType;
	        }else{
	            return UnknownType;
	        }
	    },

	    getBackboneType: function( position ){
	        if( this.hasProteinBackbone( position ) ){
	            return ProteinBackboneType;
	        }else if( this.hasRnaBackbone( position ) ){
	            return RnaBackboneType;
	        }else if( this.hasDnaBackbone( position ) ){
	            return DnaBackboneType;
	        }else if( this.hasCgProteinBackbone( position ) ){
	            return CgProteinBackboneType;
	        }else if( this.hasCgRnaBackbone( position ) ){
	            return CgRnaBackboneType;
	        }else if( this.hasCgDnaBackbone( position ) ){
	            return CgDnaBackboneType;
	        }else{
	            return UnknownBackboneType;
	        }
	    },

	    isProtein: function(){
	        if( this.chemCompType ){
	            return ChemCompProtein.indexOf( this.chemCompType ) !== -1;
	        }else{
	            return (
	                this.hasAtomWithName( "CA", "C", "N" ) ||
	                AA3.indexOf( this.resname ) !== -1
	            );
	        }
	    },

	    isCg: function(){
	        var backboneType = this.backboneType;
	        return (
	            backboneType === CgProteinBackboneType ||
	            backboneType === CgRnaBackboneType ||
	            backboneType === CgDnaBackboneType
	        );
	    },

	    isNucleic: function(){
	        return this.isRna() || this.isDna();
	    },

	    isRna: function(){
	        if( this.chemCompType ){
	            return ChemCompRna.indexOf( this.chemCompType ) !== -1;
	        }else{
	            return (
	                this.hasAtomWithName( [ "P", "O3'", "O3*" ], [ "C4'", "C4*" ], [ "O2'", "O2*" ] ) ||
	                RnaBases.indexOf( this.resname ) !== -1
	            );
	        }
	    },

	    isDna: function(){
	        if( this.chemCompType ){
	            return ChemCompDna.indexOf( this.chemCompType ) !== -1;
	        }else{
	            return (
	                ( this.hasAtomWithName( [ "P", "O3'", "O3*" ], [ "C3'", "C3*" ] ) &&
	                    !this.hasAtomWithName( [ "O2'", "O2*" ] ) ) ||
	                DnaBases.indexOf( this.resname ) !== -1
	            );
	        }
	    },

	    isPolymer: function(){
	        return this.isProtein() || this.isNucleic();
	    },

	    isHetero: function(){
	        return this.hetero === 1;
	    },

	    isIon: function(){
	        return IonNames.indexOf( this.resname ) !== -1;
	    },

	    isWater: function(){
	        return WaterNames.indexOf( this.resname ) !== -1;
	    },

	    isSaccharide: function(){
	        return ChemCompSaccharide.indexOf( this.chemCompType ) !== -1;
	    },

	    hasBackboneAtoms: function( position, type ){
	        var atomnames = ResidueTypeAtoms[ type ];
	        if( position === -1 ){
	            return this.hasAtomWithName(
	                atomnames.trace,
	                atomnames.backboneEnd,
	                atomnames.direction1,
	                atomnames.direction2
	            );
	        }else if( position === 0 ){
	            return this.hasAtomWithName(
	                atomnames.trace,
	                atomnames.direction1,
	                atomnames.direction2
	            );
	        }else if( position === 1 ){
	            return this.hasAtomWithName(
	                atomnames.trace,
	                atomnames.backboneStart,
	                atomnames.direction1,
	                atomnames.direction2
	            );
	        }else{
	            return this.hasAtomWithName(
	                atomnames.trace,
	                atomnames.backboneStart,
	                atomnames.backboneEnd,
	                atomnames.direction1,
	                atomnames.direction2
	            );
	        }
	    },

	    hasProteinBackbone: function( position ){
	        return (
	            this.isProtein() &&
	            this.hasBackboneAtoms( position, ProteinBackboneType )
	        );
	    },

	    hasRnaBackbone: function( position ){
	        return (
	            this.isRna() &&
	            this.hasBackboneAtoms( position, RnaBackboneType )
	        );
	    },

	    hasDnaBackbone: function( position ){
	        return (
	            this.isDna() &&
	            this.hasBackboneAtoms( position, DnaBackboneType )
	        );
	    },

	    hasCgProteinBackbone: function( position ){
	        return (
	            this.isProtein() &&
	            this.hasBackboneAtoms( position, CgProteinBackboneType )
	        );
	    },

	    hasCgRnaBackbone: function( position ){
	        return (
	            this.isRna() &&
	            this.hasBackboneAtoms( position, CgRnaBackboneType )
	        );
	    },

	    hasCgDnaBackbone: function( position ){
	        return (
	            this.isDna() &&
	            this.hasBackboneAtoms( position, CgDnaBackboneType )
	        );
	    },

	    hasBackbone: function( position ){
	        return (
	            this.hasProteinBackbone( position ) ||
	            this.hasRnaBackbone( position ) ||
	            this.hasDnaBackbone( position ) ||
	            this.hasCgProteinBackbone( position ) ||
	            this.hasCgRnaBackbone( position ) ||
	            this.hasCgDnaBackbone( position )
	        );
	    },

	    getAtomIndexByName: function( atomname ){
	        var i, index;
	        var n = this.atomCount;
	        var atomMap = this.structure.atomMap;
	        var atomTypeIdList = this.atomTypeIdList;
	        if( Array.isArray( atomname ) ){
	            for( i = 0; i < n; ++i ){
	                index = atomTypeIdList[ i ];
	                if( atomname.indexOf( atomMap.get( index ).atomname ) !== -1 ){
	                    return i;
	                }
	            }
	        }else{
	            for( i = 0; i < n; ++i ){
	                index = atomTypeIdList[ i ];
	                if( atomname === atomMap.get( index ).atomname ){
	                    return i;
	                }
	            }
	        }
	        return undefined;
	    },

	    hasAtomWithName: function( atomname ){
	        var n = arguments.length;
	        for( var i = 0; i < n; ++i ){
	            if( arguments[ i ] === undefined ) continue;
	            if( this.getAtomIndexByName( arguments[ i ] ) === undefined ){
	                return false;
	            }
	        }
	        return true;
	    },

	    getBonds: function( r ){
	        if( this.bonds === undefined ){
	            this.bonds = calculateResidueBonds( r );
	        }
	        return this.bonds;
	    },

	    /**
	     * For bonds with order > 1, pick a reference atom
	     */
	    assignBondReferenceAtomIndices: function( params ) {
	        var p = Object.assign( { maxRingSize: 8 }, params );

	        var atomIndices1 = this.bonds.atomIndices1;
	        var atomIndices2 = this.bonds.atomIndices2;
	        var bondOrders = this.bonds.bondOrders;
	        var bondReferenceAtomIndices = this.bondReferenceAtomIndices;

	        var nb = this.bonds.atomIndices1.length;

	        // Various ways to do this - here we calculate the bondGraph. Might
	        // want to defer this, or build portions as needed using
	        // AtomProxy.getResidueBonds?
	        var bondGraph = {}; //{ ai1: [ ai2, ... ] }

	        var i, j, ai1, ai2, ai3;

	        for( i = 0; i < nb; ++i ) {

	            ai1 = atomIndices1[i];
	            ai2 = atomIndices2[i];

	            var a1 = bondGraph[ ai1 ] = bondGraph[ ai1 ] || [];
	            a1.push(ai2);
	            //a1[ ai2 ] = bondOrders[i];

	            var a2 = bondGraph[ ai2 ] = bondGraph[ ai2 ] || [];
	            a2.push(ai1);
	            //[ ai1 ] = bondOrders[i];

	        }

	        bondReferenceAtomIndices.length = 0;  // reset array

	        for( i = 0; i < nb; ++i ) {

	            ai1 = atomIndices1[i];
	            ai2 = atomIndices2[i];

	            // Not required for single bonds
	            if (this.bonds.bondOrders[i] <= 1) continue;

	            // Check if atom is terminal?
	            if ( bondGraph[ai1].length === 1 ) {

	                if ( bondGraph[ai2].length === 1 ) {
	                    // No reference atom can be found
	                    continue;
	                }

	                // Take first bonded partner of a2 that isn't a1
	                for (j=0; j<bondGraph[ai2].length; j++) {
	                    ai3 = bondGraph[ai2][j];
	                    if (ai3 !== ai1) {
	                        bondReferenceAtomIndices[i] = ai3;
	                        break;
	                    }
	                }
	                continue;

	            }

	            if ( bondGraph[ai2].length === 1 ) {
	                // Reverse of above:
	                for (j=0; j<bondGraph[ai1].length; j++) {
	                    ai3 = bondGraph[ai1][j];
	                    if (ai3 !== ai2) {
	                        bondReferenceAtomIndices[i] = ai3;
	                        break;
	                    }
	                }
	                continue;
	            }

	            var visited = [ai1, ai2];
	            var maxDepth = 1;
	            // Naive method (don't store intermediate results)
	            while (maxDepth < p.maxRingSize - 2) {
	                if( propagateSearch( bondGraph, visited, maxDepth ) ) {
	                    bondReferenceAtomIndices[i] = visited[2];
	                    break;
	                }
	                maxDepth += 1;
	            }

	            // Not a ring, just pick one atom:
	            if( bondReferenceAtomIndices[i] === undefined) {
	                for( j=0; j<bondGraph[ai1].length; j++) {
	                    ai3 = bondGraph[ai1][j];
	                    if (ai3 !== ai2) {
	                        bondReferenceAtomIndices[i] = ai3;
	                        break;
	                    }
	                }
	            }
	        }
	    },

	    getBondIndex: function( atomIndex1, atomIndex2 ){
	        var bonds = this.bonds;
	        var atomIndices1 = bonds.atomIndices1;
	        var atomIndices2 = bonds.atomIndices2;
	        var idx1 = atomIndices1.indexOf( atomIndex1 );
	        var idx2 = atomIndices2.indexOf( atomIndex2 );
	        var _idx2 = idx2;
	        while( idx1 !== -1 ){
	            while( idx2 !== -1 ){
	                if( idx1 === idx2 ) return idx1;
	                idx2 = atomIndices2.indexOf( atomIndex2, idx2 + 1 );
	            }
	            idx1 = atomIndices1.indexOf( atomIndex1, idx1 + 1 );
	        idx2 = _idx2;
	        }
	        // returns undefined when no bond is found
	    },

	    getBondReferenceAtomIndex: function( atomIndex1, atomIndex2 ) {
	        var bondIndex = this.getBondIndex( atomIndex1, atomIndex2 );
	        if( bondIndex === undefined ) return undefined;
	        if( this.bondReferenceAtomIndices.length === 0 ){
	            this.assignBondReferenceAtomIndices();
	        }
	        return this.bondReferenceAtomIndices[ bondIndex ];
	    }

	};

	function ResidueMap( structure ){

	    var idDict = {};
	    var typeList = [];

	    function getHash( resname, atomTypeIdList, hetero, chemCompType ){
	        return (
	            resname + "|" +
	            atomTypeIdList.join( "," ) + "|" +
	            ( hetero ? 1 : 0 ) + "|" +
	            ( chemCompType ? chemCompType : "" )
	        );
	    }

	    function add( resname, atomTypeIdList, hetero, chemCompType, bonds ){
	        resname = resname.toUpperCase();
	        var hash = getHash( resname, atomTypeIdList, hetero, chemCompType );
	        var id = idDict[ hash ];
	        if( id === undefined ){
	            var residueType = new ResidueType(
	                structure, resname, atomTypeIdList, hetero, chemCompType, bonds
	            );
	            id = typeList.length;
	            idDict[ hash ] = id;
	            typeList.push( residueType );
	        }
	        return id;
	    }

	    function get( id ){
	        return typeList[ id ];
	    }

	    // API

	    this.add = add;
	    this.get = get;

	    this.list = typeList;
	    this.dict = idDict;

	}

	/**
	 * Bond proxy
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} index - the index
	 */
	function BondProxy( structure, index ){

	    this.structure = structure;
	    this.bondStore = structure.bondStore;
	    this.index = index;

	    this._v12 = new Vector3();
	    this._v13 = new Vector3();
	    this._ap1 = this.structure.getAtomProxy();
	    this._ap2 = this.structure.getAtomProxy();
	    this._ap3 = this.structure.getAtomProxy();

	}

	BondProxy.prototype = {

	    constructor: BondProxy,
	    type: "BondProxy",

	    structure: undefined,
	    bondStore: undefined,
	    index: undefined,

	    get atom1 () {
	        return this.structure.getAtomProxy( this.atomIndex1 );
	    },

	    get atom2 () {
	        return this.structure.getAtomProxy( this.atomIndex2 );
	    },

	    get atomIndex1 () {
	        return this.bondStore.atomIndex1[ this.index ];
	    },
	    set atomIndex1 ( value ) {
	        this.bondStore.atomIndex1[ this.index ] = value;
	    },

	    get atomIndex2 () {
	        return this.bondStore.atomIndex2[ this.index ];
	    },
	    set atomIndex2 ( value ) {
	        this.bondStore.atomIndex2[ this.index ] = value;
	    },

	    get bondOrder () {
	        return this.bondStore.bondOrder[ this.index ];
	    },
	    set bondOrder ( value ) {
	        this.bondStore.bondOrder[ this.index ] = value;
	    },

	    /**
	     * Get reference atom index for the bond
	     * @return {Integer|undefined} atom index, or `undefined` if unavailable
	     */
	    getReferenceAtomIndex: function() {
	        var ap1 = this._ap1;
	        var ap2 = this._ap2;
	        ap1.index = this.atomIndex1;
	        ap2.index = this.atomIndex2;
	        if( ap1.residueIndex !== ap2.residueIndex ) {
	            return undefined;  // Bond between residues, for now ignore (could detect)
	        }
	        var typeAtomIndex1 = ap1.index - ap1.residueAtomOffset;
	        var typeAtomIndex2 = ap2.index - ap2.residueAtomOffset;
	        var residueType = ap1.residueType;
	        return residueType.getBondReferenceAtomIndex( typeAtomIndex1, typeAtomIndex2 ) + ap1.residueAtomOffset;
	    },

	    /**
	     * calculate shift direction for displaying double/triple bonds
	     * @param  {Vector3} [v] pre-allocated output vector
	     * @return {Vector3} the shift direction vector
	     */
	    calculateShiftDir: function( v ) {
	        if( !v ) v = new Vector3();

	        var ap1 = this._ap1;
	        var ap2 = this._ap2;
	        var ap3 = this._ap3;
	        var v12 = this._v12;
	        var v13 = this._v13;

	        ap1.index = this.atomIndex1;
	        ap2.index = this.atomIndex2;
	        var ai3 = this.getReferenceAtomIndex( ap1, ap2 );

	        v12.subVectors( ap1, ap2 ).normalize();
	        if( ai3 !== undefined ){
	            ap3.index = ai3;
	            v13.subVectors( ap1, ap3 );
	        }else{
	            v13.copy( ap1 );  // no reference point, use origin
	        }
	        v13.normalize();

	        // make sure v13 and v12 are not colinear
	        var dp = v12.dot( v13 );
	        if( 1 - Math.abs( dp ) < 1e-5 ){
	            v13.set( 1, 0, 0 );
	            dp = v12.dot( v13 );
	            if( 1 - Math.abs( dp ) < 1e-5 ){
	                v13.set( 0, 1, 0 );
	                dp = v12.dot( v13 );
	            }
	        }

	        return v.copy( v13.sub( v12.multiplyScalar( dp ) ) ).normalize();
	    },

	    qualifiedName: function(){
	        return this.atomIndex1 + "=" + this.atomIndex2;
	    },

	    clone: function(){
	        return new this.constructor( this.structure, this.index );
	    },

	    toObject: function(){
	        return {
	            atomIndex1: this.atomIndex1,
	            atomIndex2: this.atomIndex2,
	            bondOrder: this.bondOrder
	        };
	    }

	};

	/**
	 * Atom proxy
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} index - the index
	 */
	function AtomProxy( structure, index ){

	    this.structure = structure;
	    this.chainStore = structure.chainStore;
	    this.residueStore = structure.residueStore;
	    this.atomStore = structure.atomStore;
	    this.residueMap = structure.residueMap;
	    this.atomMap = structure.atomMap;
	    this.index = index;

	}

	AtomProxy.prototype = {

	    constructor: AtomProxy,
	    type: "AtomProxy",

	    structure: undefined,
	    chainStore: undefined,
	    residueStore: undefined,
	    atomStore: undefined,
	    index: undefined,

	    get modelIndex () {
	        return this.chainStore.modelIndex[ this.chainIndex ];
	    },
	    get chainIndex () {
	        return this.residueStore.chainIndex[ this.residueIndex ];
	    },
	    get residue () {
	        console.warn( "residue - might be expensive" );
	        return this.structure.getResidueProxy( this.residueIndex, false );
	    },

	    get residueIndex () {
	        return this.atomStore.residueIndex[ this.index ];
	    },
	    set residueIndex ( value ) {
	        this.atomStore.residueIndex[ this.index ] = value;
	    },

	    //

	    get sstruc () {
	        return this.residueStore.getSstruc( this.residueIndex );
	    },
	    get inscode () {
	        return this.residueStore.getInscode( this.residueIndex );
	    },
	    get resno () {
	        return this.residueStore.resno[ this.residueIndex ];
	    },
	    get chainname () {
	        return this.chainStore.getChainname( this.chainIndex );
	    },

	    //

	    get residueType () {
	        return this.residueMap.get( this.residueStore.residueTypeId[ this.residueIndex ] );
	    },
	    get atomType () {
	        return  this.atomMap.get( this.atomStore.atomTypeId[ this.index ] );
	    },
	    get residueAtomOffset () {
	        return this.residueStore.atomOffset[ this.residueIndex ];
	    },

	    //

	    get resname () {
	        return this.residueType.resname;
	    },
	    get hetero () {
	        return this.residueType.hetero;
	    },

	    //

	    get atomname () {
	        return this.atomType.atomname;
	    },
	    get element () {
	        return this.atomType.element;
	    },
	    get vdw () {
	        return this.atomType.vdw;
	    },
	    get covalent () {
	        return this.atomType.covalent;
	    },

	    //

	    get x () {
	        return this.atomStore.x[ this.index ];
	    },
	    set x ( value ) {
	        this.atomStore.x[ this.index ] = value;
	    },

	    get y () {
	        return this.atomStore.y[ this.index ];
	    },
	    set y ( value ) {
	        this.atomStore.y[ this.index ] = value;
	    },

	    get z () {
	        return this.atomStore.z[ this.index ];
	    },
	    set z ( value ) {
	        this.atomStore.z[ this.index ] = value;
	    },

	    get serial () {
	        return this.atomStore.serial[ this.index ];
	    },
	    set serial ( value ) {
	        this.atomStore.serial[ this.index ] = value;
	    },

	    get bfactor () {
	        return this.atomStore.bfactor[ this.index ];
	    },
	    set bfactor ( value ) {
	        this.atomStore.bfactor[ this.index ] = value;
	    },

	    get occupancy () {
	        return this.atomStore.occupancy[ this.index ];
	    },
	    set occupancy ( value ) {
	        this.atomStore.occupancy[ this.index ] = value;
	    },

	    // get bonds () {
	    //     return this.atomStore.bonds[ this.index ];
	    // },
	    // set bonds ( value ) {
	    //     this.atomStore.bonds[ this.index ] = value;
	    // },

	    get altloc () {
	        return this.atomStore.getAltloc( this.index );
	    },
	    set altloc ( value ) {
	        this.atomStore.setAltloc( this.index, value );
	    },

	    //

	    isBackbone: function(){
	        var backboneIndexList = this.residueType.backboneIndexList;
	        // console.log(backboneIndexList)
	        if( backboneIndexList.length > 0 ){
	            var atomOffset = this.residueStore.atomOffset[ this.residueIndex ];
	            return backboneIndexList.indexOf( this.index - atomOffset ) !== -1;
	        }else{
	            return false;
	        }
	    },

	    isPolymer: function(){
	        var moleculeType = this.residueType.moleculeType;
	        return (
	            moleculeType === ProteinType ||
	            moleculeType === RnaType ||
	            moleculeType === DnaType
	        );
	    },

	    isSidechain: function(){
	        return this.isPolymer() && !this.isBackbone();
	    },

	    isCg: function(){
	        var backboneType = this.residueType.backboneType;
	        return (
	            backboneType === CgProteinBackboneType ||
	            backboneType === CgRnaBackboneType ||
	            backboneType === CgDnaBackboneType
	        );
	    },

	    isHetero: function(){
	        return this.residueType.hetero === 1;
	    },

	    isProtein: function(){
	        return this.residueType.moleculeType === ProteinType;
	    },

	    isNucleic: function(){
	        var moleculeType = this.residueType.moleculeType;
	        return (
	            moleculeType === RnaType ||
	            moleculeType === DnaType
	        );
	    },

	    isRna: function(){
	        return this.residueType.moleculeType === RnaType;
	    },

	    isDna: function(){
	        return this.residueType.moleculeType === DnaType;
	    },

	    isWater: function(){
	        return this.residueType.moleculeType === WaterType;
	    },

	    isIon: function(){
	        return this.residueType.moleculeType === IonType;
	    },

	    isSaccharide: function(){
	        return this.residueType.moleculeType === SaccharideType;
	    },

	    distanceTo: function( atom ){
	        var taa = this.atomStore;
	        var aaa = atom.atomStore;
	        var ti = this.index;
	        var ai = atom.index;
	        var x = taa.x[ ti ] - aaa.x[ ai ];
	        var y = taa.y[ ti ] - aaa.y[ ai ];
	        var z = taa.z[ ti ] - aaa.z[ ai ];
	        var distSquared = x * x + y * y + z * z;
	        return Math.sqrt( distSquared );
	    },

	    connectedTo: function( atom ){

	        var taa = this.atomStore;
	        var aaa = atom.atomStore;
	        var ti = this.index;
	        var ai = atom.index;

	        if( taa.altloc && aaa.altloc ){
	            var ta = taa.altloc[ ti ];  // use Uint8 value to compare
	            var aa = aaa.altloc[ ai ];  // no need to convert to char
	            // 0 is the Null character, 32 is the space character
	            if( !( ta === 0 || aa === 0 || ta === 32 || aa === 32 || ( ta === aa ) ) ) return false;
	        }

	        var x = taa.x[ ti ] - aaa.x[ ai ];
	        var y = taa.y[ ti ] - aaa.y[ ai ];
	        var z = taa.z[ ti ] - aaa.z[ ai ];

	        var distSquared = x * x + y * y + z * z;

	        // if( this.residue.isCg() ) console.log( this.qualifiedName(), Math.sqrt( distSquared ), distSquared )
	        if( distSquared < 64.0 && this.isCg() ) return true;

	        if( isNaN( distSquared ) ) return false;

	        var d = this.covalent + atom.covalent;
	        var d1 = d + 0.3;
	        var d2 = d - 0.5;

	        return distSquared < ( d1 * d1 ) && distSquared > ( d2 * d2 );

	    },

	    positionFromArray: function( array, offset ){

	        if( offset === undefined ) offset = 0;

	        this.x = array[ offset + 0 ];
	        this.y = array[ offset + 1 ];
	        this.z = array[ offset + 2 ];

	        return this;

	    },

	    positionToArray: function( array, offset ){

	        if( array === undefined ) array = [];
	        if( offset === undefined ) offset = 0;

	        var index = this.index;
	        var atomStore = this.atomStore;

	        array[ offset + 0 ] = atomStore.x[ index ];
	        array[ offset + 1 ] = atomStore.y[ index ];
	        array[ offset + 2 ] = atomStore.z[ index ];

	        return array;

	    },

	    positionToVector3: function( v ){

	        if( v === undefined ) v = new Vector3();

	        v.x = this.x;
	        v.y = this.y;
	        v.z = this.z;

	        return v;

	    },

	    positionFromVector3: function( v ){

	        this.x = v.x;
	        this.y = v.y;
	        this.z = v.z;

	        return this;

	    },

	    /**
	     * Get intra group/residue bonds
	     * @param  {Boolean} firstOnly - immediately return the first connected atomIndex
	     * @return {Integer[]|Integer|undefined} connected atomIndices
	     */
	    getResidueBonds: function( firstOnly ){

	        var residueAtomOffset = this.residueAtomOffset;
	        var relativeIndex = this.index - this.residueAtomOffset;
	        var bonds = this.residueType.getBonds();
	        var atomIndices1 = bonds.atomIndices1;
	        var atomIndices2 = bonds.atomIndices2;
	        var idx1, idx2, connectedAtomIndex, connectedAtomIndices;

	        if( !firstOnly ) connectedAtomIndices = [];

	        idx1 = atomIndices1.indexOf( relativeIndex );
	        while( idx1 !== -1 ){
	            connectedAtomIndex = atomIndices2[ idx1 ] + residueAtomOffset;
	            if( firstOnly ) return connectedAtomIndex;
	            connectedAtomIndices.push( connectedAtomIndex );
	            idx1 = atomIndices1.indexOf( relativeIndex, idx1 + 1 );
	        }

	        idx2 = atomIndices2.indexOf( relativeIndex );
	        while( idx2 !== -1 ){
	            connectedAtomIndex = atomIndices1[ idx2 ] + residueAtomOffset;
	            if( firstOnly ) return connectedAtomIndex;
	            connectedAtomIndices.push( connectedAtomIndex );
	            idx2 = atomIndices2.indexOf( relativeIndex, idx2 + 1 );
	        }

	        return connectedAtomIndices;

	    },

	    //

	    qualifiedName: function( noResname ){
	        var name = "";
	        if( this.resname && !noResname ) name += "[" + this.resname + "]";
	        if( this.resno !== undefined ) name += this.resno;
	        if( this.inscode ) name += "^" + this.inscode;
	        if( this.chainname ) name += ":" + this.chainname;
	        if( this.atomname ) name += "." + this.atomname;
	        if( this.altloc ) name += "%" + this.altloc;
	        name += "/" + this.modelIndex;
	        return name;
	    },

	    clone: function(){

	        return new this.constructor( this.structure, this.index );

	    },

	    toObject: function(){

	        return {
	            index: this.index,
	            residueIndex: this.residueIndex,

	            atomno: this.atomno,
	            resname: this.resname,
	            x: this.x,
	            y: this.y,
	            z: this.z,
	            element: this.element,
	            chainname: this.chainname,
	            resno: this.resno,
	            serial: this.serial,
	            vdw: this.vdw,
	            covalent: this.covalent,
	            hetero: this.hetero,
	            bfactor: this.bfactor,
	            altloc: this.altloc,
	            atomname: this.atomname,
	            modelindex: this.modelindex
	        };

	    }

	};

	/**
	 * Residue proxy
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} index - the index
	 */
	function ResidueProxy( structure, index ){

	    this.structure = structure;
	    this.chainStore = structure.chainStore;
	    this.residueStore = structure.residueStore;
	    this.atomStore = structure.atomStore;
	    this.residueMap = structure.residueMap;
	    this.atomMap = structure.atomMap;
	    this.index = index;

	}

	ResidueProxy.prototype = {

	    constructor: ResidueProxy,
	    type: "ResidueProxy",

	    structure: undefined,
	    chainStore: undefined,
	    residueStore: undefined,
	    atomStore: undefined,
	    index: undefined,

	    get chain () {
	        return this.structure.getChainProxy( this.chainIndex );
	    },

	    get chainIndex () {
	        return this.residueStore.chainIndex[ this.index ];
	    },
	    set chainIndex ( value ) {
	        this.residueStore.chainIndex[ this.index ] = value;
	    },

	    get atomOffset () {
	        return this.residueStore.atomOffset[ this.index ];
	    },
	    set atomOffset ( value ) {
	        this.residueStore.atomOffset[ this.index ] = value;
	    },

	    get atomCount () {
	        return this.residueStore.atomCount[ this.index ];
	    },
	    set atomCount ( value ) {
	        this.residueStore.atomCount[ this.index ] = value;
	    },

	    //

	    get modelIndex () {
	        return this.chainStore.modelIndex[ this.chainIndex ];
	    },
	    get chainname () {
	        return this.chainStore.getChainname( this.chainIndex );
	    },

	    //

	    get resno () {
	        return this.residueStore.resno[ this.index ];
	    },
	    set resno ( value ) {
	        this.residueStore.resno[ this.index ] = value;
	    },

	    get sstruc () {
	        return this.residueStore.getSstruc( this.index );
	    },
	    set sstruc ( value ) {
	        this.residueStore.setSstruc( this.index, value );
	    },

	    get inscode () {
	        return this.residueStore.getInscode( this.index );
	    },
	    set inscode ( value ) {
	        this.residueStore.getInscode( this.index, value );
	    },

	    //

	    get residueType () {
	        return this.residueMap.get( this.residueStore.residueTypeId[ this.index ] );
	    },

	    get resname () {
	        return this.residueType.resname;
	    },
	    get hetero () {
	        return this.residueType.hetero;
	    },
	    get moleculeType () {
	        return this.residueType.moleculeType;
	    },
	    get backboneType () {
	        return this.residueType.backboneType;
	    },
	    get backboneStartType () {
	        return this.residueType.backboneStartType;
	    },
	    get backboneEndType () {
	        return this.residueType.backboneEndType;
	    },
	    get traceAtomIndex () {
	        return this.residueType.traceAtomIndex + this.atomOffset;
	    },
	    get direction1AtomIndex () {
	        return this.residueType.direction1AtomIndex + this.atomOffset;
	    },
	    get direction2AtomIndex () {
	        return this.residueType.direction2AtomIndex + this.atomOffset;
	    },
	    get backboneStartAtomIndex () {
	        return this.residueType.backboneStartAtomIndex + this.atomOffset;
	    },
	    get backboneEndAtomIndex () {
	        return this.residueType.backboneEndAtomIndex + this.atomOffset;
	    },
	    get rungEndAtomIndex () {
	        return this.residueType.rungEndAtomIndex + this.atomOffset;
	    },

	    //

	    eachAtom: function( callback, selection ){

	        var i;
	        var count = this.atomCount;
	        var offset = this.atomOffset;
	        var ap = this.structure._ap;
	        var end = offset + count;

	        if( selection && selection.atomOnlyTest ){
	            var atomOnlyTest = selection.atomOnlyTest;
	            for( i = offset; i < end; ++i ){
	                ap.index = i;
	                if( atomOnlyTest( ap ) ) callback( ap );
	            }
	        }else{
	            for( i = offset; i < end; ++i ){
	                ap.index = i;
	                callback( ap );
	            }
	        }

	    },

	    //

	    isProtein: function(){
	        return this.residueType.moleculeType === ProteinType;
	    },

	    isNucleic: function(){
	        var moleculeType = this.residueType.moleculeType;
	        return (
	            moleculeType === RnaType ||
	            moleculeType === DnaType
	        );
	    },

	    isRna: function(){
	        return this.residueType.moleculeType === RnaType;
	    },

	    isDna: function(){
	        return this.residueType.moleculeType === DnaType;
	    },

	    isCg: function(){
	        var backboneType = this.residueType.backboneType;
	        return (
	            backboneType === CgProteinBackboneType ||
	            backboneType === CgRnaBackboneType ||
	            backboneType === CgDnaBackboneType
	        );
	    },

	    isPolymer: function(){
	        var moleculeType = this.residueType.moleculeType;
	        return (
	            moleculeType === ProteinType ||
	            moleculeType === RnaType ||
	            moleculeType === DnaType
	        );
	    },

	    isHetero: function(){
	        return this.residueType.hetero === 1;
	    },

	    isWater: function(){
	        return this.residueType.moleculeType === WaterType;
	    },

	    isIon: function(){
	        return this.residueType.moleculeType === IonType;
	    },

	    isSaccharide: function(){
	        return this.residueType.moleculeType === SaccharideType;
	    },

	    getAtomType: function( index ){
	        return this.atomMap.get( this.atomStore.atomTypeId[ index ] );
	    },

	    getResname1: function(){
	        // FIXME nucleic support
	        return AA1[ this.resname.toUpperCase() ] || 'X';
	    },

	    getBackboneType: function( position ){
	        switch( position ){
	            case -1:
	                return this.residueType.backboneStartType;
	            case 1:
	                return this.residueType.backboneEndType;
	            default:
	                return this.residueType.backboneType;
	        }
	    },

	    getAtomIndexByName: function( atomname ){
	        var index = this.residueType.getAtomIndexByName( atomname );
	        if( index !== undefined ){
	            index += this.atomOffset;
	        }
	        return index;
	    },

	    getAtomByName: function( atomname ){
	        return this.residueType.getAtomByName( atomname );
	    },

	    hasAtomWithName: function( atomname ){
	        return this.residueType.hasAtomWithName( atomname );
	    },

	    getAtomnameList: function(){

	        console.warn( "getAtomnameList - might be expensive" );

	        var n = this.atomCount;
	        var offset = this.atomOffset;
	        var list = new Array( n );
	        for( var i = 0; i < n; ++i ){
	            list[ i ] = this.getAtomType( offset + i ).atomname;
	        }
	        return list;
	    },

	    connectedTo: function( rNext ){
	        var bbAtomEnd = this.structure.getAtomProxy( this.backboneEndAtomIndex );
	        var bbAtomStart = this.structure.getAtomProxy( rNext.backboneStartAtomIndex );
	        if( bbAtomEnd && bbAtomStart ){
	            return bbAtomEnd.connectedTo( bbAtomStart );
	        }else{
	            return false;
	        }
	    },

	    getNextConnectedResidue: function(){
	        var rOffset = this.chainStore.residueOffset[ this.chainIndex ];
	        var rCount = this.chainStore.residueCount[ this.chainIndex ];
	        var nextIndex = this.index + 1;
	        if( nextIndex < rOffset + rCount ){
	            var rpNext = this.structure.getResidueProxy( nextIndex );
	            if( this.connectedTo( rpNext ) ){
	                return rpNext;
	            }
	        }else if( nextIndex === rOffset + rCount ){  // cyclic
	            var rpFirst = this.structure.getResidueProxy( rOffset );
	            if( this.connectedTo( rpFirst ) ){
	                return rpFirst;
	            }
	        }
	        return undefined;
	    },

	    getPreviousConnectedResidue: function( rp ){
	        var rOffset = this.chainStore.residueOffset[ this.chainIndex ];
	        var prevIndex = this.index - 1;
	        if( prevIndex >= rOffset ){
	            if( rp === undefined ) rp = this.structure.getResidueProxy();
	            rp.index = prevIndex;
	            if( rp.connectedTo( this ) ){
	                return rp;
	            }
	        }else if( prevIndex === rOffset - 1 ){  // cyclic
	            if( rp === undefined ) rp = this.structure.getResidueProxy();
	            var rCount = this.chainStore.residueCount[ this.chainIndex ];
	            rp.index = rOffset + rCount - 1;
	            if( rp.connectedTo( this ) ){
	                return rp;
	            }
	        }
	        return undefined;
	    },

	    getBonds: function(){
	        return this.residueType.getBonds( this );
	    },

	    //

	    qualifiedName: function( noResname ){
	        var name = "";
	        if( this.resname && !noResname ) name += "[" + this.resname + "]";
	        if( this.resno !== undefined ) name += this.resno;
	        if( this.inscode ) name += "^" + this.inscode;
	        if( this.chain ) name += ":" + this.chainname;
	        name += "/" + this.modelIndex;
	        return name;
	    },

	    clone: function(){
	        return new this.constructor( this.structure, this.index );
	    },

	    toObject: function(){
	        return {
	            index: this.index,
	            chainIndex: this.chainIndex,
	            atomOffset: this.atomOffset,
	            atomCount: this.atomCount,

	            resno: this.resno,
	            resname: this.resname,
	            sstruc: this.sstruc
	        };
	    }

	};

	/**
	 * Polymer
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} residueIndexStart - the index of the first residue
	 * @param {Integer} residueIndexEnd - the index of the last residue
	 */
	function Polymer( structure, residueIndexStart, residueIndexEnd ){

	    this.structure = structure;
	    this.chainStore = structure.chainStore;
	    this.residueStore = structure.residueStore;
	    this.atomStore = structure.atomStore;

	    this.residueIndexStart = residueIndexStart;
	    this.residueIndexEnd = residueIndexEnd;
	    this.residueCount = residueIndexEnd - residueIndexStart + 1;

	    var rpStart = this.structure.getResidueProxy( this.residueIndexStart );
	    var rpEnd = this.structure.getResidueProxy( this.residueIndexEnd );
	    this.isPrevConnected = rpStart.getPreviousConnectedResidue() !== undefined;
	    var rpNext = rpEnd.getNextConnectedResidue();
	    this.isNextConnected = rpNext !== undefined;
	    this.isNextNextConnected = this.isNextConnected && rpNext.getNextConnectedResidue() !== undefined;
	    this.isCyclic = rpEnd.connectedTo( rpStart );

	    this.__residueProxy = this.structure.getResidueProxy();

	    // console.log( this.qualifiedName(), this );

	}

	Polymer.prototype = {

	    constructor: Polymer,
	    type: "Polymer",

	    structure: undefined,
	    residueStore: undefined,
	    atomStore: undefined,

	    residueIndexStart: undefined,
	    residueIndexEnd: undefined,
	    residueCount: undefined,

	    //

	    get chainIndex () {
	        return this.residueStore.chainIndex[ this.residueIndexStart ];
	    },
	    get modelIndex () {
	        return this.chainStore.modelIndex[ this.chainIndex ];
	    },

	    get chainname () {
	        return this.chainStore.getChainname( this.chainIndex );
	    },

	    //

	    isProtein: function(){
	        this.__residueProxy.index = this.residueIndexStart;
	        return this.__residueProxy.isProtein();
	    },

	    isCg: function(){
	        this.__residueProxy.index = this.residueIndexStart;
	        return this.__residueProxy.isCg();
	    },

	    isNucleic: function(){
	        this.__residueProxy.index = this.residueIndexStart;
	        return this.__residueProxy.isNucleic();
	    },

	    getMoleculeType: function(){
	        this.__residueProxy.index = this.residueIndexStart;
	        return this.__residueProxy.moleculeType;
	    },

	    getBackboneType: function( position ){
	        this.__residueProxy.index = this.residueIndexStart;
	        return this.__residueProxy.getBackboneType( position );
	    },

	    getAtomIndexByType: function( index, type ){

	        // TODO pre-calculate, add to residueStore???

	        if( this.isCyclic ){
	            if( index === -1 ){
	                index = this.residueCount - 1;
	            }else if( index === this.residueCount ){
	                index = 0;
	            }
	        }else{
	            if( index === -1 && !this.isPrevConnected ) index += 1;
	            if( index === this.residueCount && !this.isNextNextConnected ) index -= 1;
	            // if( index === this.residueCount - 1 && !this.isNextConnected ) index -= 1;
	        }

	        var rp = this.__residueProxy;
	        rp.index = this.residueIndexStart + index;
	        var aIndex;

	        switch( type ){
	            case "trace":
	                aIndex = rp.traceAtomIndex;
	                break;
	            case "direction1":
	                aIndex = rp.direction1AtomIndex;
	                break;
	            case "direction2":
	                aIndex = rp.direction2AtomIndex;
	                break;
	            default:
	                var ap = rp.getAtomByName( type );
	                aIndex = ap ? ap.index : undefined;
	        }

	        // if( !ap ){
	        //     console.log( this, type, rp.residueType )
	        //     // console.log( rp.qualifiedName(), rp.index, index, this.residueCount - 1 )
	        //     // rp.index = this.residueIndexStart;
	        //     // console.log( rp.qualifiedName(), this.residueIndexStart )
	        //     // rp.index = this.residueIndexEnd;
	        //     // console.log( rp.qualifiedName(), this.residueIndexEnd )
	        // }

	        return aIndex;

	    },

	    eachAtom: function( callback, selection ){

	        this.eachResidue( function( rp ){
	            rp.eachAtom( callback, selection );
	        }, selection );

	    },

	    eachAtomN: function( n, callback, type ){

	        var i;
	        var m = this.residueCount;

	        var array = new Array( n );
	        for( i = 0; i < n; ++i ){
	            array[ i ] = this.structure.getAtomProxy( this.getAtomIndexByType( i, type ) );
	        }
	        callback.apply( this, array );

	        for( var j = n; j < m; ++j ){
	            for( i = 1; i < n; ++i ){
	                array[ i - 1 ].index = array[ i ].index;
	            }
	            array[ n - 1 ].index = this.getAtomIndexByType( j, type );
	            callback.apply( this, array );
	        }

	    },

	    eachAtomN2: function( n, callback, type ){

	        // console.log(this.residueOffset,this.residueCount)

	        var offset = this.atomOffset;
	        var count = this.atomCount;
	        var end = offset + count;
	        if( count < n ) return;

	        var array = new Array( n );
	        for( var i = 0; i < n; ++i ){
	            array[ i ] = this.structure.getAtomProxy();
	        }
	        // console.log( array, offset, end, count )

	        var as = this.structure.atomSetCache[ "__" + type ];
	        if( as === undefined ){
	            Log$1.warn( "no precomputed atomSet for: " + type );
	            as = this.structure.getAtomSet( false );
	            this.eachResidue( function( rp ){
	                var ap = rp.getAtomByName( type );
	                as.add_unsafe( ap.index );
	            } );
	        }
	        var j = 0;

	        as.forEach( function( index ){
	            if( index >= offset && index < end ){
	                for( var i = 1; i < n; ++i ){
	                    array[ i - 1 ].index = array[ i ].index;
	                }
	                array[ n - 1 ].index = index;
	                j += 1;
	                if( j >= n ){
	                    callback.apply( this, array );
	                }
	            }
	        } );

	    },

	    eachDirectionAtomsN: function( n, callback ){

	        var n2 = n * 2;
	        var offset = this.atomOffset;
	        var count = this.atomCount;
	        var end = offset + count;
	        if( count < n ) return;

	        var array = new Array( n2 );
	        for( var i = 0; i < n2; ++i ){
	            array[ i ] = this.structure.getAtomProxy();
	        }

	        var as1 = this.structure.atomSetCache.__direction1;
	        var as2 = this.structure.atomSetCache.__direction2;
	        if( as1 === undefined || as2 === undefined ){
	            Log$1.error( "no precomputed atomSet for direction1 or direction2" );
	            return;
	        }
	        var j = 0;

	        Bitset.forEach( function( index1, index2 ){
	            if( index1 >= offset && index1 < end && index2 >= offset && index2 < end ){
	                for( var i = 1; i < n; ++i ){
	                    array[ i - 1 ].index = array[ i ].index;
	                    array[ i - 1 + n ].index = array[ i + n ].index;
	                }
	                array[ n - 1 ].index = index1;
	                array[ n - 1 + n ].index = index2;
	                j += 1;
	                if( j >= n ){
	                    callback.apply( this, array );
	                }
	            }
	        }, as1, as2 );

	    },

	    eachResidue: function( callback ){

	        var rp = this.structure.getResidueProxy();
	        var n = this.residueCount;
	        var rStartIndex = this.residueIndexStart;

	        for( var i = 0; i < n; ++i ){
	            rp.index = rStartIndex + i;
	            callback( rp );
	        }

	    },

	    qualifiedName: function(){
	        var rpStart = this.structure.getResidueProxy( this.residueIndexStart );
	        var rpEnd = this.structure.getResidueProxy( this.residueIndexEnd );
	        return rpStart.qualifiedName() + " - " + rpEnd.qualifiedName();
	    }

	};

	/**
	 * Chain proxy
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} index - the index
	 */
	function ChainProxy( structure, index ){

	    this.structure = structure;
	    this.chainStore = structure.chainStore;
	    this.residueStore = structure.residueStore;
	    this.index = index;

	}

	ChainProxy.prototype = {

	    constructor: ChainProxy,
	    type: "ChainProxy",

	    structure: undefined,
	    chainStore: undefined,
	    index: undefined,

	    get model () {
	        return this.structure.getModelProxy( this.modelIndex );
	    },

	    get modelIndex () {
	        return this.chainStore.modelIndex[ this.index ];
	    },
	    set modelIndex ( value ) {
	        this.chainStore.modelIndex[ this.index ] = value;
	    },

	    get residueOffset () {
	        return this.chainStore.residueOffset[ this.index ];
	    },
	    set residueOffset ( value ) {
	        this.chainStore.residueOffset[ this.index ] = value;
	    },

	    get residueCount () {
	        return this.chainStore.residueCount[ this.index ];
	    },
	    set residueCount ( value ) {
	        this.chainStore.residueCount[ this.index ] = value;
	    },

	    get residueEnd () {
	        return this.residueOffset + this.residueCount - 1;
	    },

	    get atomOffset () {
	        return this.residueStore.atomOffset[ this.residueOffset ];
	    },
	    get atomEnd () {
	        return (
	            this.residueStore.atomOffset[ this.residueEnd ] +
	            this.residueStore.atomCount[ this.residueEnd ] - 1
	        );
	    },
	    get atomCount () {
	        return this.atomEnd - this.atomOffset + 1;
	    },

	    //

	    get chainname () {
	        return this.chainStore.getChainname( this.index );
	    },
	    set chainname ( value ) {
	        this.chainStore.setChainname( this.index, value );
	    },

	    //

	    eachAtom: function( callback, selection ){

	        this.eachResidue( function( rp ){
	            rp.eachAtom( callback, selection );
	        }, selection );

	    },

	    eachResidue: function( callback, selection ){

	        var i;
	        var count = this.residueCount;
	        var offset = this.residueOffset;
	        var rp = this.structure._rp;
	        var end = offset + count;

	        if( selection && selection.test ){
	            var residueOnlyTest = selection.residueOnlyTest;
	            if( residueOnlyTest ){
	                for( i = offset; i < end; ++i ){
	                    rp.index = i;
	                    if( residueOnlyTest( rp ) ){
	                        callback( rp, selection );
	                    }
	                }
	            }else{
	                for( i = offset; i < end; ++i ){
	                    rp.index = i;
	                    callback( rp, selection );
	                }
	            }
	        }else{
	            for( i = offset; i < end; ++i ){
	                rp.index = i;
	                callback( rp );
	            }
	        }

	    },

	    eachResidueN: function( n, callback ){

	        var i;
	        var count = this.residueCount;
	        var offset = this.residueOffset;
	        var end = offset + count;
	        if( count < n ) return;
	        var array = new Array( n );

	        for( i = 0; i < n; ++i ){
	            array[ i ] = this.structure.getResidueProxy( offset + i );
	        }
	        callback.apply( this, array );

	        for( var j = offset + n; j < end; ++j ){
	            for( i = 0; i < n; ++i ){
	                array[ i ].index += 1;
	            }
	            callback.apply( this, array );
	        }

	    },

	    eachPolymer: function( callback, selection ){

	        var rStartIndex, rNextIndex;
	        var test = selection ? selection.residueOnlyTest : undefined;
	        var structure = this.model.structure;

	        var count = this.residueCount;
	        var offset = this.residueOffset;
	        var end = offset + count;

	        var rp1 = this.structure.getResidueProxy();
	        var rp2 = this.structure.getResidueProxy( offset );

	        var ap1 = this.structure.getAtomProxy();
	        var ap2 = this.structure.getAtomProxy();

	        var first = true;

	        for( var i = offset + 1; i < end; ++i ){

	            rp1.index = rp2.index;
	            rp2.index = i;

	            if( first ){
	                rStartIndex = rp1.index;
	                first = false;
	            }
	            rNextIndex = rp2.index;

	            var bbType1 = first ? rp1.backboneEndType : rp1.backboneType;
	            var bbType2 = rp2.backboneType;

	            if( bbType1 !== UnknownBackboneType && bbType1 === bbType2 ){

	                ap1.index = rp1.backboneEndAtomIndex;
	                ap2.index = rp2.backboneStartAtomIndex;

	            }else{

	                if( bbType1 !== UnknownBackboneType ){
	                    if( rp1.index - rStartIndex > 1 ){
	                        // console.log("FOO1",rStartIndex, rp1.index)
	                        callback( new Polymer( structure, rStartIndex, rp1.index ) );
	                    }
	                }

	                rStartIndex = rNextIndex;

	                continue;

	            }

	            if( !ap1 || !ap2 || !ap1.connectedTo( ap2 ) ||
	                ( test && ( !test( rp1 ) || !test( rp2 ) ) ) ){
	                if( rp1.index - rStartIndex > 1 ){
	                    // console.log("FOO2",rStartIndex, rp1.index)
	                    callback( new Polymer( structure, rStartIndex, rp1.index ) );
	                }
	                rStartIndex = rNextIndex;

	            }

	        }

	        if( rNextIndex - rStartIndex > 1 ){
	            if( this.structure.getResidueProxy( rStartIndex ).backboneStartType ){
	                // console.log("FOO3",rStartIndex, rNextIndex)
	                callback( new Polymer( structure, rStartIndex, rNextIndex ) );
	            }
	        }

	    },

	    //

	    qualifiedName: function(){
	        var name = ":" + this.chainname + "/" + this.modelIndex;
	        return name;
	    },

	    clone: function(){

	        return new this.constructor( this.structure, this.index );

	    },

	    toObject: function(){

	        return {
	            index: this.index,
	            residueOffset: this.residueOffset,
	            residueCount: this.residueCount,

	            chainname: this.chainname
	        };

	    }

	};

	/**
	 * @file Model Proxy
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	/**
	 * Model proxy
	 * @class
	 * @param {Structure} structure - the structure
	 * @param {Integer} index - the index
	 */
	function ModelProxy( structure, index ){

	    this.structure = structure;
	    this.modelStore = structure.modelStore;
	    this.chainStore = structure.chainStore;
	    this.residueStore = structure.residueStore;
	    this.index = index;

	}

	ModelProxy.prototype = {

	    constructor: ModelProxy,
	    type: "ModelProxy",

	    structure: undefined,
	    modelStore: undefined,
	    index: undefined,

	    get chainOffset () {
	        return this.modelStore.chainOffset[ this.index ];
	    },
	    set chainOffset ( value ) {
	        this.modelStore.chainOffset[ this.index ] = value;
	    },

	    get chainCount () {
	        return this.modelStore.chainCount[ this.index ];
	    },
	    set chainCount ( value ) {
	        this.modelStore.chainCount[ this.index ] = value;
	    },

	    get residueOffset () {
	        return this.chainStore.residueOffset[ this.chainOffset ];
	    },
	    get atomOffset () {
	        return this.residueStore.atomOffset[ this.residueOffset ];
	    },

	    get chainEnd () {
	        return this.chainOffset + this.chainCount - 1;
	    },
	    get residueEnd () {
	        return (
	            this.chainStore.residueOffset[ this.chainEnd ] +
	            this.chainStore.residueCount[ this.chainEnd ] - 1
	        );
	    },
	    get atomEnd () {
	        return (
	            this.residueStore.atomOffset[ this.residueEnd ] +
	            this.residueStore.atomCount[ this.residueEnd ] - 1
	        );
	    },

	    get residueCount () {
	        return this.residueEnd - this.residueOffset + 1;
	    },
	    get atomCount () {
	        return this.atomEnd - this.atomOffset + 1;
	    },

	    //

	    eachAtom: function( callback, selection ){

	        this.eachChain( function( cp ){
	            cp.eachAtom( callback, selection );
	        }, selection );

	    },

	    eachResidue: function( callback, selection ){

	        this.eachChain( function( cp ){
	            cp.eachResidue( callback, selection );
	        }, selection );

	    },

	    eachPolymer: function( callback, selection ){

	        if( selection && selection.chainOnlyTest ){

	            var chainOnlyTest = selection.chainOnlyTest;

	            this.eachChain( function( cp ){
	                if( chainOnlyTest( cp ) ){
	                    cp.eachPolymer( callback, selection );
	                }
	            } );

	        }else{

	            this.eachChain( function( cp ){
	                cp.eachPolymer( callback, selection );
	            } );

	        }

	    },

	    eachChain: function( callback, selection ){

	        var i;
	        var count = this.chainCount;
	        var offset = this.chainOffset;
	        var cp = this.structure._cp;
	        var end = offset + count;

	        if( selection && selection.test ){
	            var chainOnlyTest = selection.chainOnlyTest;
	            if( chainOnlyTest ){
	                for( i = offset; i < end; ++i ){
	                    cp.index = i;
	                    if( chainOnlyTest( cp ) ){
	                        callback( cp, selection );
	                    }
	                }
	            }else{
	                for( i = offset; i < end; ++i ){
	                    cp.index = i;
	                    callback( cp, selection );
	                }
	            }
	        }else{
	            for( i = offset; i < end; ++i ){
	                cp.index = i;
	                callback( cp );
	            }
	        }

	    },

	    //

	    qualifiedName: function(){
	        var name = "/" + this.index;
	        return name;
	    },

	    clone: function(){

	        return new this.constructor( this.structure, this.index );

	    },

	    toObject: function(){

	        return {
	            index: this.index,
	            chainOffset: this.chainOffset,
	            chainCount: this.chainCount,
	        };

	    }

	};

	/**
	 * {@link Signal}, dispatched when Structure.refresh() is called
	 * @example
	 * structure.signals.refreshed( function(){ ... } );
	 * @event Structure#refreshed
	 */

	/**
	 * Bond iterator callback
	 * @callback bondCallback
	 * @param {BondProxy} bondProxy - current bond proxy
	 */

	/**
	 * Atom iterator callback
	 * @callback atomCallback
	 * @param {AtomProxy} atomProxy - current atom proxy
	 */

	/**
	 * Residue iterator callback
	 * @callback residueCallback
	 * @param {ResidueProxy} residueProxy - current residue proxy
	 */

	/**
	 * Residue-list iterator callback
	 * @callback residueListCallback
	 * @param {ResidueProxy[]} residueProxyList - list of current residue proxies
	 */

	/**
	 * Polymer iterator callback
	 * @callback polymerCallback
	 * @param {Polymer} polymer - current polymer object
	 */

	/**
	 * Chain iterator callback
	 * @callback chainCallback
	 * @param {ChainProxy} chainProxy - current chain proxy
	 */

	/**
	 * Model iterator callback
	 * @callback modelCallback
	 * @param {ModelProxy} modelProxy - current model proxy
	 */


	/**
	 * Structure
	 * @class
	 * @param {String} name - structure name
	 * @param {String} path - source path
	 */
	function Structure( name, path ){

	    this.signals = {
	        refreshed: new Signal(),
	    };

	    this.name = name;
	    this.path = path;
	    this.title = "";
	    this.id = "";

	    this.atomSetCache = {};
	    this.atomSetDict = {};
	    this.biomolDict = {};
	    this.helices = [];
	    this.sheets = [];
	    this.unitcell = undefined;

	    this.frames = [];
	    this.boxes = [];

	    this.bondStore = new BondStore( 0 );
	    this.backboneBondStore = new BondStore( 0 );
	    this.rungBondStore = new BondStore( 0 );
	    this.atomStore = new AtomStore( 0 );
	    this.residueStore = new ResidueStore( 0 );
	    this.chainStore = new ChainStore( 0 );
	    this.modelStore = new ModelStore( 0 );

	    this.atomMap = new AtomMap( this );
	    this.residueMap = new ResidueMap( this );

	    this.atomSet = this.getAtomSet();
	    this.bondSet = this.getBondSet();

	    this.center = new Vector3();
	    this.boundingBox = new Box3();

	    GidPool.addObject( this );

	    this._ap = this.getAtomProxy();
	    this._rp = this.getResidueProxy();
	    this._cp = this.getChainProxy();

	}

	Structure.prototype = {

	    constructor: Structure,
	    type: "Structure",

	    /**
	     * Updates atomSets and bondSets. Updates GidPool entry.
	     * @fires Structure#refreshed
	     */
	    refresh: function(){

	        if( exports.Debug ) Log$1.time( "Structure.refresh" );

	        this.atomSetCache = {};

	        this.atomSet = this.getAtomSet();
	        this.bondSet = this.getBondSet();

	        if( !this.atomSetDict.rung ){
	            this.atomSetDict.rung = this.getAtomSet( false );
	        }

	        for( var name in this.atomSetDict ){
	            var as = this.atomSetDict[ name ];
	            var as2 = this.getAtomSet( false );
	            this.atomSetCache[ "__" + name ] = as2.intersection( as );
	        }

	        this.atomCount = this.atomSet.size();
	        this.bondCount = this.bondSet.size();

	        this.boundingBox = this.getBoundingBox();
	        this.center = this.boundingBox.center();

	        GidPool.updateObject( this );

	        if( exports.Debug ) Log$1.timeEnd( "Structure.refresh" );

	        this.signals.refreshed.dispatch();

	    },

	    //

	    getBondProxy: function( index ){

	        return new BondProxy( this, index );

	    },

	    getAtomProxy: function( index, tmp ){

	        if( tmp ){
	            if( this.__tmpAtomProxy === undefined ){
	                this.__tmpAtomProxy = new AtomProxy( this, index );
	            }
	            return this.__tmpAtomProxy;
	        }else{
	            return new AtomProxy( this, index );
	        }

	    },

	    getResidueProxy: function( index, tmp ){

	        if( tmp ){
	            if( this.__tmpResidueProxy === undefined ){
	                this.__tmpResidueProxy = new ResidueProxy( this, index );
	            }
	            return this.__tmpResidueProxy;
	        }else{
	            return new ResidueProxy( this, index );
	        }

	    },

	    getChainProxy: function( index ){

	        return new ChainProxy( this, index );

	    },

	    getModelProxy: function( index ){

	        return new ModelProxy( this, index );

	    },

	    //

	    getBondSet: function( selection ){

	        // TODO implement selection parameter

	        if( exports.Debug ) Log$1.time( "Structure.getBondSet" );

	        var n = this.bondStore.count;
	        var bs = new Bitset( n );
	        var as = this.atomSet;

	        if( as ){

	            var bp = this.getBondProxy();

	            for( var i = 0; i < n; ++i ){
	                bp.index = i;
	                if( as.has( bp.atomIndex1 ) && as.has( bp.atomIndex2 ) ){
	                    bs.add_unsafe( bp.index );
	                }
	            }

	        }else{

	            bs.set_all( true );

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Structure.getBondSet" );

	        return bs;

	    },

	    getBackboneBondSet: function( selection ){

	        // TODO implement selection parameter

	        if( exports.Debug ) Log$1.time( "Structure.getBackboneBondSet" );

	        var n = this.backboneBondStore.count;
	        var bs = new Bitset( n );
	        var as = this.atomSetCache.__backbone;

	        if( as ){

	            var bp = this.getBondProxy();
	            bp.bondStore = this.backboneBondStore;

	            for( var i = 0; i < n; ++i ){
	                bp.index = i;
	                if( as.has( bp.atomIndex1 ) && as.has( bp.atomIndex2 ) ){
	                    bs.add_unsafe( bp.index );
	                }
	            }

	        }else{

	            bs.set_all( true );

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Structure.getBackboneBondSet" );

	        return bs;

	    },

	    getRungBondSet: function( selection ){

	        // TODO implement selection parameter

	        if( exports.Debug ) Log$1.time( "Structure.getRungBondSet" );

	        var n = this.rungBondStore.count;
	        var bs = new Bitset( n );
	        var as = this.atomSetCache.__rung;

	        if( as ){

	            var bp = this.getBondProxy();
	            bp.bondStore = this.rungBondStore;

	            for( var i = 0; i < n; ++i ){
	                bp.index = i;
	                if( as.has( bp.atomIndex1 ) && as.has( bp.atomIndex2 ) ){
	                    bs.add_unsafe( bp.index );
	                }
	            }

	        }else{

	            bs.set_all( true );

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Structure.getRungBondSet" );

	        return bs;

	    },

	    getAtomSet: function( selection ){

	        if( exports.Debug ) Log$1.time( "Structure.getAtomSet" );

	        var as;
	        var n = this.atomStore.count;

	        if( selection === false ){

	            as = new Bitset( n );

	        }else if( selection === true ){

	            as = new Bitset( n );
	            as.set_all( true );

	        }else if( selection && selection.test ){

	            var seleString = selection.string;

	            if( seleString in this.atomSetCache ){

	                as = this.atomSetCache[ seleString ];

	            }else{

	                as = new Bitset( n );
	                this.eachAtom( function( ap ){
	                    as.add_unsafe( ap.index );
	                }, selection );
	                this.atomSetCache[ seleString ] = as;

	            }

	        }else{

	            as = new Bitset( n );
	            as.set_all( true );

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Structure.getAtomSet" );

	        return as;

	    },

	    //

	    getSelection: function(){

	        return false;

	    },

	    getStructure: function(){

	        return this;

	    },

	    /**
	     * Bond iterator
	     * @param  {bondCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachBond: function( callback, selection ){

	        var bp = this.getBondProxy();
	        var bs = this.bondSet;

	        if( selection && selection.test ){
	            if( bs ){
	                bs = bs.new_intersection( this.getBondSet( selection ) );
	            }else{
	                bs = this.getBondSet( selection );
	            }
	        }

	        if( bs ){
	            bs.forEach( function( index ){
	                bp.index = index;
	                callback( bp );
	            } );
	        }else{
	            var n = this.bondStore.count;
	            for( var i = 0; i < n; ++i ){
	                bp.index = i;
	                callback( bp );
	            }
	        }

	    },

	    /**
	     * Atom iterator
	     * @param  {atomCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachAtom: function( callback, selection ){

	        if( selection && selection.test ){
	            this.eachModel( function( mp ){
	                mp.eachAtom( callback, selection );
	            }, selection );
	        }else{
	            var an = this.atomStore.count;
	            var ap = this.getAtomProxy();
	            for( var i = 0; i < an; ++i ){
	                ap.index = i;
	                callback( ap );
	            }
	        }

	    },

	    /**
	     * Residue iterator
	     * @param  {residueCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachResidue: function( callback, selection ){

	        var i;
	        if( selection && selection.test ){
	            var mn = this.modelStore.count;
	            var mp = this.getModelProxy();
	            if( selection.modelOnlyTest ){
	                var modelOnlyTest = selection.modelOnlyTest;
	                for( i = 0; i < mn; ++i ){
	                    mp.index = i;
	                    if( modelOnlyTest( mp ) ){
	                        mp.eachResidue( callback, selection );
	                    }
	                }
	            }else{
	                for( i = 0; i < mn; ++i ){
	                    mp.index = i;
	                    mp.eachResidue( callback, selection );
	                }
	            }
	        }else{
	            var rn = this.residueStore.count;
	            var rp = this.getResidueProxy();
	            for( i = 0; i < rn; ++i ){
	                rp.index = i;
	                callback( rp );
	            }
	        }

	    },

	    /**
	     * Multi-residue iterator
	     * @param {Integer} n - window size
	     * @param  {residueListCallback} callback - the callback
	     */
	    eachResidueN: function( n, callback ){

	        var i, j;
	        var rn = this.residueStore.count;
	        if( rn < n ) return;
	        var array = new Array( n );

	        for( i = 0; i < n; ++i ){
	            array[ i ] = this.getResidueProxy( i );
	        }
	        callback.apply( this, array );

	        for( j = n; j < rn; ++j ){
	            for( i = 0; i < n; ++i ){
	                array[ i ].index += 1;
	            }
	            callback.apply( this, array );
	        }

	    },

	    /**
	     * Polymer iterator
	     * @param  {polymerCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachPolymer: function( callback, selection ){

	        if( selection && selection.modelOnlyTest ){

	            var modelOnlyTest = selection.modelOnlyTest;

	            this.eachModel( function( mp ){
	                if( modelOnlyTest( mp ) ){
	                    mp.eachPolymer( callback, selection );
	                }
	            } );

	        }else{

	            this.eachModel( function( mp ){
	                mp.eachPolymer( callback, selection );
	            } );

	        }

	    },

	    /**
	     * Chain iterator
	     * @param  {chainCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachChain: function( callback, selection ){

	        if( selection && selection.test ){
	            this.eachModel( function( mp ){
	                mp.eachChain( callback, selection );
	            } );
	        }else{
	            var cn = this.chainStore.count;
	            var cp = this.getChainProxy();
	            for( var i = 0; i < cn; ++i ){
	                cp.index = i;
	                callback( cp );
	            }
	        }

	    },

	    /**
	     * Model iterator
	     * @param  {modelCallback} callback - the callback
	     * @param  {Selection} [selection] - the selection
	     */
	    eachModel: function( callback, selection ){

	        var i;
	        var n = this.modelStore.count;
	        var mp = this.getModelProxy();

	        if( selection && selection.test ){
	            var modelOnlyTest = selection.modelOnlyTest;
	            if( modelOnlyTest ){
	                for( i = 0; i < n; ++i ){
	                    mp.index = i;
	                    if( modelOnlyTest( mp ) ){
	                        callback( mp, selection );
	                    }
	                }
	            }else{
	                for( i = 0; i < n; ++i ){
	                    mp.index = i;
	                    callback( mp, selection );
	                }
	            }
	        }else{
	            for( i = 0; i < n; ++i ){
	                mp.index = i;
	                callback( mp );
	            }
	        }

	    },

	    //

	    getAtomData: function( params ){

	        var p = Object.assign( {}, params );
	        if( p.colorParams ) p.colorParams.structure = this.getStructure();

	        var what = p.what;
	        var atomSet = defaults( p.atomSet, this.atomSet );

	        var radiusFactory, colorMaker, pickingColorMaker;
	        var position, color, pickingColor, radius, index;

	        var atomData = {};
	        var ap = this.getAtomProxy();
	        var atomCount = atomSet.size();

	        if( !what || what.position ){
	            position = new Float32Array( atomCount * 3 );
	            atomData.position = position;
	        }
	        if( !what || what.color ){
	            color = new Float32Array( atomCount * 3 );
	            atomData.color = color;
	            colorMaker = ColorMakerRegistry.getScheme( p.colorParams );
	        }
	        if( !what || what.pickingColor ){
	            pickingColor = new Float32Array( atomCount * 3 );
	            atomData.pickingColor = pickingColor;
	            var pickingColorParams = Object.assign( p.colorParams, { scheme: "picking" } );
	            pickingColorMaker = ColorMakerRegistry.getScheme( pickingColorParams );
	        }
	        if( !what || what.radius ){
	            radius = new Float32Array( atomCount );
	            atomData.radius = radius;
	            radiusFactory = new RadiusFactory( p.radiusParams.radius, p.radiusParams.scale );
	        }
	        if( !what || what.index ){
	            index = new Float32Array( atomCount );
	            atomData.index = index;
	        }

	        atomSet.forEach( function( idx, i ){
	            var i3 = i * 3;
	            ap.index = idx;
	            if( position ){
	                ap.positionToArray( position, i3 );
	            }
	            if( color ){
	                colorMaker.atomColorToArray( ap, color, i3 );
	            }
	            if( pickingColor ){
	                pickingColorMaker.atomColorToArray( ap, pickingColor, i3 );
	            }
	            if( radius ){
	                radius[ i ] = radiusFactory.atomRadius( ap );
	            }
	            if( index ){
	                index[ i ] = idx;
	            }
	        } );
	        return atomData;

	    },

	    getBondData: function( params ){

	        var p = Object.assign( {}, params );
	        if( p.colorParams ) p.colorParams.structure = this.getStructure();

	        var what = p.what;
	        var bondSet = defaults( p.bondSet, this.bondSet );
	        var multipleBond = defaults( p.multipleBond, false );
	        var bondSpacing = defaults( p.bondSpacing, 0.85 );

	        var radiusFactory, colorMaker, pickingColorMaker;
	        var position1, position2, color1, color2, pickingColor1, pickingColor2, radius1, radius2;

	        var bondData = {};
	        var bp = this.getBondProxy();
	        if( p.bondStore ) bp.bondStore = p.bondStore;
	        var ap1 = this.getAtomProxy();
	        var ap2 = this.getAtomProxy();
	        var bondCount;
	        if( multipleBond ){
	            var storeBondOrder = bp.bondStore.bondOrder;
	            bondCount = 0;
	            bondSet.forEach( function( index ){
	                bondCount += storeBondOrder[ index ];
	            } );
	        }else{
	            bondCount = bondSet.size();
	        }

	        if( !what || what.position ){
	            position1 = new Float32Array( bondCount * 3 );
	            position2 = new Float32Array( bondCount * 3 );
	            bondData.position1 = position1;
	            bondData.position2 = position2;
	        }
	        if( !what || what.color ){
	            color1 = new Float32Array( bondCount * 3 );
	            color2 = new Float32Array( bondCount * 3 );
	            bondData.color1 = color1;
	            bondData.color2 = color2;
	            colorMaker = ColorMakerRegistry.getScheme( p.colorParams );
	        }
	        if( !what || what.pickingColor ){
	            pickingColor1 = new Float32Array( bondCount * 3 );
	            pickingColor2 = new Float32Array( bondCount * 3 );
	            bondData.pickingColor1 = pickingColor1;
	            bondData.pickingColor2 = pickingColor2;
	            var pickingColorParams = Object.assign( p.colorParams, { scheme: "picking" } );
	            pickingColorMaker = ColorMakerRegistry.getScheme( pickingColorParams );
	        }
	        if( !what || what.radius || ( multipleBond && what.position ) ){
	            radiusFactory = new RadiusFactory( p.radiusParams.radius, p.radiusParams.scale );
	        }
	        if( !what || what.radius ){
	            radius1 = new Float32Array( bondCount );
	            if( p.radius2 ){
	                radius2 = new Float32Array( bondCount );
	                bondData.radius1 = radius1;
	                bondData.radius2 = radius2;
	            }else{
	                bondData.radius = radius1;
	            }
	        }

	        var i = 0;
	        var j, i3, k, bondOrder, radius;

	        var vt = new Vector3();
	        var vShift = new Vector3();
	        bondSet.forEach( function( index ){
	            i3 = i * 3;
	            bp.index = index;
	            ap1.index = bp.atomIndex1;
	            ap2.index = bp.atomIndex2;
	            bondOrder = bp.bondOrder;
	            if( position1 ){
	                if( multipleBond && bondOrder > 1 ){
	                    var radius = radiusFactory.atomRadius( ap1 );
	                    var multiRadius = radius / bondOrder * bondSpacing;
	                    // Get shift Vector:
	                    bp.calculateShiftDir( vShift );
	                    vShift.multiplyScalar( radius - multiRadius );
	                    if( bondOrder === 2 ){
	                        vt.addVectors( ap1, vShift ).toArray( position1, i3 );
	                        vt.subVectors( ap1, vShift ).toArray( position1, i3 + 3 );
	                        vt.addVectors( ap2, vShift ).toArray( position2, i3 );
	                        vt.subVectors( ap2, vShift ).toArray( position2, i3 + 3 );
	                    }else if( bondOrder === 3 ){
	                        ap1.positionToArray( position1, i3 );
	                        vt.addVectors( ap1, vShift ).toArray( position1, i3 + 3 );
	                        vt.subVectors( ap1, vShift ).toArray( position1, i3 + 6 );
	                        ap2.positionToArray( position2, i3 );
	                        vt.addVectors( ap2, vShift ).toArray( position2, i3 + 3 );
	                        vt.subVectors( ap2, vShift ).toArray( position2, i3 + 6 );
	                    }else{
	                        // todo, better fallback
	                        ap1.positionToArray( position1, i3 );
	                        ap2.positionToArray( position2, i3 );
	                    }
	                }else{
	                    ap1.positionToArray( position1, i3 );
	                    ap2.positionToArray( position2, i3 );
	                }
	            }
	            if( color1 ){
	                colorMaker.bondColorToArray( bp, 1, color1, i3 );
	                colorMaker.bondColorToArray( bp, 0, color2, i3 );
	                if( multipleBond && bondOrder > 1 ){
	                    for( j = 1; j < bondOrder; ++j ){
	                        k = j * 3 + i3;
	                        copyWithin( color1, i3, k, 3 );
	                        copyWithin( color2, i3, k, 3 );
	                    }
	                }
	            }
	            if( pickingColor1 ){
	                pickingColorMaker.bondColorToArray( bp, 1, pickingColor1, i3 );
	                pickingColorMaker.bondColorToArray( bp, 0, pickingColor2, i3 );
	                if( multipleBond && bondOrder > 1 ){
	                    for( j = 1; j < bondOrder; ++j ){
	                        k = j * 3 + i3;
	                        copyWithin( pickingColor1, i3, k, 3 );
	                        copyWithin( pickingColor2, i3, k, 3 );
	                    }
	                }
	            }
	            if( radius1 ){
	                radius1[ i ] = radiusFactory.atomRadius( ap1 );
	                if( multipleBond && bondOrder > 1 ){
	                    radius1[ i ] /= bondOrder * 1 / bondSpacing;
	                    for( j = 1; j < bondOrder; ++j ){
	                        radius1[ i + j ] = radius1[ i ];
	                    }
	                }
	            }
	            if( radius2 ){
	                radius2[ i ] = radiusFactory.atomRadius( ap2 );
	                if( multipleBond && bondOrder > 1 ){
	                    radius2[ i ] = bondOrder * 1 / bondSpacing;
	                    for( j = 1; j < bondOrder; ++j ){
	                        radius2[ i + j ] = radius2[ i ];
	                    }
	                }
	            }

	            i += multipleBond ? bondOrder : 1;

	        } );

	        return bondData;

	    },

	    getBackboneAtomData: function( params ){

	        params = Object.assign( {
	            atomSet: this.atomSetCache.__backbone,
	        }, params );

	        return this.getAtomData( params );

	    },

	    getBackboneBondData: function( params ){

	        params = Object.assign( {
	            bondSet: this.getBackboneBondSet(),
	            bondStore: this.backboneBondStore
	        }, params );

	        return this.getBondData( params );

	    },

	    getRungAtomData: function( params ){

	        params = Object.assign( {
	            atomSet: this.atomSetCache.__rung,
	        }, params );

	        return this.getAtomData( params );

	    },

	    getRungBondData: function( params ){

	        params = Object.assign( {
	            bondSet: this.getRungBondSet(),
	            bondStore: this.rungBondStore
	        }, params );

	        return this.getBondData( params );

	    },

	    //

	    getBoundingBox: function( selection ){

	        if( exports.Debug ) Log$1.time( "getBoundingBox" );

	        var box = new Box3();

	        var minX = +Infinity;
	        var minY = +Infinity;
	        var minZ = +Infinity;

	        var maxX = -Infinity;
	        var maxY = -Infinity;
	        var maxZ = -Infinity;

	        this.eachAtom( function( ap ){

	            var x = ap.x;
	            var y = ap.y;
	            var z = ap.z;

	            if( x < minX ) minX = x;
	            if( y < minY ) minY = y;
	            if( z < minZ ) minZ = z;

	            if( x > maxX ) maxX = x;
	            if( y > maxY ) maxY = y;
	            if( z > maxZ ) maxZ = z;

	        }, selection );

	        box.min.set( minX, minY, minZ );
	        box.max.set( maxX, maxY, maxZ );

	        if( exports.Debug ) Log$1.timeEnd( "getBoundingBox" );

	        return box;

	    },

	    getPrincipalAxes: function( selection ){

	        if( exports.Debug ) Log$1.time( "getPrincipalAxes" );

	        var i = 0;
	        var coords = new Matrix( 3, this.atomCount );
	        var cd = coords.data;

	        this.eachAtom( function( a ){
	            cd[ i + 0 ] = a.x;
	            cd[ i + 1 ] = a.y;
	            cd[ i + 2 ] = a.z;
	            i += 3;
	        }, selection );

	        if( exports.Debug ) Log$1.timeEnd( "getPrincipalAxes" );

	        return principalAxes( coords );

	    },

	    atomCenter: function( selection ){

	        if( selection ){
	            return this.getBoundingBox( selection ).center();
	        }else{
	            return this.center.clone();
	        }

	    },

	    getSequence: function( selection ){

	        var seq = [];
	        var rp = this.getResidueProxy();

	        this.eachAtom( function( ap ){
	            rp.index = ap.residueIndex;
	            if( ap.index === rp.traceAtomIndex ){
	                seq.push( rp.getResname1() );
	            }
	        }, selection );

	        return seq;

	    },

	    getAtomIndices: function( selection ){

	        var indices;

	        if( selection && selection.string ){

	            indices = [];
	            this.eachAtom( function( ap ){
	                indices.push( ap.index );
	            }, selection );

	        }else{

	            var p = { what: { index: true } };
	            indices = this.getAtomData( p ).index;

	        }

	        return indices;

	    },

	    //

	    updatePosition: function( position ){

	        var i = 0;

	        this.eachAtom( function( ap ){
	            ap.positionFromArray( position, i );
	            i += 3;
	        } );

	    },

	    /**
	     * Removes structure from the GidPool. Calls dispose() method of property objects.
	     * Unsets properties to help garbage collection.
	     */
	    dispose: function(){

	        GidPool.removeObject( this );

	        if( this.frames ) this.frames.length = 0;
	        if( this.boxes ) this.boxes.length = 0;

	        this.bondStore.dispose();
	        this.backboneBondStore.dispose();
	        this.rungBondStore.dispose();
	        this.atomStore.dispose();
	        this.residueStore.dispose();
	        this.chainStore.dispose();
	        this.modelStore.dispose();

	        delete this.bondStore;
	        delete this.atomStore;
	        delete this.residueStore;
	        delete this.chainStore;
	        delete this.modelStore;

	        delete this.frames;
	        delete this.boxes;
	        delete this.cif;

	        delete this.bondSet;
	        delete this.atomSet;

	    }

	};

	/**
	 * Surface
	 * @class
	 * @param {String} name - surface name
	 * @param {String} path - source path
	 * @param {Object} data - surface data
	 * @param {Float32Array} data.position - surface positions
	 * @param {Int32Array} data.index - surface indices
	 * @param {Float32Array} data.normal - surface normals
	 * @param {Float32Array} data.color - surface colors
	 * @param {Int32Array} data.atomindex - atom indices
	 */
	function Surface( name, path, data ){

	    this.name = name;
	    this.path = path;
	    this.info = {};

	    this.center = new Vector3();
	    this.boundingBox = new Box3();

	    if( data instanceof Geometry ||
	        data instanceof BufferGeometry ||
	        data instanceof Group
	    ){

	        // to be removed
	        this.fromGeometry( data );

	    }else if( data ){

	        this.set(
	            data.position,
	            data.index,
	            data.normal,
	            data.color,
	            data.atomindex
	        );

	    }

	}

	Surface.prototype = {

	    constructor: Surface,
	    type: "Surface",

	    /**
	     * set surface data
	     * @param {Float32Array} position - surface positions
	     * @param {Int32Array} index - surface indices
	     * @param {Float32Array} normal - surface normals
	     * @param {Float32Array} color - surface colors
	     * @param {Int32Array} atomindex - atom indices
	     */
	    set: function( position, index, normal, color, atomindex ){

	        this.position = position;
	        this.index = index;
	        this.normal = normal;
	        this.color = color;
	        this.atomindex = atomindex;

	        this.size = position.length / 3;

	    },

	    fromGeometry: function( geometry ){

	        if( exports.Debug ) Log$1.time( "GeometrySurface.fromGeometry" );

	        var geo;

	        if( geometry instanceof Geometry ){
	            geometry.computeVertexNormals( true );
	            geo = new BufferGeometry().fromGeometry( geometry );
	        }else if( geometry instanceof BufferGeometry ){
	            geo = geometry;
	        }else{
	            geo = geometry[ 0 ];
	        }

	        if( !geo.boundingBox ) geo.computeBoundingBox();

	        this.center.copy( geo.boundingBox.center() );
	        this.boundingBox.copy( geo.boundingBox );

	        var position, color, index, normal;

	        if( geo instanceof BufferGeometry ){

	            var attr = geo.attributes;
	            var an = attr.normal ? attr.normal.array : false;

	            // assume there are no normals if the first is zero
	            if( !an || ( an[ 0 ] === 0 && an[ 1 ] === 0 && an[ 2 ] === 0 ) ){
	                geo.computeVertexNormals();
	            }

	            position = attr.position.array;
	            index = attr.index ? attr.index.array : null;
	            normal = attr.normal.array;

	        }

	        this.set( position, index, normal, color, undefined );

	        if( exports.Debug ) Log$1.timeEnd( "GeometrySurface.setGeometry" );

	    },

	    getPosition: function(){

	        return this.position;

	    },

	    getColor: function( params ){

	        var p = params || {};

	        var n = this.size;
	        var i, array, colorMaker;

	        if( p.scheme === "volume" ){

	            var v = new Vector3();
	            var pos = this.position;
	            colorMaker = ColorMakerRegistry.getScheme( p );

	            array = new Float32Array( n * 3 );

	            for( i = 0; i < n; ++i ){

	                var i3 = i * 3;
	                v.set( pos[ i3 ], pos[ i3 + 1 ], pos[ i3 + 2 ] );
	                colorMaker.positionColorToArray( v, array, i3 );

	            }

	        }else if( this.atomindex ){

	            p.surface = this;  // FIXME should this be p.surface???
	            array = new Float32Array( n * 3 );
	            colorMaker = ColorMakerRegistry.getScheme( p );
	            var atomProxy = p.structure.getAtomProxy();
	            var atomindex = this.atomindex;

	            for( i = 0; i < n; ++i ){
	                atomProxy.index = atomindex[ i ];
	                colorMaker.atomColorToArray( atomProxy, array, i * 3 );
	            }

	        }else{

	            var tc = new Color( p.value );
	            array = uniformArray3( n, tc.r, tc.g, tc.b );

	        }

	        return array;

	    },

	    getPickingColor: function( params ){

	        var p = Object.assign( params || {} );
	        p.scheme = "picking";

	        return this.getColor( p );

	    },

	    getNormal: function(){

	        return this.normal;

	    },

	    getSize: function( size ){

	        return uniformArray( this.size, size );

	    },

	    getIndex: function(){

	        return this.index;

	    },

	    getFilteredIndex: function( sele, structure ){

	        if( sele && this.atomindex ){

	            var selection = new Selection( sele );
	            var as = structure.getAtomSet( selection );
	            var filteredIndex = [];

	            var atomindex = this.atomindex;
	            var index = this.index;
	            var n = index.length;
	            var j = 0;

	            var ap1 = structure.getAtomProxy();
	            var ap2 = structure.getAtomProxy();
	            var ap3 = structure.getAtomProxy();

	            for( var i = 0; i < n; i+=3 ){

	                var idx1 = index[ i     ];
	                var idx2 = index[ i + 1 ];
	                var idx3 = index[ i + 2 ];

	                var ai1 = atomindex[ idx1 ];
	                var ai2 = atomindex[ idx2 ];
	                var ai3 = atomindex[ idx3 ];

	                if( as.has( ai1 ) && as.has( ai2 ) && as.has( ai3 ) ){
	                    filteredIndex[ j     ] = idx1;
	                    filteredIndex[ j + 1 ] = idx2;
	                    filteredIndex[ j + 2 ] = idx3;
	                    j += 3;
	                }

	            }

	            var TypedArray = this.position.length / 3 > 65535 ? Uint32Array : Uint16Array;
	            return new TypedArray( filteredIndex );

	        }else{

	            return this.index;

	        }

	    },

	    getAtomindex: function(){

	        return this.atomindex;

	    },

	    dispose: function(){

	        //

	    }

	};

	function Worker( name ){

	    var pending = 0;
	    var postCount = 0;
	    var onmessageDict = {};
	    var onerrorDict = {};

	    var blobUrl = URL.createObjectURL( WorkerRegistry.get( name ) );
	    var worker = new window.Worker( blobUrl );

	    WorkerRegistry.activeWorkerCount += 1;

	    worker.onmessage = function( event ){

	        pending -= 1;
	        var postId = event.data.__postId;

	        if( exports.Debug ) Log$1.timeEnd( "Worker.postMessage " + name + " #" + postId );

	        if( onmessageDict[ postId ] ){
	            onmessageDict[ postId ].call( worker, event );
	        }else{
	            // Log.debug( "No onmessage", postId, name );
	        }

	        delete onmessageDict[ postId ];
	        delete onerrorDict[ postId ];

	    };

	    worker.onerror = function( event ){

	        pending -= 1;
	        if( event.data ){
	            var postId = event.data.__postId;
	            if( onerrorDict[ postId ] ){
	                onerrorDict[ postId ].call( worker, event );
	            }else{
	                Log$1.error( "Worker.onerror", postId, name, event );
	            }
	            delete onmessageDict[ postId ];
	            delete onerrorDict[ postId ];
	        }else{
	            Log$1.error( "Worker.onerror", name, event );
	        }

	    };

	    // API

	    this.name = name;

	    this.post = function( aMessage, transferList, onmessage, onerror ){

	        onmessageDict[ postCount ] = onmessage;
	        onerrorDict[ postCount ] = onerror;

	        aMessage = aMessage || {};
	        aMessage.__name = name;
	        aMessage.__postId = postCount;
	        aMessage.__debug = exports.Debug;

	        if( exports.Debug ) Log$1.time( "Worker.postMessage " + name + " #" + postCount );

	        try{
	            worker.postMessage( aMessage, transferList );
	        }catch( error ){
	            Log$1.error( "worker.post:", error );
	            worker.postMessage( aMessage );
	        }

	        pending += 1;
	        postCount += 1;

	        return this;

	    };

	    this.terminate = function(){

	        if( worker ){
	            worker.terminate();
	            URL.revokeObjectURL( blobUrl );
	            WorkerRegistry.activeWorkerCount -= 1;
	        }else{
	            Log$1.log( "no worker to terminate" );
	        }

	    };

	    Object.defineProperties( this, {
	        postCount: {
	            get: function(){ return postCount; }
	        },
	        pending: {
	            get: function(){ return pending; }
	        }
	    } );

	}

	Worker.prototype.constructor = Worker;

	function WorkerPool( name, maxCount ){

	    maxCount = Math.min( 8, maxCount || 2 );

	    var pool = [];
	    var count = 0;

	    // API

	    this.name = name;

	    this.maxCount = maxCount;

	    this.post = function( aMessage, transferList, onmessage, onerror ){

	        var worker = this.getNextWorker();
	        worker.post( aMessage, transferList, onmessage, onerror );

	        return this;

	    };

	    this.terminate = function(){

	        pool.forEach( function( worker ){
	            worker.terminate();
	        } );

	    };

	    this.getNextWorker = function(){

	        var nextWorker;
	        var minPending = Infinity;

	        for( var i = 0; i < maxCount; ++i ){

	            if( i >= count ){

	                nextWorker = new Worker( name );
	                pool.push( nextWorker );
	                count += 1;
	                break;

	            }

	            var worker = pool[ i ];

	            if( worker.pending === 0 ){

	                minPending = worker.pending;
	                nextWorker = worker;
	                break;

	            }else if( worker.pending < minPending ){

	                minPending = worker.pending;
	                nextWorker = worker;

	            }

	        }

	        return nextWorker;

	    };

	    Object.defineProperties( this, {
	        count: {
	            get: function(){ return count; }
	        }
	    } );

	}

	WorkerPool.prototype.constructor = WorkerPool;

	/**
	 * @file Marching Cubes
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function getEdgeTable(){
	    return new Uint32Array( [
	        0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
	        0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
	        0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
	        0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
	        0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
	        0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
	        0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
	        0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
	        0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
	        0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
	        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
	        0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
	        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
	        0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
	        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
	        0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
	        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
	        0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
	        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
	        0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
	        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
	        0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
	        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
	        0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
	        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
	        0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
	        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
	        0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
	        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
	        0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
	        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
	        0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
	    ] );
	}

	function getTriTable(){
	    return new Int32Array( [
	        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
	        3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
	        3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
	        3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
	        9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
	        9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
	        2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
	        8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
	        9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
	        4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
	        3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
	        1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
	        4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
	        4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
	        9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
	        5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
	        2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
	        9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
	        0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
	        2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
	        10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
	        4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
	        5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
	        5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
	        9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
	        0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
	        1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
	        10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
	        8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
	        2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
	        7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
	        9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
	        2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
	        11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
	        9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
	        5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
	        11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
	        11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
	        1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
	        9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
	        5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
	        2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
	        0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
	        5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
	        6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
	        3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
	        6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
	        5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
	        1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
	        10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
	        6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
	        8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
	        7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
	        3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
	        5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
	        0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
	        9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
	        8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
	        5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
	        0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
	        6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
	        10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
	        10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
	        8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
	        1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
	        3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
	        0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
	        10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
	        3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
	        6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
	        9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
	        8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
	        3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
	        6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
	        0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
	        10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
	        10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
	        2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
	        7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
	        7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
	        2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
	        1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
	        11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
	        8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
	        0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
	        7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
	        10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
	        2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
	        6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
	        7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
	        2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
	        1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
	        10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
	        10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
	        0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
	        7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
	        6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
	        8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
	        9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
	        6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
	        4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
	        10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
	        8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
	        0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
	        1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
	        8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
	        10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
	        4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
	        10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
	        5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
	        11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
	        9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
	        6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
	        7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
	        3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
	        7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
	        9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
	        3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
	        6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
	        9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
	        1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
	        4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
	        7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
	        6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	        3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
	        0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
	        6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
	        0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
	        11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
	        6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
	        5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
	        9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
	        1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
	        1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
	        10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
	        0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
	        5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
	        10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
	        11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
	        9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
	        7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
	        2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
	        8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
	        9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
	        9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
	        1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
	        9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
	        9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
	        5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
	        0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
	        10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
	        2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
	        0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
	        0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
	        9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
	        5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
	        3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
	        5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
	        8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
	        0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
	        9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
	        0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
	        1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
	        3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
	        4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
	        9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
	        11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
	        11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
	        2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
	        9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
	        3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
	        1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
	        4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
	        4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
	        0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
	        3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
	        3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
	        0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
	        9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
	        1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
	    ] );
	}

	function MarchingCubes( field, nx, ny, nz, atomindex ){

	    // Based on alteredq / http://alteredqualia.com/
	    // port of greggman's ThreeD version of marching cubes to Three.js
	    // http://webglsamples.googlecode.com/hg/blob/blob.html
	    //
	    // Adapted for NGL by Alexander Rose

	    var isolevel = 0;
	    var noNormals = false;
	    var center;
	    var size = Infinity;

	    var n = nx * ny * nz;

	    // deltas
	    var yd = nx;
	    var zd = nx * ny;

	    var normalCache, vertexIndex;
	    var count, icount;

	    var ilist = new Int32Array( 12 );

	    var positionArray = [];
	    var normalArray = [];
	    var indexArray = [];
	    var atomindexArray = [];

	    var edgeTable = getEdgeTable();
	    var triTable = getTriTable();


	    //

	    this.triangulate = function( _isolevel, _noNormals, _box ){

	        isolevel = _isolevel;
	        noNormals = _noNormals;

	        if( !noNormals && !normalCache ){
	            normalCache = new Float32Array( n * 3 );
	        }

	        if( !vertexIndex ){
	            vertexIndex = new Int32Array( n );
	        }

	        count = 0;
	        icount = 0;

	        if( _box !== undefined ){

	            var min = _box[ 0 ].map( Math.round );
	            var max = _box[ 1 ].map( Math.round );
	            triangulate(
	                min[ 0 ], min[ 1 ], min[ 2 ],
	                max[ 0 ], max[ 1 ], max[ 2 ]
	            );

	        }else{

	            triangulate();

	        }

	        positionArray.length = count * 3;
	        if( !noNormals ) normalArray.length = count * 3;
	        indexArray.length = icount;
	        if( atomindex ) atomindexArray.length = count;

	        var TypedArray = positionArray.length / 3 > 65535 ? Uint32Array : Uint16Array;
	        return {
	            position: new Float32Array( positionArray ),
	            normal: noNormals ? undefined : new Float32Array( normalArray ),
	            index: new TypedArray( indexArray ),
	            atomindex: atomindex ? new Int32Array( atomindexArray ) : undefined,
	        };

	    };

	    // polygonization

	    function lerp( a, b, t ) { return a + ( b - a ) * t; }

	    function VIntX( q, offset, x, y, z, valp1, valp2 ) {

	        if( vertexIndex[ q ] < 0 ){

	            var mu = ( isolevel - valp1 ) / ( valp2 - valp1 );
	            var nc = normalCache;

	            var c = count * 3;

	            positionArray[ c + 0 ] = x + mu;
	            positionArray[ c + 1 ] = y;
	            positionArray[ c + 2 ] = z;

	            if( !noNormals ){

	                var q3 = q * 3;

	                normalArray[ c ]     = -lerp( nc[ q3 ],     nc[ q3 + 3 ], mu );
	                normalArray[ c + 1 ] = -lerp( nc[ q3 + 1 ], nc[ q3 + 4 ], mu );
	                normalArray[ c + 2 ] = -lerp( nc[ q3 + 2 ], nc[ q3 + 5 ], mu );

	            }

	            if( atomindex ) atomindexArray[ count ] = atomindex[ q + mu ];

	            vertexIndex[ q ] = count;
	            ilist[ offset ] = count;

	            count += 1;

	        }else{

	            ilist[ offset ] = vertexIndex[ q ];

	        }

	    }

	    function VIntY( q, offset, x, y, z, valp1, valp2 ) {

	        if( vertexIndex[ q ] < 0 ){

	            var mu = ( isolevel - valp1 ) / ( valp2 - valp1 );
	            var nc = normalCache;

	            var c = count * 3;

	            positionArray[ c ]     = x;
	            positionArray[ c + 1 ] = y + mu;
	            positionArray[ c + 2 ] = z;

	            if( !noNormals ){

	                var q3 = q * 3;
	                var q6 = q3 + yd * 3;

	                normalArray[ c ]     = -lerp( nc[ q3 ],     nc[ q6 ],     mu );
	                normalArray[ c + 1 ] = -lerp( nc[ q3 + 1 ], nc[ q6 + 1 ], mu );
	                normalArray[ c + 2 ] = -lerp( nc[ q3 + 2 ], nc[ q6 + 2 ], mu );

	            }

	            if( atomindex ) atomindexArray[ count ] = atomindex[ q + mu * yd ];

	            vertexIndex[ q ] = count;
	            ilist[ offset ] = count;

	            count += 1;

	        }else{

	            ilist[ offset ] = vertexIndex[ q ];

	        }

	    }

	    function VIntZ( q, offset, x, y, z, valp1, valp2 ) {

	        if( vertexIndex[ q ] < 0 ){

	            var mu = ( isolevel - valp1 ) / ( valp2 - valp1 );
	            var nc = normalCache;

	            var c = count * 3;

	            positionArray[ c ]     = x;
	            positionArray[ c + 1 ] = y;
	            positionArray[ c + 2 ] = z + mu;

	            if( !noNormals ){

	                var q3 = q * 3;
	                var q6 = q3 + zd * 3;

	                normalArray[ c ]     = -lerp( nc[ q3 ],     nc[ q6 ],     mu );
	                normalArray[ c + 1 ] = -lerp( nc[ q3 + 1 ], nc[ q6 + 1 ], mu );
	                normalArray[ c + 2 ] = -lerp( nc[ q3 + 2 ], nc[ q6 + 2 ], mu );

	            }

	            if( atomindex ) atomindexArray[ count ] = atomindex[ q + mu * zd ];

	            vertexIndex[ q ] = count;
	            ilist[ offset ] = count;

	            count += 1;

	        }else{

	            ilist[ offset ] = vertexIndex[ q ];

	        }

	    }

	    function compNorm( q ) {

	        var q3 = q * 3;

	        if ( normalCache[ q3 ] === 0.0 ) {

	            normalCache[ q3     ] = field[ q - 1  ] - field[ q + 1 ];
	            normalCache[ q3 + 1 ] = field[ q - yd ] - field[ q + yd ];
	            normalCache[ q3 + 2 ] = field[ q - zd ] - field[ q + zd ];

	        }

	    }

	    function polygonize( fx, fy, fz, q ) {

	        // cache indices
	        var q1 = q + 1,
	            qy = q + yd,
	            qz = q + zd,
	            q1y = q1 + yd,
	            q1z = q1 + zd,
	            qyz = q + yd + zd,
	            q1yz = q1 + yd + zd;

	        var cubeindex = 0,
	            field0 = field[ q ],
	            field1 = field[ q1 ],
	            field2 = field[ qy ],
	            field3 = field[ q1y ],
	            field4 = field[ qz ],
	            field5 = field[ q1z ],
	            field6 = field[ qyz ],
	            field7 = field[ q1yz ];

	        if ( field0 < isolevel ) cubeindex |= 1;
	        if ( field1 < isolevel ) cubeindex |= 2;
	        if ( field2 < isolevel ) cubeindex |= 8;
	        if ( field3 < isolevel ) cubeindex |= 4;
	        if ( field4 < isolevel ) cubeindex |= 16;
	        if ( field5 < isolevel ) cubeindex |= 32;
	        if ( field6 < isolevel ) cubeindex |= 128;
	        if ( field7 < isolevel ) cubeindex |= 64;

	        // if cube is entirely in/out of the surface - bail, nothing to draw

	        var bits = edgeTable[ cubeindex ];
	        if ( bits === 0 ) return 0;

	        var fx2 = fx + 1,
	            fy2 = fy + 1,
	            fz2 = fz + 1;

	        // top of the cube

	        if ( bits & 1 ) {

	            if( !noNormals ){
	                compNorm( q );
	                compNorm( q1 );
	            }
	            VIntX( q, 0, fx, fy, fz, field0, field1 );

	        }

	        if ( bits & 2 ) {

	            if( !noNormals ){
	                compNorm( q1 );
	                compNorm( q1y );
	            }
	            VIntY( q1, 1, fx2, fy, fz, field1, field3 );

	        }

	        if ( bits & 4 ) {

	            if( !noNormals ){
	                compNorm( qy );
	                compNorm( q1y );
	            }
	            VIntX( qy, 2, fx, fy2, fz, field2, field3 );

	        }

	        if ( bits & 8 ) {

	            if( !noNormals ){
	                compNorm( q );
	                compNorm( qy );
	            }
	            VIntY( q, 3, fx, fy, fz, field0, field2 );

	        }

	        // bottom of the cube

	        if ( bits & 16 ) {

	            if( !noNormals ){
	                compNorm( qz );
	                compNorm( q1z );
	            }
	            VIntX( qz, 4, fx, fy, fz2, field4, field5 );

	        }

	        if ( bits & 32 ) {

	            if( !noNormals ){
	                compNorm( q1z );
	                compNorm( q1yz );
	            }
	            VIntY( q1z, 5, fx2, fy, fz2, field5, field7 );

	        }

	        if ( bits & 64 ) {

	            if( !noNormals ){
	                compNorm( qyz );
	                compNorm( q1yz );
	            }
	            VIntX( qyz, 6, fx, fy2, fz2, field6, field7 );

	        }

	        if ( bits & 128 ) {

	            if( !noNormals ){
	                compNorm( qz );
	                compNorm( qyz );
	            }
	            VIntY( qz, 7, fx, fy, fz2, field4, field6 );

	        }

	        // vertical lines of the cube

	        if ( bits & 256 ) {

	            if( !noNormals ){
	                compNorm( q );
	                compNorm( qz );
	            }
	            VIntZ( q, 8, fx, fy, fz, field0, field4 );

	        }

	        if ( bits & 512 ) {

	            if( !noNormals ){
	                compNorm( q1 );
	                compNorm( q1z );
	            }
	            VIntZ( q1, 9, fx2, fy, fz, field1, field5 );

	        }

	        if ( bits & 1024 ) {

	            if( !noNormals ){
	                compNorm( q1y );
	                compNorm( q1yz );
	            }
	            VIntZ( q1y, 10, fx2, fy2, fz, field3, field7 );

	        }

	        if ( bits & 2048 ) {

	            if( !noNormals ){
	                compNorm( qy );
	                compNorm( qyz );
	            }
	            VIntZ( qy, 11, fx, fy2, fz, field2, field6 );

	        }

	        cubeindex <<= 4;  // re-purpose cubeindex into an offset into triTable

	        var o1, o2, o3, i = 0;

	        // here is where triangles are created

	        while ( triTable[ cubeindex + i ] != -1 ) {

	            o1 = cubeindex + i;
	            o2 = o1 + 1;
	            o3 = o1 + 2;

	            // FIXME normals flipping (see above) and vertex order reversal
	            indexArray[ icount ]     = ilist[ triTable[ o2 ] ];
	            indexArray[ icount + 1 ] = ilist[ triTable[ o1 ] ];
	            indexArray[ icount + 2 ] = ilist[ triTable[ o3 ] ];

	            icount += 3;
	            i += 3;

	        }

	    }

	    function triangulate( xBeg, yBeg, zBeg, xEnd, yEnd, zEnd ) {

	        var q, x, y, z, fx, fy, fz, y_offset, z_offset;

	        xBeg = xBeg !== undefined ? xBeg : 0;
	        yBeg = yBeg !== undefined ? yBeg : 0;
	        zBeg = zBeg !== undefined ? zBeg : 0;

	        xEnd = xEnd !== undefined ? xEnd : nx - 1;
	        yEnd = yEnd !== undefined ? yEnd : ny - 1;
	        zEnd = zEnd !== undefined ? zEnd : nz - 1;

	        if( noNormals ){

	            xBeg = Math.max( 0, xBeg );
	            yBeg = Math.max( 0, yBeg );
	            zBeg = Math.max( 0, zBeg );

	            xEnd = Math.min( nx - 1, xEnd );
	            yEnd = Math.min( ny - 1, yEnd );
	            zEnd = Math.min( nz - 1, zEnd );

	        }else{

	            xBeg = Math.max( 1, xBeg );
	            yBeg = Math.max( 1, yBeg );
	            zBeg = Math.max( 1, zBeg );

	            xEnd = Math.min( nx - 2, xEnd );
	            yEnd = Math.min( ny - 2, yEnd );
	            zEnd = Math.min( nz - 2, zEnd );

	        }

	        // init part of the vertexIndex
	        // (takes a significant amount of time to do for all)

	        var xBeg2 = Math.max( 0, xBeg - 2);
	        var yBeg2 = Math.max( 0, yBeg - 2 );
	        var zBeg2 = Math.max( 0, zBeg - 2 );

	        var xEnd2 = Math.min( nx, xEnd + 2 );
	        var yEnd2 = Math.min( ny, yEnd + 2 );
	        var zEnd2 = Math.min( nz, zEnd + 2 );

	        for ( z = zBeg2; z < zEnd2; ++z ) {
	            z_offset = zd * z;
	            for ( y = yBeg2; y < yEnd2; ++y ) {
	                y_offset = z_offset + yd * y;
	                for ( x = xBeg2; x < xEnd2; ++x ) {
	                    q = y_offset + x;
	                    vertexIndex[ q ] = -1;
	                }
	            }
	        }

	        // clip space where the isovalue is too low

	        var __break;
	        var __xBeg = xBeg; var __yBeg = yBeg; var __zBeg = zBeg;
	        var __xEnd = xEnd; var __yEnd = yEnd; var __zEnd = zEnd;

	        __break = false;
	        for ( z = zBeg; z < zEnd; ++z ) {
	            for ( y = yBeg; y < yEnd; ++y ) {
	                for ( x = xBeg; x < xEnd; ++x ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __zBeg = z;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        __break = false;
	        for ( y = yBeg; y < yEnd; ++y ) {
	            for ( z = __zBeg; z < zEnd; ++z ) {
	                for ( x = xBeg; x < xEnd; ++x ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __yBeg = y;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        __break = false;
	        for ( x = xBeg; x < xEnd; ++x ) {
	            for ( y = __yBeg; y < yEnd; ++y ) {
	                for ( z = __zBeg; z < zEnd; ++z ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __xBeg = x;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        __break = false;
	        for ( z = zEnd; z >= zBeg; --z ) {
	            for ( y = yEnd; y >= yBeg; --y ) {
	                for ( x = xEnd; x >= xBeg; --x ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __zEnd = z;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        __break = false;
	        for ( y = yEnd; y >= yBeg; --y ) {
	            for ( z = __zEnd; z >= zBeg; --z ) {
	                for ( x = xEnd; x >= xBeg; --x ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __yEnd = y;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        __break = false;
	        for ( x = xEnd; x >= xBeg; --x ) {
	            for ( y = __yEnd; y >= yBeg; --y ) {
	                for ( z = __zEnd; z >= zBeg; --z ) {
	                    q = ( ( nx * ny ) * z ) + ( nx * y ) + x;
	                    if( field[ q ] >= isolevel ){
	                        __xEnd = x;
	                        __break = true;
	                        break;
	                    }
	                }
	                if( __break ) break;
	            }
	            if( __break ) break;
	        }

	        //

	        if( noNormals ){

	            xBeg = Math.max( 0, __xBeg - 1);
	            yBeg = Math.max( 0, __yBeg - 1 );
	            zBeg = Math.max( 0, __zBeg - 1 );

	            xEnd = Math.min( nx - 1, __xEnd + 1 );
	            yEnd = Math.min( ny - 1, __yEnd + 1 );
	            zEnd = Math.min( nz - 1, __zEnd + 1 );

	        }else{

	            xBeg = Math.max( 1, __xBeg - 1 );
	            yBeg = Math.max( 1, __yBeg - 1 );
	            zBeg = Math.max( 1, __zBeg - 1 );

	            xEnd = Math.min( nx - 2, __xEnd + 1 );
	            yEnd = Math.min( ny - 2, __yEnd + 1 );
	            zEnd = Math.min( nz - 2, __zEnd + 1 );

	        }

	        // polygonize part of the grid

	        for ( z = zBeg; z < zEnd; ++z ) {
	            z_offset = zd * z;
	            for ( y = yBeg; y < yEnd; ++y ) {
	                y_offset = z_offset + yd * y;
	                for ( x = xBeg; x < xEnd; ++x ) {
	                    q = y_offset + x;
	                    polygonize( x, y, z, q );
	                }
	            }
	        }

	    }

	}
	MarchingCubes.__deps = [ getEdgeTable, getTriTable ];

	function laplacianSmooth( verts, faces, numiter, inflate ){

	    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
	    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
	    //
	    // Permission to use, copy, modify, and distribute this program for
	    // any purpose, with or without fee, is hereby granted, provided that
	    // the notices on the head, the reference information, and this
	    // copyright notice appear in all copies or substantial portions of
	    // the Software. It is provided "as is" without express or implied
	    // warranty.
	    //
	    // ported to JavaScript and adapted to NGL by Alexander Rose

	    numiter = numiter || 1;
	    inflate = inflate || true;

	    var nv = verts.length / 3;
	    var nf = faces.length / 3;
	    var bg, norms;

	    if( inflate ){
	        norms = new Float32Array( nv * 3 );
	    }

	    var tps = new Float32Array( nv * 3 );

	    var i;
	    var ndeg = 20;
	    var vertdeg = new Array( ndeg );

	    for( i = 0; i < ndeg; ++i ){
	        vertdeg[ i ] = new Uint32Array( nv );
	    }

	    for( i = 0; i < nv; ++i ){
	        vertdeg[ 0 ][ i ] = 0;
	    }

	    var j, jl;
	    var flagvert;

	    // for each face

	    for( i = 0; i < nf; ++i ){

	        var ao = i * 3;
	        var bo = i * 3 + 1;
	        var co = i * 3 + 2;

	        // vertex a

	        flagvert = true;
	        for( j = 0, jl = vertdeg[ 0 ][ faces[ao] ]; j < jl; ++j ){
	            if( faces[ bo ] == vertdeg[ j + 1 ][ faces[ ao ]] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ ao ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ ao ] ] ][ faces[ ao ] ] = faces[ bo ];
	        }

	        flagvert = true;
	        for( j = 0, jl = vertdeg[ 0 ][ faces[ ao ] ]; j < jl; ++j ){
	            if( faces[ co] == vertdeg[ j + 1 ][ faces[ ao ] ] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ ao ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ ao ] ] ][ faces[ ao ] ] = faces[ co ];
	        }

	        // vertex b

	        flagvert = true;
	        for( j = 0, jl = vertdeg[ 0 ][ faces[ bo ] ]; j < jl; ++j ){
	            if( faces[ ao ] == vertdeg[ j + 1 ][ faces[ bo ] ] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ bo ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ bo ] ] ][ faces[ bo ] ] = faces[ ao ];
	        }

	        flagvert = true;
	        for( j = 0, jl = vertdeg[ 0 ][ faces[ bo ] ]; j < jl; ++j ){
	            if( faces[ co ] == vertdeg[ j + 1 ][ faces[ bo ] ] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ bo ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ bo ] ] ][ faces[ bo ] ] = faces[ co ];
	        }

	        // vertex c

	        flagvert = true;
	        for( j = 0; j < vertdeg[ 0 ][ faces[ co ] ]; ++j ){
	            if( faces[ ao ] == vertdeg[ j + 1 ][ faces[ co ] ] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ co ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ co ] ] ][ faces[ co ] ] = faces[ ao ];
	        }

	        flagvert = true;
	        for( j = 0, jl = vertdeg[ 0 ][ faces[ co ] ]; j < jl; ++j ){
	            if( faces[ bo ] == vertdeg[ j + 1 ][ faces[ co ] ] ){
	                flagvert = false;
	                break;
	            }
	        }
	        if( flagvert ){
	            vertdeg[ 0 ][ faces[ co ] ]++;
	            vertdeg[ vertdeg[ 0 ][ faces[ co ] ] ][ faces[ co ] ] = faces[ bo ];
	        }

	    }

	    var wt = 1.0;
	    var wt2 = 0.5;
	    var i3, vi3, vi, vdi, wt_vi, wt2_vi;
	    var ssign = -1;
	    var scaleFactor = 1;
	    var outwt = 0.75 / ( scaleFactor + 3.5 );  // area-preserving

	    // smoothing iterations

	    for( var k = 0; k < numiter; ++k ){

	        // for each vertex

	        for( i = 0; i < nv; ++i ){

	            i3 = i * 3;
	            vdi = vertdeg[ 0 ][ i ];

	            if( vdi < 3 ){

	                tps[ i3     ] = verts[ i3     ];
	                tps[ i3 + 1 ] = verts[ i3 + 1 ];
	                tps[ i3 + 2 ] = verts[ i3 + 2 ];

	            }else if( vdi === 3 || vdi === 4 ){

	                tps[ i3     ] = 0;
	                tps[ i3 + 1 ] = 0;
	                tps[ i3 + 2 ] = 0;

	                for( j = 0; j < vdi; ++j ){
	                    vi3 = vertdeg[ j + 1 ][ i ] * 3;
	                    tps[ i3     ] += verts[ vi3     ];
	                    tps[ i3 + 1 ] += verts[ vi3 + 1 ];
	                    tps[ i3 + 2 ] += verts[ vi3 + 2 ];
	                }

	                tps[ i3     ] += wt2 * verts[ i3 ];
	                tps[ i3 + 1 ] += wt2 * verts[ i3 + 1 ];
	                tps[ i3 + 2 ] += wt2 * verts[ i3 + 2 ];

	                wt2_vi = wt2 + vdi;
	                tps[ i3     ] /= wt2_vi;
	                tps[ i3 + 1 ] /= wt2_vi;
	                tps[ i3 + 2 ] /= wt2_vi;

	            }else{

	                tps[ i3     ] = 0;
	                tps[ i3 + 1 ] = 0;
	                tps[ i3 + 2 ] = 0;

	                for( j = 0; j < vdi; ++j ){
	                    vi3 = vertdeg[ j + 1 ][ i ] * 3;
	                    tps[ i3     ] += verts[ vi3     ];
	                    tps[ i3 + 1 ] += verts[ vi3 + 1 ];
	                    tps[ i3 + 2 ] += verts[ vi3 + 2 ];
	                }

	                tps[ i3     ] += wt * verts[ i3 ];
	                tps[ i3 + 1 ] += wt * verts[ i3 + 1 ];
	                tps[ i3 + 2 ] += wt * verts[ i3 + 2 ];

	                wt_vi = wt + vdi;
	                tps[ i3     ] /= wt_vi;
	                tps[ i3 + 1 ] /= wt_vi;
	                tps[ i3 + 2 ] /= wt_vi;

	            }

	        }

	        verts.set( tps );  // copy smoothed positions

	        if( inflate ){

	            computeVertexNormals( verts, faces, norms );
	            var nv3 = nv * 3;

	            for( i3 = 0; i3 < nv3; i3 += 3 ){

	                // if(verts[i].inout) ssign=1;
	                // else ssign=-1;

	                verts[ i3     ] += ssign * outwt * norms[ i3     ];
	                verts[ i3 + 1 ] += ssign * outwt * norms[ i3 + 1 ];
	                verts[ i3 + 2 ] += ssign * outwt * norms[ i3 + 2 ];

	            }

	        }

	    }

	}
	laplacianSmooth.__deps = [ computeVertexNormals ];


	function computeVertexNormals( position, index, normal ){

	    var i, il;

	    if( normal === undefined ){
	        normal = new Float32Array( position.length );
	    }else{
	        // reset existing normals to zero
	        for( i = 0, il = normal.length; i < il; i ++ ){
	            normal[ i ] = 0;
	        }
	    }

	    var vA, vB, vC;
	    var a = new Float32Array( 3 );
	    var b = new Float32Array( 3 );
	    var c = new Float32Array( 3 );
	    var cb = new Float32Array( 3 );
	    var ab = new Float32Array( 3 );

	    if( index ){

	        // indexed elements
	        for( i = 0, il = index.length; i < il; i += 3 ){

	            var ai = index[ i ] * 3;
	            var bi = index[ i + 1 ] * 3;
	            var ci = index[ i + 2 ] * 3;

	            v3fromArray( a, position, ai );
	            v3fromArray( b, position, bi );
	            v3fromArray( c, position, ci );

	            v3sub( cb, c, b );
	            v3sub( ab, a, b );
	            v3cross( cb, cb, ab );

	            normal[ ai ] += cb[ 0 ];
	            normal[ ai + 1 ] += cb[ 1 ];
	            normal[ ai + 2 ] += cb[ 2 ];

	            normal[ bi ] += cb[ 0 ];
	            normal[ bi + 1 ] += cb[ 1 ];
	            normal[ bi + 2 ] += cb[ 2 ];

	            normal[ ci ] += cb[ 0 ];
	            normal[ ci + 1 ] += cb[ 1 ];
	            normal[ ci + 2 ] += cb[ 2 ];

	        }

	    }else{

	        // non-indexed elements (unconnected triangle soup)
	        for ( i = 0, il = position.length; i < il; i += 9 ) {

	            v3fromArray( a, position, i );
	            v3fromArray( b, position, i + 3 );
	            v3fromArray( c, position, i + 6 );

	            v3sub( cb, c, b );
	            v3sub( ab, a, b );
	            v3cross( cb, cb, ab );

	            normal[ i ] = cb[ 0 ];
	            normal[ i + 1 ] = cb[ 1 ];
	            normal[ i + 2 ] = cb[ 2 ];

	            normal[ i + 3 ] = cb[ 0 ];
	            normal[ i + 4 ] = cb[ 1 ];
	            normal[ i + 5 ] = cb[ 2 ];

	            normal[ i + 6 ] = cb[ 0 ];
	            normal[ i + 7 ] = cb[ 1 ];
	            normal[ i + 8 ] = cb[ 2 ];

	        }

	    }

	    normalizeVector3array( normal );

	    return normal;

	}
	computeVertexNormals.__deps = [
	    v3sub, v3cross, v3fromArray, normalizeVector3array
	];

	function VolumeSurface( data, nx, ny, nz, atomindex ){

	    var mc = new MarchingCubes( data, nx, ny, nz, atomindex );

	    function getSurface( isolevel, smooth, box, matrix ){
	        var sd = mc.triangulate( isolevel, smooth, box );
	        if( smooth ){
	            laplacianSmooth( sd.position, sd.index, smooth, true );
	            sd.normal = computeVertexNormals( sd.position, sd.index );
	        }
	        if( matrix ){
	            applyMatrix4toVector3array( matrix, sd.position );
	            if( sd.normal ){
	                var normalMatrix = m3new();
	                m3makeNormal( normalMatrix, matrix );
	                applyMatrix3toVector3array( normalMatrix, sd.normal );
	            }
	        }
	        return sd;
	    }

	    this.getSurface = getSurface;

	}
	VolumeSurface.__deps = [
	    laplacianSmooth, computeVertexNormals, MarchingCubes,
	    applyMatrix4toVector3array, applyMatrix3toVector3array,
	    m3new, m3makeNormal
	];


	WorkerRegistry.add( "surf", function func( e, callback ){

	    var a = e.data.args;
	    var p = e.data.params;
	    if( a ){
	        self.volsurf = new VolumeSurface( a[0], a[1], a[2], a[3], a[4] );
	    }
	    if( p ){
	        var sd = self.volsurf.getSurface( p.isolevel, p.smooth, p.box, p.matrix );
	        var transferList = [ sd.position.buffer, sd.index.buffer ];
	        if( sd.normal ) transferList.push( sd.normal.buffer );
	        if( sd.atomindex ) transferList.push( sd.atomindex.buffer );
	        callback( {
	            sd: sd,
	            p: p
	        }, transferList );
	    }

	}, [ VolumeSurface ] );


	/**
	 * Volume
	 * @class
	 * @param {String} name - volume name
	 * @param {String} path - source path
	 * @param {Float32array} data - volume 3d grid
	 * @param {Integer} nx - x dimension of the 3d volume
	 * @param {Integer} ny - y dimension of the 3d volume
	 * @param {Integer} nz - z dimension of the 3d volume
	 * @param {Int32Array} dataAtomindex - atom indices corresponding to the cells in the 3d grid
	 */
	function Volume( name, path, data, nx, ny, nz, dataAtomindex ){

	    this.name = name;
	    this.path = path;

	    this.matrix = new Matrix4();
	    this.normalMatrix = new Matrix3();
	    this.inverseMatrix = new Matrix4();
	    this.center = new Vector3();
	    this.boundingBox = new Box3();

	    this.setData( data, nx, ny, nz, dataAtomindex );

	    if( this.__data.length <= Math.pow( 10, 7 ) ){
	        GidPool.addObject( this );
	    }

	}

	Volume.prototype = {

	    constructor: Volume,
	    type: "Volume",

	    /**
	     * set volume data
	     * @param {Float32array} data - volume 3d grid
	     * @param {Integer} nx - x dimension of the 3d volume
	     * @param {Integer} ny - y dimension of the 3d volume
	     * @param {Integer} nz - z dimension of the 3d volume
	     * @param {Int32Array} dataAtomindex - atom indices corresponding to the cells in the 3d grid
	     */
	    setData: function( data, nx, ny, nz, dataAtomindex ){

	        this.nx = nx || 1;
	        this.ny = ny || 1;
	        this.nz = nz || 1;

	        this.data = data || new Float32Array( 1 );
	        this.__data = this.data;

	        this.setDataAtomindex( dataAtomindex );

	        delete this.mc;

	        delete this.__isolevel;
	        delete this.__smooth;
	        delete this.__minValue;
	        delete this.__maxValue;

	        delete this.__dataPositionBuffer;
	        delete this.__dataPosition;
	        delete this.__dataBuffer;

	        delete this.__dataMin;
	        delete this.__dataMax;
	        delete this.__dataMean;
	        delete this.__dataRms;

	        if( this.worker ) this.worker.terminate();

	        if( this.__data.length <= Math.pow( 10, 7 ) ){
	            GidPool.updateObject( this, true );
	        }else{
	            Log$1.warn( "Volume too large (>10^7), not adding to GidPool" );
	            GidPool.removeObject( this );
	        }

	    },

	    /**
	     * set transformation matrix
	     * @param {Matrix4} matrix - 4x4 transformation matrix
	     */
	    setMatrix: function( matrix ){

	        this.matrix.copy( matrix );

	        var bb = this.boundingBox;
	        var v = this.center;  // temporary re-purposing

	        var x = this.nx - 1;
	        var y = this.ny - 1;
	        var z = this.nz - 1;

	        bb.makeEmpty();

	        bb.expandByPoint( v.set( x, y, z ) );
	        bb.expandByPoint( v.set( x, y, 0 ) );
	        bb.expandByPoint( v.set( x, 0, z ) );
	        bb.expandByPoint( v.set( x, 0, 0 ) );
	        bb.expandByPoint( v.set( 0, y, z ) );
	        bb.expandByPoint( v.set( 0, 0, z ) );
	        bb.expandByPoint( v.set( 0, y, 0 ) );
	        bb.expandByPoint( v.set( 0, 0, 0 ) );

	        bb.applyMatrix4( this.matrix );
	        bb.center( this.center );

	        // make normal matrix

	        var me = this.matrix.elements;
	        var r0 = new Vector3( me[0], me[1], me[2] );
	        var r1 = new Vector3( me[4], me[5], me[6] );
	        var r2 = new Vector3( me[8], me[9], me[10] );
	        var cp = new Vector3();
	        //        [ r0 ]       [ r1 x r2 ]
	        // M3x3 = [ r1 ]   N = [ r2 x r0 ]
	        //        [ r2 ]       [ r0 x r1 ]
	        var ne = this.normalMatrix.elements;
	        cp.crossVectors( r1, r2 );
	        ne[ 0 ] = cp.x;
	        ne[ 1 ] = cp.y;
	        ne[ 2 ] = cp.z;
	        cp.crossVectors( r2, r0 );
	        ne[ 3 ] = cp.x;
	        ne[ 4 ] = cp.y;
	        ne[ 5 ] = cp.z;
	        cp.crossVectors( r0, r1 );
	        ne[ 6 ] = cp.x;
	        ne[ 7 ] = cp.y;
	        ne[ 8 ] = cp.z;

	        this.inverseMatrix.getInverse( this.matrix );

	    },

	    /**
	     * set atom indices
	     * @param {Int32Array} dataAtomindex - atom indices corresponding to the cells in the 3d grid
	     */
	    setDataAtomindex: function( dataAtomindex ){

	        this.dataAtomindex = dataAtomindex;
	        this.__dataAtomindex = this.dataAtomindex;

	        delete this.__dataAtomindexBuffer;

	    },

	    getBox: function( center, size, target ){

	        if( !target ) target = new Box3();

	        target.set( center, center );
	        target.expandByScalar( size );
	        target.applyMatrix4( this.inverseMatrix );

	        target.min.round();
	        target.max.round();

	        return target;

	    },

	    __getBox: function( center, size ){

	        if( !center || !size ) return;

	        if( !this.__box ) this.__box = new Box3();
	        var box = this.getBox( center, size, this.__box );
	        return [ box.min.toArray(), box.max.toArray() ];

	    },

	    makeSurface: function( sd, isolevel, smooth ){

	        var surface = new Surface( "", "", sd );
	        surface.info.isolevel = isolevel;
	        surface.info.smooth = smooth;

	        return surface;

	    },

	    getSurface: function( isolevel, smooth, center, size ){

	        isolevel = isNaN( isolevel ) ? this.getValueForSigma( 2 ) : isolevel;
	        smooth = smooth || 0;

	        //

	        if( this.volsurf === undefined ){
	            this.volsurf = new VolumeSurface(
	                this.__data, this.nx, this.ny, this.nz, this.__dataAtomindex
	            );
	        }

	        var box = this.__getBox( center, size );
	        var sd = this.volsurf.getSurface( isolevel, smooth, box, this.matrix.elements );

	        return this.makeSurface( sd, isolevel, smooth );

	    },

	    getSurfaceWorker: function( isolevel, smooth, center, size, callback ){

	        isolevel = isNaN( isolevel ) ? this.getValueForSigma( 2 ) : isolevel;
	        smooth = smooth || 0;

	        //

	        if( window.Worker ){

	            if( this.workerPool === undefined ){
	                this.workerPool = new WorkerPool( "surf", 2 );
	            }

	            var msg = {};
	            var worker = this.workerPool.getNextWorker();

	            if( worker.postCount === 0 ){
	                msg.args = [
	                    this.__data, this.nx, this.ny, this.nz, this.__dataAtomindex
	                ];
	            }

	            msg.params = {
	                isolevel: isolevel,
	                smooth: smooth,
	                box: this.__getBox( center, size ),
	                matrix: this.matrix.elements
	            };

	            worker.post( msg, undefined,

	                function( e ){
	                    var sd = e.data.sd;
	                    var p = e.data.p;
	                    callback( this.makeSurface( sd, p.isolevel, p.smooth ) );
	                }.bind( this ),

	                function( e ){
	                    console.warn(
	                        "Volume.getSurfaceWorker error - trying without worker", e
	                    );
	                    var surface = this.getSurface( isolevel, smooth, center, size );
	                    callback( surface );
	                }.bind( this )

	            );

	        }else{

	            var surface = this.getSurface( isolevel, smooth, center, size );
	            callback( surface );

	        }

	    },

	    getValueForSigma: function( sigma ){

	        sigma = sigma !== undefined ? sigma : 2;

	        return this.getDataMean() + sigma * this.getDataRms();

	    },

	    getSigmaForValue: function( value ){

	        value = value !== undefined ? value : 0;

	        return ( value - this.getDataMean() ) / this.getDataRms();

	    },

	    filterData: function( minValue, maxValue, outside ){

	        if( isNaN( minValue ) && this.header ){
	            minValue = this.header.DMEAN + 2.0 * this.header.ARMS;
	        }

	        minValue = ( minValue !== undefined && !isNaN( minValue ) ) ? minValue : -Infinity;
	        maxValue = maxValue !== undefined ? maxValue : Infinity;
	        outside = outside || false;

	        if( !this.dataPosition ){

	            this.makeDataPosition();

	        }

	        var dataPosition = this.__dataPosition;
	        var data = this.__data;

	        if( minValue === this.__minValue && maxValue == this.__maxValue &&
	            outside === this.__outside
	        ){

	            // already filtered
	            return;

	        }else if( minValue === -Infinity && maxValue === Infinity ){

	            this.dataPosition = dataPosition;
	            this.data = data;

	        }else{

	            var n = data.length;

	            if( !this.__dataBuffer ){

	                // ArrayBuffer for re-use as Float32Array backend

	                this.__dataPositionBuffer = new ArrayBuffer( n * 3 * 4 );
	                this.__dataBuffer = new ArrayBuffer( n * 4 );

	            }

	            var filteredDataPosition = new Float32Array( this.__dataPositionBuffer );
	            var filteredData = new Float32Array( this.__dataBuffer );

	            var j = 0;

	            for( var i = 0; i < n; ++i ){

	                var i3 = i * 3;
	                var v = data[ i ];

	                if( ( !outside && v >= minValue && v <= maxValue ) ||
	                    ( outside && ( v < minValue || v > maxValue ) )
	                ){

	                    var j3 = j * 3;

	                    filteredDataPosition[ j3 + 0 ] = dataPosition[ i3 + 0 ];
	                    filteredDataPosition[ j3 + 1 ] = dataPosition[ i3 + 1 ];
	                    filteredDataPosition[ j3 + 2 ] = dataPosition[ i3 + 2 ];

	                    filteredData[ j ] = v;

	                    j += 1;

	                }

	            }

	            // set views

	            this.dataPosition = new Float32Array( this.__dataPositionBuffer, 0, j * 3 );
	            this.data = new Float32Array( this.__dataBuffer, 0, j );

	        }

	        this.__minValue = minValue;
	        this.__maxValue = maxValue;
	        this.__outside = outside;

	    },

	    makeDataPosition: function(){

	        var nz = this.nz;
	        var ny = this.ny;
	        var nx = this.nx;

	        var position = new Float32Array( nx * ny * nz * 3 );

	        var p = 0;

	        for( var z = 0; z < nz; ++z ){

	            for( var y = 0; y < ny; ++y ){

	                for( var x = 0; x < nx; ++x ){

	                    position[ p + 0 ] = x;
	                    position[ p + 1 ] = y;
	                    position[ p + 2 ] = z;

	                    p += 3;

	                }

	            }

	        }

	        this.matrix.applyToVector3Array( position );

	        this.dataPosition = position;
	        this.__dataPosition = position;

	    },

	    getDataAtomindex: function(){

	        return this.dataAtomindex;

	    },

	    getDataPosition: function(){

	        return this.dataPosition;

	    },

	    getDataColor: function( params ){

	        var p = params || {};
	        p.volume = this;
	        p.scale = p.scale || 'Spectral';
	        p.domain = p.domain || [ this.getDataMin(), this.getDataMax() ];

	        var colorMaker = ColorMakerRegistry.getScheme( p );

	        var n = this.dataPosition.length / 3;
	        var array = new Float32Array( n * 3 );

	        // var atoms = p.structure.atoms;
	        // var atomindex = this.dataAtomindex;

	        for( var i = 0; i < n; ++i ){

	            colorMaker.volumeColorToArray( i, array, i * 3 );

	            // a = atoms[ atomindex[ i ] ];
	            // if( a ) colorMaker.atomColorToArray( a, array, i * 3 );

	        }

	        return array;

	    },

	    getPickingDataColor: function( params ){

	        var p = Object.assign( params || {} );
	        p.scheme = "picking";

	        return this.getDataColor( p );

	    },

	    getDataSize: function( size, scale ){

	        var n = this.dataPosition.length / 3;
	        var i, array;

	        switch( size ){

	            case "value":

	                array = new Float32Array( this.data );
	                break;

	            case "abs-value":

	                array = new Float32Array( this.data );
	                for( i = 0; i < n; ++i ){
	                    array[ i ] = Math.abs( array[ i ] );
	                }
	                break;

	            case "value-min":

	                array = new Float32Array( this.data );
	                var min = this.getDataMin();
	                for( i = 0; i < n; ++i ){
	                    array[ i ] -= min;
	                }
	                break;

	            case "deviation":

	                array = new Float32Array( this.data );
	                break;

	            default:

	                array = uniformArray( n, size );
	                break;

	        }

	        if( scale !== 1.0 ){

	            for( i = 0; i < n; ++i ){
	                array[ i ] *= scale;
	            }

	        }

	        return array;

	    },

	    getDataMin: function(){

	        if( this.__dataMin === undefined ){

	            var data = this.__data;
	            var n = data.length;
	            var min = Infinity;

	            for( var i = 0; i < n; ++i ){
	                min = Math.min( min, data[ i ] );
	            }

	            this.__dataMin = min;

	        }

	        return this.__dataMin;

	    },

	    getDataMax: function(){

	        if( this.__dataMax === undefined ){

	            var data = this.__data;
	            var n = data.length;
	            var max = -Infinity;

	            for( var i = 0; i < n; ++i ){
	                max = Math.max( max, data[ i ] );
	            }

	            this.__dataMax = max;

	        }

	        return this.__dataMax;

	    },

	    getDataMean: function(){

	        if( this.__dataMean === undefined ){

	            var data = this.__data;
	            var n = data.length;
	            var sum = 0;

	            for( var i = 0; i < n; ++i ){
	                sum += data[ i ];
	            }

	            this.__dataMean = sum / n;

	        }

	        return this.__dataMean;

	    },

	    getDataRms: function(){

	        if( this.__dataRms === undefined ){

	            var data = this.__data;
	            var n = data.length;
	            var sumSq = 0;
	            var di, i;

	            for( i = 0; i < n; ++i ){
	                di = data[ i ];
	                sumSq += di * di;
	            }

	            this.__dataRms = Math.sqrt( sumSq / n );

	        }

	        return this.__dataRms;

	    },

	    clone: function(){

	        var vol = new Volume(

	            this.name,
	            this.path,

	            this.__data,

	            this.nx,
	            this.ny,
	            this.nz,

	            this.__dataAtomindex

	        );

	        vol.matrix.copy( this.matrix );

	        if( this.header ){

	            vol.header = Object.assign( {}, this.header );

	        }

	        return vol;

	    },

	    dispose: function(){

	        if( this.workerPool ) this.workerPool.terminate();

	        GidPool.removeObject( this );

	    }

	};

	/**
	 * @file Queue
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function Queue( fn, argList ){

	    var queue = [];
	    var pending = false;

	    if( argList ){
	        for( var i = 0, il = argList.length; i < il; ++i ){
	            queue.push( argList[ i ] );
	        }
	        next();
	    }

	    function run( arg ){
	        fn( arg, next );
	    }

	    function next(){
	        var arg = queue.shift();
	        if( arg !== undefined ){
	            pending = true;
	            setTimeout( function(){ run( arg ); } );
	        }else{
	            pending = false;
	        }
	    }

	    // API

	    this.push = function( arg ){
	        queue.push( arg );
	        if( !pending ) next();
	    };

	    this.kill = function( arg ){
	        queue.length = 0;
	    };

	    this.length = function(){
	        return queue.length;
	    };

	}

	function Superposition( atoms1, atoms2 ){

	    // allocate & init data structures

	    var n;
	    if( typeof atoms1.eachAtom === "function" ){
	        n = atoms1.atomCount;
	    }else if( atoms1 instanceof Float32Array ){
	        n = atoms1.length / 3;
	    }

	    var coords1 = new Matrix( 3, n );
	    var coords2 = new Matrix( 3, n );

	    this.coords1t = new Matrix( n, 3 );
	    this.coords2t = new Matrix( n, 3 );

	    this.A = new Matrix( 3, 3 );
	    this.W = new Matrix( 1, 3 );
	    this.U = new Matrix( 3, 3 );
	    this.V = new Matrix( 3, 3 );
	    this.VH = new Matrix( 3, 3 );
	    this.R = new Matrix( 3, 3 );

	    this.tmp = new Matrix( 3, 3 );
	    this.c = new Matrix( 3, 3 );
	    this.c.data.set([ 1, 0, 0, 0, 1, 0, 0, 0, -1 ]);

	    // prep coords

	    this.prepCoords( atoms1, coords1 );
	    this.prepCoords( atoms2, coords2 );

	    // superpose

	    this._superpose( coords1, coords2 );

	}

	Superposition.prototype = {

	    constructor: Superposition,

	    _superpose: function( coords1, coords2 ){

	        this.mean1 = mean_rows( coords1 );
	        this.mean2 = mean_rows( coords2 );

	        sub_rows( coords1, this.mean1 );
	        sub_rows( coords2, this.mean2 );

	        transpose( this.coords1t, coords1 );
	        transpose( this.coords2t, coords2 );

	        multiply_ABt( this.A, this.coords2t, this.coords1t );

	        svd( this.A, this.W, this.U, this.V );

	        invert_3x3( this.V, this.VH );
	        multiply_3x3( this.R, this.U, this.VH );

	        if( mat3x3_determinant( this.R ) < 0.0 ){

	            if( exports.Debug ) Log$1.log( "R not a right handed system" );

	            multiply_3x3( this.tmp, this.c, this.VH );
	            multiply_3x3( this.R, this.U, this.tmp );

	        }

	    },

	    prepCoords: function( atoms, coords ){

	        var i = 0;
	        var cd = coords.data;

	        if( typeof atoms.eachAtom === "function" ){

	            atoms.eachAtom( function( a ){

	                cd[ i + 0 ] = a.x;
	                cd[ i + 1 ] = a.y;
	                cd[ i + 2 ] = a.z;

	                i += 3;

	            } );

	        }else if( atoms instanceof Float32Array ){

	            cd.set( atoms );

	        }else{

	            Log$1.warn( "prepCoords: input type unknown" );

	        }

	    },

	    transform: function( atoms ){

	        // allocate data structures

	        var n;
	        if( typeof atoms.eachAtom === "function" ){
	            n = atoms.atomCount;
	        }else if( atoms instanceof Float32Array ){
	            n = atoms.length / 3;
	        }

	        var coords = new Matrix( 3, n );
	        var tmp = new Matrix( n, 3 );

	        // prep coords

	        this.prepCoords( atoms, coords );

	        // do transform

	        sub_rows( coords, this.mean1 );
	        multiply_ABt( tmp, this.R, coords );
	        transpose( coords, tmp );
	        add_rows( coords, this.mean2 );

	        var i = 0;
	        var cd = coords.data;

	        if( typeof atoms.eachAtom === "function" ){

	            atoms.eachAtom( function( a ){

	                a.x = cd[ i + 0 ];
	                a.y = cd[ i + 1 ];
	                a.z = cd[ i + 2 ];

	                i += 3;

	            } );

	        }else if( atoms instanceof Float32Array ){

	            atoms.set( cd.subarray( 0, n * 3 ) );

	        }else{

	            Log$1.warn( "transform: input type unknown" );

	        }

	    }

	};

	// TODO params handling in constructor and getParameters method

	function Trajectory( trajPath, structure, selectionString ){

	    this.signals = {
	        gotNumframes: new Signal(),
	        frameChanged: new Signal(),
	        selectionChanged: new Signal(),
	        playerChanged: new Signal(),
	    };

	    this.params = {
	        centerPbc: true,
	        removePbc: true,
	        superpose: true
	    };

	    this.name = trajPath.replace( /^.*[\\\/]/, '' );

	    // selection to restrict atoms used for superposition
	    this.selection = new Selection(
	        selectionString || "backbone and not hydrogen"
	    );

	    this.selection.signals.stringChanged.add( function( string ){
	        this.makeIndices();
	        this.resetCache();
	    }, this );

	    // should come after this.selection is set
	    this.setStructure( structure );

	    this.trajPath = trajPath;

	    this.numframes = undefined;
	    this.getNumframes();

	}

	Trajectory.prototype = {

	    constructor: Trajectory,

	    setStructure: function( structure ){

	        this.structure = structure;
	        this.atomCount = structure.atomCount;

	        this.makeAtomIndices();

	        this.saveInitialStructure();

	        this.backboneIndices = this.getIndices(
	            new Selection( "backbone and not hydrogen" )
	        );
	        this.makeIndices();

	        this.frameCache = [];
	        this.boxCache = [];
	        this.pathCache = [];
	        this.frameCacheSize = 0;
	        this.currentFrame = -1;

	    },

	    saveInitialStructure: function(){

	        var i = 0;
	        var initialStructure = new Float32Array( 3 * this.atomCount );

	        this.structure.eachAtom( function( a ){

	            initialStructure[ i + 0 ] = a.x;
	            initialStructure[ i + 1 ] = a.y;
	            initialStructure[ i + 2 ] = a.z;

	            i += 3;

	        } );

	        this.initialStructure = initialStructure;

	    },

	    setSelection: function( string ){

	        this.selection.setString( string );

	        return this;

	    },

	    getIndices: function( selection ){

	        var indices;

	        if( selection && selection.test ){

	            var i = 0;
	            var test = selection.test;
	            indices = [];

	            this.structure.eachAtom( function( ap ){
	                if( test( ap ) ){
	                    indices.push( i );
	                }
	                i += 1;
	            } );

	        }else{

	            indices = this.structure.getAtomIndices( this.selection );

	        }

	        return indices;

	    },

	    makeIndices: function(){

	        // indices to restrict atoms used for superposition
	        this.indices = this.getIndices( this.selection );

	        var i, j;
	        var n = this.indices.length * 3;

	        this.coords1 = new Float32Array( n );
	        this.coords2 = new Float32Array( n );

	        var y = this.initialStructure;
	        var coords2 = this.coords2;

	        for( i = 0; i < n; i += 3 ){

	            j = this.indices[ i / 3 ] * 3;

	            coords2[ i + 0 ] = y[ j + 0 ];
	            coords2[ i + 1 ] = y[ j + 1 ];
	            coords2[ i + 2 ] = y[ j + 2 ];

	        }

	    },

	    makeAtomIndices: function(){

	        Log$1.error( "Trajectory.makeAtomIndices not implemented" );

	    },

	    getNumframes: function(){

	        Log$1.error( "Trajectory.loadFrame not implemented" );

	    },

	    resetCache: function(){

	        this.frameCache = [];
	        this.boxCache = [];
	        this.pathCache = [];
	        this.frameCacheSize = 0;
	        this.setFrame( this.currentFrame );

	        return this;

	    },

	    setParameters: function( params ){

	        var p = params;
	        var tp = this.params;
	        var resetCache = false;

	        if( p.centerPbc !== undefined && p.centerPbc !== tp.centerPbc ){

	            tp.centerPbc = p.centerPbc;
	            resetCache = true;

	        }

	        if( p.removePbc !== undefined && p.removePbc !== tp.removePbc ){

	            tp.removePbc = p.removePbc;
	            resetCache = true;

	        }

	        if( p.superpose !== undefined && p.superpose !== tp.superpose ){

	            tp.superpose = p.superpose;
	            resetCache = true;

	        }

	        if( resetCache ) this.resetCache();

	    },

	    setFrame: function( i, callback ){

	        if( i === undefined ) return this;

	        this.inProgress = true;

	        i = parseInt( i );

	        if( i === -1 || this.frameCache[ i ] ){

	            this.updateStructure( i, callback );

	        }else{

	            this.loadFrame( i, function(){

	                this.updateStructure( i, callback );

	            }.bind( this ) );

	        }

	        return this;

	    },

	    interpolate: function(){

	        var spline = function( p0, p1, p2, p3, t, tension ) {

	            var v0 = ( p2 - p0 ) * tension;
	            var v1 = ( p3 - p1 ) * tension;
	            var t2 = t * t;
	            var t3 = t * t2;

	            return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 +
	                   ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 +
	                   v0 * t + p1;

	        };

	        var lerp = function( a, b, t ) {

	            return a + ( b - a ) * t;

	        };

	        return function( i, ip, ipp, ippp, t, type, callback ){

	            var fc = this.frameCache;

	            var c = fc[ i ];
	            var cp = fc[ ip ];
	            var cpp = fc[ ipp ];
	            var cppp = fc[ ippp ];

	            var j;
	            var m = c.length;
	            var coords = new Float32Array( m );

	            if( type === "spline" ){

	                for( j = 0; j < m; j += 3 ){

	                    coords[ j + 0 ] = spline(
	                        cppp[ j + 0 ], cpp[ j + 0 ], cp[ j + 0 ], c[ j + 0 ], t, 1
	                    );
	                    coords[ j + 1 ] = spline(
	                        cppp[ j + 1 ], cpp[ j + 1 ], cp[ j + 1 ], c[ j + 1 ], t, 1
	                    );
	                    coords[ j + 2 ] = spline(
	                        cppp[ j + 2 ], cpp[ j + 2 ], cp[ j + 2 ], c[ j + 2 ], t, 1
	                    );

	                }

	            }else{

	                for( j = 0; j < m; j += 3 ){

	                    coords[ j + 0 ] = lerp( cp[ j + 0 ], c[ j + 0 ], t );
	                    coords[ j + 1 ] = lerp( cp[ j + 1 ], c[ j + 1 ], t );
	                    coords[ j + 2 ] = lerp( cp[ j + 2 ], c[ j + 2 ], t );

	                }

	            }

	            this.structure.updatePosition( coords );
	            this.currentFrame = i;
	            this.signals.frameChanged.dispatch( i );

	            if( typeof callback === "function" ){

	                callback();

	            }

	        };

	    }(),

	    setFrameInterpolated: function( i, ip, ipp, ippp, t, type, callback ){

	        if( i === undefined ) return this;

	        var fc = this.frameCache;

	        var iList = [];

	        if( !fc[ ippp ] ) iList.push( ippp );
	        if( !fc[ ipp ] ) iList.push( ipp );
	        if( !fc[ ip ] ) iList.push( ip );
	        if( !fc[ i ] ) iList.push( i );

	        if( iList.length ){

	            this.loadFrame( iList, function(){

	                this.interpolate( i, ip, ipp, ippp, t, type, callback );

	            }.bind( this ) );

	        }else{

	            this.interpolate( i, ip, ipp, ippp, t, type, callback );

	        }

	        return this;

	    },

	    loadFrame: function( i, callback ){

	        if( Array.isArray( i ) ){

	            var queue;
	            var fn = function( j, wcallback ){
	                this._loadFrame( j, wcallback );
	                if( queue.length() === 0 && typeof callback === "function" ) callback();
	            }.bind( this );
	            queue = new Queue( fn, i );

	        }else{

	            this._loadFrame( i, callback );

	        }

	    },

	    _loadFrame: function( i, callback ){

	        Log$1.error( "Trajectory._loadFrame not implemented" );

	    },

	    updateStructure: function( i, callback ){

	        if( this._disposed ) return;

	        if( i === -1 ){
	            this.structure.updatePosition( this.initialStructure );
	        }else{
	            this.structure.updatePosition( this.frameCache[ i ] );
	        }

	        this.structure.trajectory = {
	            name: this.trajPath,
	            frame: i
	        };

	        if( typeof callback === "function" ){
	            callback();
	        }

	        this.currentFrame = i;
	        this.inProgress = false;
	        this.signals.frameChanged.dispatch( i );

	    },

	    getCircularMean: function( indices, coords, box ){

	        return [
	            circularMean( coords, box[ 0 ], 3, 0, indices ),
	            circularMean( coords, box[ 1 ], 3, 1, indices ),
	            circularMean( coords, box[ 2 ], 3, 2, indices )
	        ];

	    },

	    centerPbc: function( coords, mean, box ){

	        if( box[ 0 ]===0 || box[ 8 ]===0 || box[ 4 ]===0 ){
	            return;
	        }

	        var i;
	        var n = coords.length;

	        var bx = box[ 0 ], by = box[ 1 ], bz = box[ 2 ];
	        var mx = mean[ 0 ], my = mean[ 1 ], mz = mean[ 2 ];

	        var fx = - mx + bx + bx / 2;
	        var fy = - my + by + by / 2;
	        var fz = - mz + bz + bz / 2;

	        for( i = 0; i < n; i += 3 ){
	            coords[ i + 0 ] = ( coords[ i + 0 ] + fx ) % bx;
	            coords[ i + 1 ] = ( coords[ i + 1 ] + fy ) % by;
	            coords[ i + 2 ] = ( coords[ i + 2 ] + fz ) % bz;
	        }

	    },

	    removePbc: function( x, box ){

	        if( box[ 0 ]===0 || box[ 8 ]===0 || box[ 4 ]===0 ){
	            return;
	        }

	        // ported from GROMACS src/gmxlib/rmpbc.c:rm_gropbc()
	        // in-place

	        var i, j, d, dist;
	        var n = x.length;

	        for( i = 3; i < n; i += 3 ){

	            for( j = 0; j < 3; ++j ){

	                dist = x[ i + j ] - x[ i - 3 + j ];

	                if( Math.abs( dist ) > 0.9 * box[ j * 3 + j ] ){

	                    if( dist > 0 ){

	                        for( d = 0; d < 3; ++d ){
	                            x[ i + d ] -= box[ j * 3 + d ];
	                        }

	                    }else{

	                        for( d = 0; d < 3; ++d ){
	                            x[ i + d ] += box[ j * 3 + d ];
	                        }

	                    }
	                }

	            }

	        }

	        return x;

	    },

	    superpose: function( x ){

	        var i, j;
	        var n = this.indices.length * 3;

	        var coords1 = this.coords1;
	        var coords2 = this.coords2;

	        for( i = 0; i < n; i += 3 ){

	            j = this.indices[ i / 3 ] * 3;

	            coords1[ i + 0 ] = x[ j + 0 ];
	            coords1[ i + 1 ] = x[ j + 1 ];
	            coords1[ i + 2 ] = x[ j + 2 ];

	        }

	        // TODO re-use superposition object
	        var sp = new Superposition( coords1, coords2 );
	        sp.transform( x );

	    },

	    process: function( i, box, coords, numframes ){

	        this.setNumframes( numframes );

	        if( box ){

	            if( this.backboneIndices.length > 0 && this.params.centerPbc ){
	                var box2 = [ box[ 0 ], box[ 4 ], box[ 8 ] ];
	                var mean = this.getCircularMean(
	                    this.backboneIndices, coords, box2
	                );
	                this.centerPbc( coords, mean, box2 );
	            }

	            if( this.params.removePbc ){
	                this.removePbc( coords, box );
	            }

	        }

	        if( this.indices.length > 0 && this.params.superpose ){
	            this.superpose( coords );
	        }

	        this.frameCache[ i ] = coords;
	        this.boxCache[ i ] = box;
	        this.frameCacheSize += 1;

	    },

	    setNumframes: function( n ){

	        if( n !== this.numframes ){

	            this.numframes = n;
	            this.signals.gotNumframes.dispatch( n );

	        }

	    },

	    dispose: function(){

	        this.frameCache = [];  // aid GC
	        this._disposed = true;
	        if( this.player ) this.player.stop();

	    },

	    setPlayer: function( player ){

	        this.player = player;
	        this.signals.playerChanged.dispatch( player );

	    },

	    getPath: function( index, callback ){

	        Log$1.error( "Trajectory.getPath not implemented" );

	    }

	};

	/**
	 * Buffer parameter object.
	 * @typedef {Object} BufferParameters - buffer parameters
	 * @property {Boolean} opaqueBack - render back-side opaque
	 * @property {Boolean} dullInterior - render back-side with dull lighting
	 * @property {String} side - which triangle sides to render, "front" front-side,
	 *                            "back" back-side, "double" front- and back-side
	 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
	 * @property {Integer} clipNear - position of camera near/front clipping plane
	 *                                in percent of scene bounding box
	 * @property {Boolean} flatShaded - render flat shaded
	 * @property {Integer} linewidth - width of lines (when applicable)
	 * @property {Boolean} wireframe - render as wireframe
	 * @property {Integer} wireframeLinewidth - width of wireframe lines
	 * @property {Float} roughness - how rough the material is, between 0 and 1
	 * @property {Float} metalness - how metallic the material is, between 0 and 1
	 * @property {Color} diffuse - diffuse color for lighting
	 * @property {Boolean} forceTransparent - force the material to allow transparency
	 */


	function getThreeSide( side ){
	    if( side === "front" ){
	        return FrontSide;
	    }else if( side === "back" ){
	        return BackSide;
	    }else if( side === "double" ){
	        return DoubleSide;
	    }else{
	        return DoubleSide;
	    }
	}


	/**
	 * Buffer base class
	 * @class
	 * @param {Float32Array} position - positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Int32Array} [index] - triangle indices
	 *                                 [a1,b1,c1, a2,b2,c2, ..., aN,bN,cN]
	 * @param {Float32Array} [pickingColor] - picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParameters} params - parameters object
	 */
	function Buffer( position, color, index, pickingColor, params ){

	    var p = params || {};

	    // required properties:
	    // - size
	    // - attributeSize
	    // - vertexShader
	    // - fragmentShader

	    this.pickable = false;
	    this.dynamic = true;

	    this.opaqueBack = defaults( p.opaqueBack, false );
	    this.dullInterior = defaults( p.dullInterior, false );
	    this.side = defaults( p.side, "double" );
	    this.opacity = defaults( p.opacity, 1.0 );
	    this.clipNear = defaults( p.clipNear, 0 );
	    this.flatShaded = defaults( p.flatShaded, false );
	    this.background = defaults( p.background, false );
	    this.linewidth = defaults( p.linewidth, 1 );
	    this.wireframe = defaults( p.wireframe, false );
	    this.wireframeLinewidth = defaults( p.wireframeLinewidth, 1 );
	    this.roughness = defaults( p.roughness, 0.4 );
	    this.metalness = defaults( p.metalness, 0.0 );
	    this.diffuse = defaults( p.diffuse, 0xffffff );
	    this.forceTransparent = defaults( p.forceTransparent, false );

	    this.geometry = new BufferGeometry();

	    this.addAttributes( {
	        "position": { type: "v3", value: position },
	        "color": { type: "c", value: color },
	    } );

	    this.indexVersion = 0;
	    this.wireframeIndexVersion = -1;

	    if( index ){
	        this.geometry.setIndex(
	            new BufferAttribute( index, 1 )
	        );
	        this.geometry.getIndex().setDynamic( this.dynamic );
	    }

	    if( pickingColor ){
	        this.addAttributes( {
	            "pickingColor": { type: "c", value: pickingColor },
	        } );
	        this.pickable = true;
	    }

	    this.uniforms = UniformsUtils.merge( [
	        UniformsLib.common,
	        {
	            "fogColor": { value: null },
	            "fogNear": { value: 0.0 },
	            "fogFar": { value: 0.0 },
	            "opacity": { value: this.opacity },
	            "nearClip": { value: 0.0 }
	        },
	        {
	            "emissive" : { value: new Color( 0x000000 ) },
	            "roughness": { value: this.roughness },
	            "metalness": { value: this.metalness }
	        },
	        UniformsLib.ambient,
	        UniformsLib.lights
	    ] );

	    this.uniforms.diffuse.value.set( this.diffuse );

	    var objectId = new Uniform( 0.0 )
	        .onUpdate( function( object, camera ){
	            this.value = SupportsReadPixelsFloat ? object.id : object.id / 255;
	        } );

	    this.pickingUniforms = {
	        "nearClip": { value: 0.0 },
	        "objectId": objectId
	    };

	    this.group = new Group();
	    this.wireframeGroup = new Group();
	    this.pickingGroup = new Group();

	    this.makeWireframeGeometry();

	}

	Buffer.prototype = {

	    constructor: Buffer,

	    parameters: {

	        opaqueBack: { updateShader: true },
	        dullInterior: { updateShader: true },
	        side: { updateShader: true, property: true },
	        opacity: { uniform: true },
	        clipNear: { updateShader: true, property: true },
	        flatShaded: { updateShader: true },
	        background: { updateShader: true },
	        linewidth: { property: true },
	        wireframe: { updateVisibility: true },
	        roughness: { uniform: true },
	        metalness: { uniform: true },
	        diffuse: { uniform: true },

	    },

	    get transparent () {

	        return this.opacity < 1 || this.forceTransparent;

	    },

	    makeMaterial: function(){

	        var side = getThreeSide( this.side );

	        this.material = new ShaderMaterial( {
	            uniforms: this.uniforms,
	            vertexShader: "",
	            fragmentShader: "",
	            depthTest: true,
	            transparent: this.transparent,
	            depthWrite: true,
	            lights: true,
	            fog: true,
	            side: side,
	            linewidth: this.linewidth
	        } );
	        this.material.vertexColors = VertexColors;
	        this.material.extensions.derivatives = this.flatShaded;
	        this.material.extensions.fragDepth = this.impostor;
	        this.material.clipNear = this.clipNear;

	        this.wireframeMaterial = new ShaderMaterial( {
	            uniforms: this.uniforms,
	            vertexShader: "",
	            fragmentShader: "",
	            depthTest: true,
	            transparent: this.transparent,
	            depthWrite: true,
	            lights: false,
	            fog: true,
	            side: side,
	            linewidth: this.linewidth
	        } );
	        this.wireframeMaterial.vertexColors = VertexColors;
	        this.wireframeMaterial.clipNear = this.clipNear;

	        this.pickingMaterial = new ShaderMaterial( {
	            uniforms: this.pickingUniforms,
	            vertexShader: "",
	            fragmentShader: "",
	            depthTest: true,
	            transparent: false,
	            depthWrite: true,
	            lights: false,
	            fog: false,
	            side: side,
	            linewidth: this.linewidth
	        } );
	        this.pickingMaterial.vertexColors = VertexColors;
	        this.pickingMaterial.extensions.fragDepth = this.impostor;
	        this.pickingMaterial.clipNear = this.clipNear;

	        // also sets vertexShader/fragmentShader
	        this.updateShader();

	    },

	    makeWireframeGeometry: function(){

	        this.makeWireframeIndex();

	        var geometry = this.geometry;
	        var wireframeIndex = this.wireframeIndex;
	        var wireframeGeometry = new BufferGeometry();

	        wireframeGeometry.attributes = geometry.attributes;
	        if( wireframeIndex ){
	            wireframeGeometry.setIndex(
	                new BufferAttribute( wireframeIndex, 1 )
	                    .setDynamic( this.dynamic )
	            );
	            wireframeGeometry.setDrawRange( 0, this.wireframeIndexCount );
	        }

	        this.wireframeGeometry = wireframeGeometry;

	    },

	    makeWireframeIndex: function(){

	        var edges = [];

	        function checkEdge( a, b ) {

	            if ( a > b ){
	                var tmp = a;
	                a = b;
	                b = tmp;
	            }

	            var list = edges[ a ];

	            if( list === undefined ){
	                edges[ a ] = [ b ];
	                return true;
	            }else if( list.indexOf( b ) === -1 ){
	                list.push( b );
	                return true;
	            }

	            return false;

	        }

	        return function(){

	            var index = this.geometry.index;

	            if( !this.wireframe ){

	                this.wireframeIndex = new Uint16Array( 0 );
	                this.wireframeIndexCount = 0;

	            }else if( index ){

	                var array = index.array;
	                var n = array.length;
	                if( this.geometry.drawRange.count !== Infinity ){
	                    n = this.geometry.drawRange.count;
	                }
	                var wireframeIndex;
	                if( this.wireframeIndex && this.wireframeIndex.length > n * 2 ){
	                    wireframeIndex = this.wireframeIndex;
	                }else{
	                    var count = this.geometry.attributes.position.count;
	                    var TypedArray = count > 65535 ? Uint32Array : Uint16Array;
	                    wireframeIndex = new TypedArray( n * 2 );
	                }

	                var j = 0;
	                edges.length = 0;

	                for( var i = 0; i < n; i += 3 ){

	                    var a = array[ i + 0 ];
	                    var b = array[ i + 1 ];
	                    var c = array[ i + 2 ];

	                    if( checkEdge( a, b ) ){
	                        wireframeIndex[ j + 0 ] = a;
	                        wireframeIndex[ j + 1 ] = b;
	                        j += 2;
	                    }
	                    if( checkEdge( b, c ) ){
	                        wireframeIndex[ j + 0 ] = b;
	                        wireframeIndex[ j + 1 ] = c;
	                        j += 2;
	                    }
	                    if( checkEdge( c, a ) ){
	                        wireframeIndex[ j + 0 ] = c;
	                        wireframeIndex[ j + 1 ] = a;
	                        j += 2;
	                    }

	                }

	                this.wireframeIndex = wireframeIndex;
	                this.wireframeIndexCount = j;
	                this.wireframeIndexVersion = this.indexVersion;

	            }

	        };

	    }(),

	    updateWireframeIndex: function(){

	        this.wireframeGeometry.setDrawRange( 0, Infinity );
	        if( this.wireframeIndexVersion < this.indexVersion ) this.makeWireframeIndex();

	        if( this.wireframeIndex.length > this.wireframeGeometry.index.array.length ){

	            this.wireframeGeometry.setIndex(
	                new BufferAttribute( this.wireframeIndex, 1 )
	                    .setDynamic( this.dynamic )
	            );

	        }else{

	            var index = this.wireframeGeometry.getIndex();
	            index.set( this.wireframeIndex );
	            index.needsUpdate = this.wireframeIndexCount > 0;
	            index.updateRange.count = this.wireframeIndexCount;

	        }

	        this.wireframeGeometry.setDrawRange( 0, this.wireframeIndexCount );

	    },

	    getRenderOrder: function(){

	        var renderOrder = 0;

	        if( this.type === "text" ){

	            renderOrder = 1;

	        }else if( this.transparent ){

	            if( this.type === "surface" ){
	                renderOrder = 3;
	            }else{
	                renderOrder = 2;
	            }

	        }

	        return renderOrder;

	    },

	    getMesh: function(){

	        var mesh;

	        if( !this.material ) this.makeMaterial();

	        if( this.line ){

	            mesh = new LineSegments( this.geometry, this.material );

	        }else if( this.point ){

	            mesh = new Points( this.geometry, this.material );
	            if( this.sortParticles ) mesh.sortParticles = true;

	        }else{

	            mesh = new Mesh( this.geometry, this.material );

	        }

	        mesh.frustumCulled = false;
	        mesh.renderOrder = this.getRenderOrder();

	        return mesh;

	    },

	    getWireframeMesh: function(){

	        var mesh;

	        if( !this.material ) this.makeMaterial();
	        if( !this.wireframeGeometry ) this.makeWireframeGeometry();

	        mesh = new LineSegments(
	            this.wireframeGeometry, this.wireframeMaterial
	        );

	        mesh.frustumCulled = false;
	        mesh.renderOrder = this.getRenderOrder();

	        return mesh;

	    },

	    getPickingMesh: function(){

	        var mesh;

	        if( !this.material ) this.makeMaterial();

	        mesh = new Mesh( this.geometry, this.pickingMaterial );

	        mesh.frustumCulled = false;
	        mesh.renderOrder = this.getRenderOrder();

	        return mesh;

	    },

	    getShader: function( name, type ){

	        return getShader( name, this.getDefines( type ) );

	    },

	    getVertexShader: function( type ){

	        return this.getShader( this.vertexShader, type );

	    },

	    getFragmentShader: function( type ){

	        return this.getShader( this.fragmentShader, type );

	    },

	    getDefines: function( type ){

	        var defines = {};

	        if( this.clipNear ){
	            defines.NEAR_CLIP = 1;
	        }

	        if( type === "picking" ){

	            defines.PICKING = 1;

	        }else{

	            if( type === "background" || this.background ){
	                defines.NOLIGHT = 1;
	            }
	            if( this.flatShaded ){
	                defines.FLAT_SHADED = 1;
	            }
	            if( this.opaqueBack ){
	                defines.OPAQUE_BACK = 1;
	            }
	            if( this.dullInterior ){
	                defines.DULL_INTERIOR = 1;
	            }

	        }

	        return defines;

	    },

	    getParameters: function(){

	        var params = {};

	        for( var name in this.parameters ){
	            params[ name ] = this[ name ];
	        }

	        return params;

	    },

	    addUniforms: function( uniforms ){

	        this.uniforms = UniformsUtils.merge(
	            [ this.uniforms, uniforms ]
	        );

	        this.pickingUniforms = UniformsUtils.merge(
	            [ this.pickingUniforms, uniforms ]
	        );

	    },

	    addAttributes: function( attributes ){

	        var itemSize = {
	            "f": 1, "v2": 2, "v3": 3, "c": 3
	        };

	        for( var name in attributes ){

	            var buf;
	            var a = attributes[ name ];

	            if( a.value ){

	                if( this.attributeSize * itemSize[ a.type ] !== a.value.length ){
	                    Log$1.error( "attribute value has wrong length", name );
	                }

	                buf = a.value;

	            }else{

	                buf = new Float32Array(
	                    this.attributeSize * itemSize[ a.type ]
	                );

	            }

	            this.geometry.addAttribute(
	                name,
	                new BufferAttribute( buf, itemSize[ a.type ] )
	                    .setDynamic( this.dynamic )
	            );

	        }

	    },

	    updateRenderOrder: function(){

	        var renderOrder = this.getRenderOrder();
	        function setRenderOrder( mesh ){
	            mesh.renderOrder = renderOrder;
	        }

	        this.group.children.forEach( setRenderOrder );
	        if( this.pickingGroup ){
	            this.pickingGroup.children.forEach( setRenderOrder );
	        }

	    },

	    updateShader: function(){

	        var m = this.material;
	        var wm = this.wireframeMaterial;
	        var pm = this.pickingMaterial;

	        m.vertexShader = this.getVertexShader();
	        m.fragmentShader = this.getFragmentShader();
	        m.needsUpdate = true;

	        wm.vertexShader = this.getShader( "Line.vert" );
	        wm.fragmentShader = this.getShader( "Line.frag" );
	        wm.needsUpdate = true;

	        pm.vertexShader = this.getVertexShader( "picking" );
	        pm.fragmentShader = this.getFragmentShader( "picking" );
	        pm.needsUpdate = true;

	    },

	    /**
	     * Set buffer parameters
	     * @param {BufferParameters} params - buffer parameters object
	     */
	    setParameters: function( params ){

	        if( !params ) return;

	        var p = params;
	        var tp = this.parameters;

	        var propertyData = {};
	        var uniformData = {};
	        var doShaderUpdate = false;
	        var doVisibilityUpdate = false;

	        for( var name in p ){

	            if( p[ name ] === undefined ) continue;
	            if( tp[ name ] === undefined ) continue;

	            this[ name ] = p[ name ];

	            if( tp[ name ].property ){
	                if( tp[ name ].property !== true ){
	                    propertyData[ tp[ name ].property ] = p[ name ];
	                }else{
	                    propertyData[ name ] = p[ name ];
	                }
	            }

	            if( tp[ name ].uniform ){
	                if( tp[ name ].uniform !== true ){
	                    uniformData[ tp[ name ].uniform ] = p[ name ];
	                }else{
	                    uniformData[ name ] = p[ name ];
	                }
	            }

	            if( tp[ name ].updateShader ){
	                doShaderUpdate = true;
	            }

	            if( tp[ name ].updateVisibility ){
	                doVisibilityUpdate = true;
	            }

	            if( this.dynamic && name === "wireframe" && p[ name ] === true ){
	                this.updateWireframeIndex();
	            }

	            if( name === "flatShaded" ){
	                this.material.extensions.derivatives = this.flatShaded;
	            }

	            if( name === "forceTransparent" ){
	                propertyData.transparent = this.transparent;
	            }

	        }

	        this.setProperties( propertyData );
	        this.setUniforms( uniformData );
	        if( doShaderUpdate ) this.updateShader();
	        if( doVisibilityUpdate ) this.setVisibility( this.visible );

	    },

	    setAttributes: function( data ){

	        /**
	         * Sets buffer attributes
	         * @param {Object} data - An object where the keys are the attribute names
	         *      and the values are the attribute data.
	         * @example
	         * var buffer = new Buffer();
	         * buffer.setAttributes({ attrName: attrData });
	         */

	        var geometry = this.geometry;
	        var attributes = geometry.attributes;

	        for( var name in data ){

	            var array = data[ name ];
	            var length = array.length;

	            if( name === "index" ){

	                var index = geometry.getIndex();
	                geometry.setDrawRange( 0, Infinity );

	                if( length > index.array.length ){

	                    geometry.setIndex(
	                        new BufferAttribute( array, 1 )
	                            .setDynamic( this.dynamic )
	                    );

	                }else{

	                    index.set( array );
	                    index.needsUpdate = length > 0;
	                    index.updateRange.count = length;
	                    geometry.setDrawRange( 0, length );

	                }

	                this.indexVersion++;
	                if( this.wireframe ) this.updateWireframeIndex();

	            }else{

	                var attribute = attributes[ name ];

	                if( length > attribute.array.length ){

	                    geometry.addAttribute(
	                        name,
	                        new BufferAttribute( array, attribute.itemSize )
	                            .setDynamic( this.dynamic )
	                    );

	                }else{

	                    attributes[ name ].set( array );
	                    attributes[ name ].needsUpdate = length > 0;
	                    attributes[ name ].updateRange.count = length;

	                }

	            }

	        }

	    },

	    setUniforms: function( data ){

	        if( !data ) return;

	        var u = this.material.uniforms;
	        var wu = this.wireframeMaterial.uniforms;
	        var pu = this.pickingMaterial.uniforms;

	        for( var name in data ){

	            if( name === "opacity" ){
	                this.setProperties( { transparent: this.transparent } );
	            }

	            if( u[ name ] !== undefined ){
	                if( u[ name ].value.set ){
	                    u[ name ].value.set( data[ name ] );
	                }else{
	                    u[ name ].value = data[ name ];
	                }
	            }

	            if( wu[ name ] !== undefined ){
	                if( wu[ name ].value.set ){
	                    wu[ name ].value.set( data[ name ] );
	                }else{
	                    wu[ name ].value = data[ name ];
	                }
	            }

	            if( pu[ name ] !== undefined ){
	                if( pu[ name ].value.set ){
	                    pu[ name ].value.set( data[ name ] );
	                }else{
	                    pu[ name ].value = data[ name ];
	                }
	            }

	        }

	    },

	    setProperties: function( data ){

	        if( !data ) return;

	        var m = this.material;
	        var wm = this.wireframeMaterial;
	        var pm = this.pickingMaterial;

	        for( var name in data ){

	            var value = data[ name ];

	            if( name === "transparent" ){
	                this.updateRenderOrder();
	            }else if( name === "side" ){
	                value = getThreeSide( value );
	            }

	            if( m[ name ] !== undefined ){
	                m[ name ] = value;
	            }

	            if( wm[ name ] !== undefined ){
	                wm[ name ] = value;
	            }

	            if( pm[ name ] !== undefined ){
	                pm[ name ] = value;
	            }

	        }

	        m.needsUpdate = true;
	        wm.needsUpdate = true;
	        pm.needsUpdate = true;

	    },

	    /**
	     * Set buffer visibility
	     * @param {Boolean} value - visibility value
	     */
	    setVisibility: function( value ){

	        this.visible = value;

	        if( this.wireframe ){

	            this.group.visible = false;
	            this.wireframeGroup.visible = value;
	            if( this.pickable ){
	                this.pickingGroup.visible = false;
	            }

	        }else{

	            this.group.visible = value;
	            this.wireframeGroup.visible = false;
	            if( this.pickable ){
	                this.pickingGroup.visible = value;
	            }

	        }

	    },

	    /**
	     * Free buffer resources
	     */
	    dispose: function(){

	        if( this.material ) this.material.dispose();
	        if( this.wireframeMaterial ) this.wireframeMaterial.dispose();
	        if( this.pickingMaterial ) this.pickingMaterial.dispose();

	        this.geometry.dispose();
	        if( this.wireframeGeometry ) this.wireframeGeometry.dispose();

	    }

	};

	function MeshBuffer( position, color, index, normal, pickingColor, params ){

	    var p = params || {};

	    this.size = position ? position.length / 3 : 0;
	    this.attributeSize = this.size;
	    this.vertexShader = 'Mesh.vert';
	    this.fragmentShader = 'Mesh.frag';

	    Buffer.call( this, position, color, index, pickingColor, p );

	    this.addAttributes( {
	        "normal": { type: "v3", value: normal },
	    } );

	    if( normal === undefined ){
	        this.geometry.computeVertexNormals();
	    }

	}

	MeshBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: MeshBuffer

	} );

	/**
	 * @file Buffer Utils
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function positionFromGeometry( geometry ){

	    var vertices = geometry.vertices;

	    var j, v3;
	    var n = vertices.length;
	    var position = new Float32Array( n * 3 );

	    for( var v = 0; v < n; v++ ){

	        j = v * 3;
	        v3 = vertices[ v ];

	        position[ j + 0 ] = v3.x;
	        position[ j + 1 ] = v3.y;
	        position[ j + 2 ] = v3.z;

	    }

	    return position;

	}


	function indexFromGeometry( geometry ){

	    var faces = geometry.faces;

	    var j, f;
	    var n = faces.length;
	    var TypedArray = n * 3 > 65535 ? Uint32Array : Uint16Array;
	    var index = new TypedArray( n * 3 );

	    for( var v = 0; v < n; v++ ){

	        j = v * 3;
	        f = faces[ v ];

	        index[ j + 0 ] = f.a;
	        index[ j + 1 ] = f.b;
	        index[ j + 2 ] = f.c;

	    }

	    return index;

	}


	function normalFromGeometry( geometry ){

	    var faces = geometry.faces;
	    var vn = geometry.vertices.length;

	    var j, f, nn, n1, n2, n3;
	    var n = faces.length;
	    var normal = new Float32Array( vn * 3 );

	    for( var v = 0; v < n; v++ ){

	        f = faces[ v ];
	        nn = f.vertexNormals;
	        n1 = nn[ 0 ];
	        n2 = nn[ 1 ];
	        n3 = nn[ 2 ];

	        j = f.a * 3;
	        normal[ j + 0 ] = n1.x;
	        normal[ j + 1 ] = n1.y;
	        normal[ j + 2 ] = n1.z;

	        j = f.b * 3;
	        normal[ j + 0 ] = n2.x;
	        normal[ j + 1 ] = n2.y;
	        normal[ j + 2 ] = n2.z;

	        j = f.c * 3;
	        normal[ j + 0 ] = n3.x;
	        normal[ j + 1 ] = n3.y;
	        normal[ j + 2 ] = n3.z;

	    }

	    return normal;

	}

	function GeometryBuffer( position, color, pickingColor, params ){

	    var p = params || {};

	    // required property of subclasses
	    var geo = this.geo;
	    
	    var n = position.length / 3;
	    var m, o;

	    if( geo.vertices && geo.faces ){
	        this.geoPosition = positionFromGeometry( geo );
	        this.geoNormal = normalFromGeometry( geo );
	        this.geoIndex = indexFromGeometry( geo );
	        m = geo.vertices.length;
	        o = geo.faces.length;
	    }else{
	        this.geoPosition = geo.attributes.position.array;
	        this.geoNormal = geo.attributes.normal.array;
	        this.geoIndex = geo.index.array;
	        m = this.geoPosition.length;
	        o = this.geoIndex.length / 3;
	    }

	    this.size = n * m;
	    this.positionCount = n;
	    this.geoPositionCount = m;
	    this.geoFacesCount = o;

	    this.transformedGeoPosition = new Float32Array( m * 3 );
	    this.transformedGeoNormal = new Float32Array( m * 3 );

	    this.meshPosition = new Float32Array( this.size * 3 );
	    this.meshNormal = new Float32Array( this.size * 3 );
	    this.meshColor = new Float32Array( this.size * 3 );
	    this.meshPickingColor = new Float32Array( this.size * 3 );

	    var TypedArray = this.meshPosition.length / 3 > 65535 ? Uint32Array : Uint16Array;
	    this.meshIndex = new TypedArray( n * o * 3 );
	    this.makeIndex();

	    MeshBuffer.call(
	        this, this.meshPosition, this.meshColor, this.meshIndex,
	        this.meshNormal, this.meshPickingColor, p
	    );

	    this.initNormals = true;

	    this.setAttributes( {
	        position: position,
	        color: color,
	        pickingColor: pickingColor
	    } );

	    this.initNormals = false;

	}

	GeometryBuffer.prototype = Object.assign( Object.create(

	    MeshBuffer.prototype ), {

	    constructor: GeometryBuffer,

	    applyPositionTransform: function(){},

	    setAttributes: function(){

	        var matrix = new Matrix4();
	        var normalMatrix = new Matrix3();

	        return function( data ){

	            var attributes = this.geometry.attributes;

	            var position, color, pickingColor;
	            var geoPosition, geoNormal;
	            var transformedGeoPosition, transformedGeoNormal;
	            var meshPosition, meshColor, meshPickingColor, meshNormal;

	            if( data.position ){
	                position = data.position;
	                geoPosition = this.geoPosition;
	                meshPosition = this.meshPosition;
	                transformedGeoPosition = this.transformedGeoPosition;
	                attributes.position.needsUpdate = true;
	            }

	            if( data.color ){
	                color = data.color;
	                meshColor = this.meshColor;
	                attributes.color.needsUpdate = true;
	            }

	            if( data.pickingColor ){
	                pickingColor = data.pickingColor;
	                meshPickingColor = this.meshPickingColor;
	                attributes.pickingColor.needsUpdate = true;
	            }

	            var updateNormals = !!( this.updateNormals && position );
	            var initNormals = !!( this.initNormals && position );

	            if( updateNormals || initNormals ){
	                geoNormal = this.geoNormal;
	                meshNormal = this.meshNormal;
	                transformedGeoNormal = this.transformedGeoNormal;
	                attributes.normal.needsUpdate = true;
	            }

	            var n = this.positionCount;
	            var m = this.geoPositionCount;

	            for( var i = 0; i < n; ++i ){

	                var j, l;
	                var k = i * m * 3;
	                var i3 = i * 3;

	                if( position ){

	                    transformedGeoPosition.set( geoPosition );
	                    matrix.makeTranslation(
	                        position[ i3 ], position[ i3 + 1 ], position[ i3 + 2 ]
	                    );
	                    this.applyPositionTransform( matrix, i, i3 );
	                    matrix.applyToVector3Array( transformedGeoPosition );

	                    meshPosition.set( transformedGeoPosition, k );

	                }

	                if( updateNormals ){

	                    transformedGeoNormal.set( geoNormal );
	                    normalMatrix.getNormalMatrix( matrix );
	                    normalMatrix.applyToVector3Array( transformedGeoNormal );

	                    meshNormal.set( transformedGeoNormal, k );

	                }else if( initNormals ){

	                    meshNormal.set( geoNormal, k );

	                }

	                if( color ){

	                    for( j = 0; j < m; ++j ){

	                        l = k + 3 * j;

	                        meshColor[ l     ] = color[ i3     ];
	                        meshColor[ l + 1 ] = color[ i3 + 1 ];
	                        meshColor[ l + 2 ] = color[ i3 + 2 ];

	                    }

	                }

	                if( pickingColor ){

	                    for( j = 0; j < m; ++j ){

	                        l = k + 3 * j;

	                        meshPickingColor[ l     ] = pickingColor[ i3     ];
	                        meshPickingColor[ l + 1 ] = pickingColor[ i3 + 1 ];
	                        meshPickingColor[ l + 2 ] = pickingColor[ i3 + 2 ];

	                    }

	                }

	            }

	        };

	    }(),

	    makeIndex: function(){

	        var geoIndex = this.geoIndex;
	        var meshIndex = this.meshIndex;

	        var n = this.positionCount;
	        var m = this.geoPositionCount;
	        var o = this.geoFacesCount;

	        var p, i, j, q;
	        var o3 = o * 3;

	        for( i = 0; i < n; ++i ){

	            j = i * o3;
	            q = j + o3;

	            meshIndex.set( geoIndex, j );
	            for( p = j; p < q; ++p ) meshIndex[ p ] += i * m;

	        }

	    }

	} );

	function SphereGeometryBuffer( position, color, radius, pickingColor, params ){

	    var p = params || {};

	    var detail = defaults( p.sphereDetail, 1 );

	    this.geo = new IcosahedronGeometry( 1, detail );
	    this._radius = radius;

	    GeometryBuffer.call( this, position, color, pickingColor, p );

	}

	SphereGeometryBuffer.prototype = Object.assign( Object.create(

	    GeometryBuffer.prototype ), {

	    constructor: SphereGeometryBuffer,

	    applyPositionTransform: function(){

	        var r;
	        var scale = new Vector3();

	        return function( matrix, i ){

	            r = this._radius[ i ];
	            scale.set( r, r, r );
	            matrix.scale( scale );

	        };

	    }(),

	    setAttributes: function( data ){

	        if( data.radius ){
	            this._radius = data.radius;
	        }

	        GeometryBuffer.prototype.setAttributes.call( this, data );

	    }

	} );

	function MappedBuffer( params ){

	    // required
	    // - mapping
	    // - mappingType
	    // - mappingSize
	    // - mappingItemSize
	    // - mappingIndices
	    // - mappingIndicesSize

	    this.size = this.count;
	    this.attributeSize = this.count * this.mappingSize;

	    var n = this.count * this.mappingIndicesSize;
	    var TypedArray = this.attributeSize > 65535 ? Uint32Array : Uint16Array;
	    this.index = new TypedArray( n );
	    this.makeIndex();

	    Buffer.call( this, null, null, this.index, null, params );

	    this.addAttributes( {
	        "mapping": { type: this.mappingType, value: null },
	    } );

	}

	MappedBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: MappedBuffer,

	    setAttributes: function( data ){

	        var count = this.count;
	        var mappingSize = this.mappingSize;
	        var attributes = this.geometry.attributes;

	        var a, d, itemSize, array, n, i, j;

	        for( var name in data ){

	            d = data[ name ];
	            a = attributes[ name ];
	            itemSize = a.itemSize;
	            array = a.array;

	            for( var k = 0; k < count; ++k ) {

	                n = k * itemSize;
	                i = n * mappingSize;

	                for( var l = 0; l < mappingSize; ++l ) {

	                    j = i + ( itemSize * l );

	                    for( var m = 0; m < itemSize; ++m ) {

	                        array[ j + m ] = d[ n + m ];

	                    }

	                }

	            }

	            a.needsUpdate = true;

	        }

	    },

	    makeMapping: function(){

	        var count = this.count;
	        var mapping = this.mapping;
	        var mappingSize = this.mappingSize;
	        var mappingItemSize = this.mappingItemSize;

	        var aMapping = this.geometry.attributes.mapping.array;

	        for( var v = 0; v < count; v++ ) {

	            aMapping.set( mapping, v * mappingItemSize * mappingSize );

	        }

	    },

	    makeIndex: function(){

	        var count = this.count;
	        var mappingSize = this.mappingSize;
	        var mappingIndices = this.mappingIndices;
	        var mappingIndicesSize = this.mappingIndicesSize;
	        var mappingItemSize = this.mappingItemSize;

	        var index = this.index;

	        var i, ix, it;

	        for( var v = 0; v < count; v++ ) {

	            i = v * mappingItemSize * mappingSize;
	            ix = v * mappingIndicesSize;
	            it = v * mappingSize;

	            index.set( mappingIndices, ix );

	            for( var s = 0; s < mappingIndicesSize; ++s ){
	                index[ ix + s ] += it;
	            }

	        }

	    }

	} );

	function QuadBuffer( params ){

	    this.mapping = new Float32Array([
	        -1.0,  1.0,
	        -1.0, -1.0,
	         1.0,  1.0,
	         1.0, -1.0
	    ]);

	    this.mappingIndices = new Uint16Array([
	        0, 1, 2,
	        1, 3, 2
	    ]);

	    this.mappingIndicesSize = 6;
	    this.mappingType = "v2";
	    this.mappingSize = 4;
	    this.mappingItemSize = 2;

	    MappedBuffer.call( this, params );

	}

	QuadBuffer.prototype = Object.assign( Object.create(

	    MappedBuffer.prototype ), {

	    constructor: QuadBuffer

	} );

	function SphereImpostorBuffer( position, color, radius, pickingColor, params ){

	    this.impostor = true;
	    this.count = position.length / 3;
	    this.vertexShader = "SphereImpostor.vert";
	    this.fragmentShader = "SphereImpostor.frag";

	    QuadBuffer.call( this, params );

	    this.addUniforms( {
	        "projectionMatrixInverse": { value: new Matrix4() },
	        "ortho": { value: 0.0 },
	    } );

	    this.addAttributes( {
	        "radius": { type: "f", value: null },
	    } );

	    this.setAttributes( {
	        "position": position,
	        "color": color,
	        "radius": radius,
	    } );

	    if( pickingColor ){

	        this.addAttributes( {
	            "pickingColor": { type: "c", value: null },
	        } );

	        this.setAttributes( {
	            "pickingColor": pickingColor,
	        } );

	        this.pickable = true;

	    }

	    this.makeMapping();

	}

	SphereImpostorBuffer.prototype = Object.assign( Object.create(

	    QuadBuffer.prototype ), {

	    constructor: SphereImpostorBuffer

	} );

	/**
	 * Sphere buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} position - positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} radius - radii
	 *                               [r1, r2, ..., rN]
	 * @param {Float32Array} [pickingColor] - picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParameters} params - parameters object
	 */
	function SphereBuffer( position, color, radius, pickingColor, params ){

	    var p = params || {};

	    if( !ExtensionFragDepth || p.disableImpostor ){

	        return new SphereGeometryBuffer(
	            position, color, radius, pickingColor, params
	        );

	    }else{

	        return new SphereImpostorBuffer(
	            position, color, radius, pickingColor, params
	        );

	    }

	}

	function EllipsoidGeometryBuffer( position, color, radius, majorAxis, minorAxis, pickingColor, params ){

	    var p = params || {};

	    var detail = defaults( p.sphereDetail, 2 );

	    this.updateNormals = true;

	    this.geo = new IcosahedronGeometry( 1, detail );
	    this._radius = radius;
	    this._majorAxis = majorAxis;
	    this._minorAxis = minorAxis;

	    GeometryBuffer.call( this, position, color, pickingColor, p );

	}

	EllipsoidGeometryBuffer.prototype = Object.assign( Object.create(

	    GeometryBuffer.prototype ), {

	    constructor: EllipsoidGeometryBuffer,

	    applyPositionTransform: function(){

	        var scale = new Vector3();
	        var target = new Vector3();
	        var up = new Vector3();
	        var eye = new Vector3( 0, 0, 0 );

	        return function( matrix, i, i3 ){

	            target.fromArray( this._majorAxis, i3 );
	            up.fromArray( this._minorAxis, i3 );
	            matrix.lookAt( eye, target, up );

	            scale.set( this._radius[ i ], up.length(), target.length() );
	            matrix.scale( scale );

	        };

	    }(),

	    setAttributes: function( data ){

	        if( data.majorAxis ){
	            this.majorAxis = data.majorAxis;
	        }

	        if( data.minorAxis ){
	            this._minorAxis = data.minorAxis;
	        }

	        GeometryBuffer.prototype.setAttributes.call( this, data );

	    }

	} );

	/**
	 * Ellipsoid buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} position - center positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} radius - radii
	 *                               [r1, r2, ..., rN]
	 * @param {Float32Array} majorAxis - major axis vectors, length defines radius in major direction
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} minorAxis - minor axis vectors, length defines radius in minor direction
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} [pickingColor] - picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParams} [params] - parameters object
	 */
	function EllipsoidBuffer( position, color, radius, majorAxis, minorAxis, pickingColor, params ){

	    return new EllipsoidGeometryBuffer(
	        position, color, radius, majorAxis, minorAxis, pickingColor, params
	    );

	}

	function CylinderGeometryBuffer( from, to, color, color2, radius, pickingColor, pickingColor2, params ){

	    var p = params || {};

	    var radialSegments = defaults( p.radialSegments, 10 );
	    var openEnded = defaults( p.openEnded, true );

	    this.updateNormals = true;

	    var matrix = new Matrix4().makeRotationX( Math.PI / 2  );

	    var geoCtor;
	    if( openEnded ){
	        geoCtor = CylinderGeometry;
	    }else{
	        geoCtor = CylinderBufferGeometry;
	    }

	    this.geo = new geoCtor(
	        1,  // radiusTop,
	        1,  // radiusBottom,
	        1,  // height,
	        radialSegments,  // radialSegments,
	        1,  // heightSegments,
	        openEnded  // openEnded
	    );
	    this.geo.applyMatrix( matrix );

	    var n = from.length;
	    var m = radius.length;

	    this._position = new Float32Array( n * 2 );
	    this._color = new Float32Array( n * 2 );
	    this._pickingColor = new Float32Array( n * 2 );
	    this._from = new Float32Array( n * 2 );
	    this._to = new Float32Array( n * 2 );
	    this._radius = new Float32Array( m * 2 );

	    this.__center = new Float32Array( n );

	    GeometryBuffer.call(
	        this, this._position, this._color, this._pickingColor, p
	    );

	    this.setAttributes( {
	        "position1": from,
	        "position2": to,
	        "color": color,
	        "color2": color2,
	        "radius": radius,
	        "pickingColor": pickingColor,
	        "pickingColor2": pickingColor2
	    } );

	}

	CylinderGeometryBuffer.prototype = Object.assign( Object.create(

	    GeometryBuffer.prototype ), {

	    constructor: CylinderGeometryBuffer,

	    applyPositionTransform: function(){

	        var r;
	        var scale = new Vector3();
	        var eye = new Vector3();
	        var target = new Vector3();
	        var up = new Vector3( 0, 1, 0 );

	        return function( matrix, i, i3 ){

	            eye.fromArray( this._from, i3 );
	            target.fromArray( this._to, i3 );
	            matrix.lookAt( eye, target, up );

	            r = this._radius[ i ];
	            scale.set( r, r, eye.distanceTo( target ) );
	            matrix.scale( scale );

	        };

	    }(),

	    setAttributes: function( data ){

	        var n = this._position.length / 2;
	        var m = this._radius.length / 2;
	        var geoData = {};

	        if( data.position1 && data.position2 ){
	            calculateCenterArray(
	                data.position1, data.position2, this.__center
	            );
	            calculateCenterArray(
	                data.position1, this.__center, this._position
	            );
	            calculateCenterArray(
	                this.__center, data.position2, this._position, n
	            );
	            this._from.set( data.position1 );
	            this._from.set( this.__center, n );
	            this._to.set( this.__center );
	            this._to.set( data.position2, n );
	            geoData.position = this._position;
	        }

	        if( data.color && data.color2 ){
	            this._color.set( data.color );
	            this._color.set( data.color2, n );
	            geoData.color = this._color;
	        }

	        if( data.pickingColor && data.pickingColor2 ){
	            this._pickingColor.set( data.pickingColor );
	            this._pickingColor.set( data.pickingColor2, n );
	            geoData.pickingColor = this._pickingColor;
	        }

	        if( data.radius ){
	            this._radius.set( data.radius );
	            this._radius.set( data.radius, m );
	        }

	        GeometryBuffer.prototype.setAttributes.call( this, geoData );

	    }

	} );

	function AlignedBoxBuffer( params ){

	    this.mapping = new Float32Array([
	        -1.0,  1.0, -1.0,
	        -1.0, -1.0, -1.0,
	         1.0,  1.0, -1.0,
	         1.0,  1.0,  1.0,
	         1.0, -1.0, -1.0,
	         1.0, -1.0,  1.0
	    ]);

	    this.mappingIndices = new Uint16Array([
	        0, 1, 2,
	        1, 4, 2,
	        2, 4, 3,
	        4, 5, 3
	    ]);

	    this.mappingIndicesSize = 12;
	    this.mappingType = "v3";
	    this.mappingSize = 6;
	    this.mappingItemSize = 3;

	    MappedBuffer.call( this, params );

	}

	AlignedBoxBuffer.prototype = Object.assign( Object.create(

	    MappedBuffer.prototype ), {

	    constructor: AlignedBoxBuffer

	} );

	function CylinderImpostorBuffer( from, to, color, color2, radius, pickingColor, pickingColor2, params ){

	    var p = params || {};

	    this.openEnded = defaults( p.openEnded, false );

	    this.impostor = true;
	    this.count = from.length / 3;
	    this.vertexShader = "CylinderImpostor.vert";
	    this.fragmentShader = "CylinderImpostor.frag";

	    AlignedBoxBuffer.call( this, p );

	    var modelViewMatrixInverse = new Uniform( new Matrix4() )
	        .onUpdate( function( object, camera ){
	            this.value.getInverse( object.modelViewMatrix );
	        } );

	    this.addUniforms( {
	        "modelViewMatrixInverse": modelViewMatrixInverse,
	        "ortho": { value: 0.0 },
	    } );

	    this.addAttributes( {
	        "position1": { type: "v3", value: null },
	        "position2": { type: "v3", value: null },
	        "color2": { type: "c", value: null },
	        "radius": { type: "f", value: null },
	    } );

	    this.setAttributes( {
	        "position1": from,
	        "position2": to,
	        "color": color,
	        "color2": color2,
	        "radius": radius
	    } );

	    if( pickingColor ){

	        this.addAttributes( {
	            "pickingColor": { type: "c", value: null },
	            "pickingColor2": { type: "c", value: null },
	        } );

	        this.setAttributes( {
	            "pickingColor": pickingColor,
	            "pickingColor2": pickingColor2,
	        } );

	        this.pickable = true;

	    }

	    this.makeMapping();

	}

	CylinderImpostorBuffer.prototype = Object.assign( Object.create(

	    AlignedBoxBuffer.prototype ), {

	    constructor: CylinderImpostorBuffer,

	    getMaterial: function( type ){

	        var material = Buffer.prototype.getMaterial.call( this, type );

	        if( !this.openEnded ){
	            material.defines.CAP = 1;
	        }

	        return material;

	    },

	    setAttributes: function( data ){

	        if( data && data.position1 && data.position2 ){
	            data.position = calculateCenterArray( data.position1, data.position2 );
	        }

	        AlignedBoxBuffer.prototype.setAttributes.call( this, data );

	    }

	} );

	/**
	 * Cylinder buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} from - from positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} to - to positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - from colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} color2 - to colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} radius - radii
	 *                               [r1, r2, ..., rN]
	 * @param {Float32Array} [pickingColor] - from picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} [pickingColor2] - to picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParams} [params] - parameters object
	 */
	function CylinderBuffer( from, to, color, color2, radius, pickingColor, pickingColor2, params ){

	    var p = params || {};

	    if( !ExtensionFragDepth || p.disableImpostor ){

	        return new CylinderGeometryBuffer(
	            from, to, color, color2, radius,
	            pickingColor, pickingColor2, params
	        );

	    }else{

	        return new CylinderImpostorBuffer(
	            from, to, color, color2, radius,
	            pickingColor, pickingColor2, params
	        );

	    }

	}

	function ConeGeometryBuffer( from, to, color, radius, pickingColor, params ){

	    var p = params || {};

	    var radialSegments = defaults( p.radialSegments, 60 );
	    var openEnded = defaults( p.openEnded, false );

	    this.updateNormals = true;

	    var matrix = new Matrix4().makeRotationX( -Math.PI / 2  );

	    var geoCtor;
	    if( openEnded ){
	        geoCtor = ConeGeometry;
	    }else{
	        geoCtor = ConeBufferGeometry;
	    }

	    this.geo = new geoCtor(
	        1,  // radius
	        1,  // height
	        radialSegments,  // radialSegments
	        1,  // heightSegments
	        openEnded  // openEnded
	    );
	    this.geo.applyMatrix( matrix );

	    var n = from.length;
	    var m = radius.length;

	    this._position = new Float32Array( n );
	    this._from = new Float32Array( n );
	    this._to = new Float32Array( n );
	    this._radius = new Float32Array( m );

	    // FIXME this contains a call to .setAttributes, 
	    GeometryBuffer.call(
	        this, this._position, color, pickingColor, p
	    );

	    this.setAttributes( {
	        "position1": from,
	        "position2": to,
	        "color": color,
	        "radius": radius,
	        "pickingColor": pickingColor
	    } );

	}

	ConeGeometryBuffer.prototype = Object.assign( Object.create(

	    GeometryBuffer.prototype ), {

	    constructor: ConeGeometryBuffer,

	    applyPositionTransform: function(){

	        var r;
	        var scale = new Vector3();
	        var eye = new Vector3();
	        var target = new Vector3();
	        var up = new Vector3( 0, 1, 0 );

	        return function( matrix, i, i3 ){

	            eye.fromArray( this._from, i3 );
	            target.fromArray( this._to, i3 );
	            matrix.lookAt( eye, target, up );

	            r = this._radius[ i ];
	            scale.set( r, r, eye.distanceTo( target ) );
	            matrix.scale( scale );

	        };

	    }(),

	    setAttributes: function( data ){

	        var geoData = {};

	        if( data.position1 && data.position2 ){
	            calculateCenterArray(
	                data.position1, data.position2, this._position
	            );
	            this._from.set( data.position1 );
	            this._to.set( data.position2 );
	            geoData.position = this._position;
	        }

	        if( data.color ){
	            geoData.color = data.color;
	        }

	        if( data.pickingColor ){
	            geoData.pickingColor = data.pickingColor;
	        }

	        if( data.radius ){
	            this._radius.set( data.radius );
	        }

	        GeometryBuffer.prototype.setAttributes.call( this, geoData );

	    }

	} );

	/**
	 * Cone buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} from - from positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} to - to positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} radius - radii
	 *                               [r1, r2, ..., rN]
	 * @param {Float32Array} [pickingColor] - picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParams} [params] - parameters object
	 */
	function ConeBuffer( from, to, color, radius, pickingColor, params ){

	    return new ConeGeometryBuffer(
	        from, to, color, radius, pickingColor, params
	    );

	}

	/**
	 * Arrow buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} from - from positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} to - to positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {Float32Array} radius - radii
	 *                               [r1, r2, ..., rN]
	 * @param {Float32Array} [pickingColor] - picking colors
	 *                                      [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {BufferParams} [params] - parameters object
	 */
	function ArrowBuffer( from, to, color, radius, pickingColor, params ){

	    var p = params || {};

	    var aspectRatio = defaults( p.aspectRatio, 1.5 );
	    var radialSegments = defaults( p.radialSegments, 50 );
	    var openEnded = defaults( p.openEnded, false );
	    var disableImpostor = defaults( p.disableImpostor, false );

	    var splitPosition = new Float32Array( from.length );
	    var cylinderRadius = new Float32Array( radius.length );

	    var attr = makeAttributes( {
	        from: from,
	        to: to,
	        color: color,
	        radius: radius,
	        pickingColor: pickingColor
	    } );

	    var cylinderBuffer = new CylinderBuffer(
	        attr.cylinderFrom,
	        attr.cylinderTo,
	        attr.cylinderColor,
	        attr.cylinderColor2,
	        attr.cylinderRadius,
	        attr.cylinderPickingColor,
	        attr.cylinderPickingColor2,
	        {
	            radialSegments: radialSegments,
	            openEnded: openEnded,
	            disableImpostor: disableImpostor
	        }
	    );

	    var coneBuffer = new ConeBuffer(
	        attr.coneFrom,
	        attr.coneTo,
	        attr.coneColor,
	        attr.coneRadius,
	        attr.conePickingColor,
	        {
	            radialSegments: radialSegments,
	            openEnded: openEnded,
	            disableImpostor: disableImpostor
	        }
	    );

	    function makeAttributes( data ){

	        var i, il;
	        var attr = {};

	        if( data.radius ){
	            for( i = 0, il = cylinderRadius.length; i < il; ++i ){
	                cylinderRadius[ i ] = data.radius[ i ] / aspectRatio;
	            }
	            attr.cylinderRadius = cylinderRadius;
	            attr.coneRadius = data.radius;
	        }

	        if( data.from && data.to ){
	            var vFrom = new Vector3();
	            var vTo = new Vector3();
	            var vDir = new Vector3();
	            var vSplit = new Vector3();
	            for( i = 0, il = splitPosition.length; i < il; i += 3 ){
	                vFrom.fromArray( data.from, i );
	                vTo.fromArray( data.to, i );
	                vDir.subVectors( vFrom, vTo );
	                var fullLength = vDir.length();
	                var coneLength = cylinderRadius[ i / 3 ] * aspectRatio * 2;
	                var length = Math.min( fullLength, coneLength );
	                vDir.setLength( length );
	                vSplit.copy( vTo ).add( vDir );
	                vSplit.toArray( splitPosition, i );
	            }
	            attr.cylinderFrom = data.from;
	            attr.cylinderTo = splitPosition;
	            attr.coneFrom = splitPosition;
	            attr.coneTo = data.to;
	        }

	        if( data.color ){
	            attr.cylinderColor = data.color;
	            attr.cylinderColor2 = data.color;
	            attr.coneColor = data.color;
	        }

	        if( data.pickingColor ){
	            attr.cylinderPickingColor = data.pickingColor;
	            attr.cylinderPickingColor2 = data.pickingColor;
	            attr.conePickingColor = data.pickingColor;
	        }

	        return attr;

	    }

	    this.wireframe = defaults( p.wireframe, false );

	    this.group = new Group();
	    this.wireframeGroup = new Group();
	    this.pickingGroup = new Group();

	    this.getMesh = function( picking ){

	        return new Group().add(
	            cylinderBuffer.getMesh(),
	            coneBuffer.getMesh()
	        );

	    };

	    this.getWireframeMesh = function(){

	        return new Group().add(
	            cylinderBuffer.getWireframeMesh(),
	            coneBuffer.getWireframeMesh()
	        );

	    };

	    this.getPickingMesh = function(){

	        return new Group().add(
	            cylinderBuffer.getPickingMesh(),
	            coneBuffer.getPickingMesh()
	        );

	    };

	    this.setAttributes = function( data ){

	        var attr = makeAttributes( data );

	        cylinderBuffer.setAttributes( {
	            position1: attr.cylinderFrom,
	            position2: attr.cylinderTo,
	            color: attr.cylinderColor,
	            color2: attr.cylinderColor2,
	            radius: attr.radius,
	            pickingColor: attr.cylinderPickingColor,
	            pickingColor2: attr.cylinderPickingColor2,
	        } );

	        coneBuffer.setAttributes( {
	            position1: attr.coneFrom,
	            position2: attr.coneTo,
	            color: attr.coneColor,
	            radius: attr.coneRadius.radius,
	            pickingColor: attr.conePickingColor
	        } );

	    };

	    /**
	     * Set buffer parameters
	     * @param {BufferParameters} params - buffer parameters object
	     */
	    this.setParameters = function( params ){

	        cylinderBuffer.setParameters( params );
	        coneBuffer.setParameters( params );

	        if( params && params.wireframe !== undefined ){
	            this.wireframe = params.wireframe;
	            this.setVisibility( this.visible );
	        }

	    };

	    this.setVisibility = Buffer.prototype.setVisibility;

	    this.dispose = function(){

	        cylinderBuffer.dispose();
	        coneBuffer.dispose();

	    };

	}

	/**
	 * Class for building custom shapes.
	 * @class
	 * @example
	 * var shape = new NGL.Shape( "shape", { disableImpostor: true } );
	 * shape.addSphere( [ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
	 * shape.addEllipsoid( [ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ] );
	 * shape.addCylinder( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
	 * shape.addCone( [ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5 );
	 * shape.addArrow( [ 1, 2, 7 ], [ 30, 3, 3 ], [ 1, 0, 1 ], 1.0 );
	 * var shapeComp = stage.addComponentFromObject( shape );
	 * geoComp.addRepresentation( "buffer" );
	 *
	 * @param {String} name - name
	 * @param {Object} params - parameter object
	 * @param {Integer} params.aspectRatio - arrow aspect ratio, used for cylinder radius and cone length
	 * @param {Integer} params.sphereDetail - sphere quality (icosahedron subdivisions)
	 * @param {Integer} params.radialSegments - cylinder quality (number of segments)
	 * @param {Boolean} params.disableImpostor - disable use of raycasted impostors for rendering
	 * @param {Boolean} params.openEnded - capped or not
	 */
	function Shape( name, params ){

	    this.name = defaults( name, "shape" );

	    var p = params || {};

	    var aspectRatio = defaults( p.aspectRatio, 1.5 );
	    var sphereDetail = defaults( p.sphereDetail, 2 );
	    var radialSegments = defaults( p.radialSegments, 50 );
	    var disableImpostor = defaults( p.disableImpostor, false );
	    var openEnded = defaults( p.openEnded, false );

	    var bufferList = [];

	    var spherePosition = [];
	    var sphereColor = [];
	    var sphereRadius = [];

	    var ellipsoidPosition = [];
	    var ellipsoidColor = [];
	    var ellipsoidRadius = [];
	    var ellipsoidMajorAxis = [];
	    var ellipsoidMinorAxis = [];

	    var cylinderFrom = [];
	    var cylinderTo = [];
	    var cylinderColor = [];
	    var cylinderRadius = [];

	    var coneFrom = [];
	    var coneTo = [];
	    var coneColor = [];
	    var coneRadius = [];

	    var arrowFrom = [];
	    var arrowTo = [];
	    var arrowColor = [];
	    var arrowRadius = [];

	    function addElement( elm, array ){

	        if( elm.toArray !== undefined ){
	            elm = elm.toArray();
	        }else if( elm.x !== undefined ){
	            elm = [ elm.x, elm.y, elm.z ];
	        }
	        array.push.apply( array, elm );

	    }

	    /**
	     * Add a buffer
	     * @instance
	     * @memberof Shape
	     * @param {Buffer} buffer - buffer object
	     */
	    function addBuffer( buffer ){

	        bufferList.push( buffer );

	    }

	    /**
	     * Add a mesh
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addMesh(
	     *     [ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1 ],
	     *     [ 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 ]
	     * );
	     *
	     * @param {Float32Array|Array} position - positions
	     * @param {Float32Array|Array} color - colors
	     * @param {Uint32Array|Uint16Array|Array} [index] - indices
	     * @param {Float32Array|Array} [normal] - normals
	     */
	    function addMesh( position, color, index, normal ){

	        if( Array.isArray( position ) ){
	            position = new Float32Array( position );
	        }
	        if( Array.isArray( color ) ){
	            color = new Float32Array( color );
	        }
	        if( Array.isArray( index ) ){
	            var ctor = ( position && position.length ) > 65535 ? Unit32Array : Uint16Array;
	            index = new ctor( index );
	        }
	        if( Array.isArray( normal ) ){
	            normal = new Float32Array( normal );
	        }

	        var meshBuffer = new MeshBuffer( position, color, index, normal );
	        bufferList.push( meshBuffer );

	    }

	    /**
	     * Add a sphere
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addSphere( [ 0, 0, 9 ], [ 1, 0, 0 ], 1.5 );
	     *
	     * @param {Vector3|Array} position - position vector or array
	     * @param {Color|Array} color - color object or array
	     * @param {Float} radius - radius value
	     */
	    function addSphere( position, color, radius ){

	        addElement( position, spherePosition );
	        addElement( color, sphereColor );
	        sphereRadius.push( radius );

	    }

	    /**
	     * Add an ellipsoid
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addEllipsoid( [ 6, 0, 0 ], [ 1, 0, 0 ], 1.5, [ 3, 0, 0 ], [ 0, 2, 0 ] );
	     *
	     * @param {Vector3|Array} position - position vector or array
	     * @param {Color|Array} color - color object or array
	     * @param {Float} radius - radius value
	     * @param {Vector3|Array} majorAxis - major axis vector or array
	     * @param {Vector3|Array} minorAxis - minor axis vector or array
	     */
	    function addEllipsoid( position, color, radius, majorAxis, minorAxis ){

	        addElement( position, ellipsoidPosition );
	        addElement( color, ellipsoidColor );
	        ellipsoidRadius.push( radius );
	        addElement( majorAxis, ellipsoidMajorAxis );
	        addElement( minorAxis, ellipsoidMinorAxis );

	    }

	    /**
	     * Add a cylinder
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addCylinder( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
	     *
	     * @param {Vector3|Array} from - from position vector or array
	     * @param {Vector3|Array} to - to position vector or array
	     * @param {Color|Array} color - color object or array
	     * @param {Float} radius - radius value
	     */
	    function addCylinder( from, to, color, radius ){

	        addElement( from, cylinderFrom );
	        addElement( to, cylinderTo );
	        addElement( color, cylinderColor );
	        cylinderRadius.push( radius );

	    }

	    /**
	     * Add a cone
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addCone( [ 0, 2, 7 ], [ 0, 3, 3 ], [ 1, 1, 0 ], 1.5 );
	     *
	     * @param {Vector3|Array} from - from position vector or array
	     * @param {Vector3|Array} to - to position vector or array
	     * @param {Color|Array} color - color object or array
	     * @param {Float} radius - radius value
	     */
	    function addCone( from, to, color, radius ){

	        addElement( from, coneFrom );
	        addElement( to, coneTo );
	        addElement( color, coneColor );
	        coneRadius.push( radius );

	    }

	    /**
	     * Add an arrow
	     * @instance
	     * @memberof Shape
	     * @example
	     * shape.addArrow( [ 0, 2, 7 ], [ 0, 0, 9 ], [ 1, 1, 0 ], 0.5 );
	     *
	     * @param {Vector3|Array} from - from position vector or array
	     * @param {Vector3|Array} to - to position vector or array
	     * @param {Color|Array} color - color object or array
	     * @param {Float} radius - radius value
	     */
	    function addArrow( from, to, color, radius ){

	        addElement( from, arrowFrom );
	        addElement( to, arrowTo );
	        addElement( color, arrowColor );
	        arrowRadius.push( radius );

	    }

	    function getBufferList(){

	        var buffers = [];

	        if( spherePosition.length ){
	            var sphereBuffer = new SphereBuffer(
	                new Float32Array( spherePosition ),
	                new Float32Array( sphereColor ),
	                new Float32Array( sphereRadius ),
	                undefined,  // pickingColor
	                {
	                    sphereDetail: sphereDetail,
	                    disableImpostor: disableImpostor
	                }
	            );
	            buffers.push( sphereBuffer );
	        }

	        if( ellipsoidPosition.length ){
	            var ellipsoidBuffer = new EllipsoidBuffer(
	                new Float32Array( ellipsoidPosition ),
	                new Float32Array( ellipsoidColor ),
	                new Float32Array( ellipsoidRadius ),
	                new Float32Array( ellipsoidMajorAxis ),
	                new Float32Array( ellipsoidMinorAxis ),
	                undefined,  // pickingColor
	                {
	                    sphereDetail: sphereDetail,
	                    disableImpostor: disableImpostor
	                }
	            );
	            buffers.push( ellipsoidBuffer );
	        }

	        if( cylinderFrom.length ){
	            var cylinderBuffer = new CylinderBuffer(
	                new Float32Array( cylinderFrom ),
	                new Float32Array( cylinderTo ),
	                new Float32Array( cylinderColor ),
	                new Float32Array( cylinderColor ),
	                new Float32Array( cylinderRadius ),
	                undefined,  // pickingColor
	                undefined,  // pickingColor2
	                {
	                    radialSegments: radialSegments,
	                    disableImpostor: disableImpostor,
	                    openEnded: openEnded,
	                }
	            );
	            buffers.push( cylinderBuffer );
	        }

	        if( coneFrom.length ){
	            var coneBuffer = new ConeBuffer(
	                new Float32Array( coneFrom ),
	                new Float32Array( coneTo ),
	                new Float32Array( coneColor ),
	                new Float32Array( coneRadius ),
	                undefined,  // pickingColor
	                {
	                    radialSegments: radialSegments,
	                    disableImpostor: disableImpostor,
	                    openEnded: openEnded,
	                }
	            );
	            buffers.push( coneBuffer );
	        }

	        if( arrowFrom.length ){
	            var arrowBuffer = new ArrowBuffer(
	                new Float32Array( arrowFrom ),
	                new Float32Array( arrowTo ),
	                new Float32Array( arrowColor ),
	                new Float32Array( arrowRadius ),
	                undefined,  // pickingColor
	                {
	                    aspectRatio: aspectRatio,
	                    radialSegments: radialSegments,
	                    disableImpostor: disableImpostor,
	                    openEnded: openEnded,
	                }
	            );
	            buffers.push( arrowBuffer );
	        }

	        return bufferList.concat( buffers );

	    }

	    function dispose(){

	        bufferList.forEach( function( buffer ){
	            buffer.dispose();
	        } );
	        bufferList.length = 0;

	        spherePosition.length = 0;
	        sphereColor.length = 0;
	        sphereRadius.length = 0;

	        ellipsoidPosition.length = 0;
	        ellipsoidColor.length = 0;
	        ellipsoidRadius.length = 0;
	        ellipsoidMajorAxis.length = 0;
	        ellipsoidMinorAxis.length = 0;

	        cylinderFrom.length = 0;
	        cylinderTo.length = 0;
	        cylinderColor.length = 0;
	        cylinderRadius.length = 0;

	        coneFrom.length = 0;
	        coneTo.length = 0;
	        coneColor.length = 0;
	        coneRadius.length = 0;

	        arrowFrom.length = 0;
	        arrowTo.length = 0;
	        arrowColor.length = 0;
	        arrowRadius.length = 0;

	    }

	    // API

	    this.addBuffer = addBuffer;
	    this.addMesh = addMesh;
	    this.addSphere = addSphere;
	    this.addEllipsoid = addEllipsoid;
	    this.addCylinder = addCylinder;
	    this.addCone = addCone;
	    this.addArrow = addArrow;
	    this.getBufferList = getBufferList;
	    this.dispose = dispose;

	}

	Shape.prototype.constructor = Shape;
	Shape.prototype.type = "Shape";

	/**
	 * Representation parameter object.
	 * @typedef {Object} RepresentationParameters - representation parameters
	 * @property {Integer} clipNear - position of camera near/front clipping plane
	 *                                in percent of scene bounding box
	 * @property {Boolean} flatShaded - render flat shaded
	 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
	 * @property {String} side - which triangle sides to render, "front" front-side,
	 *                            "back" back-side, "double" front- and back-side
	 * @property {Boolean} wireframe - render as wireframe
	 * @property {Integer} linewidth - width of lines (when applicable)
	 * @property {String} colorScheme - color scheme
	 * @property {String} colorScale - color scale
	 * @property {Color} colorValue - color value
	 * @property {Integer[]} colorDomain - scale value range
	 * @property {Integer} colorDomain.0 - min value
	 * @property {Integer} colorDomain.1 - max value
	 * @property {String} colorMode - color mode
	 * @property {Float} roughness - how rough the material is, between 0 and 1
	 * @property {Float} metalness - how metallic the material is, between 0 and 1
	 * @property {Color} diffuse - diffuse color for lighting
	 */


	/**
	 * Representation object
	 * @class
	 * @param {Object} object - the object to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {RepresentationParameters} params - representation parameters
	 */
	function Representation( object, viewer, params ){

	    /**
	     * @member {Viewer}
	     */
	    this.viewer = viewer;

	    /**
	     * Counter that keeps track of tasks related to the creation of
	     * the representation, including surface calculations.
	     * @member {Counter}
	     */
	    this.tasks = new Counter();

	    /**
	     * @member {Queue}
	     * @private
	     */
	    this.queue = new Queue( this.make.bind( this ) );

	    /**
	     * @member {Array}
	     * @private
	     */
	    this.bufferList = [];

	    this.init( params );

	}

	Representation.prototype = {

	    constructor: Representation,

	    type: "",

	    parameters: {

	        clipNear: {
	            type: "range", step: 1, max: 100, min: 0, buffer: true
	        },
	        flatShaded: {
	            type: "boolean", buffer: true
	        },
	        opacity: {
	            type: "range", step: 0.01, max: 1, min: 0, buffer: true
	        },
	        side: {
	            type: "select", buffer: true,
	            options: { front: "front", back: "back", double: "double" },
	        },
	        wireframe: {
	            type: "boolean", buffer: true
	        },
	        linewidth: {
	            type: "integer", max: 50, min: 1, buffer: true
	        },

	        colorScheme: {
	            type: "select", update: "color",
	            options: ColorMakerRegistry.getTypes()
	        },
	        colorScale: {
	            type: "select", update: "color",
	            options: ColorMakerRegistry.getScales()
	        },
	        colorValue: {
	            type: "color", update: "color"
	        },
	        colorDomain: {
	            type: "hidden", update: "color"
	        },
	        colorMode: {
	            type: "select", update: "color",
	            options: ColorMakerRegistry.getModes()
	        },

	        roughness: {
	            type: "range", step: 0.01, max: 1, min: 0, buffer: true
	        },
	        metalness: {
	            type: "range", step: 0.01, max: 1, min: 0, buffer: true
	        },
	        diffuse: {
	            type: "color", buffer: true
	        },

	    },

	    init: function( params ){

	        var p = params || {};

	        this.clipNear = defaults( p.clipNear, 0 );
	        this.flatShaded = defaults( p.flatShaded, false );
	        this.side = defaults( p.side, "double" );
	        this.opacity = defaults( p.opacity, 1.0 );
	        this.wireframe = defaults( p.wireframe, false );
	        this.linewidth = defaults( p.linewidth, 2 );

	        this.setColor( p.color, p );

	        this.colorScheme = defaults( p.colorScheme, "uniform" );
	        this.colorScale = defaults( p.colorScale, "" );
	        this.colorValue = defaults( p.colorValue, 0x909090 );
	        this.colorDomain = defaults( p.colorDomain, "" );
	        this.colorMode = defaults( p.colorMode, "hcl" );

	        this.visible = defaults( p.visible, true );
	        this.quality = defaults( p.quality, undefined );

	        this.roughness = defaults( p.roughness, 0.4 );
	        this.metalness = defaults( p.metalness, 0.0 );
	        this.diffuse = defaults( p.diffuse, 0xffffff );

	        // handle common parameters when applicable

	        var tp = this.parameters;

	        if( tp.sphereDetail === true ){
	            tp.sphereDetail = {
	                type: "integer", max: 3, min: 0, rebuild: "impostor"
	            };
	        }
	        if( tp.radialSegments === true ){
	            tp.radialSegments = {
	                type: "integer", max: 25, min: 5, rebuild: "impostor"
	            };
	        }
	        if( tp.openEnded === true ){
	            tp.openEnded = {
	                type: "boolean", rebuild: "impostor"
	            };
	        }
	        if( tp.disableImpostor === true ){
	            tp.disableImpostor = {
	                type: "boolean", rebuild: true
	            };
	        }

	        if( p.quality === "low" ){
	            if( tp.sphereDetail ) this.sphereDetail = 0;
	            if( tp.radialSegments ) this.radialSegments = 5;
	        }else if( p.quality === "medium" ){
	            if( tp.sphereDetail ) this.sphereDetail = 1;
	            if( tp.radialSegments ) this.radialSegments = 10;
	        }else if( p.quality === "high" ){
	            if( tp.sphereDetail ) this.sphereDetail = 2;
	            if( tp.radialSegments ) this.radialSegments = 20;
	        }else{
	            if( tp.sphereDetail ){
	                this.sphereDetail = defaults( p.sphereDetail, 1 );
	            }
	            if( tp.radialSegments ){
	                this.radialSegments = defaults( p.radialSegments, 10 );
	            }
	        }

	        if( tp.openEnded ){
	            this.openEnded = defaults( p.openEnded, true );
	        }

	        if( tp.disableImpostor ){
	            this.disableImpostor = defaults( p.disableImpostor, false );
	        }

	    },

	    getColorParams: function(){

	        return {

	            scheme: this.colorScheme,
	            scale: this.colorScale,
	            value: this.colorValue,
	            domain: this.colorDomain,
	            mode: this.colorMode,

	        };

	    },

	    getBufferParams: function( p ){

	        return Object.assign( {

	            clipNear: this.clipNear,
	            flatShaded: this.flatShaded,
	            opacity: this.opacity,
	            side: this.side,
	            wireframe: this.wireframe,
	            linewidth: this.linewidth,

	            roughness: this.roughness,
	            metalness: this.metalness,
	            diffuse: this.diffuse,

	        }, p );

	    },

	    setColor: function( value, p ){

	        var types = Object.keys( ColorMakerRegistry.getTypes() );

	        if( types.indexOf( value ) !== -1 ){

	            if( p ){
	                p.colorScheme = value;
	            }else{
	                this.setParameters( { colorScheme: value } );
	            }

	        }else if( value !== undefined ){

	            value = new Color( value ).getHex();
	            if( p ){
	                p.colorScheme = "uniform";
	                p.colorValue = value;
	            }else{
	                this.setParameters( {
	                    colorScheme: "uniform", colorValue: value
	                } );
	            }

	        }

	        return this;

	    },

	    prepare: false,

	    create: function(){

	        // this.bufferList.length = 0;

	    },

	    update: function(){

	        this.build();

	    },

	    build: function( params ){

	        if( !this.prepare ){
	            if( !params ){
	                params = this.getParameters();
	                delete params.quality;
	            }
	            this.tasks.increment();
	            this.make( params, function(){} );
	            return;
	        }

	        // don't let tasks accumulate
	        if( this.queue.length() > 0 ){

	            this.tasks.change( 1 - this.queue.length() );
	            this.queue.kill();

	        }else{

	            this.tasks.increment();

	        }

	        if( !params ){
	            params = this.getParameters();
	            delete params.quality;
	        }

	        this.queue.push( params );

	    },

	    make: function( params, callback ){

	        if( exports.Debug ) Log$1.time( "Representation.make " + this.type );

	        if( params && !params.__update ){
	            this.init( params );
	        }

	        var _make = function(){

	            if( params.__update ){
	                this.update( params.__update );
	                this.viewer.requestRender();
	                this.tasks.decrement();
	                callback();
	            }else{
	                this.clear();
	                this.create();
	                if( !this.manualAttach && !this.disposed ){
	                    if( exports.Debug ) Log$1.time( "Representation.attach " + this.type );
	                    this.attach( function(){
	                        if( exports.Debug ) Log$1.timeEnd( "Representation.attach " + this.type );
	                        this.tasks.decrement();
	                        callback();
	                    }.bind( this ) );
	                }
	            }

	            if( exports.Debug ) Log$1.timeEnd( "Representation.make " + this.type );

	        }.bind( this );

	        if( this.prepare ){
	            this.prepare( _make );
	        }else{
	            _make();
	        }

	    },

	    attach: function( callback ){

	        this.setVisibility( this.visible );

	        callback();

	    },

	    /**
	     * Set the visibility of the representation
	     * @param {Boolean} value - visibility flag
	     * @param {Boolean} [noRenderRequest] - whether or not to request a re-render from the viewer
	     * @return {Representation} this object
	     */
	    setVisibility: function( value, noRenderRequest ){

	        this.visible = value;

	        this.bufferList.forEach( function( buffer ){

	            buffer.setVisibility( value );

	        } );

	        if( !noRenderRequest ) this.viewer.requestRender();

	        return this;

	    },

	    /**
	     * Set the visibility of the representation
	     * @param {RepresentationParameters} params - parameters object
	     * @param {Object} [what] - buffer data attributes to be updated,
	     *                        note that this needs to be implemented in the
	     *                        derived classes. Generally it allows more
	     *                        fine-grained control over updating than
	     *                        forcing a rebuild.
	     * @param {Boolean} what.position - update position data
	     * @param {Boolean} what.color - update color data
	     * @param {Boolean} [rebuild] - whether or not to rebuild the representation
	     * @return {Representation} this object
	     */
	    setParameters: function( params, what, rebuild ){

	        var p = params || {};
	        var tp = this.parameters;

	        what = what || {};
	        rebuild = rebuild || false;

	        var bufferParams = {};

	        for( var name in p ){

	            if( p[ name ] === undefined ) continue;
	            if( tp[ name ] === undefined ) continue;

	            if( tp[ name ].int ) p[ name ] = parseInt( p[ name ] );
	            if( tp[ name ].float ) p[ name ] = parseFloat( p[ name ] );

	            // no value change
	            if( p[ name ] === this[ name ] ) continue;

	            this[ name ] = p[ name ];

	            // buffer param
	            if( tp[ name ].buffer ){
	                if( tp[ name ].buffer === true ){
	                    bufferParams[ name ] = p[ name ];
	                }else{
	                    bufferParams[ tp[ name ].buffer ] = p[ name ];
	                }
	            }

	            // mark for update
	            if( tp[ name ].update ){
	                what[ tp[ name ].update ] = true;
	            }

	            // mark for rebuild
	            if( tp[ name ].rebuild &&
	                !( tp[ name ].rebuild === "impostor" &&
	                    ExtensionFragDepth && !this.disableImpostor )
	            ){
	                rebuild = true;
	            }

	        }

	        //

	        if( rebuild ){

	            this.build();

	        }else{

	            this.bufferList.forEach( function( buffer ){
	                buffer.setParameters( bufferParams );
	            } );

	            if( Object.keys( what ).length ){
	                this.update( what );  // update buffer attribute
	            }

	            this.viewer.requestRender();

	        }

	        return this;

	    },

	    getParameters: function(){

	        var params = {
	            visible: this.visible,
	            quality: this.quality
	        };

	        Object.keys( this.parameters ).forEach( function( name ){
	            if( this.parameters.type === "button" ){
	                params[ name ] = this[ name ].bind( this );
	            }else{
	                params[ name ] = this[ name ];
	            }
	        }, this );

	        return params;

	    },

	    clear: function(){

	        this.bufferList.forEach( function( buffer ){

	            this.viewer.remove( buffer );
	            buffer.dispose();

	        }, this );

	        this.bufferList.length = 0;

	        this.viewer.requestRender();

	    },

	    dispose: function(){

	        this.disposed = true;
	        this.queue.kill();
	        this.tasks.dispose();
	        this.clear();

	    }

	};

	/**
	 * Representation for showing buffer objects
	 * @class
	 * @extends Representation
	 * @param {SphereBuffer|CylinderBuffer} buffer - a buffer object
	 * @param {Viewer} viewer - a viewer object
	 * @param {RepresentationParameters} params- representation parameters
	 */
	function BufferRepresentation( buffer, viewer, params ){

	    if( !Array.isArray( buffer ) ){
	        buffer = [ buffer ];
	    }

	    Representation.call( this, buffer, viewer, params );

	    this.buffer = buffer;

	    this.build();

	}

	BufferRepresentation.prototype = Object.assign( Object.create(

	    Representation.prototype ), {

	    constructor: BufferRepresentation,

	    type: "buffer",

	    parameters: Object.assign( {

	    }, Representation.prototype.parameters, {

	        colorScheme: null,
	        colorScale: null,
	        colorValue: null,
	        colorDomain: null,
	        colorMode: null

	    } ),

	    create: function(){

	        this.bufferList.push.apply( this.bufferList, this.buffer );

	    },

	    attach: function( callback ){

	        this.bufferList.forEach( function( buffer ){

	            this.viewer.add( buffer );
	            buffer.setParameters( this.getBufferParams() );

	        }, this );

	        this.setVisibility( this.visible );

	        callback();

	    }

	} );

	function SurfaceBuffer(){

	    MeshBuffer.apply( this, arguments );

	}

	SurfaceBuffer.prototype = Object.assign( Object.create(

	    MeshBuffer.prototype ), {

	    constructor: SurfaceBuffer,

	    type: "surface"

	} );

	function DoubleSidedBuffer( buffer ){

	    this.size = buffer.size;
	    this.side = buffer.side;
	    this.wireframe = buffer.wireframe;
	    this.visible = buffer.visible;
	    this.geometry = buffer.geometry;
	    this.pickable = buffer.pickable;
	    this.background = buffer.background;

	    this.group = new Group();
	    this.wireframeGroup = new Group();
	    this.pickingGroup = new Group();

	    var frontMeshes = [];
	    var backMeshes = [];

	    var frontBuffer = buffer;
	    var backBuffer = new buffer.constructor();

	    frontBuffer.makeMaterial();
	    backBuffer.makeMaterial();

	    backBuffer.geometry = buffer.geometry;
	    backBuffer.wireframeGeometry = buffer.wireframeGeometry;
	    backBuffer.size = buffer.size;
	    backBuffer.attributeSize = buffer.attributeSize;
	    backBuffer.pickable = buffer.pickable;
	    backBuffer.setParameters( buffer.getParameters() );
	    backBuffer.updateShader();

	    frontBuffer.setParameters( {
	        side: "front"
	    } );
	    backBuffer.setParameters( {
	        side: "back",
	        opacity: backBuffer.opacity
	    } );

	    this.getMesh = function( picking ){

	        var front, back;

	        if( picking ){
	            back = backBuffer.getPickingMesh();
	            front = frontBuffer.getPickingMesh();
	        }else{
	            back = backBuffer.getMesh();
	            front = frontBuffer.getMesh();
	        }

	        frontMeshes.push( front );
	        backMeshes.push( back );

	        this.setParameters( { side: this.side } );

	        return new Group().add( back, front );

	    };

	    this.getWireframeMesh = function(){

	        return buffer.getWireframeMesh();

	    };

	    this.getPickingMesh = function(){

	        return this.getMesh( true );

	    };

	    this.setAttributes = function( data ){

	        buffer.setAttributes( data );

	    };

	    this.setParameters = function( data ){

	        data = Object.assign( {}, data );

	        if( data.side === "front" ){

	            frontMeshes.forEach( function( m ){ m.visible = true; } );
	            backMeshes.forEach( function( m ){ m.visible = false; } );

	        }else if( data.side === "back" ){

	            frontMeshes.forEach( function( m ){ m.visible = false; } );
	            backMeshes.forEach( function( m ){ m.visible = true; } );

	        }else if( data.side === "double" ){

	            frontMeshes.forEach( function( m ){ m.visible = true; } );
	            backMeshes.forEach( function( m ){ m.visible = true; } );

	        }

	        if( data.side !== undefined ){
	            this.side = data.side;
	        }
	        delete data.side;

	        frontBuffer.setParameters( data );

	        if( data.wireframe !== undefined ){
	            this.wireframe = data.wireframe;
	            this.setVisibility( this.visible );
	        }
	        delete data.wireframe;

	        backBuffer.setParameters( data );

	    };

	    this.setVisibility = Buffer.prototype.setVisibility;

	    this.dispose = function(){

	        frontBuffer.dispose();
	        backBuffer.dispose();

	    };

	}

	DoubleSidedBuffer.prototype.constructor = DoubleSidedBuffer;

	function SurfaceRepresentation( surface, viewer, params ){

	    Representation.call( this, surface, viewer, params );

	    if( surface instanceof Volume ){
	        this.surface = undefined;
	        this.volume = surface;
	    }else{
	        this.surface = surface;
	        this.volume = undefined;
	    }

	    this.boxCenter = new Vector3();
	    this.__boxCenter = new Vector3();
	    this.box = new Box3();
	    this.__box = new Box3();

	    this.setBox = ( function(){
	        var position = new Vector3();
	        return function(){
	            var target = viewer.controls.target;
	            var group = viewer.rotationGroup.position;
	            position.copy( group ).negate().add( target );
	            if( !position.equals( this.boxCenter ) ){
	                this.setParameters( { "boxCenter": position } );
	            }
	        }.bind( this );
	    }.bind( this ) )();

	    this.viewer.signals.orientationChanged.add(
	        this.setBox
	    );

	    this.build();

	}

	SurfaceRepresentation.prototype = Object.assign( Object.create(

	    Representation.prototype ), {

	    constructor: SurfaceRepresentation,

	    type: "surface",

	    parameters: Object.assign( {

	        isolevelType: {
	            type: "select", options: {
	                "value": "value", "sigma": "sigma"
	            }
	        },
	        isolevel: {
	            type: "number", precision: 2, max: 1000, min: -1000
	        },
	        smooth: {
	            type: "integer", precision: 1, max: 10, min: 0
	        },
	        background: {
	            type: "boolean", rebuild: true  // FIXME
	        },
	        opaqueBack: {
	            type: "boolean", buffer: true
	        },
	        boxSize: {
	            type: "integer", precision: 1, max: 100, min: 0
	        },
	        useWorker: {
	            type: "boolean", rebuild: true
	        }

	    }, Representation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "uniform" );
	        p.colorValue = defaults( p.colorValue, 0xDDDDDD );

	        this.isolevelType  = defaults( p.isolevelType, "sigma" );
	        this.isolevel = defaults( p.isolevel, 2.0 );
	        this.smooth = defaults( p.smooth, 0 );
	        this.background = defaults( p.background, false );
	        this.opaqueBack = defaults( p.opaqueBack, true );
	        this.boxSize = defaults( p.boxSize, 0 );
	        this.useWorker = defaults( p.useWorker, true );

	        Representation.prototype.init.call( this, p );

	    },

	    attach: function( callback ){

	        this.bufferList.forEach( function( buffer ){

	            this.viewer.add( buffer );

	        }, this );

	        this.setVisibility( this.visible );

	        callback();

	    },

	    prepare: function( callback ){

	        if( this.volume ){

	            var isolevel;

	            if( this.isolevelType === "sigma" ){
	                isolevel = this.volume.getValueForSigma( this.isolevel );
	            }else{
	                isolevel = this.isolevel;
	            }

	            if( !this.surface ||
	                this.__isolevel !== isolevel ||
	                this.__smooth !== this.smooth ||
	                this.__boxSize !== this.boxSize ||
	                ( this.boxSize > 0 &&
	                    !this.__boxCenter.equals( this.boxCenter ) )
	            ){
	                this.__isolevel = isolevel;
	                this.__smooth = this.smooth;
	                this.__boxSize = this.boxSize;
	                this.__boxCenter.copy( this.boxCenter );
	                this.__box.copy( this.box );

	                var onSurfaceFinish = function( surface ){
	                    this.surface = surface;
	                    callback();
	                }.bind( this );

	                if( this.useWorker ){
	                    this.volume.getSurfaceWorker(
	                        isolevel, this.smooth, this.boxCenter, this.boxSize,
	                        onSurfaceFinish
	                    );
	                }else{
	                    onSurfaceFinish(
	                        this.volume.getSurface(
	                            isolevel, this.smooth, this.boxCenter, this.boxSize
	                        )
	                    );
	                }
	            }else{
	                callback();
	            }

	        }else{
	            callback();
	        }

	    },

	    create: function(){

	        var surfaceBuffer = new SurfaceBuffer(
	            this.surface.getPosition(),
	            this.surface.getColor( this.getColorParams() ),
	            this.surface.getIndex(),
	            this.surface.getNormal(),
	            undefined,  // this.surface.getPickingColor( this.getColorParams() ),
	            this.getBufferParams( {
	                background: this.background,
	                opaqueBack: this.opaqueBack,
	                dullInterior: false,
	            } )
	        );
	        var doubleSidedBuffer = new DoubleSidedBuffer( surfaceBuffer );

	        this.bufferList.push( doubleSidedBuffer );

	    },

	    update: function( what ){

	        if( this.bufferList.length === 0 ) return;

	        what = what || {};

	        var surfaceData = {};

	        if( what.position ){
	            surfaceData.position = this.surface.getPosition();
	        }

	        if( what.color ){
	            surfaceData.color = this.surface.getColor(
	                this.getColorParams()
	            );
	        }

	        if( what.index ){
	            surfaceData.index = this.surface.getIndex();
	        }

	        if( what.normal ){
	            surfaceData.normal = this.surface.getNormal();
	        }

	        this.bufferList.forEach( function( buffer ){
	            buffer.setAttributes( surfaceData );
	        } );

	    },

	    setParameters: function( params, what, rebuild ){

	        if( params && params.isolevelType !== undefined &&
	            this.volume
	        ){

	            if( this.isolevelType === "value" &&
	                params.isolevelType === "sigma"
	            ){

	                this.isolevel = this.volume.getSigmaForValue(
	                    this.isolevel
	                );

	            }else if( this.isolevelType === "sigma" &&
	                params.isolevelType === "value"
	            ){

	                this.isolevel = this.volume.getValueForSigma(
	                    this.isolevel
	                );

	            }

	            this.isolevelType = params.isolevelType;

	        }

	        if( params && params.boxCenter ){
	            this.boxCenter.copy( params.boxCenter );
	            delete params.boxCenter;
	        }

	        Representation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        if( this.volume ){
	            this.volume.getBox( this.boxCenter, this.boxSize, this.box );
	        }

	        if( this.surface && (
	                params.isolevel !== undefined ||
	                params.smooth !== undefined ||
	                params.boxSize !== undefined ||
	                ( this.boxSize > 0 &&
	                    !this.__box.equals( this.box ) )
	            )
	        ){
	            this.build( {
	                "__update": {
	                    "position": true,
	                    "color": true,
	                    "index": true,
	                    "normal": true
	                }
	            } );
	        }

	        return this;

	    },

	    dispose: function(){

	        this.viewer.signals.orientationChanged.remove(
	            this.setBox
	        );

	        Representation.prototype.dispose.call( this );

	    }

	} );

	function makePointTexture( params ){

	    var p = Object.assign( {}, params );

	    var width = defaults( p.width, 256 );
	    var height = defaults( p.height, 256 );
	    var center = [ width / 2, height / 2 ];
	    var radius = Math.min( width / 2, height / 2 );
	    var delta = defaults( p.delta, 1 / ( radius + 1 ) ) * radius;

	    //

	    function clamp( value, min, max ){
	        return Math.min( Math.max( value, min ), max );
	    }

	    function distance( x0, y0, x1, y1 ){
	        var dx = x1 - x0, dy = y1 - y0;
	        return Math.sqrt( dx * dx + dy * dy );
	    }

	    function smoothStep( edge0, edge1, x ){
	        // Scale, bias and saturate x to 0..1 range
	        x = clamp( ( x - edge0 ) / ( edge1 - edge0 ), 0, 1 );
	        // Evaluate polynomial
	        return x * x * ( 3 - 2 * x );
	    }

	    //

	    var x = 0;
	    var y = 0;
	    var data = new Uint8Array( width * height * 4 );

	    for ( var i = 0, il = data.length; i < il; i += 4 ) {

	        var dist = distance( x, y, center[ 0 ], center[ 1 ] );
	        var value = 1 - smoothStep( radius - delta, radius, dist );

	        data[ i     ] = value * 255;
	        data[ i + 1 ] = value * 255;
	        data[ i + 2 ] = value * 255;
	        data[ i + 3 ] = value * 255;

	        if( ++x === width ){
	            x = 0;
	            y++;
	        }

	    }

	    var tex = new DataTexture( data, width, height );
	    tex.needsUpdate = true;

	    return tex;

	}


	function PointBuffer( position, color, params ){

	    var p = params || {};

	    this.point = true;
	    this.pointSize = defaults( p.pointSize, 1 );
	    this.sizeAttenuation = defaults( p.sizeAttenuation, true );
	    this.sortParticles = defaults( p.sortParticles, false );
	    this.alphaTest = defaults( p.alphaTest, 0.5 );
	    this.useTexture = defaults( p.useTexture, false );
	    this.forceTransparent = defaults( p.forceTransparent, false );
	    this.edgeBleach = defaults( p.edgeBleach, 0.0 );

	    this.size = position.length / 3;
	    this.attributeSize = this.size;
	    this.vertexShader = 'Point.vert';
	    this.fragmentShader = 'Point.frag';

	    Buffer.call( this, position, color, undefined, undefined, p );

	    this.addUniforms( {
	        "size": { value: this.pointSize },
	        "canvasHeight": { value: 1.0 },
	        "pixelRatio": { value: 1.0 },
	        "map": { value: null },
	    } );

	}

	PointBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: PointBuffer,

	    parameters: Object.assign( {

	        pointSize: { uniform: "size" },
	        sizeAttenuation: { updateShader: true },
	        sortParticles: {},
	        alphaTest: { updateShader: true },
	        useTexture: { updateShader: true },
	        forceTransparent: {},
	        edgeBleach: { uniform: true },

	    }, Buffer.prototype.parameters ),

	    makeMaterial: function(){

	        Buffer.prototype.makeMaterial.call( this );

	        this.makeTexture();

	        this.material.uniforms.map.value = this.tex;
	        this.material.blending = NormalBlending;
	        this.material.needsUpdate = true;

	        this.wireframeMaterial.uniforms.map.value = this.tex;
	        this.wireframeMaterial.blending = NormalBlending;
	        this.wireframeMaterial.needsUpdate = true;

	        this.pickingMaterial.uniforms.map.value = this.tex;
	        this.pickingMaterial.blending = NormalBlending;
	        this.pickingMaterial.needsUpdate = true;

	    },

	    makeTexture: function(){

	        if( this.tex ) this.tex.dispose();
	        this.tex = makePointTexture( { delta: this.edgeBleach } );

	    },

	    getDefines: function( type ){

	        var defines = Buffer.prototype.getDefines.call( this, type );

	        if( this.sizeAttenuation ){
	            defines.USE_SIZEATTENUATION = 1;
	        }

	        if( this.useTexture ){
	            defines.USE_MAP = 1;
	        }

	        if( this.alphaTest > 0 && this.alphaTest <= 1 ){
	            defines.ALPHATEST = this.alphaTest.toPrecision( 2 );
	        }

	        return defines;

	    },

	    setUniforms: function( data ){

	        if( data && data.edgeBleach !== undefined ){

	            this.makeTexture();
	            data.map = this.tex;

	        }

	        Buffer.prototype.setUniforms.call( this, data );

	    },

	    dispose: function(){

	        Buffer.prototype.dispose.call( this );

	        if( this.tex ) this.tex.dispose();

	    }

	} );

	function DotRepresentation( surface, viewer, params ){

	    Representation.call( this, surface, viewer, params );

	    if( surface instanceof Volume ){
	        this.surface = undefined;
	        this.volume = surface;
	    }else{
	        this.surface = surface;
	        this.volume = undefined;
	    }

	    this.build();

	}

	DotRepresentation.prototype = Object.assign( Object.create(

	    Representation.prototype ), {

	    constructor: DotRepresentation,

	    type: "dot",

	    parameters: Object.assign( {

	        thresholdType: {
	            type: "select", rebuild: true, options: {
	                "value": "value", "sigma": "sigma"
	            }
	        },
	        thresholdMin: {
	            type: "number", precision: 3, max: Infinity, min: -Infinity, rebuild: true
	        },
	        thresholdMax: {
	            type: "number", precision: 3, max: Infinity, min: -Infinity, rebuild: true
	        },
	        thresholdOut: {
	            type: "boolean", rebuild: true
	        },
	        dotType: {
	            type: "select", rebuild: true, options: {
	                "": "",
	                "sphere": "sphere",
	                "point": "point"
	            }
	        },
	        radiusType: {
	            type: "select", options: {
	                "": "",
	                "value": "value",
	                "abs-value": "abs-value",
	                "value-min": "value-min",
	                "deviation": "deviation",
	                "size": "size"
	            }
	        },
	        radius: {
	            type: "number", precision: 3, max: 10.0, min: 0.001, property: "size"
	        },
	        scale: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        sphereDetail: true,
	        disableImpostor: true,

	        pointSize: {
	            type: "number", precision: 1, max: 100, min: 0, buffer: true
	        },
	        sizeAttenuation: {
	            type: "boolean", buffer: true
	        },
	        sortParticles: {
	            type: "boolean", rebuild: true
	        },
	        useTexture: {
	            type: "boolean", buffer: true
	        },
	        alphaTest: {
	            type: "range", step: 0.001, max: 1, min: 0, buffer: true
	        },
	        forceTransparent: {
	            type: "boolean", buffer: true
	        },
	        edgeBleach: {
	            type: "range", step: 0.001, max: 1, min: 0, buffer: true
	        },

	    }, Representation.prototype.parameters, {

	        colorScheme: {
	            type: "select", update: "color", options: {
	                "": "",
	                "value": "value",
	                "uniform": "uniform",
	                // "value-min": "value-min",
	                // "deviation": "deviation",
	                // "size": "size"
	            }
	        },

	    } ),

	    defaultSize: 0.1,

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "uniform" );
	        p.colorValue = defaults( p.colorValue, 0xDDDDDD );

	        this.thresholdType = defaults( p.thresholdType, "sigma" );
	        this.thresholdMin = defaults( p.thresholdMin, 2.0 );
	        this.thresholdMax = defaults( p.thresholdMax, Infinity );
	        this.thresholdOut = defaults( p.thresholdOut, false );
	        this.dotType = defaults( p.dotType, "point" );
	        this.radius = defaults( p.radius, 0.1 );
	        this.scale = defaults( p.scale, 1.0 );

	        this.pointSize = defaults( p.pointSize, 1 );
	        this.sizeAttenuation = defaults( p.sizeAttenuation, true );
	        this.sortParticles = defaults( p.sortParticles, false );
	        this.useTexture = defaults( p.useTexture, false );
	        this.alphaTest = defaults( p.alphaTest, 0.5 );
	        this.forceTransparent = defaults( p.forceTransparent, false );
	        this.edgeBleach = defaults( p.edgeBleach, 0.0 );

	        Representation.prototype.init.call( this, p );

	    },

	    attach: function( callback ){

	        this.bufferList.forEach( function( buffer ){

	            this.viewer.add( buffer );

	        }, this );

	        this.setVisibility( this.visible );

	        callback();

	    },

	    create: function(){

	        var position, color, size, pickingColor;

	        if( this.volume ){

	            var volume = this.volume;
	            var thresholdMin, thresholdMax;

	            if( this.thresholdType === "sigma" ){
	                thresholdMin = volume.getValueForSigma( this.thresholdMin );
	                thresholdMax = volume.getValueForSigma( this.thresholdMax );
	            }else{
	                thresholdMin = this.thresholdMin;
	                thresholdMax = this.thresholdMax;
	            }
	            volume.filterData( thresholdMin, thresholdMax, this.thresholdOut );

	            position = volume.getDataPosition();
	            color = volume.getDataColor( this.getColorParams() );
	            size = volume.getDataSize( this.radius, this.scale );
	            pickingColor = volume.getPickingDataColor( this.getColorParams() );

	        }else{

	            var surface = this.surface;
	            position = surface.getPosition();
	            color = surface.getColor( this.getColorParams() );
	            size = surface.getSize( this.radius, this.scale );
	            pickingColor = surface.getPickingColor( this.getColorParams() );

	        }

	        if( this.dotType === "sphere" ){

	            this.dotBuffer = new SphereBuffer(
	                position,
	                color,
	                size,
	                pickingColor,
	                this.getBufferParams( {
	                    sphereDetail: this.sphereDetail,
	                    disableImpostor: this.disableImpostor,
	                    dullInterior: false
	                } )
	            );

	        }else{

	            this.dotBuffer = new PointBuffer(
	                position,
	                color,
	                this.getBufferParams( {
	                    pointSize: this.pointSize,
	                    sizeAttenuation: this.sizeAttenuation,
	                    sortParticles: this.sortParticles,
	                    useTexture: this.useTexture,
	                    alphaTest: this.alphaTest,
	                    forceTransparent: this.forceTransparent,
	                    edgeBleach: this.edgeBleach
	                } )
	            );

	        }

	        this.bufferList.push( this.dotBuffer );

	    },

	    update: function( what ){

	        if( this.bufferList.length === 0 ) return;

	        what = what || {};

	        var dotData = {};

	        if( what.color ){

	            if( this.volume ){

	                dotData.color = this.volume.getDataColor(
	                    this.getColorParams()
	                );

	            }else{

	                dotData.color = this.surface.getColor(
	                    this.getColorParams()
	                );

	            }

	        }

	        if( this.dotType === "sphere" && ( what.radius || what.scale ) ){

	            if( this.volume ){

	                dotData.radius = this.volume.getDataSize(
	                    this.radius, this.scale
	                );

	            }else{

	                dotData.radius = this.surface.getSize(
	                    this.radius, this.scale
	                );

	            }

	        }

	        this.dotBuffer.setAttributes( dotData );

	    },

	    setParameters: function( params, what, rebuild ){

	        what = what || {};

	        if( params && params.thresholdType !== undefined &&
	            this.volume instanceof Volume
	        ){

	            if( this.thresholdType === "value" &&
	                params.thresholdType === "sigma"
	            ){

	                this.thresholdMin = this.volume.getSigmaForValue(
	                    this.thresholdMin
	                );
	                this.thresholdMax = this.volume.getSigmaForValue(
	                    this.thresholdMax
	                );

	            }else if( this.thresholdType === "sigma" &&
	                params.thresholdType === "value"
	            ){

	                this.thresholdMin = this.volume.getValueForSigma(
	                    this.thresholdMin
	                );
	                this.thresholdMax = this.volume.getValueForSigma(
	                    this.thresholdMax
	                );

	            }

	            this.thresholdType = params.thresholdType;

	        }

	        if( params && params.radiusType !== undefined ){

	            if( params.radiusType === "radius" ){
	                this.radius = this.defaultSize;
	            }else{
	                this.radius = params.radiusType;
	            }
	            what.radius = true;
	            if( this.dotType === "sphere" &&
	                ( !ExtensionFragDepth || this.disableImpostor )
	            ){
	                rebuild = true;
	            }

	        }

	        if( params && params.radius !== undefined ){

	            what.radius = true;
	            if( this.dotType === "sphere" &&
	                ( !ExtensionFragDepth || this.disableImpostor )
	            ){
	                rebuild = true;
	            }

	        }

	        if( params && params.scale !== undefined ){

	            what.scale = true;
	            if( this.dotType === "sphere" &&
	                ( !ExtensionFragDepth || this.disableImpostor )
	            ){
	                rebuild = true;
	            }

	        }

	        Representation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );

	/**
	 * Structure representation parameter object.
	 * @typedef {Object} StructureRepresentationParameters - structure representation parameters
	 * @mixes RepresentationParameters
	 *
	 * @property {String} radiusType - A list of possible sources of the radius used for rendering the representation. The radius can be based on the *vdW radius*, the *covalent radius* or the *B-factor* value of the corresponding atom. Additionally the radius can be based on the *secondary structure*. Alternatively, when set to *size*, the value from the *radius* parameter is used for all atoms.
	 * @property {Float} radius - A number providing a fixed radius used for rendering the representation.
	 * @property {Float} scale - A number that scales the value defined by the *radius* or the *radiusType* parameter.
	 * @property {String} assembly - name of an assembly object. Included are the asymmetric unit (*AU*) corresponding to the coordinates given in the structure file, biological assemblies from *PDB*, *mmCIF* or *MMTF* files (*BU1*, *BU2*, ...), a filled (crystallographic) unitcell of a given space group (*UNITCELL*), a supercell consisting of a center unitcell and its 26 direct neighbors (*SUPERCELL*). Set to *default* to use the default asemmbly of the structure object.
	 */


	/**
	 * Structure representation object
	 * @class
	 * @extends Representation
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {StructureRepresentationParameters} params - structure representation parameters
	 */
	function StructureRepresentation( structure, viewer, params ){

	    var p = params || {};

	    /**
	     * @member {Selection}
	     * @private
	     */
	    this.selection = new Selection( p.sele );

	    /**
	     * @member {Array}
	     * @private
	     */
	    this.dataList = [];

	    /**
	     * @member {Structure}
	     */
	    this.structure = structure;

	    /**
	     * @member {StructureView}
	     */
	    this.structureView = this.structure.getView( this.selection );

	    Representation.call( this, structure, viewer, p );

	    if( structure.biomolDict ){
	        var biomolOptions = {
	            "default": "default",
	            "": ( structure.unitcell ? "AU" : "FULL" )
	        };
	        Object.keys( structure.biomolDict ).forEach( function( k ){
	            biomolOptions[ k ] = k;
	        } );
	        this.parameters.assembly = {
	            type: "select",
	            options: biomolOptions,
	            rebuild: true
	        };
	    }else{
	        this.parameters.assembly = null;
	    }

	    // must come after structureView to ensure selection change signals
	    // have already updated the structureView
	    this.selection.signals.stringChanged.add( function(){
	        this.build();
	    }.bind( this ) );

	    this.build();

	}

	StructureRepresentation.prototype = Object.assign( Object.create(

	    Representation.prototype ), {

	    constructor: StructureRepresentation,

	    type: "structure",

	    parameters: Object.assign( {

	        radiusType: {
	            type: "select", options: RadiusFactory.types
	        },
	        radius: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        scale: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        assembly: null

	    }, Representation.prototype.parameters ),

	    defaultScale: {
	        "vdw": 1.0,
	        "covalent": 1.0,
	        "bfactor": 0.01,
	        "sstruc": 1.0
	    },

	    defaultSize: 1.0,

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "element" );

	        this.radius = defaults( p.radius, "vdw" );
	        this.scale = defaults( p.scale, 1.0 );
	        this.assembly = defaults( p.assembly, "default" );
	        this.defaultAssembly = defaults( p.defaultAssembly, "" );

	        Representation.prototype.init.call( this, p );

	    },

	    getAssembly: function(){

	        var name = this.assembly === "default" ? this.defaultAssembly : this.assembly;
	        return this.structure.biomolDict[ name ];

	    },

	    create: function(){

	        if( this.structureView.atomCount === 0 ) return;

	        var assembly = this.getAssembly();

	        if( assembly ){
	            assembly.partList.forEach( function( part, i ){
	                var sview = part.getView( this.structureView );
	                if( sview.atomCount === 0 ) return;
	                var data = this.createData( sview, i );
	                if( data ){
	                    data.sview = sview;
	                    data.instanceList = part.getInstanceList();
	                    this.dataList.push( data );
	                }
	            }, this );
	        }else{
	            var data = this.createData( this.structureView, 0 );
	            if( data ){
	                data.sview = this.structureView;
	                this.dataList.push( data );
	            }
	        }

	    },

	    createData: function( sview ){

	        console.error( "createData not implemented" );

	    },

	    update: function( what ){

	        this.dataList.forEach( function( data ){
	            if( data.bufferList.length > 0 ){
	                this.updateData( what, data );
	            }
	        }, this );

	    },

	    updateData: function( what, data ){

	        console.error( "updateData not implemented" );

	    },

	    getColorParams: function(){

	        var p = Representation.prototype.getColorParams.call( this );
	        p.structure = this.structure;

	        return p;

	    },

	    getAtomParams: function( what, params ){

	        return Object.assign( {
	            what: what,
	            colorParams: this.getColorParams(),
	            radiusParams: { "radius": this.radius, "scale": this.scale }
	        }, params );

	    },

	    getBondParams: function( what, params ){

	        return Object.assign( {
	            what: what,
	            colorParams: this.getColorParams(),
	            radiusParams: { "radius": this.radius, "scale": this.scale }
	        }, params );

	    },

	    setSelection: function( string, silent ){

	        this.selection.setString( string, silent );

	        return this;

	    },

	    setParameters: function( params, what, rebuild ){

	        what = what || {};

	        if( params && params.radiusType !== undefined ){
	            if( params.radiusType === "size" ){
	                this.radius = this.defaultSize;
	            }else{
	                this.radius = params.radiusType;
	            }
	            what.radius = true;
	            if( !ExtensionFragDepth || this.disableImpostor ){
	                rebuild = true;
	            }
	        }

	        if( params && params.radius !== undefined ){
	            what.radius = true;
	            if( !ExtensionFragDepth || this.disableImpostor ){
	                rebuild = true;
	            }
	        }

	        if( params && params.scale !== undefined ){
	            what.radius = true;
	            if( !ExtensionFragDepth || this.disableImpostor ){
	                rebuild = true;
	            }
	        }

	        Representation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    },

	    getParameters: function(){

	        var params = Object.assign(
	            Representation.prototype.getParameters.call( this ),
	            {
	                sele: this.selection ? this.selection.string : undefined,
	                defaultAssembly: this.defaultAssembly
	            }
	        );

	        return params;

	    },

	    attach: function( callback ){

	        var viewer = this.viewer;
	        var bufferList = this.bufferList;

	        this.dataList.forEach( function( data ){
	            data.bufferList.forEach( function( buffer ){
	                bufferList.push( buffer );
	                viewer.add( buffer, data.instanceList );
	            } );
	        } );

	        this.setVisibility( this.visible );
	        callback();

	    },

	    clear: function(){

	        this.dataList.length = 0;

	        Representation.prototype.clear.call( this );

	    },

	    dispose: function(){

	        this.structureView.dispose();

	        delete this.structure;
	        delete this.structureView;

	        Representation.prototype.dispose.call( this );

	    }

	} );

	function LineBuffer( from, to, color, color2, params ){

	    var p = params || {};

	    this.size = from.length / 3;
	    this.vertexShader = 'Line.vert';
	    this.fragmentShader = 'Line.frag';
	    this.line = true;

	    var n = this.size;
	    var n6 = n * 6;
	    var nX = n * 2 * 2;

	    this.attributeSize = nX;

	    this.linePosition = new Float32Array( nX * 3 );
	    this.lineColor = new Float32Array( nX * 3 );

	    Buffer.call(
	        this, this.linePosition, this.lineColor, undefined, undefined, p
	    );

	    this.setAttributes( {
	        from: from,
	        to: to,
	        color: color,
	        color2: color2
	    } );

	}

	LineBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: LineBuffer,

	    setAttributes: function( data ){

	        var from, to, color, color2;
	        var aPosition, aColor;

	        var attributes = this.geometry.attributes;

	        if( data.from && data.to ){
	            from = data.from;
	            to = data.to;
	            aPosition = attributes.position.array;
	            attributes.position.needsUpdate = true;
	        }

	        if( data.color && data.color2 ){
	            color = data.color;
	            color2 = data.color2;
	            aColor = attributes.color.array;
	            attributes.color.needsUpdate = true;
	        }

	        var n = this.size;
	        var n6 = n * 6;

	        var i, j, i2;
	        var x, y, z, x1, y1, z1, x2, y2, z2;

	        for( var v = 0; v < n; v++ ){

	            j = v * 3;
	            i = v * 2 * 3;
	            i2 = i + n6;

	            if( from && to ){

	                x1 = from[ j     ];
	                y1 = from[ j + 1 ];
	                z1 = from[ j + 2 ];

	                x2 = to[ j     ];
	                y2 = to[ j + 1 ];
	                z2 = to[ j + 2 ];

	                x = ( x1 + x2 ) / 2.0;
	                y = ( y1 + y2 ) / 2.0;
	                z = ( z1 + z2 ) / 2.0;

	                aPosition[ i     ] = x1;
	                aPosition[ i + 1 ] = y1;
	                aPosition[ i + 2 ] = z1;
	                aPosition[ i + 3 ] = x;
	                aPosition[ i + 4 ] = y;
	                aPosition[ i + 5 ] = z;

	                aPosition[ i2     ] = x;
	                aPosition[ i2 + 1 ] = y;
	                aPosition[ i2 + 2 ] = z;
	                aPosition[ i2 + 3 ] = x2;
	                aPosition[ i2 + 4 ] = y2;
	                aPosition[ i2 + 5 ] = z2;

	            }

	            if( color && color2 ){

	                aColor[ i     ] = aColor[ i + 3 ] = color[ j     ];
	                aColor[ i + 1 ] = aColor[ i + 4 ] = color[ j + 1 ];
	                aColor[ i + 2 ] = aColor[ i + 5 ] = color[ j + 2 ];

	                aColor[ i2     ] = aColor[ i2 + 3 ] = color2[ j     ];
	                aColor[ i2 + 1 ] = aColor[ i2 + 4 ] = color2[ j + 1 ];
	                aColor[ i2 + 2 ] = aColor[ i2 + 5 ] = color2[ j + 2 ];

	            }

	        }

	    }

	} );

	function TrajectoryRepresentation( trajectory, viewer, params ){

	    this.manualAttach = true;

	    this.trajectory = trajectory;

	    StructureRepresentation.call(
	        this, trajectory.structure, viewer, params
	    );

	}

	TrajectoryRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: TrajectoryRepresentation,

	    type: "",

	    parameters: Object.assign( {

	        drawLine: {
	            type: "boolean", rebuild: true
	        },
	        drawCylinder: {
	            type: "boolean", rebuild: true
	        },
	        drawPoint: {
	            type: "boolean", rebuild: true
	        },
	        drawSphere: {
	            type: "boolean", rebuild: true
	        },

	        linewidth: {
	            type: "integer", max: 20, min: 1, rebuild: true
	        },
	        pointSize: {
	            type: "integer", max: 20, min: 1, rebuild: true
	        },
	        sizeAttenuation: {
	            type: "boolean", rebuild: true
	        },
	        sort: {
	            type: "boolean", rebuild: true
	        },

	    }, Representation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "uniform" );
	        p.colorValue = defaults( p.colorValue, 0xDDDDDD );

	        this.drawLine = defaults( p.drawLine, true );
	        this.drawCylinder = defaults( p.drawCylinder, false );
	        this.drawPoint = defaults( p.drawPoint, false );
	        this.drawSphere = defaults( p.drawSphere, false );

	        this.pointSize = defaults( p.pointSize, 1 );
	        this.sizeAttenuation = defaults( p.sizeAttenuation, false );
	        this.sort = defaults( p.sort, true );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    attach: function( callback ){

	        this.bufferList.forEach( function( buffer ){

	            this.viewer.add( buffer );

	        }, this );

	        this.setVisibility( this.visible );

	        callback();

	    },

	    prepare: function( callback ){

	        // TODO

	        callback();

	    },

	    create: function(){

	        // Log.log( this.selection )
	        // Log.log( this.atomSet )

	        if( this.atomSet.atomCount === 0 ) return;

	        var scope = this;

	        var index = this.atomSet.atoms[ 0 ].index;

	        this.trajectory.getPath( index, function( path ){

	            var n = path.length / 3;
	            var tc = new Color( scope.colorValue );

	            if( scope.drawSphere ){

	                var sphereBuffer = new SphereBuffer(
	                    path,
	                    uniformArray3( n, tc.r, tc.g, tc.b ),
	                    uniformArray( n, 0.2 ),
	                    uniformArray3( n, tc.r, tc.g, tc.b ),
	                    scope.getBufferParams( {
	                        sphereDetail: scope.sphereDetail,
	                        dullInterior: true,
	                        disableImpostor: scope.disableImpostor
	                    } )
	                );

	                scope.bufferList.push( sphereBuffer );

	            }

	            if( scope.drawCylinder ){

	                var cylinderBuffer = new CylinderBuffer(
	                    path.subarray( 0, -3 ),
	                    path.subarray( 3 ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    uniformArray( n, 0.05 ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    scope.getBufferParams( {
	                        openEnded: false,
	                        radialSegments: scope.radialSegments,
	                        disableImpostor: scope.disableImpostor,
	                        dullInterior: true
	                    } )

	                );

	                scope.bufferList.push( cylinderBuffer );

	            }

	            if( scope.drawPoint ){

	                var pointBuffer = new PointBuffer(
	                    path,
	                    uniformArray3( n, tc.r, tc.g, tc.b ),
	                    scope.getBufferParams( {
	                        pointSize: scope.pointSize,
	                        sizeAttenuation: scope.sizeAttenuation,
	                        sort: scope.sort,
	                    } )
	                );

	                scope.bufferList.push( pointBuffer );

	            }

	            if( scope.drawLine ){

	                var lineBuffer = new LineBuffer(
	                    path.subarray( 0, -3 ),
	                    path.subarray( 3 ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    uniformArray3( n - 1, tc.r, tc.g, tc.b ),
	                    scope.getBufferParams()
	                );

	                scope.bufferList.push( lineBuffer );

	            }

	            scope.attach();

	        } );

	    }

	} );

	function makeRepresentation( type, object, viewer, params ){

	    if( exports.Debug ) Log$1.time( "makeRepresentation " + type );

	    var ReprClass;

	    if( object instanceof Structure ){

	        ReprClass = RepresentationRegistry.get( type );

	        if( !ReprClass ){

	            Log$1.error(
	                "makeRepresentation: representation type " + type + " unknown"
	            );
	            return;

	        }

	    }else if( object instanceof Surface || object instanceof Volume ){

	        if( type === "surface" ){

	            ReprClass = SurfaceRepresentation;

	        }else if( type === "dot" ){

	            ReprClass = DotRepresentation;

	        }else{

	            Log$1.error(
	                "makeRepresentation: representation type " + type + " unknown"
	            );
	            return;

	        }

	    }else if( object instanceof Trajectory ){

	        ReprClass = TrajectoryRepresentation;

	    }else if( object instanceof Shape ){

	        ReprClass = BufferRepresentation;
	        object = object.getBufferList();

	    }else if( type === "buffer" ){

	        ReprClass = BufferRepresentation;

	    }else{

	        Log$1.error(
	            "makeRepresentation: object " + object + " unknown"
	        );
	        return;

	    }

	    var repr = new ReprClass( object, viewer, params );

	    if( exports.Debug ) Log$1.timeEnd( "makeRepresentation " + type );

	    return repr;

	}

	var nextComponentId = 0;


	/**
	 * Component parameter object.
	 * @typedef {Object} ComponentParameters - component parameters
	 * @property {String} name - component name
	 * @property {Boolean} visible - component visibility
	 */

	/**
	 * {@link Signal}, dispatched when a representation is added
	 * @example
	 * component.signals.representationAdded( function( representationComponent ){ ... } );
	 * @event Component#representationAdded
	 * @type {RepresentationComponent}
	 */


	/**
	 * Component base class
	 * @class
	 * @param {Stage} stage - stage object the component belongs to
	 * @param {ComponentParameters} params - parameter object
	 */
	function Component( stage, params ){

	    Object.defineProperty( this, 'id', { value: nextComponentId++ } );

	    var p = params || {};

	    this.name = p.name;
	    this.uuid = generateUUID();
	    this.visible = p.visible !== undefined ? p.visible : true;

	    // construct instance signals
	    var signalNames = Object.keys( this.signals );
	    this.signals = {};
	    signalNames.forEach( function( name ){
	        this.signals[ name ] = new Signal();
	    }, this );

	    this.stage = stage;
	    this.viewer = stage.viewer;

	    this.reprList = [];

	}

	Component.prototype = {

	    constructor: Component,

	    type: "component",

	    signals: {

	        representationAdded: null,
	        representationRemoved: null,
	        visibilityChanged: null,

	        statusChanged: null,
	        nameChanged: null,
	        disposed: null,

	    },

	    /**
	     * Add a new representation to the component
	     * @fires Component#representationAdded
	     * @param {String} type - the name of the representation
	     * @param {Object} object the object on which the representation should be based
	     * @param {RepresentationParameters} params - representation parameters
	     * @return {RepresentationComponent} the created representation wrapped into
	     *                                   a representation component object
	     */
	    addRepresentation: function( type, object, params ){

	        var p = params || {};
	        var sp = this.stage.getParameters();
	        p.quality = p.quality || sp.quality;
	        p.disableImpostor = defaults( p.disableImpostor, !sp.impostor );
	        p.visible = defaults( p.visible, true );

	        var p2 = Object.assign( {}, p, { visible: this.visible && p.visible } );
	        var repr = makeRepresentation( type, object, this.viewer, p2 );
	        var reprComp = this.__getRepresentationComponent( repr, p );

	        this.reprList.push( reprComp );
	        this.signals.representationAdded.dispatch( reprComp );

	        return reprComp;

	    },

	    addBufferRepresentation: function( buffer, params ){

	        return Component.prototype.addRepresentation.call(
	            this, "buffer", buffer, params
	        );

	    },

	    removeRepresentation: function( repr ){

	        var idx = this.reprList.indexOf( repr );

	        if( idx !== -1 ){

	            this.reprList.splice( idx, 1 );

	        }

	        this.signals.representationRemoved.dispatch( repr );

	    },

	    updateRepresentations: function( what ){

	        this.reprList.forEach( function( repr ){

	            repr.update( what );

	        } );

	        this.stage.viewer.requestRender();

	    },

	    clearRepresentations: function(){

	        // copy via .slice because side effects may change reprList
	        this.reprList.slice().forEach( function( repr ){

	            repr.dispose();

	        } );

	    },

	    dispose: function(){

	        this.clearRepresentations();

	        delete this.reprList;

	        this.signals.disposed.dispatch();

	    },

	    setVisibility: function( value ){

	        this.visible = value;

	        this.eachRepresentation( function( repr ){

	            repr.updateVisibility();

	        } );

	        this.signals.visibilityChanged.dispatch( value );

	        return this;

	    },

	    setStatus: function( value ){

	        this.status = value;
	        this.signals.statusChanged.dispatch( value );

	        return this;

	    },

	    setName: function( value ){

	        this.name = value;
	        this.signals.nameChanged.dispatch( value );

	        return this;

	    },

	    getCenter: function(){

	        // log.warn( "not implemented" )

	    },

	    eachRepresentation: function( callback ){

	        this.reprList.forEach( callback );

	    }

	};

	// add here to avoid cyclic import dependency
	Component.prototype.__getRepresentationComponent = function( repr, p ){
	    return new RepresentationComponent(
	        this.stage, repr, p, this
	    );
	};


	function RepresentationComponent( stage, repr, params, parent ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : repr.type;

	    Component.call( this, stage, p );

	    this.parent = parent;

	    this.setRepresentation( repr );

	}

	RepresentationComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: RepresentationComponent,

	    type: "representation",

	    signals: Object.assign( {

	        parametersChanged: null,

	    }, Component.prototype.signals ),

	    getType: function(){

	        return this.repr.type;

	    },

	    setRepresentation: function( repr ){

	        if( this.repr ){
	            this.removeRepresentation( this.repr );
	        }
	        this.repr = repr;
	        // this.name = repr.type;
	        this.stage.tasks.listen( this.repr.tasks );
	        this.updateVisibility();

	    },

	    addRepresentation: function( type ){},

	    removeRepresentation: function( repr ){

	        this.stage.tasks.unlisten( this.repr.tasks );
	        this.repr.dispose();

	    },

	    dispose: function(){

	        if( this.parent ){
	            this.parent.removeRepresentation( this );
	        }
	        this.removeRepresentation( this.repr );
	        this.signals.disposed.dispatch();

	    },

	    setVisibility: function( value ){

	        this.visible = value;
	        this.updateVisibility();
	        this.signals.visibilityChanged.dispatch( this.visible );

	        return this;

	    },

	    updateVisibility: function(){

	        if( this.parent ){
	            this.repr.setVisibility( this.parent.visible && this.visible );
	        }else{
	            this.repr.setVisibility( this.visible );
	        }

	    },

	    update: function( what ){

	        this.repr.update( what );

	        return this;

	    },

	    build: function( params ){

	        this.repr.build( params );

	        return this;

	    },

	    setSelection: function( string ){

	        this.repr.setSelection( string );

	        return this;

	    },

	    setParameters: function( params ){

	        this.repr.setParameters( params );
	        this.signals.parametersChanged.dispatch(
	            this.repr.getParameters()
	        );

	        return this;

	    },

	    getParameters: function(){

	        return this.repr.getParameters();

	    },

	    setColor: function( value ){

	        this.repr.setColor( value );

	        return this;

	    },

	    getCenter: function(){}

	} );

	/**
	 * @file Collection
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function Collection( list ){

	    this.list = list || [];

	    // remove elements from list when they get disposed

	    var n = this.list.length;

	    for( var i = 0; i < n; ++i ){

	        var elm = this.list[ i ];

	        elm.signals.disposed.add( this._remove, this );

	    }

	}

	Collection.prototype = {

	    constructor: Collection,

	    _remove: function( elm ){

	        var idx = this.list.indexOf( elm );

	        if( idx !== -1 ){

	            this.list.splice( idx, 1 );

	        }

	    },

	    _invoke: function( methodName, methodArgs ){

	        var n = this.list.length;

	        for( var i = 0; i < n; ++i ){

	            var elm = this.list[ i ];
	            var method = elm[ methodName ];

	            if( typeof method === "function" ){

	                method.apply( elm, methodArgs );

	            }

	        }

	        return this;

	    },

	    setVisibility: function( value ){

	        return this._invoke( "setVisibility", [ value ] );

	    },

	    setSelection: function( string ){

	        return this._invoke( "setSelection", [ string ] );

	    },

	    dispose: function(){

	        return this._invoke( "dispose" );

	    }

	};

	function ComponentCollection( compList ){

	    Collection.call( this, compList );

	}

	ComponentCollection.prototype = Object.assign( Object.create(

	    Collection.prototype ), {

	    constructor: ComponentCollection,

	    addRepresentation: function( name, params ){

	        return this._invoke( "addRepresentation", [ name, params ] );

	    },

	    centerView: function( zoom, sele ){

	        return this._invoke( "centerView", [ zoom, sele ] );

	    }

	} );

	function RepresentationCollection( reprList ){

	    Collection.call( this, reprList );

	}

	RepresentationCollection.prototype = Object.assign( Object.create(

	    Collection.prototype ), {

	    constructor: RepresentationCollection,

	    setParameters: function( params ){

	        return this._invoke( "setParameters", [ params ] );

	    },

	    setColor: function( color ){

	        return this._invoke( "setColor", [ color ] );

	    }

	} );

	function TrajectoryComponent( stage, trajectory, params, parent ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : trajectory.name;

	    Component.call( this, stage, p );

	    this.trajectory = trajectory;
	    this.parent = parent;
	    this.status = "loaded";

	    // signals

	    trajectory.signals.frameChanged.add( function( i ){

	        this.signals.frameChanged.dispatch( i );

	    }, this );

	    trajectory.signals.playerChanged.add( function( player ){

	        this.signals.playerChanged.dispatch( player );

	    }, this );

	    trajectory.signals.gotNumframes.add( function( n ){

	        this.signals.gotNumframes.dispatch( n );

	    }, this );

	    //

	    if( p.i !== undefined ){

	        this.setFrame( p.i );

	    }

	}

	TrajectoryComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: TrajectoryComponent,

	    type: "trajectory",

	    signals: Object.assign( {

	        frameChanged: null,
	        playerChanged: null,
	        gotNumframes: null,
	        parametersChanged: null

	    }, Component.prototype.signals ),

	    addRepresentation: function( type, params ){

	        return Component.prototype.addRepresentation.call(
	            this, type, this.trajectory, params
	        );

	    },

	    setFrame: function( i ){

	        this.trajectory.setFrame( i );

	    },

	    setParameters: function( params ){

	        this.trajectory.setParameters( params );
	        this.signals.parametersChanged.dispatch( params );

	        return this;

	    },

	    dispose: function(){

	        this.trajectory.dispose();

	        Component.prototype.dispose.call( this );

	    },

	    getCenter: function(){}

	} );

	function FramesTrajectory( frames, structure, selectionString ){

	    if( frames instanceof Promise ){

	        frames.then( function( _frames ){

	            this.setFrames( _frames );
	            this.getNumframes();

	        }.bind( this ) );

	    }else{

	        this.setFrames( frames );

	    }

	    Trajectory.call( this, "", structure, selectionString );

	}

	FramesTrajectory.prototype = Object.assign( Object.create(

	    Trajectory.prototype ), {

	    constructor: FramesTrajectory,

	    type: "frames",

	    setFrames: function( frames ){

	        this.name = frames.name;
	        this.path = frames.path;

	        this.frames = frames.coordinates;
	        this.boxes = frames.boxes;

	    },

	    makeAtomIndices:  function(){

	        if( this.structure.type === "StructureView" ){

	            this.atomIndices = this.structure.getAtomIndices();

	        }else{

	            this.atomIndices = null;

	        }

	    },

	    _loadFrame: function( i, callback ){

	        var coords;
	        var structure = this.structure;
	        var frame = this.frames[ i ];

	        if( this.atomIndices ){

	            var indices = this.atomIndices;
	            var m = indices.length;

	            coords = new Float32Array( m * 3 );

	            for( var j = 0; j < m; ++j ){

	                var j3 = j * 3;
	                var idx3 = indices[ j ] * 3;

	                coords[ j3 + 0 ] = frame[ idx3 + 0 ];
	                coords[ j3 + 1 ] = frame[ idx3 + 1 ];
	                coords[ j3 + 2 ] = frame[ idx3 + 2 ];

	            }

	        }else{

	            coords = new Float32Array( frame );

	        }

	        var box = this.boxes[ i ];
	        var numframes = this.frames.length;

	        this.process( i, box, coords, numframes );

	        if( typeof callback === "function" ){

	            callback();

	        }

	    },

	    getNumframes: function(){

	        if( this.frames ){

	            this.setNumframes( this.frames.length );

	        }

	    },

	    getPath: function( index, callback ){

	        var i, j, f;
	        var n = this.numframes;
	        var k = index * 3;

	        var path = new Float32Array( n * 3 );

	        for( i = 0; i < n; ++i ){

	            j = 3 * i;
	            f = this.frames[ i ];

	            path[ j + 0 ] = f[ k + 0 ];
	            path[ j + 1 ] = f[ k + 1 ];
	            path[ j + 2 ] = f[ k + 2 ];

	        }

	        callback( path );

	    }

	} );

	function StructureTrajectory( trajPath, structure, selectionString ){

	    // if( !trajPath ) trajPath = structure.path;
	    trajPath = "";

	    Trajectory.call( this, trajPath, structure, selectionString );

	}

	StructureTrajectory.prototype = Object.assign( Object.create(

	    Trajectory.prototype ), {

	    constructor: StructureTrajectory,

	    type: "structure",

	    makeAtomIndices: function(){

	        if( this.structure.atomSet.size() < this.structure.atomStore.count ){
	            this.atomIndices = this.structure.getAtomIndices();
	        }else{
	            this.atomIndices = null;
	        }

	    },

	    _loadFrame: function( i, callback ){

	        var coords;
	        var structure = this.structure;
	        var frame = this.structure.frames[ i ];

	        if( this.atomIndices ){

	            var indices = this.atomIndices;
	            var m = indices.length;

	            coords = new Float32Array( m * 3 );

	            for( var j = 0; j < m; ++j ){

	                var j3 = j * 3;
	                var idx3 = indices[ j ] * 3;

	                coords[ j3 + 0 ] = frame[ idx3 + 0 ];
	                coords[ j3 + 1 ] = frame[ idx3 + 1 ];
	                coords[ j3 + 2 ] = frame[ idx3 + 2 ];

	            }

	        }else{

	            coords = new Float32Array( frame );

	        }

	        var box = this.structure.boxes[ i ];
	        var numframes = this.structure.frames.length;

	        this.process( i, box, coords, numframes );

	        if( typeof callback === "function" ){
	            callback();
	        }

	    },

	    getNumframes: function(){

	        this.setNumframes( this.structure.frames.length );

	    },

	    getPath: function( index, callback ){

	        var i, j, f;
	        var n = this.numframes;
	        var k = index * 3;

	        var path = new Float32Array( n * 3 );

	        for( i = 0; i < n; ++i ){

	            j = 3 * i;
	            f = this.structure.frames[ i ];

	            path[ j + 0 ] = f[ k + 0 ];
	            path[ j + 1 ] = f[ k + 1 ];
	            path[ j + 2 ] = f[ k + 2 ];

	        }

	        callback( path );

	    }

	} );

	function RemoteTrajectory( trajPath, structure, selectionString ){

	    Trajectory.call( this, trajPath, structure, selectionString );

	}

	RemoteTrajectory.prototype = Object.assign( Object.create(

	    Trajectory.prototype ), {

	    constructor: RemoteTrajectory,

	    type: "remote",

	    makeAtomIndices: function(){

	        var atomIndices = [];

	        if( this.structure.type === "StructureView" ){

	            var indices = this.structure.getAtomIndices();

	            var i, r;
	            var p = indices[ 0 ];
	            var q = indices[ 0 ];
	            var n = indices.length;

	            for( i = 1; i < n; ++i ){

	                r = indices[ i ];

	                if( q + 1 < r ){

	                    atomIndices.push( [ p, q + 1 ] );
	                    p = r;

	                }

	                q = r;

	            }

	            atomIndices.push( [ p, q + 1 ] );

	        }else{

	            atomIndices.push( [ 0, this.atomCount ] );

	        }

	        this.atomIndices = atomIndices;

	    },

	    _loadFrame: function( i, callback ){

	        // TODO implement max frameCache size, re-use arrays

	        var request = new XMLHttpRequest();

	        var ds = DatasourceRegistry.trajectory;
	        var url = ds.getFrameUrl( this.trajPath, i );
	        var params = ds.getFrameParams( this.trajPath, this.atomIndices );

	        request.open( "POST", url, true );
	        request.responseType = "arraybuffer";
	        request.setRequestHeader(
	            "Content-type", "application/x-www-form-urlencoded"
	        );

	        request.addEventListener( 'load', function( event ){

	            var arrayBuffer = request.response;
	            if( !arrayBuffer ){
	                Log$1.error( "empty arrayBuffer for '" + url + "'" );
	                return;
	            }

	            var numframes = new Int32Array( arrayBuffer, 0, 1 )[ 0 ];
	            var time = new Float32Array( arrayBuffer, 1 * 4, 1 )[ 0 ];
	            var box = new Float32Array( arrayBuffer, 2 * 4, 9 );
	            var coords = new Float32Array( arrayBuffer, 11 * 4 );

	            this.process( i, box, coords, numframes );
	            if( typeof callback === "function" ){
	                callback();
	            }

	        }.bind( this ), false );

	        request.send( params );

	    },

	    getNumframes: function(){

	        var request = new XMLHttpRequest();

	        var ds = DatasourceRegistry.trajectory;
	        var url = ds.getNumframesUrl( this.trajPath );

	        request.open( "GET", url, true );
	        request.addEventListener( 'load', function( event ){
	            this.setNumframes( parseInt( request.response ) );
	        }.bind( this ), false );
	        request.send( null );

	    },

	    getPath: function( index, callback ){

	        if( this.pathCache[ index ] ){
	            callback( this.pathCache[ index ] );
	            return;
	        }

	        Log$1.time( "loadPath" );

	        var request = new XMLHttpRequest();

	        var ds = DatasourceRegistry.trajectory;
	        var url = ds.getPathUrl( this.trajPath, index );
	        var params = "";

	        request.open( "POST", url, true );
	        request.responseType = "arraybuffer";
	        request.setRequestHeader(
	            "Content-type", "application/x-www-form-urlencoded"
	        );

	        request.addEventListener( 'load', function( event ){

	            Log$1.timeEnd( "loadPath" );

	            var arrayBuffer = request.response;
	            if( !arrayBuffer ){
	                Log$1.error( "empty arrayBuffer for '" + url + "'" );
	                return;
	            }

	            var path = new Float32Array( arrayBuffer );
	            // Log.log( path )
	            this.pathCache[ index ] = path;
	            callback( path );

	        }.bind( this ), false );

	        request.send( params );

	    }

	} );

	function makeTrajectory( trajSrc, structure, sele ){

	    var traj;

	    if( ( trajSrc && trajSrc.type === "frames" ) || trajSrc instanceof Promise ){

	        traj = new FramesTrajectory( trajSrc, structure, sele );

	    }else if( !trajSrc && structure.frames ){

	        traj = new StructureTrajectory( trajSrc, structure, sele );

	    }else{

	        traj = new RemoteTrajectory( trajSrc, structure, sele );

	    }

	    return traj;

	}

	/**
	 * Get view on structure restricted to the selection
	 * @param  {Selection} selection - the selection
	 * @return {StructureView} the view on the structure
	 */
	Structure.prototype.getView = function( selection ){
	    // added here to avoid cyclic import dependency
	    return new StructureView( this, selection );
	};


	/**
	 * View on the structure, restricted to the selection
	 * @class
	 * @extends Structure
	 * @param {Structure} structure - the structure
	 * @param {Selection} selection - the selection
	 */
	function StructureView( structure, selection ){

	    this.signals = {
	        refreshed: new Signal(),
	    };

	    this.structure = structure;
	    this.selection = selection;

	    this.center = new Vector3();
	    this.boundingBox = new Box3();

	    // to allow creating an empty object to call .fromJSON onto
	    if( !structure && !selection ) return;

	    this.init();

	    this.refresh();

	}

	StructureView.prototype = Object.assign( Object.create(

	    Structure.prototype ), {

	    constructor: StructureView,
	    type: "StructureView",

	    init: function(){

	        Object.defineProperties( this, {
	            name: {
	                get: function(){ return this.structure.name; }
	            },
	            path: {
	                get: function(){ return this.structure.path; }
	            },
	            title: {
	                get: function(){ return this.structure.title; }
	            },
	            id: {
	                get: function(){ return this.structure.id; }
	            },

	            atomSetDict: {
	                get: function(){ return this.structure.atomSetDict; }
	            },
	            biomolDict: {
	                get: function(){ return this.structure.biomolDict; }
	            },
	            unitcell: {
	                get: function(){ return this.structure.unitcell; }
	            },

	            frames: {
	                get: function(){ return this.structure.frames; }
	            },
	            boxes: {
	                get: function(){ return this.structure.boxes; }
	            },

	            bondStore: {
	                get: function(){ return this.structure.bondStore; }
	            },
	            backboneBondStore: {
	                get: function(){ return this.structure.backboneBondStore; }
	            },
	            rungBondStore: {
	                get: function(){ return this.structure.rungBondStore; }
	            },
	            atomStore: {
	                get: function(){ return this.structure.atomStore; }
	            },
	            residueStore: {
	                get: function(){ return this.structure.residueStore; }
	            },
	            chainStore: {
	                get: function(){ return this.structure.chainStore; }
	            },
	            modelStore: {
	                get: function(){ return this.structure.modelStore; }
	            },

	            atomMap: {
	                get: function(){ return this.structure.atomMap; }
	            },
	            residueMap: {
	                get: function(){ return this.structure.residueMap; }
	            }
	        } );

	        this._ap = this.getAtomProxy();
	        this._rp = this.getResidueProxy();
	        this._cp = this.getChainProxy();

	        // FIXME should selection be serializable?
	        if( this.selection ){
	            this.selection.signals.stringChanged.add( function( string ){
	                this.refresh();
	            }, this );
	        }

	        this.structure.signals.refreshed.add( this.refresh, this );

	    },

	    refresh: function(){

	        if( exports.Debug ) Log$1.time( "StructureView.refresh" );

	        this.atomSetCache = {};

	        this.atomSet = this.getAtomSet( this.selection, true );
	        if( this.structure.atomSet ){
	            if( exports.Debug ) Log$1.time( "StructureView.refresh#atomSet.intersection" );
	            this.atomSet = this.atomSet.intersection( this.structure.atomSet );
	            if( exports.Debug ) Log$1.timeEnd( "StructureView.refresh#atomSet.intersection" );
	        }

	        this.bondSet = this.getBondSet();

	        if( exports.Debug ) Log$1.time( "StructureView.refresh#atomSetDict.new_intersection" );
	        for( var name in this.atomSetDict ){
	            var as = this.atomSetDict[ name ];
	            this.atomSetCache[ "__" + name ] = as.new_intersection( this.atomSet );
	        }
	        if( exports.Debug ) Log$1.timeEnd( "StructureView.refresh#atomSetDict.new_intersection" );

	        if( exports.Debug ) Log$1.time( "StructureView.refresh#size" );
	        this.atomCount = this.atomSet.size();
	        this.bondCount = this.bondSet.size();
	        if( exports.Debug ) Log$1.timeEnd( "StructureView.refresh#size" );

	        this.boundingBox = this.getBoundingBox();
	        this.center = this.boundingBox.center();

	        if( exports.Debug ) Log$1.timeEnd( "StructureView.refresh" );

	        this.signals.refreshed.dispatch();

	    },

	    //

	    setSelection: function( selection ){

	        this.selection = selection;

	        this.refresh();

	    },

	    getSelection: function( selection ){

	        var seleList = [];

	        if( selection && selection.string ){
	            seleList.push( selection.string );
	        }

	        var parentSelection = this.structure.getSelection();
	        if( parentSelection && parentSelection.string ){
	            seleList.push( parentSelection.string );
	        }

	        if( this.selection && this.selection.string ){
	            seleList.push( this.selection.string );
	        }

	        var sele = "";
	        if( seleList.length > 0 ){
	            sele = "( " + seleList.join( " ) AND ( " ) + " )";
	        }

	        return new Selection( sele );

	    },

	    getStructure: function(){

	        return this.structure.getStructure();

	    },

	    //

	    eachBond: function( callback, selection ){

	        this.structure.eachBond( callback, this.getSelection( selection ) );

	    },

	    eachAtom: function( callback, selection ){

	        var ap = this.getAtomProxy();
	        var as = this.getAtomSet( selection );
	        var n = this.atomStore.count;

	        if( as && as.size() < n ){
	            as.forEach( function( index ){
	                ap.index = index;
	                callback( ap );
	            } );
	        }else{
	            for( var i = 0; i < n; ++i ){
	                ap.index = i;
	                callback( ap );
	            }
	        }

	    },

	    eachResidue: function( callback, selection ){

	        this.structure.eachResidue( callback, this.getSelection( selection ) );

	    },

	    /**
	     * Not implemented
	     * @alias StructureView#eachResidueN
	     */
	    eachResidueN: function( n, callback ){

	        console.error( "StructureView.eachResidueN() not implemented" );

	    },

	    eachChain: function( callback, selection ){

	        this.structure.eachChain( callback, this.getSelection( selection ) );

	    },

	    eachModel: function( callback, selection ){

	        this.structure.eachModel( callback, this.getSelection( selection ) );

	    },

	    //

	    getAtomSet: function( selection, ignoreView ){

	        if( exports.Debug ) Log$1.time( "StructureView.getAtomSet" );

	        var as = this.structure.getAtomSet( selection );
	        if( !ignoreView && this.atomSet ){
	            as = as.new_intersection( this.atomSet );
	        }

	        if( exports.Debug ) Log$1.timeEnd( "StructureView.getAtomSet" );

	        return as;

	    },

	    //

	    getAtomIndices: function( selection ){

	        return this.structure.getAtomIndices( this.getSelection( selection ) );

	    },

	    //

	    dispose: function(){

	        delete this.structure;

	        delete this.atomSet;
	        delete this.bondSet;

	        delete this.atomCount;
	        delete this.bondCount;

	    }

	} );

	var SubstitutionMatrices = function(){

	    var blosum62x = [
	        [4,0,-2,-1,-2,0,-2,-1,-1,-1,-1,-2,-1,-1,-1,1,0,0,-3,-2],        // A
	        [0,9,-3,-4,-2,-3,-3,-1,-3,-1,-1,-3,-3,-3,-3,-1,-1,-1,-2,-2],    // C
	        [-2,-3,6,2,-3,-1,-1,-3,-1,-4,-3,1,-1,0,-2,0,-1,-3,-4,-3],       // D
	        [-1,-4,2,5,-3,-2,0,-3,1,-3,-2,0,-1,2,0,0,-1,-2,-3,-2],          // E
	        [-2,-2,-3,-3,6,-3,-1,0,-3,0,0,-3,-4,-3,-3,-2,-2,-1,1,3],        // F
	        [0,-3,-1,-2,-3,6,-2,-4,-2,-4,-3,0,-2,-2,-2,0,-2,-3,-2,-3],      // G
	        [-2,-3,-1,0,-1,-2,8,-3,-1,-3,-2,1,-2,0,0,-1,-2,-3,-2,2],        // H
	        [-1,-1,-3,-3,0,-4,-3,4,-3,2,1,-3,-3,-3,-3,-2,-1,3,-3,-1],       // I
	        [-1,-3,-1,1,-3,-2,-1,-3,5,-2,-1,0,-1,1,2,0,-1,-2,-3,-2],        // K
	        [-1,-1,-4,-3,0,-4,-3,2,-2,4,2,-3,-3,-2,-2,-2,-1,1,-2,-1],       // L
	        [-1,-1,-3,-2,0,-3,-2,1,-1,2,5,-2,-2,0,-1,-1,-1,1,-1,-1],        // M
	        [-2,-3,1,0,-3,0,1,-3,0,-3,-2,6,-2,0,0,1,0,-3,-4,-2],            // N
	        [-1,-3,-1,-1,-4,-2,-2,-3,-1,-3,-2,-2,7,-1,-2,-1,-1,-2,-4,-3],   // P
	        [-1,-3,0,2,-3,-2,0,-3,1,-2,0,0,-1,5,1,0,-1,-2,-2,-1],           // Q
	        [-1,-3,-2,0,-3,-2,0,-3,2,-2,-1,0,-2,1,5,-1,-1,-3,-3,-2],        // R
	        [1,-1,0,0,-2,0,-1,-2,0,-2,-1,1,-1,0,-1,4,1,-2,-3,-2],           // S
	        [0,-1,-1,-1,-2,-2,-2,-1,-1,-1,-1,0,-1,-1,-1,1,5,0,-2,-2],       // T
	        [0,-1,-3,-2,-1,-3,-3,3,-2,1,1,-3,-2,-2,-3,-2,0,4,-3,-1],        // V
	        [-3,-2,-4,-3,1,-2,-2,-3,-3,-2,-1,-4,-4,-2,-3,-3,-2,-3,11,2],    // W
	        [-2,-2,-3,-2,3,-3,2,-1,-2,-1,-1,-2,-3,-1,-2,-2,-2,-1,2,7]       // Y
	    ];

	    var blosum62 = [
	        //A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X
	        [ 4,-1,-2,-2, 0,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-3,-2, 0,-2,-1, 0], // A
	        [-1, 5, 0,-2,-3, 1, 0,-2, 0,-3,-2, 2,-1,-3,-2,-1,-1,-3,-2,-3,-1, 0,-1], // R
	        [-2, 0, 6, 1,-3, 0, 0, 0, 1,-3,-3, 0,-2,-3,-2, 1, 0,-4,-2,-3, 3, 0,-1], // N
	        [-2,-2, 1, 6,-3, 0, 2,-1,-1,-3,-4,-1,-3,-3,-1, 0,-1,-4,-3,-3, 4, 1,-1], // D
	        [ 0,-3,-3,-3, 9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1,-3,-3,-2], // C
	        [-1, 1, 0, 0,-3, 5, 2,-2, 0,-3,-2, 1, 0,-3,-1, 0,-1,-2,-1,-2, 0, 3,-1], // Q
	        [-1, 0, 0, 2,-4, 2, 5,-2, 0,-3,-3, 1,-2,-3,-1, 0,-1,-3,-2,-2, 1, 4,-1], // E
	        [ 0,-2, 0,-1,-3,-2,-2, 6,-2,-4,-4,-2,-3,-3,-2, 0,-2,-2,-3,-3,-1,-2,-1], // G
	        [-2, 0, 1,-1,-3, 0, 0,-2, 8,-3,-3,-1,-2,-1,-2,-1,-2,-2, 2,-3, 0, 0,-1], // H
	        [-1,-3,-3,-3,-1,-3,-3,-4,-3, 4, 2,-3, 1, 0,-3,-2,-1,-3,-1, 3,-3,-3,-1], // I
	        [-1,-2,-3,-4,-1,-2,-3,-4,-3, 2, 4,-2, 2, 0,-3,-2,-1,-2,-1, 1,-4,-3,-1], // L
	        [-1, 2, 0,-1,-3, 1, 1,-2,-1,-3,-2, 5,-1,-3,-1, 0,-1,-3,-2,-2, 0, 1,-1], // K
	        [-1,-1,-2,-3,-1, 0,-2,-3,-2, 1, 2,-1, 5, 0,-2,-1,-1,-1,-1, 1,-3,-1,-1], // M
	        [-2,-3,-3,-3,-2,-3,-3,-3,-1, 0, 0,-3, 0, 6,-4,-2,-2, 1, 3,-1,-3,-3,-1], // F
	        [-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4, 7,-1,-1,-4,-3,-2,-2,-1,-2], // P
	        [ 1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-2, 0,-1,-2,-1, 4, 1,-3,-2,-2, 0, 0, 0], // S
	        [ 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 1, 5,-2,-2, 0,-1,-1, 0], // T
	        [-3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1, 1,-4,-3,-2,11, 2,-3,-4,-3,-2], // W
	        [-2,-2,-2,-3,-2,-1,-2,-3, 2,-1,-1,-2,-1, 3,-3,-2,-2, 2, 7,-1,-3,-2,-1], // Y
	        [ 0,-3,-3,-3,-1,-2,-2,-3,-3, 3, 1,-2, 1,-1,-2,-2, 0,-3,-1, 4,-3,-2,-1], // V
	        [-2,-1, 3, 4,-3, 0, 1,-1, 0,-3,-4, 0,-3,-3,-2, 0,-1,-4,-3,-3, 4, 1,-1], // B
	        [-1, 0, 0, 1,-3, 3, 4,-2, 0,-3,-3, 1,-1,-3,-1, 0,-1,-3,-2,-2, 1, 4,-1], // Z
	        [ 0,-1,-1,-1,-2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2, 0, 0,-2,-1,-1,-1,-1,-1]  // X
	    ];

	    var nucleotides = 'ACTG';

	    var aminoacidsX = 'ACDEFGHIKLMNPQRSTVWY';

	    var aminoacids = 'ARNDCQEGHILKMFPSTWYVBZ?';

	    function prepareMatrix( cellNames, mat ){

	        var j;
	        var i = 0;
	        var matDict = {};

	        mat.forEach( function( row ){

	            j = 0;
	            var rowDict = {};

	            row.forEach( function( elm ){

	                rowDict[ cellNames[ j++ ] ] = elm;

	            } );

	            matDict[ cellNames[ i++ ] ] = rowDict;

	        } );

	        return matDict;

	    }

	    return {

	        blosum62: prepareMatrix( aminoacids, blosum62 ),

	        blosum62x: prepareMatrix( aminoacidsX, blosum62x ),

	    };

	}();


	function Alignment( seq1, seq2, gapPenalty, gapExtensionPenalty, substMatrix ){

	    // TODO try encoding seqs as integers and use array subst matrix, maybe faster

	    this.seq1 = seq1;
	    this.seq2 = seq2;

	    this.gapPenalty = gapPenalty || -10;
	    this.gapExtensionPenalty = gapExtensionPenalty || -1;
	    this.substMatrix = substMatrix || "blosum62";

	    if( this.substMatrix ){
	        this.substMatrix = SubstitutionMatrices[ this.substMatrix ];
	    }

	}

	Alignment.prototype = {

	    constructor: Alignment,

	    initMatrices: function(){

	        this.n = this.seq1.length;
	        this.m = this.seq2.length;

	        // Log.log(this.n, this.m);

	        this.score = undefined;
	        this.ali = '';

	        this.S = [];
	        this.V = [];
	        this.H = [];

	        var i, j;

	        for( i = 0; i <= this.n; ++i ){

	            this.S[ i ] = [];
	            this.V[ i ] = [];
	            this.H[ i ] = [];

	            for( j = 0; j <= this.m; ++j ){

	                this.S[ i ][ j ] = 0;
	                this.V[ i ][ j ] = 0;
	                this.H[ i ][ j ] = 0;

	            }

	        }

	        for( i = 0; i <= this.n; ++i ){

	            this.S[ i ][ 0 ] = this.gap( 0 );
	            this.H[ i ][ 0 ] = -Infinity;

	        }

	        for( j = 0; j <= this.m; ++j ){

	            this.S[ 0 ][ j ] = this.gap( 0 );
	            this.V[ 0 ][ j ] = -Infinity;

	        }

	        this.S[ 0 ][ 0 ] = 0;

	        // Log.log(this.S, this.V, this.H);

	    },

	    gap: function( len ){

	        return this.gapPenalty + len * this.gapExtensionPenalty;

	    },

	    makeScoreFn: function(){

	        var seq1 = this.seq1;
	        var seq2 = this.seq2;

	        var substMatrix = this.substMatrix;

	        var c1, c2;

	        if( substMatrix ){

	            return function( i, j ){

	                c1 = seq1[ i ];
	                c2 = seq2[ j ];

	                try{

	                    return substMatrix[ c1 ][ c2 ];

	                }catch( e ){

	                    return -4;

	                }

	            };

	        } else {

	            Log$1.warn('Alignment: no subst matrix');

	            return function( i, j ){

	                c1 = seq1[ i ];
	                c2 = seq2[ j ];

	                return c1 === c2 ? 5 : -3;

	            };

	        }

	    },

	    calc: function(){

	        if( exports.Debug ) Log$1.time( "Alignment.calc" );

	        this.initMatrices();

	        var gap0 = this.gap(0);
	        var scoreFn = this.makeScoreFn();
	        var gapExtensionPenalty = this.gapExtensionPenalty;

	        var V = this.V;
	        var H = this.H;
	        var S = this.S;

	        var n = this.n;
	        var m = this.m;

	        var Vi1, Si1, Vi, Hi, Si;

	        var i, j;

	        for( i = 1; i <= n; ++i ){

	            Si1 = S[ i - 1 ];
	            Vi1 = V[ i - 1 ];

	            Vi = V[ i ];
	            Hi = H[ i ];
	            Si = S[ i ];

	            for( j = 1; j <= m; ++j ){

	                Vi[j] = Math.max(
	                    Si1[ j ] + gap0,
	                    Vi1[ j ] + gapExtensionPenalty
	                );

	                Hi[j] = Math.max(
	                    Si[ j - 1 ] + gap0,
	                    Hi[ j - 1 ] + gapExtensionPenalty
	                );

	                Si[j] = Math.max(
	                    Si1[ j - 1 ] + scoreFn( i - 1, j - 1 ), // match
	                    Vi[ j ], // del
	                    Hi[ j ]  // ins
	                );

	            }

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Alignment.calc" );

	        if( exports.Debug ) Log$1.log(this.S, this.V, this.H);

	    },

	    trace: function(){

	        if( exports.Debug ) Log$1.time( "Alignment.trace" );

	        this.ali1 = '';
	        this.ali2 = '';

	        var scoreFn = this.makeScoreFn();

	        var i = this.n;
	        var j = this.m;
	        var mat = "S";

	        if( this.S[i][j] >= this.V[i][j] && this.S[i][j] >= this.V[i][j] ){
	            mat = "S";
	            this.score = this.S[i][j];
	        }else if( this.V[i][j] >= this.H[i][j] ){
	            mat = "V";
	            this.score = this.V[i][j];
	        }else{
	            mat = "H";
	            this.score = this.H[i][j];
	        }

	        if( exports.Debug ) Log$1.log("Alignment: SCORE", this.score);
	        if( exports.Debug ) Log$1.log("Alignment: S, V, H", this.S[i][j], this.V[i][j], this.H[i][j]);

	        while( i > 0 && j > 0 ){

	            if( mat === "S" ){

	                if( this.S[i][j] === this.S[i-1][j-1] + scoreFn(i-1, j-1) ){
	                    this.ali1 = this.seq1[i-1] + this.ali1;
	                    this.ali2 = this.seq2[j-1] + this.ali2;
	                    --i;
	                    --j;
	                    mat = "S";
	                }else if( this.S[i][j] === this.V[i][j] ){
	                    mat = "V";
	                }else if( this.S[i][j] === this.H[i][j] ){
	                    mat = "H";
	                }else{
	                    // Log.debug('Alignment: S');
	                    --i;
	                    --j;
	                }

	            }else if( mat === "V" ){

	                if( this.V[i][j] === this.V[i-1][j] + this.gapExtensionPenalty ){
	                    this.ali1 = this.seq1[i-1] + this.ali1;
	                    this.ali2 = '-' + this.ali2;
	                    --i;
	                    mat = "V";
	                }else if( this.V[i][j] === this.S[i-1][j] + this.gap(0) ){
	                    this.ali1 = this.seq1[i-1] + this.ali1;
	                    this.ali2 = '-' + this.ali2;
	                    --i;
	                    mat = "S";
	                }else{
	                    // Log.debug('Alignment: V');
	                    --i;
	                }

	            }else if( mat === "H" ){

	                if( this.H[i][j] === this.H[i][j-1] + this.gapExtensionPenalty ){
	                    this.ali1 = '-' + this.ali1;
	                    this.ali2 = this.seq2[j-1] + this.ali2;
	                    --j;
	                    mat = "H";
	                }else if( this.H[i][j] === this.S[i][j-1] + this.gap(0) ){
	                    this.ali1 = '-' + this.ali1;
	                    this.ali2 = this.seq2[j-1] + this.ali2;
	                    --j;
	                    mat = "S";
	                }else{
	                    // Log.debug('Alignment: H');
	                    --j;
	                }

	            }else{

	                Log$1.error('Alignment: no matrix');

	            }

	        }

	        while( i > 0 ){

	            this.ali1 = this.seq1[ i - 1 ] + this.ali1;
	            this.ali2 = '-' + this.ali2;
	            --i;

	        }

	        while( j > 0 ){

	            this.ali1 = '-' + this.ali1;
	            this.ali2 = this.seq2[ j - 1 ] + this.ali2;
	            --j;

	        }

	        if( exports.Debug ) Log$1.timeEnd( "Alignment.trace" );

	        if( exports.Debug ) Log$1.log([this.ali1, this.ali2]);

	    }

	};

	/**
	 * Perform structural superposition of two structures,
	 * optionally guided by a sequence alignment
	 * @param  {Structure|StructureView} s1 - structure 1 which is superposed onto structure 2
	 * @param  {Structure|StructureView} s2 - structure 2 onto which structure 1 is superposed
	 * @param  {Boolean} [align] - guide the superposition by a sequence alignment
	 * @param  {String} [sele1] - selection string for structure 1
	 * @param  {String} [sele2] - selection string for structure 2
	 */
	function superpose( s1, s2, align, sele1, sele2 ){

	    align = defaults( align, false );
	    sele1 = defaults( sele1, "" );
	    sele2 = defaults( sele2, "" );

	    var i, j, n, atoms1, atoms2;

	    if( align ){

	        var _s1 = s1;
	        var _s2 = s2;

	        if( sele1 && sele2 ){
	            _s1 = s1.getView( new Selection( sele1 ) );
	            _s2 = s2.getView( new Selection( sele2 ) );
	        }

	        var seq1 = _s1.getSequence();
	        var seq2 = _s2.getSequence();

	        // Log.log( seq1.join("") );
	        // Log.log( seq2.join("") );

	        var ali = new Alignment( seq1.join(""), seq2.join("") );

	        ali.calc();
	        ali.trace();

	        // Log.log( "superpose alignment score", ali.score );

	        // Log.log( ali.ali1 );
	        // Log.log( ali.ali2 );

	        var l, _i, _j, x, y;
	        i = 0;
	        j = 0;
	        n = ali.ali1.length;
	        var aliIdx1 = [];
	        var aliIdx2 = [];

	        for( l = 0; l < n; ++l ){

	            x = ali.ali1[ l ];
	            y = ali.ali2[ l ];

	            _i = 0;
	            _j = 0;

	            if( x === "-" ){
	                aliIdx2[ j ] = false;
	            }else{
	                aliIdx2[ j ] = true;
	                _i = 1;
	            }

	            if( y === "-" ){
	                aliIdx1[ i ] = false;
	            }else{
	                aliIdx1[ i ] = true;
	                _j = 1;
	            }

	            i += _i;
	            j += _j;

	        }

	        // Log.log( i, j );

	        // Log.log( aliIdx1 );
	        // Log.log( aliIdx2 );

	        var _atoms1 = [];
	        var _atoms2 = [];
	        var ap1 = _s1.getAtomProxy();
	        var ap2 = _s2.getAtomProxy();

	        i = 0;
	        _s1.eachResidue( function( r ){

	            if( r.traceAtomIndex === undefined ||
	                r.traceAtomIndex !== r.getAtomIndexByName( "CA" ) ) return;

	            if( aliIdx1[ i ] ){
	                ap1.index = r.getAtomIndexByName( "CA" );
	                _atoms1.push( ap1.x, ap1.y, ap1.z );
	            }
	            i += 1;

	        } );

	        i = 0;
	        _s2.eachResidue( function( r ){

	            if( r.traceAtomIndex === undefined ||
	                r.traceAtomIndex !== r.getAtomIndexByName( "CA" ) ) return;

	            if( aliIdx2[ i ] ){
	                ap2.index = r.getAtomIndexByName( "CA" );
	                _atoms2.push( ap2.x, ap2.y, ap2.z );
	            }
	            i += 1;

	        } );

	        atoms1 = new Float32Array( _atoms1 );
	        atoms2 = new Float32Array( _atoms2 );

	    }else{

	        var sviewCa1 = s1.getView( new Selection( sele1 + " and .CA" ) );
	        var sviewCa2 = s2.getView( new Selection( sele2 + " and .CA" ) );

	        atoms1 = sviewCa1;
	        atoms2 = sviewCa2;

	    }

	    var superpose = new Superposition( atoms1, atoms2 );
	    superpose.transform( s1 );
	    s1.getStructure().refresh();

	}

	/**
	 * {@link Signal}, dispatched when the default assembly is changed
	 * @example
	 * structureComponent.signals.defaultAssemblyChanged( function( value ){ ... } );
	 * @event StructureComponent#defaultAssemblyChanged
	 * @type {String}
	 */


	/**
	 * Component wrapping a Structure object
	 * @class
	 * @extends Component
	 * @param {Stage} stage - stage object the component belongs to
	 * @param {Structure} structure - structure object to wrap
	 * @param {ComponentParameters} params - component parameters
	 */
	function StructureComponent( stage, structure, params ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : structure.name;

	    Component.call( this, stage, p );

	    /**
	     * The wrapped structure
	     * @alias StructureComponent#structure
	     * @member {Structure}
	     */
	    this.structure = structure;

	    this.trajList = [];
	    this.initSelection( p.sele );
	    this.setDefaultAssembly( p.assembly || "" );

	}

	StructureComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: StructureComponent,

	    /**
	     * Component type
	     * @alias StructureComponent#type
	     * @constant
	     * @type {String}
	     * @default
	     */
	    type: "structure",

	    signals: Object.assign( {

	        trajectoryAdded: null,
	        trajectoryRemoved: null,
	        defaultAssemblyChanged: null

	    }, Component.prototype.signals ),

	    /**
	     * Initialize selection
	     * @private
	     * @param {String} string - selection string
	     */
	    initSelection: function( sele ){

	        /**
	         * Selection for {@link StructureComponent#structureView}
	         * @alias StructureComponent#selection
	         * @private
	         * @member {Selection}
	         */
	        this.selection = new Selection( sele );

	        /**
	         * View on {@link StructureComponent#structure}.
	         * Change its selection via {@link StructureComponent#setSelection}.
	         * @alias StructureComponent#structureView
	         * @member {StructureView}
	         */
	        this.structureView = new StructureView(
	            this.structure, this.selection
	        );

	        this.selection.signals.stringChanged.add( function( string ){

	            this.structureView.setSelection( this.selection );

	            this.rebuildRepresentations();
	            this.rebuildTrajectories();

	        }, this );

	    },

	    /**
	     * Set selection of {@link StructureComponent#structureView}
	     * @alias StructureComponent#setSelection
	     * @param {String} string - selection string
	     */
	    setSelection: function( string ){

	        this.selection.setString( string );

	        return this;

	    },

	    /**
	     * Set the default assembly
	     * @alias StructureComponent#setDefaultAssembly
	     * @fires StructureComponent#defaultAssemblyChanged
	     * @param {String} value - assembly name
	     */
	    setDefaultAssembly: function( value ){

	        this.defaultAssembly = value;
	        this.rebuildRepresentations();
	        this.signals.defaultAssemblyChanged.dispatch( value );

	    },

	    /**
	     * Rebuild all representations
	     * @alias StructureComponent#rebuildRepresentations
	     */
	    rebuildRepresentations: function(){

	        this.reprList.forEach( function( repr ){

	            var p = repr.getParameters();
	            p.defaultAssembly = this.defaultAssembly;

	            repr.build( p );

	        }, this );

	    },

	    /**
	     * Rebuild all trajectories
	     * @alias StructureComponent#rebuildTrajectories
	     */
	    rebuildTrajectories: function(){

	        this.trajList.slice().forEach( function( trajComp ){
	            trajComp.trajectory.setStructure( this.structureView );
	        }, this );

	    },

	    /**
	     * Add a new structure representation to the component
	     * @alias StructureComponent#addRepresentation
	     * @fires Component#representationAdded
	     * @param {String} type - the name of the representation, one of:
	     *                        axes, backbone, ball+stick, base, cartoon, contact,
	     *                        distance, helixorient, hyperball, label, licorice, line
	     *                        surface, ribbon, rocket, rope, spacefill, trace, tube,
	     *                        unitcell.
	     * @param {StructureRepresentationParameters} params - representation parameters
	     * @return {RepresentationComponent} the created representation wrapped into
	     *                                   a representation component object
	     */
	    addRepresentation: function( type, params ){

	        var p = params || {};
	        p.defaultAssembly = this.defaultAssembly;

	        return Component.prototype.addRepresentation.call(
	            this, type, this.structureView, p
	        );

	    },

	    addTrajectory: function( trajPath, sele, i ){

	        var params = { "i": i };

	        var traj = makeTrajectory(
	            trajPath, this.structureView, sele
	        );

	        traj.signals.frameChanged.add( function( value ){
	            this.updateRepresentations( { "position": true } );
	        }, this );

	        var trajComp = new TrajectoryComponent( this.stage, traj, params, this );
	        this.trajList.push( trajComp );
	        this.signals.trajectoryAdded.dispatch( trajComp );

	        return trajComp;

	    },

	    removeTrajectory: function( traj ){

	        var idx = this.trajList.indexOf( traj );
	        if( idx !== -1 ){
	            this.trajList.splice( idx, 1 );
	        }

	        traj.dispose();

	        this.signals.trajectoryRemoved.dispatch( traj );

	    },

	    dispose: function(){

	        // copy via .slice because side effects may change trajList
	        this.trajList.slice().forEach( function( traj ){
	            traj.dispose();
	        } );

	        this.trajList.length = 0;
	        this.structure.dispose();

	        Component.prototype.dispose.call( this );

	    },

	    centerView: function( zoom, sele ){

	        zoom = zoom !== undefined ? zoom : true;

	        var center = this.getCenter( sele );

	        if( zoom ){

	            var bb;

	            if( sele ){
	                bb = this.structureView.getBoundingBox( new Selection( sele ) );
	            }else{
	                bb = this.structureView.boundingBox;
	            }

	            var bbSize = bb.size();
	            var maxSize = Math.max( bbSize.x, bbSize.y, bbSize.z );
	            var minSize = Math.min( bbSize.x, bbSize.y, bbSize.z );
	            // var avgSize = ( bbSize.x + bbSize.y + bbSize.z ) / 3;
	            zoom = Math.max( 1, maxSize + ( minSize / 2 ) );  // object size

	            // zoom = bb.size().length();

	        }

	        this.viewer.centerView( zoom, center );

	        return this;

	    },

	    getCenter: function( sele ){

	        if( sele ){

	            return this.structure.atomCenter( new Selection( sele ) );

	        }else{

	            return this.structure.center;

	        }

	    },

	    superpose: function( component, align, sele1, sele2 ){

	        superpose(
	            this.structureView, component.structureView, align, sele1, sele2
	        );

	        this.updateRepresentations( { "position": true } );

	        return this;

	    },

	    setVisibility: function( value ){

	        Component.prototype.setVisibility.call( this, value );

	        this.trajList.forEach( function( traj ){

	            // FIXME ???
	            traj.setVisibility( value );

	        } );

	        return this;

	    },

	} );

	/**
	 * Component wrapping a Surface or Volume object
	 * @class
	 * @extends Component
	 * @param {Stage} stage - stage object the component belongs to
	 * @param {Surface|Volume} surface - surface or volume object to wrap
	 * @param {ComponentParameters} params - component parameters
	 */
	function SurfaceComponent( stage, surface, params ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : surface.name;

	    Component.call( this, stage, p );

	    this.surface = surface;

	}

	SurfaceComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: SurfaceComponent,

	    /**
	     * Component type
	     * @alias SurfaceComponent#type
	     * @constant
	     * @type {String}
	     * @default
	     */
	    type: "surface",

	    /**
	     * Add a new surface representation to the component
	     * @alias SurfaceComponent#addRepresentation
	     * @param {String} type - the name of the representation, one of:
	     *                        surface, dot.
	     * @param {SurfaceRepresentationParameters} params - representation parameters
	     * @return {RepresentationComponent} the created representation wrapped into
	     *                                   a representation component object
	     */
	    addRepresentation: function( type, params ){

	        return Component.prototype.addRepresentation.call(
	            this, type, this.surface, params
	        );

	    },

	    dispose: function(){

	        this.surface.dispose();

	        Component.prototype.dispose.call( this );

	    },

	    centerView: function( zoom ){

	        var center = this.surface.center;

	        if( zoom ){
	            zoom = this.surface.boundingBox.size().length();
	        }

	        this.viewer.centerView( zoom, center );

	    },

	} );

	/**
	 * Component wrapping a shape object
	 * @class
	 * @extends Component
	 * @param {Stage} stage - stage object the component belongs to
	 * @param {Shape} shape - shape object to wrap
	 * @param {ComponentParameters} params - component parameters
	 */
	function ShapeComponent( stage, shape, params ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : shape.name;

	    Component.call( this, stage, p );

	    this.shape = shape;

	}

	ShapeComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: ShapeComponent,

	    /**
	     * Component type
	     * @alias ShapeComponent#type
	     * @constant
	     * @type {String}
	     * @default
	     */
	    type: "shape",

	    /**
	     * Add a new shape representation to the component
	     * @alias ShapeComponent#addRepresentation
	     * @param {String} type - the name of the representation, one of:
	     *                        buffer.
	     * @param {BufferRepresentationParameters} params - representation parameters
	     * @return {RepresentationComponent} the created representation wrapped into
	     *                                   a representation component object
	     */
	    addRepresentation: function( type, params ){

	        return Component.prototype.addRepresentation.call(
	            this, type, this.shape, params
	        );

	    },

	    dispose: function(){

	        this.shape.dispose();

	        Component.prototype.dispose.call( this );

	    }

	} );

	/**
	 * Component wrapping a Script object
	 * @class
	 * @extends Component
	 * @param {Stage} stage - stage object the component belongs to
	 * @param {Script} script - script object to wrap
	 * @param {ComponentParameters} params - component parameters
	 */
	function ScriptComponent( stage, script, params ){

	    var p = params || {};
	    p.name = p.name !== undefined ? p.name : script.name;

	    Component.call( this, stage, p );

	    this.script = script;
	    this.status = "loaded";

	    this.script.signals.nameChanged.add( function( value ){

	        this.setName( value );

	    }, this );

	}

	ScriptComponent.prototype = Object.assign( Object.create(

	    Component.prototype ), {

	    constructor: ScriptComponent,

	    type: "script",

	    addRepresentation: function( type ){},

	    removeRepresentation: function( repr ){},

	    run: function(){

	        var scope = this;

	        this.setStatus( "running" );

	        this.script.call( this.stage, function(){

	            scope.setStatus( "finished" );

	        } );

	        this.setStatus( "called" );

	    },

	    dispose: function(){

	        this.signals.disposed.dispatch();

	    },

	    setVisibility: function( value ){},

	    getCenter: function(){}

	} );

	function makeComponent( stage, object, params ){

	    var component;

	    if( object.type === "Structure" ){

	        component = new StructureComponent( stage, object, params );

	    }else if( object.type == "Surface" || object.type === "Volume" ){

	        component = new SurfaceComponent( stage, object, params );

	    }else if( object.type === "Shape" ){

	        component = new ShapeComponent( stage, object, params );

	    }else if( object.type === "Script" ){

	        component = new ScriptComponent( stage, object, params );

	    }else{

	        Log$1.warn( "makeComponent: object type unknown", object );

	    }

	    return component;

	}

	/**
	 * Stage parameter object.
	 * @typedef {Object} StageParameters - stage parameters
	 * @property {Color} backgroundColor - background color
	 * @property {Integer} sampleLevel - sampling level for antialiasing, between -1 and 5;
	 *                                   -1: no sampling, 0: only sampling when not moving
	 * @property {Float} rotateSpeed - camera-controls rotation speed, between 0 and 10
	 * @property {Float} zoomSpeed - camera-controls zoom speed, between 0 and 10
	 * @property {Float} panSpeed - camera-controls pan speed, between 0 and 10
	 * @property {Integer} clipNear - position of camera near/front clipping plane
	 *                                in percent of scene bounding box
	 * @property {Integer} clipFar - position of camera far/back clipping plane
	 *                               in percent of scene bounding box
	 * @property {Float} clipDist - camera clipping distance in Angstrom
	 * @property {Integer} fogNear - position of the start of the fog effect
	 *                               in percent of scene bounding box
	 * @property {Integer} fogFar - position where the fog is in full effect
	 *                              in percent of scene bounding box
	 * @property {String} cameraType - type of camera, either 'persepective' or 'orthographic'
	 * @property {Float} cameraFov - camera field of view in degree, between 15 and 120
	 * @property {Color} lightColor - point light color
	 * @property {Float} lightIntensity - point light intensity
	 * @property {Color} ambientColor - ambient light color
	 * @property {Float} ambientIntensity - ambient light intensity
	 * @property {Integer} hoverTimeout - timeout until the {@link Stage#event:hovered|hovered} signal is fired
	 */


	/**
	 * {@link Signal}, dispatched when stage parameters change {@link Signal}
	 * @example
	 * stage.signals.parametersChanged( function( stageParameters ){ ... } );
	 * @event Stage#parametersChanged
	 * @type {StageParameters}
	 */

	/**
	 * {@link Signal}, dispatched when the fullscreen is entered or left
	 * @example
	 * stage.signals.fullscreenChanged( function( isFullscreen ){ ... } );
	 * @event Stage#fullscreenChanged
	 * @type {Boolean}
	 */

	/**
	 * {@link Signal}, dispatched when a component is added to the stage
	 * @example
	 * stage.signals.componentAdded( function( component ){ ... } );
	 * @event Stage#componentAdded
	 * @type {Component}
	 */

	/**
	 * {@link Signal}, dispatched when a component is removed from the stage
	 * @example
	 * stage.signals.componentRemoved( function( component ){ ... } );
	 * @event Stage#componentRemoved
	 * @type {Component}
	 */

	/**
	 * {@link Signal}, dispatched upon clicking in the viewer canvas
	 * @example
	 * stage.signals.clicked( function( pickingData ){ ... } );
	 * @event Stage#clicked
	 * @type {PickingData}
	 */

	/**
	 * {@link Signal}, dispatched upon hovering over the viewer canvas
	 * @example
	 * stage.signals.hovered( function( pickingData ){ ... } );
	 * @event Stage#hovered
	 * @type {PickingData}
	 */


	/**
	 * Stage objects are central for creating molecular scenes with NGL.
	 * @class
	 * @example
	 *     var stage = new Stage( "elementId", { backgroundColor: "white" } );
	 *
	 * @param {String} eid - document id
	 * @param {StageParameters} params -
	 */
	function Stage( eid, params ){

	    this.signals = {
	        parametersChanged: new Signal(),
	        fullscreenChanged: new Signal(),

	        componentAdded: new Signal(),
	        componentRemoved: new Signal(),

	        clicked: new Signal(),
	        hovered: new Signal()
	    };

	    //

	    /**
	     * Counter that keeps track of various potential long-running tasks,
	     * including file loading and surface calculation.
	     * @member {Counter}
	     */
	    this.tasks = new Counter();
	    this.compList = [];
	    this.defaultFileParams = {};

	    //

	    this.viewer = new Viewer( eid );
	    if( !this.viewer.renderer ) return;

	    this.pickingControls = new PickingControls( this.viewer );
	    this.pickingControls.signals.clicked.add( this.signals.clicked.dispatch );
	    this.pickingControls.signals.hovered.add( this.signals.hovered.dispatch );

	    var p = Object.assign( {
	        impostor: true,
	        quality: "medium",
	        sampleLevel: 0,
	        backgroundColor: "black",
	        rotateSpeed: 2.0,
	        zoomSpeed: 1.2,
	        panSpeed: 0.8,
	        clipNear: 0,
	        clipFar: 100,
	        clipDist: 10,
	        fogNear: 50,
	        fogFar: 100,
	        cameraFov: 40,
	        cameraType: "perspective",
	        lightColor: 0xdddddd,
	        lightIntensity: 1.0,
	        ambientColor: 0xdddddd,
	        ambientIntensity: 0.2,
	        hoverTimeout: 50,
	    }, params );
	    this.parameters = deepCopy( Stage.prototype.parameters );
	    this.setParameters( p );  // must come after the viewer has been instantiated

	    this.viewer.animate();

	}

	Stage.prototype = {

	    constructor: Stage,

	    parameters: {

	        backgroundColor: {
	            type: "color"
	        },
	        quality: {
	            type: "select", options: { "low": "low", "medium": "medium", "high": "high" }
	        },
	        sampleLevel: {
	            type: "range", step: 1, max: 5, min: -1
	        },
	        impostor: {
	            type: "boolean"
	        },
	        rotateSpeed: {
	            type: "number", precision: 1, max: 10, min: 0
	        },
	        zoomSpeed: {
	            type: "number", precision: 1, max: 10, min: 0
	        },
	        panSpeed: {
	            type: "number", precision: 1, max: 10, min: 0
	        },
	        clipNear: {
	            type: "range", step: 1, max: 100, min: 0
	        },
	        clipFar: {
	            type: "range", step: 1, max: 100, min: 0
	        },
	        clipDist: {
	            type: "integer", max: 200, min: 0
	        },
	        fogNear: {
	            type: "range", step: 1, max: 100, min: 0
	        },
	        fogFar: {
	            type: "range", step: 1, max: 100, min: 0
	        },
	        cameraType: {
	            type: "select", options: { "perspective": "perspective", "orthographic": "orthographic" }
	        },
	        cameraFov: {
	            type: "range", step: 1, max: 120, min: 15
	        },
	        lightColor: {
	            type: "color"
	        },
	        lightIntensity: {
	            type: "number", precision: 2, max: 10, min: 0
	        },
	        ambientColor: {
	            type: "color"
	        },
	        ambientIntensity: {
	            type: "number", precision: 2, max: 10, min: 0
	        },
	        hoverTimeout: {
	            type: "integer", max: 10000, min: 10
	        },

	    },

	    /**
	     * Set stage parameters
	     * @fires Stage#parametersChanged
	     * @param {StageParameters} params - stage parameters
	     */
	    setParameters: function( params ){

	        var p = Object.assign( {}, params );
	        var tp = this.parameters;
	        var viewer = this.viewer;
	        var controls = viewer.controls;
	        var pickingControls = this.pickingControls;

	        for( var name in p ){

	            if( p[ name ] === undefined ) continue;
	            if( !tp[ name ] ) continue;

	            if( tp[ name ].int ) p[ name ] = parseInt( p[ name ] );
	            if( tp[ name ].float ) p[ name ] = parseFloat( p[ name ] );

	            tp[ name ].value = p[ name ];

	        }

	        // apply parameters
	        if( p.quality !== undefined ) this.setQuality( p.quality );
	        if( p.impostor !== undefined ) this.setImpostor( p.impostor );
	        if( p.rotateSpeed !== undefined ) controls.rotateSpeed = p.rotateSpeed;
	        if( p.zoomSpeed !== undefined ) controls.zoomSpeed = p.zoomSpeed;
	        if( p.panSpeed !== undefined ) controls.panSpeed = p.panSpeed;
	        pickingControls.setParameters( { hoverTimeout: p.hoverTimeout } );
	        viewer.setClip( p.clipNear, p.clipFar, p.clipDist );
	        viewer.setFog( undefined, p.fogNear, p.fogFar );
	        viewer.setCamera( p.cameraType, p.cameraFov );
	        viewer.setSampling( p.sampleLevel );
	        viewer.setBackground( p.backgroundColor );
	        viewer.setLight(
	            p.lightColor, p.lightIntensity, p.ambientColor, p.ambientIntensity
	        );

	        this.signals.parametersChanged.dispatch(
	            this.getParameters()
	        );

	        return this;

	    },

	    /**
	     * Get stage parameters
	     * @return {StageParameters} parameter object
	     */
	    getParameters: function(){

	        var params = {};
	        for( var name in this.parameters ){
	            params[ name ] = this.parameters[ name ].value;
	        }
	        return params;

	    },

	    /**
	     * Create default representations for the given component
	     * @param  {StructureComponent|SurfaceComponent} object - component to create the representations for
	     * @return {undefined}
	     */
	    defaultFileRepresentation: function( object ){

	        if( object.type === "structure" ){

	            object.setSelection( "/0" );

	            var atomCount, instanceCount;
	            var structure = object.structure;

	            if( structure.biomolDict.BU1 ){
	                var assembly = structure.biomolDict.BU1;
	                atomCount = assembly.getAtomCount( structure );
	                instanceCount = assembly.getInstanceCount();
	                object.setDefaultAssembly( "BU1" );
	            }else{
	                atomCount = structure.getModelProxy( 0 ).atomCount;
	                instanceCount = 1;
	            }

	            if( typeof window.orientation !== 'undefined' ){
	                atomCount *= 4;
	            }

	            var backboneOnly = structure.atomStore.count / structure.residueStore.count < 2;
	            if( backboneOnly ){
	                atomCount *= 10;
	            }

	            if( exports.Debug ) console.log( atomCount, instanceCount, backboneOnly );

	            if( ( instanceCount > 5 && atomCount > 15000 ) || atomCount > 700000 ){

	                var scaleFactor = (
	                    Math.min(
	                        1.5,
	                        Math.max(
	                            0.1,
	                            2000 / ( atomCount / instanceCount )
	                        )
	                    )
	                );
	                if( backboneOnly ) scaleFactor = Math.min( scaleFactor, 0.15 );

	                object.addRepresentation( "surface", {
	                    sele: "polymer",
	                    surfaceType: "sas",
	                    probeRadius: 1.4,
	                    scaleFactor: scaleFactor,
	                    colorScheme: "atomindex",
	                    colorScale: "RdYlBu",
	                    useWorker: false
	                } );

	            }else if( atomCount > 250000 ){

	                object.addRepresentation( "backbone", {
	                    lineOnly: true,
	                    colorScheme: "atomindex",
	                    colorScale: "RdYlBu"
	                } );

	            }else if( atomCount > 100000 ){

	                object.addRepresentation( "backbone", {
	                    quality: "low",
	                    disableImpostor: true,
	                    colorScheme: "atomindex",
	                    colorScale: "RdYlBu",
	                    scale: 2.0
	                } );

	            }else if( atomCount > 80000 ){

	                object.addRepresentation( "backbone", {
	                    colorScheme: "atomindex",
	                    colorScale: "RdYlBu",
	                    scale: 2.0
	                } );

	            }else{

	                var quality = atomCount < 15000 ? "high" : "medium";

	                object.addRepresentation( "cartoon", {
	                    color: "atomindex",
	                    colorScale: "RdYlBu",
	                    scale: 0.7,
	                    aspectRatio: 5,
	                    quality: quality
	                } );
	                if( atomCount < 50000 ){
	                    object.addRepresentation( "base", {
	                        color: "atomindex",
	                        colorScale: "RdYlBu",
	                        quality: quality
	                    } );
	                }
	                object.addRepresentation( "ball+stick", {
	                    sele: "hetero and not ( water or ion )",
	                    colorScheme: "element",
	                    scale: 2.0,
	                    aspectRatio: 1.5,
	                    quality: quality
	                } );

	            }

	            this.centerView();

	            // add frames as trajectory
	            if( object.structure.frames.length ) object.addTrajectory();

	        }else if( object.type === "surface" || opject.type === "volume" ){

	            object.addRepresentation( "surface" );
	            this.centerView();

	        }

	    },

	    /**
	     * Load a file onto the stage
	     *
	     * @example
	     * // load from URL
	     * stage.loadFile( "http://files.rcsb.org/download/5IOS.cif" );
	     *
	     * @example
	     * // load binary data in CCP4 format via a Blob
	     * var binaryBlob = new Blob( [ ccp4Data ], { type: 'application/octet-binary'} );
	     * stage.loadFile( binaryBlob, { ext: "ccp4" } );
	     *
	     * @example
	     * // load string data in PDB format via a Blob
	     * var stringBlob = new Blob( [ pdbData ], { type: 'text/plain'} );
	     * stage.loadFile( stringBlob, { ext: "pdb" } );
	     *
	     * @example
	     * // load a File object
	     * stage.loadFile( file );
	     *
	     * @example
	     * // load from URL and add a 'ball+stick' representation with double/triple bonds
	     * stage.loadFile( "http://files.rcsb.org/download/1crn.cif" ).then( function( comp ){
	     *     comp.addRepresentation( "ball+stick", { multipleBond: true } );
	     * } );
	     *
	     * @fires Stage#componentAdded
	     * @param  {String|File|Blob} path - either a URL or an object containing the file data
	     * @param  {Object} params - loading parameters
	     * @param  {String} params.ext - file extension, determines file type
	     * @param  {Boolean} params.asTrajectory - load multi-model structures as a trajectory
	     * @return {Promise} A Promise object that resolves to a {@link StructureComponent},
	     *                   a {@link SurfaceComponent} or a {@link ScriptComponent} object,
	     *                   depending on the type of the loaded file.
	     */
	    loadFile: function( path, params ){

	        var p = Object.assign( {}, this.defaultFileParams, params );

	        // placeholder component
	        var component = new Component( this, p );
	        component.name = getFileInfo( path ).name;
	        this.addComponent( component );

	        // tasks
	        var tasks = this.tasks;
	        tasks.increment();

	        var onLoadFn = function( object ){

	            // remove placeholder component
	            this.removeComponent( component );

	            component = this.addComponentFromObject( object, p );

	            if( component.type === "script" ){
	                component.run();
	            }

	            if( p.defaultRepresentation ){
	                this.defaultFileRepresentation( component );
	            }

	            tasks.decrement();

	            return component;

	        }.bind( this );

	        var onErrorFn = function( e ){

	            component.setStatus( e );
	            tasks.decrement();
	            throw e;

	        };

	        return autoLoad( path, p ).then( onLoadFn, onErrorFn );

	    },

	    addComponent: function( component ){

	        if( !component ){

	            Log$1.warn( "Stage.addComponent: no component given" );
	            return;

	        }

	        this.compList.push( component );

	        this.signals.componentAdded.dispatch( component );

	    },

	    addComponentFromObject: function( object, params ){

	        var component = makeComponent( this, object, params );

	        this.addComponent( component );

	        return component;

	    },

	    removeComponent: function( component ){

	        var idx = this.compList.indexOf( component );

	        if( idx !== -1 ){

	            this.compList.splice( idx, 1 );

	        }

	        component.dispose();

	        this.signals.componentRemoved.dispatch( component );

	    },

	    removeAllComponents: function( type ){

	        this.compList.slice().forEach( function( o, i ){

	            if( !type || o.type === type ){

	                this.removeComponent( o );

	            }

	        }, this );

	    },

	    /**
	     * Handle any size-changes of the container element
	     * @return {undefined}
	     */
	    handleResize: function(){

	        this.viewer.handleResize();

	    },

	    /**
	     * Toggle fullscreen
	     * @fires Stage#fullscreenChanged
	     * @param  {Element} [element] - document element to put into fullscreen,
	     *                               defaults to the viewer container
	     * @return {undefined}
	     */
	    toggleFullscreen: function( element ){

	        if( !document.fullscreenEnabled && !document.mozFullScreenEnabled &&
	            !document.webkitFullscreenEnabled && !document.msFullscreenEnabled
	        ){
	            Log$1.log( "fullscreen mode (currently) not possible" );
	            return;
	        }

	        var self = this;
	        element = element || this.viewer.container;
	        this.lastFullscreenElement = element;

	        //

	        function getFullscreenElement(){
	            return document.fullscreenElement || document.mozFullScreenElement ||
	                document.webkitFullscreenElement || document.msFullscreenElement;
	        }

	        function resizeElement(){

	            if( !getFullscreenElement() && self.lastFullscreenElement ){

	                var element = self.lastFullscreenElement;
	                element.style.width = element.dataset.normalWidth;
	                element.style.height = element.dataset.normalHeight;

	                document.removeEventListener( "fullscreenchange", resizeElement );
	                document.removeEventListener( "mozfullscreenchange", resizeElement );
	                document.removeEventListener( "webkitfullscreenchange", resizeElement );
	                document.removeEventListener( "msfullscreenchange", resizeElement );

	                self.handleResize();
	                self.signals.fullscreenChanged.dispatch( false );

	            }

	        }

	        //

	        if( !getFullscreenElement() ){

	            element.dataset.normalWidth = element.style.width;
	            element.dataset.normalHeight = element.style.height;
	            element.style.width = screen.width + "px";
	            element.style.height = screen.height + "px";

	            if( element.requestFullscreen ){
	                element.requestFullscreen();
	            }else if( element.msRequestFullscreen ){
	                element.msRequestFullscreen();
	            }else if( element.mozRequestFullScreen ){
	                element.mozRequestFullScreen();
	            }else if( element.webkitRequestFullscreen ){
	                element.webkitRequestFullscreen();
	            }

	            document.addEventListener( "fullscreenchange", resizeElement );
	            document.addEventListener( "mozfullscreenchange", resizeElement );
	            document.addEventListener( "webkitfullscreenchange", resizeElement );
	            document.addEventListener( "msfullscreenchange", resizeElement );

	            this.handleResize();
	            this.signals.fullscreenChanged.dispatch( true );

	            // workaround for Safari
	            setTimeout( function(){ self.handleResize(); }, 100 );

	        }else{

	            if( document.exitFullscreen ){
	                document.exitFullscreen();
	            }else if( document.msExitFullscreen ){
	                document.msExitFullscreen();
	            }else if( document.mozCancelFullScreen ){
	                document.mozCancelFullScreen();
	            }else if( document.webkitExitFullscreen ){
	                document.webkitExitFullscreen();
	            }

	        }

	    },

	    centerView: function(){

	        if( this.tasks.count > 0 ){

	            var centerFn = function( delta, count ){

	                if( count === 0 ){

	                    this.tasks.signals.countChanged.remove( centerFn, this );

	                }

	                this.viewer.centerView( true );

	            };

	            this.tasks.signals.countChanged.add( centerFn, this );

	        }

	        this.viewer.centerView( true );

	    },

	    /**
	     * Spin the whole scene around an axis at the center
	     * @example
	     * stage.setSpin( [ 0, 1, 0 ], 0.01 );
	     *
	     * @param {Number[]|Vector3} axis - the axis to spin around
	     * @param {Number} angle - amount to spin per render call
	     */
	    setSpin: function( axis, angle ){

	        if( Array.isArray( axis ) ){
	            axis = new Vector3().fromArray( axis );
	        }

	        this.viewer.setSpin( axis, angle );

	    },

	    setOrientation: function( orientation ){

	        this.tasks.onZeroOnce( function(){

	            this.viewer.setOrientation( orientation );

	        }, this );

	    },

	    getOrientation: function(){

	        return this.viewer.getOrientation();

	    },

	    makeImage: function( params ){

	        var viewer = this.viewer;
	        var tasks = this.tasks;

	        return new Promise( function( resolve, reject ){

	            function makeImage(){
	                tasks.increment();
	                viewer.makeImage( params ).then( function( blob ){
	                    tasks.decrement();
	                    resolve( blob );
	                } ).catch( function( e ){
	                    tasks.decrement();
	                    reject( e );
	                } );
	            }

	            tasks.onZeroOnce( makeImage );

	        } );

	    },

	    setImpostor: function( value ) {

	        this.parameters.impostor.value = value;

	        var types = [
	            "spacefill", "ball+stick", "licorice", "hyperball",
	            "backbone", "rocket", "helixorient", "contact", "distance",
	            "dot"
	        ];

	        this.eachRepresentation( function( repr ){

	            if( repr.type === "script" ) return;

	            if( types.indexOf( repr.getType() ) === -1 ){
	                return;
	            }

	            var p = repr.getParameters();
	            p.disableImpostor = !value;
	            repr.build( p );

	        } );

	    },

	    setQuality: function( value ) {

	        this.parameters.quality.value = value;

	        var types = [
	            "tube", "cartoon", "ribbon", "trace", "rope"
	        ];

	        var impostorTypes = [
	            "spacefill", "ball+stick", "licorice", "hyperball",
	            "backbone", "rocket", "helixorient", "contact", "distance",
	            "dot"
	        ];

	        this.eachRepresentation( function( repr ){

	            if( repr.type === "script" ) return;

	            var p = repr.getParameters();

	            if( types.indexOf( repr.getType() ) === -1 ){

	                if( impostorTypes.indexOf( repr.getType() ) === -1 ){
	                    return;
	                }

	                if( !p.disableImpostor ){
	                    repr.repr.quality = value;
	                    return;
	                }

	            }

	            p.quality = value;
	            repr.build( p );

	        } );

	    },

	    eachComponent: function( callback, type ){

	        this.compList.forEach( function( o, i ){

	            if( !type || o.type === type ){
	                callback( o, i );
	            }

	        } );

	    },

	    eachRepresentation: function( callback, componentType ){

	        this.eachComponent( function( comp ){

	            comp.reprList.forEach( function( repr ){
	                callback( repr, comp );
	            } );

	        }, componentType );

	    },

	    getComponentsByName: function( name, componentType ){

	        var compList = [];

	        this.eachComponent( function( comp ){

	            if( name === undefined || comp.name.match( name ) !== null ){
	                compList.push( comp );
	            }

	        }, componentType );

	        return new ComponentCollection( compList );

	    },

	    getRepresentationsByName: function( name, componentType ){

	        var compName, reprName;

	        if( typeof name !== "object" ){
	            compName = undefined;
	            reprName = name;
	        }else{
	            compName = name.comp;
	            reprName = name.repr;
	        }

	        var reprList = [];

	        this.eachRepresentation( function( repr, comp ){

	            if( compName !== undefined && comp.name.match( compName ) === null ){
	                return;
	            }

	            if( reprName === undefined || repr.name.match( reprName ) !== null ){
	                reprList.push( repr );
	            }

	        }, componentType );

	        return new RepresentationCollection( reprList );

	    },

	    getAnythingByName: function( name ){

	        var compList = this.getComponentsByName( name ).list;
	        var reprList = this.getRepresentationsByName( name ).list;

	        return new Collection( compList.concat( reprList ) );

	    },

	    dispose: function(){

	        this.tasks.dispose();

	    }

	};

	function TrajectoryPlayer( traj, step, timeout, start, end ){

	    this.signals = {
	        startedRunning: new Signal(),
	        haltedRunning: new Signal()
	    };

	    traj.signals.playerChanged.add( function( player ){
	        if( player !== this ){
	            this.pause();
	        }
	    }, this );

	    this.traj = traj;
	    this.step = step || Math.ceil( ( traj.numframes + 1 ) / 100 );
	    this.timeout = timeout || 50;
	    this.start = start || 0;
	    this.end = end || traj.numframes - 1;
	    this.end = Math.min( this.end, traj.numframes - 1 );
	    this.interpolateType = "";
	    this.interpolateStep = 5;

	    this.mode = "loop"; // loop, once
	    this.direction = "forward"; // forward, backward

	    this._stopFlag = false;
	    this._running = false;

	}

	TrajectoryPlayer.prototype = {

	    constructor: TrajectoryPlayer,

	    _animate: function(){

	        var i;
	        this._running = true;

	        if( !this.traj.inProgress && !this._stopFlag ){

	            if( this.direction === "forward" ){
	                i = this.traj.currentFrame + this.step;
	            }else{
	                i = this.traj.currentFrame - this.step;
	            }

	            if( i >= this.end || i < this.start ){

	                if( this.mode === "once" ){

	                    this.pause();

	                    if( this.direction === "forward" ){
	                        i = this.end;
	                    }else{
	                        i = this.start;
	                    }

	                }else{

	                    if( this.direction === "forward" ){
	                        i = this.start;
	                    }else{
	                        i = this.end;
	                    }

	                }

	            }

	            if( !this.interpolateType ){
	                this.traj.setFrame( i );
	            }

	        }

	        if( !this._stopFlag ){

	            if( !this.traj.inProgress && this.interpolateType ){

	                var ip, ipp, ippp;

	                if( this.direction === "forward" ){

	                    ip = Math.max( this.start, i - this.step );
	                    ipp = Math.max( this.start, i - 2 * this.step );
	                    ippp = Math.max( this.start, i - 3 * this.step );

	                }else{

	                    ip = Math.min( this.end, i + this.step );
	                    ipp = Math.min( this.end, i + 2 * this.step );
	                    ippp = Math.min( this.end, i + 3 * this.step );

	                }

	                this._interpolate(
	                    i, ip, ipp, ippp, 1 / this.interpolateStep, 0
	                );

	            }else{

	                setTimeout( this._animate.bind( this ), this.timeout );

	            }

	        }else{

	            this._running = false;

	        }

	    },

	    _interpolate: function( i, ip, ipp, ippp, d, t ){

	        t += d;

	        if( t <= 1 ){

	            var deltaTime = Math.round( this.timeout * d );

	            this.traj.setFrameInterpolated(
	                i, ip, ipp, ippp, t, this.interpolateType,
	                function(){
	                    setTimeout( function(){
	                        this._interpolate( i, ip, ipp, ippp, d, t );
	                    }.bind( this ), deltaTime );
	                }.bind( this )
	            );

	        }else{

	            setTimeout( this._animate.bind( this ), 0 );

	        }

	    },

	    toggle: function(){

	        if( this._running ){
	            this.pause();
	        }else{
	            this.play();
	        }

	    },

	    play: function(){

	        if( !this._running ){

	            if( this.traj.player !== this ){
	                this.traj.setPlayer( this );
	            }

	            var frame = this.traj.currentFrame;

	            // snap to the grid implied by this.step division and multiplication
	            // thus minimizing cache misses
	            var i = Math.ceil( frame / this.step ) * this.step;

	            // wrap when restarting from the limit (i.e. end or start)
	            if( this.direction === "forward" && frame >= this.end ){

	                i = this.start;

	            }else if( this.direction === "backward" && frame <= this.start ){

	                i = this.end;

	            }

	            this.traj.setFrame( i );

	            this._stopFlag = false;
	            this._animate();
	            this.signals.startedRunning.dispatch();

	        }

	    },

	    pause: function(){

	        if( this._running ){
	            this._stopFlag = true;
	            this.signals.haltedRunning.dispatch();
	        }

	    },

	    stop: function(){

	        this.traj.setFrame( this.start );
	        this.pause();

	    }

	};

	function AxesRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	AxesRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: AxesRepresentation,

	    type: "axes",

	    parameters: Object.assign( {

	        radius: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        sphereDetail: true,
	        radialSegments: true,
	        disableImpostor: true,
	        align: {
	            type: "button"
	        }

	    }, Representation.prototype.parameters, {
	        assembly: null
	    } ),

	    init: function( params ){

	        var p = params || {};

	        p.radius = defaults( p.radius, 0.5 );
	        p.colorValue = defaults( p.colorValue, "lightgreen" );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getPrincipalAxes: function( sview ){

	        var selection;
	        var assembly = this.getAssembly();

	        if( assembly ){
	            selection = assembly.partList[ 0 ].getSelection();
	        }

	        // return this.structureView.getPrincipalAxes( selection );  // FIXME
	        return this.structureView.getView( selection ).getPrincipalAxes();

	    },

	    align: function(){

	        var pa = this.getPrincipalAxes( this.structureView );

	        var v1 = new Vector3().copy( pa[0][1] ).sub( pa[0][0] ).normalize();
	        var v2 = new Vector3().copy( pa[1][1] ).sub( pa[1][0] ).normalize();
	        var v3 = new Vector3().copy( pa[2][1] ).sub( pa[2][0] ).normalize();

	        this.viewer.alignView( v3, v1, pa[ 3 ], true );

	    },

	    getAxesData: function( sview ){

	        var pa = this.getPrincipalAxes( sview );
	        var c = new Color( this.colorValue );

	        var vertexPosition = new Float32Array( 3 * 6 );
	        var vertexColor = uniformArray3( 6, c.r, c.g, c.b );
	        var vertexRadius = uniformArray( 6, this.radius );

	        var edgePosition1 = new Float32Array( 3 * 3 );
	        var edgePosition2 = new Float32Array( 3 * 3 );
	        var edgeColor = uniformArray3( 3, c.r, c.g, c.b );
	        var edgeRadius = uniformArray( 3, this.radius );

	        var offset = 0;
	        function addAxis( v1, v2 ){
	            v1.toArray( vertexPosition, offset * 2 );
	            v2.toArray( vertexPosition, offset * 2 + 3 );
	            v1.toArray( edgePosition1, offset );
	            v2.toArray( edgePosition2, offset );
	            offset += 3;
	        }

	        addAxis( pa[ 0 ][ 0 ], pa[ 0 ][ 1 ] );
	        addAxis( pa[ 1 ][ 0 ], pa[ 1 ][ 1 ] );
	        addAxis( pa[ 2 ][ 0 ], pa[ 2 ][ 1 ] );

	        return {
	            vertexPosition: vertexPosition,
	            vertexColor: vertexColor,
	            vertexRadius: vertexRadius,
	            edgePosition1: edgePosition1,
	            edgePosition2: edgePosition2,
	            edgeColor: edgeColor,
	            edgeRadius: edgeRadius
	        };

	    },

	    create: function(){

	        var axesData = this.getAxesData( this.structureView );

	        this.sphereBuffer = new SphereBuffer(
	            axesData.vertexPosition,
	            axesData.vertexColor,
	            axesData.vertexRadius,
	            undefined,
	            this.getBufferParams( {
	                sphereDetail: this.sphereDetail,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.cylinderBuffer = new CylinderBuffer(
	            axesData.edgePosition1,
	            axesData.edgePosition2,
	            axesData.edgeColor,
	            axesData.edgeColor,
	            axesData.edgeRadius,
	            undefined,
	            undefined,
	            this.getBufferParams( {
	                openEnded: false,
	                radialSegments: this.radialSegments,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.dataList.push( {
	            sview: this.structureView,
	            bufferList: [ this.sphereBuffer, this.cylinderBuffer ]
	        } );

	    },

	    updateData: function( what, data ){

	        var axesData = this.getAxesData( data.sview );
	        var sphereData = {};
	        var cylinderData = {};

	        if( !what || what.position ){
	            sphereData.position = axesData.vertexPosition;
	            cylinderData.position1 = axesData.edgePosition1;
	            cylinderData.position2 = axesData.edgePosition2;
	        }

	        if( !what || what.color ){
	            sphereData.color = axesData.vertexColor;
	            cylinderData.color = axesData.edgeColor;
	            cylinderData.color2 = axesData.edgeColor;
	        }

	        if( !what || what.radius ){
	            sphereData.radius = axesData.vertexRadius;
	            cylinderData.radius = axesData.edgeRadius;
	        }

	        this.sphereBuffer.setAttributes( sphereData );
	        this.cylinderBuffer.setAttributes( cylinderData );

	    }

	} );


	RepresentationRegistry.add( "axes", AxesRepresentation );

	/**
	 * Ball And Stick representation parameter object.
	 * @typedef {Object} BallAndStickRepresentationParameters - ball and stick representation parameters
	 * @mixes RepresentationParameters
	 * @mixes StructureRepresentationParameters
	 *
	 * @property {Integer} sphereDetail - sphere quality (icosahedron subdivisions)
	 * @property {Integer} radialSegments - cylinder quality (number of segments)
	 * @property {Boolean} openEnded - capped or not
	 * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
	 * @property {Float} aspectRatio - size difference between atom and bond radii
	 * @property {Boolean} lineOnly - render only bonds, and only as lines
	 * @property {Boolean} cylinderOnly - render only bonds (no atoms)
	 * @property {Boolean} multipleBond - whether or not to render multiple bonds
	 * @property {Float} bondSpacing - spacing for multiple bond rendering
	 */


	/**
	 * Ball And Stick representation object
	 * @class
	 * @extends StructureRepresentation
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {BallAndStickRepresentationParameters} params - ball and stick representation parameters
	 */
	function BallAndStickRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	BallAndStickRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: BallAndStickRepresentation,

	    type: "ball+stick",

	    defaultSize: 0.15,

	    parameters: Object.assign( {

	        sphereDetail: true,
	        radialSegments: true,
	        openEnded: true,
	        disableImpostor: true,
	        aspectRatio: {
	            type: "number", precision: 1, max: 10.0, min: 1.0
	        },
	        lineOnly: {
	            type: "boolean", rebuild: true
	        },
	        cylinderOnly: {
	            type: "boolean", rebuild: true
	        },
	        multipleBond: {
	            type: "boolean", rebuild: true
	        },
	        bondSpacing: {
	            type: "number", precision: 2, max: 1.0, min: 0.5
	        }

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.radius = defaults( p.radius, this.defaultSize );

	        this.aspectRatio = defaults( p.aspectRatio, 2.0 );
	        this.lineOnly = defaults( p.lineOnly, false );
	        this.cylinderOnly = defaults( p.cylinderOnly, false );
	        this.multipleBond = defaults( p.multipleBond, false );
	        this.bondSpacing = defaults( p.bondSpacing, 0.85 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getAtomParams: function( what, params ){

	        params = Object.assign( {
	            radiusParams: { "radius": this.radius, "scale": this.scale * this.aspectRatio }
	        }, params );

	        return StructureRepresentation.prototype.getAtomParams.call( this, what, params );

	    },

	    getAtomData: function( sview, what, params ){

	        return sview.getAtomData( this.getAtomParams( what, params ) );

	    },

	    getBondParams: function( what, params ){

	        params = Object.assign( {
	            multipleBond: this.multipleBond,
	            bondSpacing: this.bondSpacing
	        }, params );

	        return StructureRepresentation.prototype.getBondParams.call( this, what, params );

	    },

	    getBondData: function( sview, what, params ){

	        return sview.getBondData( this.getBondParams( what, params ) );

	    },

	    createData: function( sview ){

	        var bondData = this.getBondData( sview );
	        var bufferList = [];

	        if( this.lineOnly ){

	            this.lineBuffer = new LineBuffer(
	                bondData.position1,
	                bondData.position2,
	                bondData.color1,
	                bondData.color2,
	                this.getBufferParams()
	            );

	            bufferList.push( this.lineBuffer );

	        }else{

	            var cylinderBuffer = new CylinderBuffer(
	                bondData.position1,
	                bondData.position2,
	                bondData.color1,
	                bondData.color2,
	                bondData.radius,
	                bondData.pickingColor1,
	                bondData.pickingColor2,
	                this.getBufferParams( {
	                    openEnded: this.openEnded,
	                    radialSegments: this.radialSegments,
	                    disableImpostor: this.disableImpostor,
	                    dullInterior: true
	                } )
	            );

	            bufferList.push( cylinderBuffer );

	            if( !this.cylinderOnly ){

	                var atomData = this.getAtomData( sview );

	                var sphereBuffer = new SphereBuffer(
	                    atomData.position,
	                    atomData.color,
	                    atomData.radius,
	                    atomData.pickingColor,
	                    this.getBufferParams( {
	                        sphereDetail: this.sphereDetail,
	                        disableImpostor: this.disableImpostor,
	                        dullInterior: true
	                    } )
	                );

	                bufferList.push( sphereBuffer );

	            }

	        }

	        return {
	            bufferList: bufferList
	        };

	    },

	    updateData: function( what, data ){

	        if( this.multipleBond && what && what.radius ){
	            what.position = true;
	        }

	        var bondData = this.getBondData( data.sview, what );

	        if( this.lineOnly ){

	            var lineData = {};

	            if( !what || what.position ){
	                lineData.from = bondData.position1;
	                lineData.to = bondData.position2;
	            }

	            if( !what || what.color ){
	                lineData.color = bondData.color1;
	                lineData.color2 = bondData.color2;
	            }

	            data.bufferList[ 0 ].setAttributes( lineData );

	        }else{

	            var cylinderData = {};

	            if( !what || what.position ){
	                cylinderData.position1 = bondData.position1;
	                cylinderData.position2 = bondData.position2;
	            }

	            if( !what || what.color ){
	                cylinderData.color = bondData.color1;
	                cylinderData.color2 = bondData.color2;
	            }

	            if( !what || what.radius ){
	                cylinderData.radius = bondData.radius;
	            }

	            data.bufferList[ 0 ].setAttributes( cylinderData );

	            if( !this.cylinderOnly ){

	                var atomData = this.getAtomData( data.sview, what );
	                
	                var sphereData = {};

	                if( !what || what.position ){
	                    sphereData.position = atomData.position;
	                }

	                if( !what || what.color ){
	                    sphereData.color = atomData.color;
	                }

	                if( !what || what.radius ){
	                    sphereData.radius = atomData.radius;
	                }

	                data.bufferList[ 1 ].setAttributes( sphereData );

	            }

	        }

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && ( params.aspectRatio || params.bondSpacing ) ){

	            what.radius = true;
	            if( !ExtensionFragDepth || this.disableImpostor ){
	                rebuild = true;
	            }

	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );


	RepresentationRegistry.add( "ball+stick", BallAndStickRepresentation );

	function BackboneRepresentation( structure, viewer, params ){

	    BallAndStickRepresentation.call( this, structure, viewer, params );

	}

	BackboneRepresentation.prototype = Object.assign( Object.create(

	    BallAndStickRepresentation.prototype ), {

	    constructor: BackboneRepresentation,

	    type: "backbone",

	    defaultSize: 0.25,

	    parameters: Object.assign( {

	    }, BallAndStickRepresentation.prototype.parameters, {

	        multipleBond: null,
	        bondSpacing: null,

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.aspectRatio = defaults( p.aspectRatio, 1.0 );

	        BallAndStickRepresentation.prototype.init.call( this, p );

	    },

	    getAtomData: function( sview, what, params ){

	        return sview.getBackboneAtomData( this.getAtomParams( what, params ) );

	    },

	    getBondData: function( sview, what, params ){

	        var p = this.getBondParams( what, params );
	        p.colorParams.backbone = true;

	        return sview.getBackboneBondData( p );

	    }

	} );


	RepresentationRegistry.add( "backbone", BackboneRepresentation );

	function BaseRepresentation( structure, viewer, params ){

	    BallAndStickRepresentation.call( this, structure, viewer, params );

	}

	BaseRepresentation.prototype = Object.assign( Object.create(

	    BallAndStickRepresentation.prototype ), {

	    constructor: BaseRepresentation,

	    type: "base",

	    defaultSize: 0.3,

	    parameters: Object.assign( {

	    }, BallAndStickRepresentation.prototype.parameters, {

	        multipleBond: null,
	        bondSpacing: null,

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.aspectRatio = defaults( p.aspectRatio, 1.0 );

	        BallAndStickRepresentation.prototype.init.call( this, p );

	    },

	    getAtomData: function( sview, what, params ){

	        return sview.getRungAtomData( this.getAtomParams( what, params ) );

	    },

	    getBondData: function( sview, what, params ){

	        var p = this.getBondParams( what, params );
	        p.colorParams.rung = true;

	        return sview.getRungBondData( p );

	    }

	} );


	RepresentationRegistry.add( "base", BaseRepresentation );

	function Interpolator( m, tension ){

	    var dt = 1.0 / m;
	    var delta = 0.0001;

	    var vec1 = new Vector3();
	    var vec2 = new Vector3();

	    function interpolate( p0, p1, p2, p3, t ) {
	        var v0 = ( p2 - p0 ) * tension;
	        var v1 = ( p3 - p1 ) * tension;
	        var t2 = t * t;
	        var t3 = t * t2;
	        return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 +
	               ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 +
	               v0 * t + p1;
	    }

	    function interpolateToArr( v0, v1, v2, v3, t, arr, offset ){
	        arr[ offset + 0 ] = interpolate( v0.x, v1.x, v2.x, v3.x, t );
	        arr[ offset + 1 ] = interpolate( v0.y, v1.y, v2.y, v3.y, t );
	        arr[ offset + 2 ] = interpolate( v0.z, v1.z, v2.z, v3.z, t );
	    }

	    function interpolateToVec( v0, v1, v2, v3, t, vec ){
	        vec.x = interpolate( v0.x, v1.x, v2.x, v3.x, t );
	        vec.y = interpolate( v0.y, v1.y, v2.y, v3.y, t );
	        vec.z = interpolate( v0.z, v1.z, v2.z, v3.z, t );
	    }

	    function interpolatePosition( v0, v1, v2, v3, pos, offset ){
	        for( var j = 0; j < m; ++j ){
	            var l = offset + j * 3;
	            var d = dt * j;
	            interpolateToArr( v0, v1, v2, v3, d, pos, l );
	        }
	    }

	    function interpolateTangent( v0, v1, v2, v3, tan, offset ){
	        for( var j = 0; j < m; ++j ){
	            var d = dt * j;
	            var d1 = d - delta;
	            var d2 = d + delta;
	            var l = offset + j * 3;
	            // capping as a precation
	            if ( d1 < 0 ) d1 = 0;
	            if ( d2 > 1 ) d2 = 1;
	            //
	            interpolateToVec( v0, v1, v2, v3, d1, vec1 );
	            interpolateToVec( v0, v1, v2, v3, d2, vec2 );
	            //
	            vec2.sub( vec1 ).normalize();
	            vec2.toArray( tan, l );
	        }
	    }

	    function vectorSubdivide( interpolationFn, iterator, array, offset, isCyclic ){
	        var v0;
	        var v1 = iterator.next();
	        var v2 = iterator.next();
	        var v3 = iterator.next();
	        //
	        var n = iterator.size;
	        var n1 = n - 1;
	        var k = offset || 0;
	        for( var i = 0; i < n1; ++i ){
	            v0 = v1;
	            v1 = v2;
	            v2 = v3;
	            v3 = iterator.next();
	            interpolationFn( v0, v1, v2, v3, array, k );
	            k += 3 * m;
	        }
	        if( isCyclic ){
	            v0 = iterator.get( n - 2 );
	            v1 = iterator.get( n - 1 );
	            v2 = iterator.get( 0 );
	            v3 = iterator.get( 1 );
	            interpolationFn( v0, v1, v2, v3, array, k );
	            k += 3 * m;
	        }
	    }

	    //

	    this.getPosition = function( iterator, array, offset, isCyclic ){
	        iterator.reset();
	        vectorSubdivide(
	            interpolatePosition, iterator, array, offset, isCyclic
	        );
	        var n1 = iterator.size - 1;
	        var k = n1 * m * 3;
	        if( isCyclic ) k += m * 3;
	        var v = iterator.get( isCyclic ? 0 : n1 );
	        array[ k     ] = v.x;
	        array[ k + 1 ] = v.y;
	        array[ k + 2 ] = v.z;
	    };

	    this.getTangent = function( iterator, array, offset, isCyclic ){
	        iterator.reset();
	        vectorSubdivide(
	            interpolateTangent, iterator, array, offset, isCyclic
	        );
	        var n1 = iterator.size - 1;
	        var k = n1 * m * 3;
	        if( isCyclic ) k += m * 3;
	        copyArray( array, array, k - 3, k, 3 );
	    };

	    //

	    var vDir = new Vector3();
	    var vTan = new Vector3();
	    var vNorm = new Vector3();
	    var vBin = new Vector3();

	    var m2 = Math.ceil( m / 2 );

	    function interpolateNormalDir( u0, u1, u2, u3, v0, v1, v2, v3, tan, norm, bin, offset, shift ){
	        for( var j = 0; j < m; ++j ){
	            var l = offset + j * 3;
	            if( shift ) l += m2 * 3;
	            var d = dt * j;
	            interpolateToVec( u0, u1, u2, u3, d, vec1 );
	            interpolateToVec( v0, v1, v2, v3, d, vec2 );
	            vDir.subVectors( vec2, vec1 ).normalize();
	            vTan.fromArray( tan, l );
	            vBin.crossVectors( vDir, vTan ).normalize();
	            vBin.toArray( bin, l );
	            vNorm.crossVectors( vTan, vBin ).normalize();
	            vNorm.toArray( norm, l );
	        }
	    }

	    function interpolateNormal( vDir, tan, norm, bin, offset ){
	        for( var j = 0; j < m; ++j ){
	            var l = offset + j * 3;
	            vDir.copy( vNorm );
	            vTan.fromArray( tan, l );
	            vBin.crossVectors( vDir, vTan ).normalize();
	            vBin.toArray( bin, l );
	            vNorm.crossVectors( vTan, vBin ).normalize();
	            vNorm.toArray( norm, l );
	        }
	    }

	    this.getNormal = function( size, tan, norm, bin, offset, isCyclic, shift ){
	        vNorm.set( 0, 0, 1 );
	        var n = size;
	        var n1 = n - 1;
	        var k = offset || 0;
	        for( var i = 0; i < n1; ++i ){
	            interpolateNormal( vDir, tan, norm, bin, k );
	            k += 3 * m;
	        }
	        if( isCyclic ){
	            interpolateNormal( vDir, tan, norm, bin, k );
	            k += 3 * m;
	        }
	        vBin.toArray( bin, k );
	        vNorm.toArray( norm, k );
	    };

	    this.getNormalDir = function( iterDir1, iterDir2, tan, norm, bin, offset, isCyclic, shift ){
	        iterDir1.reset();
	        iterDir2.reset();
	        //
	        var vSub1 = new Vector3();
	        var vSub2 = new Vector3();
	        var vSub3 = new Vector3();
	        var vSub4 = new Vector3();
	        //
	        var d1v1 = new Vector3();
	        var d1v2 = new Vector3().copy( iterDir1.next() );
	        var d1v3 = new Vector3().copy( iterDir1.next() );
	        var d1v4 = new Vector3().copy( iterDir1.next() );
	        var d2v1 = new Vector3();
	        var d2v2 = new Vector3().copy( iterDir2.next() );
	        var d2v3 = new Vector3().copy( iterDir2.next() );
	        var d2v4 = new Vector3().copy( iterDir2.next() );
	        //
	        vNorm.set( 0, 0, 1 );
	        var n = iterDir1.size;
	        var n1 = n - 1;
	        var k = offset || 0;
	        for( var i = 0; i < n1; ++i ){
	            d1v1.copy( d1v2 );
	            d1v2.copy( d1v3 );
	            d1v3.copy( d1v4 );
	            d1v4.copy( iterDir1.next() );
	            d2v1.copy( d2v2 );
	            d2v2.copy( d2v3 );
	            d2v3.copy( d2v4 );
	            d2v4.copy( iterDir2.next() );
	            //
	            if( i === 0 ){
	                vSub1.subVectors( d2v1, d1v1 );
	                vSub2.subVectors( d2v2, d1v2 );
	                if( vSub1.dot( vSub2 ) < 0 ){
	                    vSub2.multiplyScalar( -1 );
	                    d2v2.addVectors( d1v2, vSub2 );
	                }
	                vSub3.subVectors( d2v3, d1v3 );
	                if( vSub2.dot( vSub3 ) < 0 ){
	                    vSub3.multiplyScalar( -1 );
	                    d2v3.addVectors( d1v3, vSub3 );
	                }
	            }else{
	                vSub3.copy( vSub4 );
	            }
	            vSub4.subVectors( d2v4, d1v4 );
	            if( vSub3.dot( vSub4 ) < 0 ){
	                vSub4.multiplyScalar( -1 );
	                d2v4.addVectors( d1v4, vSub4 );
	            }
	            interpolateNormalDir(
	                d1v1, d1v2, d1v3, d1v4,
	                d2v1, d2v2, d2v3, d2v4,
	                tan, norm, bin, k, shift
	            );
	            k += 3 * m;
	        }
	        if( isCyclic ){
	            d1v1.copy( iterDir1.get( n - 2 ) );
	            d1v2.copy( iterDir1.get( n - 1 ) );
	            d1v3.copy( iterDir1.get( 0 ) );
	            d1v4.copy( iterDir1.get( 1 ) );
	            d2v1.copy( iterDir2.get( n - 2 ) );
	            d2v2.copy( iterDir2.get( n - 1 ) );
	            d2v3.copy( iterDir2.get( 0 ) );
	            d2v4.copy( iterDir2.get( 1 ) );
	            //
	            vSub3.copy( vSub4 );
	            vSub4.subVectors( d2v4, d1v4 );
	            if( vSub3.dot( vSub4 ) < 0 ){
	                vSub4.multiplyScalar( -1 );
	                d2v4.addVectors( d1v4, vSub4 );
	            }
	            interpolateNormalDir(
	                d1v1, d1v2, d1v3, d1v4,
	                d2v1, d2v2, d2v3, d2v4,
	                tan, norm, bin, k, shift
	            );
	            k += 3 * m;
	        }
	        if( shift ){
	            // FIXME shift requires data from one more preceeding residue
	            vBin.fromArray( bin, m2 * 3 );
	            vNorm.fromArray( norm, m2 * 3 );
	            for( var j = 0; j < m2; ++j ){
	                vBin.toArray( bin, j * 3 );
	                vNorm.toArray( norm, j * 3 );
	            }
	        }else{
	            vBin.toArray( bin, k );
	            vNorm.toArray( norm, k );
	        }
	    };

	    //

	    function interpolateColor( item1, item2, colFn, pcolFn, col, pcol, offset ){
	        var j, l;
	        for( j = 0; j < m2; ++j ){
	            l = offset + j * 3;
	            colFn( item1, col, l );  // itemColorToArray
	            pcolFn( item1, pcol, l );  // itemPickingColorToArray
	        }
	        for( j = m2; j < m; ++j ){
	            l = offset + j * 3;
	            colFn( item2, col, l );  // itemColorToArray
	            pcolFn( item2, pcol, l );  // itemPickingColorToArray
	        }
	    }

	    this.getColor = function( iterator, colFn, pcolFn, col, pcol, offset, isCyclic ){
	        iterator.reset();
	        var i0 = iterator.next();  // first element not needed, replaced in the loop
	        var i1 = iterator.next();
	        //
	        var n = iterator.size;
	        var n1 = n - 1;
	        var k = offset || 0;
	        for( var i = 0; i < n1; ++i ){
	            i0 = i1;
	            i1 = iterator.next();
	            interpolateColor( i0, i1, colFn, pcolFn, col, pcol, k );
	            k += 3 * m;
	        }
	        if( isCyclic ){
	            i0 = iterator.get( n - 1 );
	            i1 = iterator.get( 0 );
	            interpolateColor( i0, i1, colFn, pcolFn, col, pcol, k );
	            k += 3 * m;
	        }
	        //
	        col[ k     ] = col[ k - 3 ];
	        col[ k + 1 ] = col[ k - 2 ];
	        col[ k + 2 ] = col[ k - 1 ];
	        pcol[ k     ] = pcol[ k - 3 ];
	        pcol[ k + 1 ] = pcol[ k - 2 ];
	        pcol[ k + 2 ] = pcol[ k - 1 ];
	    };

	    //

	    function interpolateSize( item1, item2, sizeFn, size, offset ){
	        var s1 = sizeFn( item1 );
	        var s2 = sizeFn( item2 );
	        for( var j = 0; j < m; ++j ){
	            // linear interpolation
	            var t = j / m;
	            size[ offset + j ] = ( 1 - t ) * s1 + t * s2;
	        }
	    }

	    this.getSize = function( iterator, sizeFn, size, offset, isCyclic ){
	        iterator.reset();
	        var i0 = iterator.next();  // first element not needed, replaced in the loop
	        var i1 = iterator.next();
	        //
	        var n = iterator.size;
	        var n1 = n - 1;
	        var k = offset || 0;
	        for( var i = 0; i < n1; ++i ){
	            i0 = i1;
	            i1 = iterator.next();
	            interpolateSize( i0, i1, sizeFn, size, k );
	            k += m;
	        }
	        if( isCyclic ){
	            i0 = iterator.get( n - 1 );
	            i1 = iterator.get( 0 );
	            interpolateSize( i0, i1, sizeFn, size, k );
	            k += m;
	        }
	        //
	        size[ k ] = size[ k - 1 ];
	    };

	}


	function Spline( polymer, params ){

	    this.polymer = polymer;
	    this.size = polymer.residueCount;

	    var p = params || {};
	    this.directional = p.directional || false;
	    this.positionIterator = p.positionIterator || false;
	    this.subdiv = p.subdiv || 1;
	    this.smoothSheet = p.smoothSheet || false;

	    if( isNaN( p.tension ) ){
	        this.tension = this.polymer.isNucleic() ? 0.5 : 0.9;
	    }else{
	        this.tension = p.tension || 0.5;
	    }

	    this.interpolator = new Interpolator( this.subdiv, this.tension );

	}

	Spline.prototype = {

	    constructor: Spline,

	    getAtomIterator: function( type, smooth ){

	        var polymer = this.polymer;
	        var structure = polymer.structure;
	        var n = polymer.residueCount;

	        var i = 0;
	        var j = -1;

	        var cache = [
	            structure.getAtomProxy(),
	            structure.getAtomProxy(),
	            structure.getAtomProxy(),
	            structure.getAtomProxy()
	        ];

	        var cache2 = [
	            new Vector3(),
	            new Vector3(),
	            new Vector3(),
	            new Vector3()
	        ];

	        function next(){
	            var atomProxy = this.get( j );
	            j += 1;
	            return atomProxy;
	        }

	        var apPrev = structure.getAtomProxy();
	        var apNext = structure.getAtomProxy();

	        function get( idx ){
	            var atomProxy = cache[ i % 4 ];
	            atomProxy.index = polymer.getAtomIndexByType( idx, type );
	            if( smooth && idx > 0 && idx < n && atomProxy.sstruc === "e" ){
	                var vec = cache2[ i % 4 ];
	                apPrev.index = polymer.getAtomIndexByType( idx + 1, type );
	                apNext.index = polymer.getAtomIndexByType( idx - 1, type );
	                vec.addVectors( apPrev, apNext )
	                    .add( atomProxy ).add( atomProxy )
	                    .multiplyScalar( 0.25 );
	                i += 1;
	                return vec;
	            }
	            i += 1;
	            return atomProxy;
	        }

	        function reset(){
	            i = 0;
	            j = -1;
	        }

	        return {
	            size: n,
	            next: next,
	            get: get,
	            reset: reset
	        };

	    },

	    getSubdividedColor: function( params ){

	        var m = this.subdiv;
	        var polymer = this.polymer;
	        var n = polymer.residueCount;
	        var n1 = n - 1;
	        var nCol = n1 * m * 3 + 3;
	        if( polymer.isCyclic ) nCol += m * 3;

	        var col = new Float32Array( nCol );
	        var pcol = new Float32Array( nCol );
	        var iterator = this.getAtomIterator( "trace" );

	        var p = params || {};
	        p.structure = polymer.structure;

	        var colorMaker = ColorMakerRegistry.getScheme( p );
	        var pickingColorMaker = ColorMakerRegistry.getPickingScheme( p );

	        function colFn( item, array, offset ){
	            colorMaker.atomColorToArray( item, array, offset );
	        }

	        function pcolFn( item, array, offset ){
	            pickingColorMaker.atomColorToArray( item, array, offset );
	        }

	        this.interpolator.getColor(
	            iterator, colFn, pcolFn, col, pcol, 0, polymer.isCyclic
	        );

	        return {
	            "color": col,
	            "pickingColor": pcol
	        };

	    },

	    getSubdividedPosition: function(){

	        var pos = this.getPosition();

	        return {
	            "position": pos
	        };

	    },

	    getSubdividedOrientation: function(){

	        var tan = this.getTangent();
	        var normals = this.getNormals( tan );

	        return {
	            "tangent": tan,
	            "normal": normals.normal,
	            "binormal": normals.binormal
	        };

	    },

	    getSubdividedSize: function( type, scale ){

	        var m = this.subdiv;
	        var polymer = this.polymer;
	        var n = polymer.residueCount;
	        var n1 = n - 1;
	        var nSize = n1 * m + 1;
	        if( polymer.isCyclic ) nSize += m;

	        var size = new Float32Array( nSize );
	        var iterator = this.getAtomIterator( "trace" );

	        var radiusFactory = new RadiusFactory( type, scale );

	        function sizeFn( item ){
	            return radiusFactory.atomRadius( item );
	        }

	        this.interpolator.getSize(
	            iterator, sizeFn, size, 0, polymer.isCyclic
	        );

	        return {
	            "size": size
	        };

	    },

	    getPosition: function(){

	        var m = this.subdiv;
	        var polymer = this.polymer;
	        var n = polymer.residueCount;
	        var n1 = n - 1;
	        var nPos = n1 * m * 3 + 3;
	        if( polymer.isCyclic ) nPos += m * 3;

	        var pos = new Float32Array( nPos );
	        var iterator = this.positionIterator || this.getAtomIterator( "trace", this.smoothSheet );

	        this.interpolator.getPosition(
	            iterator, pos, 0, polymer.isCyclic
	        );

	        return pos;

	    },

	    getTangent: function(){

	        var m = this.subdiv;
	        var polymer = this.polymer;
	        var n = this.size;
	        var n1 = n - 1;
	        var nTan = n1 * m * 3 + 3;
	        if( polymer.isCyclic ) nTan += m * 3;

	        var tan = new Float32Array( nTan );
	        var iterator = this.positionIterator || this.getAtomIterator( "trace", this.smoothSheet );

	        this.interpolator.getTangent(
	            iterator, tan, 0, polymer.isCyclic
	        );

	        return tan;

	    },

	    getNormals: function( tan ){

	        var m = this.subdiv;
	        var polymer = this.polymer;
	        var isProtein = polymer.isProtein();
	        var n = this.size;
	        var n1 = n - 1;
	        var nNorm = n1 * m * 3 + 3;
	        if( polymer.isCyclic ) nNorm += m * 3;

	        var norm = new Float32Array( nNorm );
	        var bin = new Float32Array( nNorm );

	        if( this.directional && !this.polymer.isCg() ){
	            var iterDir1 = this.getAtomIterator( "direction1" );
	            var iterDir2 = this.getAtomIterator( "direction2" );
	            this.interpolator.getNormalDir(
	                iterDir1, iterDir2, tan, norm, bin, 0, polymer.isCyclic, isProtein
	            );
	        }else{
	            this.interpolator.getNormal(
	                n, tan, norm, bin, 0, polymer.isCyclic, isProtein
	            );
	        }

	        return {
	            "normal": norm,
	            "binormal": bin
	        };

	    }

	};

	function TubeMeshBuffer( position, normal, binormal, tangent, color, size, pickingColor, params ){

	    var p = params || {};

	    this.aspectRatio = defaults( p.aspectRatio, 1.0 );
	    this.radialSegments = defaults( p.radialSegments, 4 );
	    this.capped = defaults( p.capped, false );

	    this.capVertices = this.capped ? this.radialSegments : 0;
	    this.capTriangles = this.capped ? this.radialSegments - 2 : 0;

	    var n = position.length / 3;
	    var n1 = n - 1;
	    var radialSegments1 = this.radialSegments + 1;

	    var x = n * this.radialSegments * 3 + 2 * this.capVertices * 3;

	    this.size2 = n;

	    this.meshPosition = new Float32Array( x );
	    this.meshColor = new Float32Array( x );
	    this.meshNormal = new Float32Array( x );
	    this.meshPickingColor = pickingColor ? new Float32Array( x ) : undefined;

	    var xi = n1 * 2 * this.radialSegments * 3 + 2 * this.capTriangles * 3;
	    var TypedArray = this.meshPosition.length / 3 > 65535 ? Uint32Array : Uint16Array;
	    this.meshIndex = new TypedArray( xi );
	    this.makeIndex();

	    MeshBuffer.call(
	        this, this.meshPosition, this.meshColor, this.meshIndex,
	        this.meshNormal, this.meshPickingColor, p
	    );

	    this.setAttributes( {
	        position: position,
	        normal: normal,
	        binormal: binormal,
	        tangent: tangent,
	        color: color,
	        size: size,
	        pickingColor: pickingColor
	    } );

	}

	TubeMeshBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: TubeMeshBuffer,

	    setAttributes: function(){

	        var vTangent = new Vector3();
	        var vMeshNormal = new Vector3();

	        return function( data ){

	            var aspectRatio = this.aspectRatio;

	            var n = this.size2;
	            var n1 = n - 1;
	            var capVertices = this.capVertices;
	            var radialSegments = this.radialSegments;

	            var attributes = this.geometry.attributes;

	            var position, normal, binormal, tangent, color, size, pickingColor;
	            var meshPosition, meshColor, meshNormal, meshPickingColor;

	            if( data.position ){

	                position = data.position;
	                normal = data.normal;
	                binormal = data.binormal;
	                tangent = data.tangent;
	                size = data.size;

	                meshPosition = attributes.position.array;
	                meshNormal = attributes.normal.array;

	                attributes.position.needsUpdate = true;
	                attributes.normal.needsUpdate = true;

	            }

	            if( data.color ){

	                color = data.color;
	                meshColor = attributes.color.array;
	                attributes.color.needsUpdate = true;

	            }

	            if( data.pickingColor ){

	                pickingColor = data.pickingColor;
	                meshPickingColor = attributes.pickingColor.array;
	                attributes.pickingColor.needsUpdate = true;

	            }

	            var i, j, k, l, s, t;
	            var v, cx, cy;
	            var cx1, cy1, cx2, cy2;
	            var radius;
	            var irs, irs1;

	            var normX, normY, normZ;
	            var biX, biY, biZ;
	            var posX, posY, posZ;

	            var cxArr = [];
	            var cyArr = [];
	            var cx1Arr = [];
	            var cy1Arr = [];
	            var cx2Arr = [];
	            var cy2Arr = [];

	            if( position ){

	                for( j = 0; j < radialSegments; ++j ){

	                    v = ( j / radialSegments ) * 2 * Math.PI;

	                    cxArr[ j ] = aspectRatio * Math.cos( v );
	                    cyArr[ j ] = Math.sin( v );

	                    cx1Arr[ j ] = aspectRatio * Math.cos( v - 0.01 );
	                    cy1Arr[ j ] = Math.sin( v - 0.01 );
	                    cx2Arr[ j ] = aspectRatio * Math.cos( v + 0.01 );
	                    cy2Arr[ j ] = Math.sin( v + 0.01 );

	                }

	            }

	            for( i = 0; i < n; ++i ){

	                k = i * 3;
	                l = k * radialSegments;

	                if( position ){

	                    vTangent.set(
	                        tangent[ k ], tangent[ k + 1 ], tangent[ k + 2 ]
	                    );

	                    normX = normal[ k     ];
	                    normY = normal[ k + 1 ];
	                    normZ = normal[ k + 2 ];

	                    biX = binormal[ k     ];
	                    biY = binormal[ k + 1 ];
	                    biZ = binormal[ k + 2 ];

	                    posX = position[ k     ];
	                    posY = position[ k + 1 ];
	                    posZ = position[ k + 2 ];

	                    radius = size[ i ];

	                }

	                for( j = 0; j < radialSegments; ++j ){

	                    s = l + j * 3;

	                    if( position ){

	                        cx = -radius * cxArr[ j ]; // TODO: Hack: Negating it so it faces outside.
	                        cy = radius * cyArr[ j ];

	                        cx1 = -radius * cx1Arr[ j ];
	                        cy1 = radius * cy1Arr[ j ];
	                        cx2 = -radius * cx2Arr[ j ];
	                        cy2 = radius * cy2Arr[ j ];

	                        meshPosition[ s     ] = posX + cx * normX + cy * biX;
	                        meshPosition[ s + 1 ] = posY + cx * normY + cy * biY;
	                        meshPosition[ s + 2 ] = posZ + cx * normZ + cy * biZ;

	                        // TODO half of these are symmetric
	                        vMeshNormal.set(
	                            // ellipse tangent approximated as vector from/to adjacent points
	                            ( cx2 * normX + cy2 * biX ) -
	                                ( cx1 * normX + cy1 * biX ),
	                            ( cx2 * normY + cy2 * biY ) -
	                                ( cx1 * normY + cy1 * biY ),
	                            ( cx2 * normZ + cy2 * biZ ) -
	                                ( cx1 * normZ + cy1 * biZ )
	                        ).cross( vTangent );

	                        meshNormal[ s     ] = vMeshNormal.x;
	                        meshNormal[ s + 1 ] = vMeshNormal.y;
	                        meshNormal[ s + 2 ] = vMeshNormal.z;

	                    }

	                    if( color ){

	                        meshColor[ s     ] = color[ k     ];
	                        meshColor[ s + 1 ] = color[ k + 1 ];
	                        meshColor[ s + 2 ] = color[ k + 2 ];

	                    }

	                    if( pickingColor ){

	                        meshPickingColor[ s     ] = pickingColor[ k     ];
	                        meshPickingColor[ s + 1 ] = pickingColor[ k + 1 ];
	                        meshPickingColor[ s + 2 ] = pickingColor[ k + 2 ];

	                    }

	                }

	            }

	            // front cap

	            k = 0;
	            l = n * 3 * radialSegments;

	            for( j = 0; j < radialSegments; ++j ){

	                s = k + j * 3;
	                t = l + j * 3;

	                if( position ){

	                    meshPosition[ t     ] = meshPosition[ s     ];
	                    meshPosition[ t + 1 ] = meshPosition[ s + 1 ];
	                    meshPosition[ t + 2 ] = meshPosition[ s + 2 ];

	                    meshNormal[ t     ] = tangent[ k     ];
	                    meshNormal[ t + 1 ] = tangent[ k + 1 ];
	                    meshNormal[ t + 2 ] = tangent[ k + 2 ];

	                }

	                if( color ){

	                    meshColor[ t     ] = meshColor[ s     ];
	                    meshColor[ t + 1 ] = meshColor[ s + 1 ];
	                    meshColor[ t + 2 ] = meshColor[ s + 2 ];

	                }

	                if( pickingColor ){

	                    meshPickingColor[ t     ] = meshPickingColor[ s     ];
	                    meshPickingColor[ t + 1 ] = meshPickingColor[ s + 1 ];
	                    meshPickingColor[ t + 2 ] = meshPickingColor[ s + 2 ];

	                }

	            }

	            // back cap

	            k = ( n - 1 ) * 3 * radialSegments;
	            l = ( n + 1 ) * 3 * radialSegments;

	            for( j = 0; j < radialSegments; ++j ){

	                s = k + j * 3;
	                t = l + j * 3;

	                if( position ){

	                    meshPosition[ t     ] = meshPosition[ s     ];
	                    meshPosition[ t + 1 ] = meshPosition[ s + 1 ];
	                    meshPosition[ t + 2 ] = meshPosition[ s + 2 ];

	                    meshNormal[ t     ] = tangent[ n1 * 3     ];
	                    meshNormal[ t + 1 ] = tangent[ n1 * 3 + 1 ];
	                    meshNormal[ t + 2 ] = tangent[ n1 * 3 + 2 ];

	                }

	                if( color ){

	                    meshColor[ t     ] = meshColor[ s     ];
	                    meshColor[ t + 1 ] = meshColor[ s + 1 ];
	                    meshColor[ t + 2 ] = meshColor[ s + 2 ];

	                }

	                if( pickingColor ){

	                    meshPickingColor[ t     ] = meshPickingColor[ s     ];
	                    meshPickingColor[ t + 1 ] = meshPickingColor[ s + 1 ];
	                    meshPickingColor[ t + 2 ] = meshPickingColor[ s + 2 ];

	                }

	            }

	        };

	    }(),

	    makeIndex: function(){

	        var meshIndex = this.meshIndex;

	        var n = this.size2;
	        var n1 = n - 1;
	        var capTriangles = this.capTriangles;
	        var radialSegments = this.radialSegments;
	        var radialSegments1 = this.radialSegments + 1;

	        var i, k, irs, irs1, l, j;

	        for( i = 0; i < n1; ++i ){

	            k = i * radialSegments * 3 * 2;

	            irs = i * radialSegments;
	            irs1 = ( i + 1 ) * radialSegments;

	            for( j = 0; j < radialSegments; ++j ){

	                l = k + j * 3 * 2;

	                // meshIndex[ l + 0 ] = irs + ( ( j + 0 ) % radialSegments );
	                meshIndex[ l ] = irs + j;
	                meshIndex[ l + 1 ] = irs + ( ( j + 1 ) % radialSegments );
	                // meshIndex[ l + 2 ] = irs1 + ( ( j + 0 ) % radialSegments );
	                meshIndex[ l + 2 ] = irs1 + j;

	                // meshIndex[ l + 3 ] = irs1 + ( ( j + 0 ) % radialSegments );
	                meshIndex[ l + 3 ] = irs1 + j;
	                meshIndex[ l + 4 ] = irs + ( ( j + 1 ) % radialSegments );
	                meshIndex[ l + 5 ] = irs1 + ( ( j + 1 ) % radialSegments );

	            }

	        }

	        // capping

	        var strip = [ 0 ];

	        for( j = 1; j < radialSegments1 / 2; ++j ){

	            strip.push( j );
	            if( radialSegments - j !== j ){
	                strip.push( radialSegments - j );
	            }

	        }

	        // front cap

	        l = n1 * radialSegments * 3 * 2;
	        k = n * radialSegments;

	        for( j = 0; j < strip.length - 2; ++j ){

	            if( j % 2 === 0 ){
	                meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 0 ];
	                meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
	                meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 2 ];
	            }else{
	                meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 2 ];
	                meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
	                meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 0 ];
	            }

	        }

	        // back cap

	        l = n1 * radialSegments * 3 * 2 + 3 * capTriangles;
	        k = n * radialSegments + radialSegments;

	        for( j = 0; j < strip.length - 2; ++j ){

	            if( j % 2 === 0 ){
	                meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 0 ];
	                meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
	                meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 2 ];
	            }else{
	                meshIndex[ l + j * 3 + 0 ] = k + strip[ j + 2 ];
	                meshIndex[ l + j * 3 + 1 ] = k + strip[ j + 1 ];
	                meshIndex[ l + j * 3 + 2 ] = k + strip[ j + 0 ];
	            }

	        }

	    }

	} );

	function CartoonRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	CartoonRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: CartoonRepresentation,

	    type: "cartoon",

	    parameters: Object.assign( {

	        aspectRatio: {
	            type: "number", precision: 1, max: 10.0, min: 1.0
	        },
	        subdiv: {
	            type: "integer", max: 50, min: 1, rebuild: true
	        },
	        radialSegments: {
	            type: "integer", max: 50, min: 1, rebuild: true
	        },
	        tension: {
	            type: "number", precision: 1, max: 1.0, min: 0.1
	        },
	        capped: {
	            type: "boolean", rebuild: true
	        },
	        smoothSheet: {
	            type: "boolean", rebuild: true
	        }

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "atomindex" );
	        p.colorScale = defaults( p.colorScale, "RdYlBu" );
	        p.radius = defaults( p.radius, "sstruc" );
	        p.scale = defaults( p.scale, 0.7 );

	        if( p.quality === "low" ){
	            this.subdiv = 3;
	        }else if( p.quality === "medium" ){
	            this.subdiv = 6;
	        }else if( p.quality === "high" ){
	            this.subdiv = 12;
	        }else{
	            this.subdiv = defaults( p.subdiv, 6 );
	        }

	        this.aspectRatio = defaults( p.aspectRatio, 5.0 );
	        this.tension = defaults( p.tension, NaN );
	        this.capped = defaults( p.capped, true );
	        this.smoothSheet = defaults( p.smoothSheet, false );

	        StructureRepresentation.prototype.init.call( this, p );

	        if( p.quality === "low" ){
	            this.radialSegments = 6;
	        }

	    },

	    getSplineParams: function( params ){

	        return Object.assign( {
	            subdiv: this.subdiv,
	            tension: this.tension,
	            directional: this.aspectRatio === 1.0 ? false : true,
	            smoothSheet: this.smoothSheet
	        }, params );

	    },

	    getSpline: function( polymer ){

	        return new Spline( polymer, this.getSplineParams() );

	    },

	    getScale: function( polymer ){

	        return polymer.isCg() ? this.scale * this.aspectRatio : this.scale;

	    },

	    getAspectRatio: function( polymer ){

	        return polymer.isCg() ? 1.0 : this.aspectRatio;

	    },

	    createData: function( sview ){

	        var bufferList = [];
	        var polymerList = [];

	        this.structure.eachPolymer( function( polymer ){

	            if( polymer.residueCount < 4 ) return;
	            polymerList.push( polymer );

	            var spline = this.getSpline( polymer );

	            var subPos = spline.getSubdividedPosition();
	            var subOri = spline.getSubdividedOrientation();
	            var subCol = spline.getSubdividedColor( this.getColorParams() );
	            var subSize = spline.getSubdividedSize( this.radius, this.getScale( polymer ) );

	            bufferList.push(
	                new TubeMeshBuffer(
	                    subPos.position,
	                    subOri.normal,
	                    subOri.binormal,
	                    subOri.tangent,
	                    subCol.color,
	                    subSize.size,
	                    subCol.pickingColor,
	                    this.getBufferParams( {
	                        radialSegments: this.radialSegments,
	                        aspectRatio: this.getAspectRatio( polymer ),
	                        capped: this.capped,
	                        dullInterior: true
	                    } )
	                )
	            );

	        }.bind( this ), sview.getSelection() );

	        return {
	            bufferList: bufferList,
	            polymerList: polymerList
	        };

	    },

	    updateData: function( what, data ){

	        if( exports.Debug ) Log$1.time( this.type + " repr update" );

	        what = what || {};

	        for( var i = 0, il = data.polymerList.length; i < il; ++i ){

	            var bufferData = {};
	            var polymer = data.polymerList[ i ];
	            var spline = this.getSpline( polymer );

	            data.bufferList[ i ].aspectRatio = this.getAspectRatio( polymer );

	            if( what.position || what.radius ){

	                var subPos = spline.getSubdividedPosition();
	                var subOri = spline.getSubdividedOrientation();
	                var subSize = spline.getSubdividedSize( this.radius, this.getScale( polymer ) );

	                bufferData.position = subPos.position;
	                bufferData.normal = subOri.normal;
	                bufferData.binormal = subOri.binormal;
	                bufferData.tangent = subOri.tangent;
	                bufferData.size = subSize.size;

	            }

	            if( what.color ){

	                var subCol = spline.getSubdividedColor( this.getColorParams() );

	                bufferData.color = subCol.color;
	                bufferData.pickingColor = subCol.pickingColor;

	            }

	            data.bufferList[ i ].setAttributes( bufferData );

	        }

	        if( exports.Debug ) Log$1.timeEnd( this.type + " repr update" );

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && params.aspectRatio ){
	            what.radius = true;
	        }

	        if( params && params.tension ){
	            what.position = true;
	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );


	RepresentationRegistry.add( "cartoon", CartoonRepresentation );

	function Contact( sview1, sview2 ){

	    this.sview1 = sview1;
	    this.sview2 = sview2;

	    // this.kdtree1 = new Kdtree( sview1 );
	    this.kdtree2 = new Kdtree( sview2 );

	}

	Contact.prototype = {

	    within: function( maxDistance, minDistance ){

	        Log$1.time( "Contact within" );

	        // var kdtree1 = this.kdtree1;
	        var kdtree2 = this.kdtree2;

	        var ap2 = this.sview1.getAtomProxy();
	        var atomSet = this.sview1.getAtomSet( false );
	        var bondStore = new BondStore();

	        this.sview1.eachAtom( function( ap1 ){

	            var found = false;
	            var contacts = kdtree2.nearest(
	                ap1, Infinity, maxDistance
	            );

	            for( var j = 0, m = contacts.length; j < m; ++j ){

	                var d = contacts[ j ];
	                ap2.index = d.index;

	                if( ap1.residueIndex !== ap2.residueIndex &&
	                    ( !minDistance || d.distance > minDistance ) ){
	                    found = true;
	                    atomSet.add_unsafe( ap2.index );
	                    bondStore.addBond( ap1, ap2, 1 );
	                }

	            }

	            if( found ){
	                atomSet.add_unsafe( ap1.index );
	            }

	        } );

	        var bondSet = new Bitset( bondStore.count );
	        bondSet.set_all( true );

	        Log$1.timeEnd( "Contact within" );

	        return {
	            atomSet: atomSet,
	            bondSet: bondSet,
	            bondStore: bondStore
	        };

	    }

	};

	function polarContacts( structure, maxDistance, maxAngle ){

	    maxDistance = maxDistance || 3.5;
	    maxAngle = maxAngle || 40;

	    var donorSelection = new Selection(
	        "( ARG and ( .NE or .NH1 or .NH2 ) ) or " +
	        "( ASP and .ND2 ) or " +
	        "( GLN and .NE2 ) or " +
	        "( HIS and ( .ND1 or .NE2 ) ) or " +
	        "( LYS and .NZ ) or " +
	        "( SER and .OG ) or " +
	        "( THR and .OG1 ) or " +
	        "( TRP and .NE1 ) or " +
	        "( TYR and .OH ) or " +
	        "( PROTEIN and .N )"
	    );

	    var acceptorSelection = new Selection(
	        "( ASN and .OD1 ) or " +
	        "( ASP and ( OD1 or .OD2 ) ) or " +
	        "( GLN and .OE1 ) or " +
	        "( GLU and ( .OE1 or .OE2 ) ) or " +
	        "( HIS and ( .ND1 or .NE2 ) ) or " +
	        "( SER and .OG ) or " +
	        "( THR and .OG1 ) or " +
	        "( TYR and .OH ) or " +
	        "( PROTEIN and .O )"
	    );

	    var donorView = structure.getView( donorSelection );
	    var acceptorView = structure.getView( acceptorSelection );

	    var contact = new Contact( donorView, acceptorView );
	    var data = contact.within( maxDistance );
	    var bondStore = data.bondStore;

	    var ap1 = structure.getAtomProxy();
	    var ap2 = structure.getAtomProxy();
	    var atomCA = structure.getAtomProxy();
	    var atomC = structure.getAtomProxy();
	    var rp = structure.getResidueProxy();
	    var rpPrev = structure.getResidueProxy();
	    var v1 = new Vector3();
	    var v2 = new Vector3();

	    var checkAngle = function( atom1, atom2, oName, cName ){

	        var atomO, atomN;

	        if( atom1.atomname === oName ){
	            atomO = atom1;
	            atomN = atom2;
	        }else{
	            atomO = atom2;
	            atomN = atom1;
	        }

	        rp.index = atomO.residueIndex;
	        var atomC = rp.getAtomIndexByName( cName );

	        v1.subVectors( atomC, atomO );
	        v2.subVectors( atomC, atomN );

	        return radToDeg( v1.angleTo( v2 ) ) < maxAngle;

	    };

	    for( var i = 0, il = bondStore.count; i < il; ++i ){

	        ap1.index = bondStore.atomIndex1[ i ];
	        ap2.index = bondStore.atomIndex2[ i ];

	        if( ( ap1.atomname === "O" && ap2.atomname === "N" ) ||
	            ( ap1.atomname === "N" && ap2.atomname === "O" )
	        ){

	            // ignore backbone to backbone contacts
	            data.bondSet.flip_unsafe( i );
	            continue;

	        }else if( ap1.atomname === "N" || ap2.atomname === "N" ){

	            var atomN, atomX;

	            if( ap1.atomname === "N" ){
	                atomN = ap1;
	                atomX = ap2;
	            }else{
	                atomN = ap2;
	                atomX = ap1;
	            }

	            rp.index = atomN.residueIndex;
	            atomCA.index = rp.getAtomIndexByName( "CA" );
	            if( atomCA.index === undefined ) continue;

	            var prevRes = rp.getPreviousConnectedResidue( rpPrev );
	            if( prevRes === undefined ) continue;

	            atomC.index = prevRes.getAtomIndexByName( "C" );
	            if( atomC.index === undefined ) continue;

	            v1.subVectors( atomN, atomC );
	            v2.subVectors( atomN, atomCA );
	            v1.add( v2 ).multiplyScalar( 0.5 );
	            v2.subVectors( atomX, atomN );

	            if( radToDeg( v1.angleTo( v2 ) ) > maxAngle ){
	                data.bondSet.flip_unsafe( i );
	            }

	        }else if(
	            ( ap1.atomname === "OH" && ap1.resname === "TYR" ) ||
	            ( ap2.atomname === "OH" && ap2.resname === "TYR" )
	        ){

	            if( !checkAngle( ap1, ap2, "OH", "CZ" ) ){
	                data.bondSet.flip_unsafe( i );
	            }

	        }

	    }

	    return {
	        atomSet: data.atomSet,
	        bondSet: data.bondSet,
	        bondStore: data.bondStore
	    };

	}


	function polarBackboneContacts( structure, maxDistance, maxAngle ){

	    maxDistance = maxDistance || 3.5;
	    maxAngle = maxAngle || 40;

	    var donorSelection = new Selection(
	        "( PROTEIN and .N )"
	    );

	    var acceptorSelection = new Selection(
	        "( PROTEIN and .O )"
	    );

	    var donorView = structure.getView( donorSelection );
	    var acceptorView = structure.getView( acceptorSelection );

	    var contact = new Contact( donorView, acceptorView );
	    var data = contact.within( maxDistance );
	    var bondStore = data.bondStore;

	    var ap1 = structure.getAtomProxy();
	    var ap2 = structure.getAtomProxy();
	    var atomCA = structure.getAtomProxy();
	    var atomC = structure.getAtomProxy();
	    var rp = structure.getResidueProxy();
	    var rpPrev = structure.getResidueProxy();
	    var v1 = new Vector3();
	    var v2 = new Vector3();

	    for( var i = 0, il = bondStore.count; i < il; ++i ){

	        ap1.index = bondStore.atomIndex1[ i ];
	        ap2.index = bondStore.atomIndex2[ i ];

	        var atomN, atomO;

	        if( ap1.atomname === "N" ){
	            atomN = ap1;
	            atomO = ap2;
	        }else{
	            atomN = ap2;
	            atomO = ap1;
	        }

	        rp.index = atomN.residueIndex;

	        atomCA.index = rp.getAtomIndexByName( "CA" );
	        if( atomCA.index === undefined ) continue;

	        var prevRes = rp.getPreviousConnectedResidue( rpPrev );
	        if( prevRes === undefined ) continue;

	        atomC.index = prevRes.getAtomIndexByName( "C" );
	        if( atomC.index === undefined ) continue;

	        v1.subVectors( atomN, atomC );
	        v2.subVectors( atomN, atomCA );
	        v1.add( v2 ).multiplyScalar( 0.5 );
	        v2.subVectors( atomO, atomN );

	        // Log.log( radToDeg( v1.angleTo( v2 ) ) );

	        if( radToDeg( v1.angleTo( v2 ) ) > maxAngle ){
	            data.bondSet.flip_unsafe( i );
	        }

	    }

	    return {
	        atomSet: data.atomSet,
	        bondSet: data.bondSet,
	        bondStore: data.bondStore
	    };

	}

	function ContactRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	ContactRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: ContactRepresentation,

	    type: "contact",

	    defaultSize: 0.25,

	    parameters: Object.assign( {

	        contactType: {
	            type: "select", rebuild: true,
	            options: {
	                "polar": "polar",
	                "polarBackbone": "polar backbone"
	            }
	        },
	        maxDistance: {
	            type: "number", precision: 1, max: 10, min: 0.1, rebuild: true
	        },
	        maxAngle: {
	            type: "integer", max: 180, min: 0, rebuild: true
	        },
	        radialSegments: true,
	        disableImpostor: true

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.radius = defaults( p.radius, this.defaultSize );

	        this.contactType = defaults( p.contactType, "polarBackbone" );
	        this.maxDistance = defaults( p.maxDistance, 3.5 );
	        this.maxAngle = defaults( p.maxAngle, 40 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getContactData: function( sview ){

	        var contactsFnDict = {
	            "polar": polarContacts,
	            "polarBackbone": polarBackboneContacts
	        };

	        var contactData = contactsFnDict[ this.contactType ](
	            sview, this.maxDistance, this.maxAngle
	        );

	        return contactData;

	    },

	    getBondData: function( sview, what, params ){

	        return sview.getBondData( this.getBondParams( what, params ) );

	    },

	    createData: function( sview ){

	        var contactData = this.getContactData( sview );

	        var bondParams = {
	            bondSet: contactData.bondSet,
	            bondStore: contactData.bondStore
	        };

	        var bondData = this.getBondData( sview, undefined, bondParams );

	        var cylinderBuffer = new CylinderBuffer(
	            bondData.position1,
	            bondData.position2,
	            bondData.color1,
	            bondData.color2,
	            bondData.radius,
	            bondData.pickingColor1,
	            bondData.pickingColor2,
	            this.getBufferParams( {
	                openEnded: false,
	                radialSegments: this.radialSegments,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        return {
	            bufferList: [ cylinderBuffer ],
	            bondSet: contactData.bondSet,
	            bondStore: contactData.bondStore
	        };

	    },

	    updateData: function( what, data ){

	        if( !what || what.position ){
	            var contactData = this.getContactData( data.sview );
	            data.bondSet = contactData.bondSet;
	            data.bondStore = contactData.bondStore;
	        }

	        var bondParams = {
	            bondSet: data.bondSet,
	            bondStore: data.bondStore
	        };

	        var bondData = this.getBondData( data.sview, what, bondParams );
	        var cylinderData = {};

	        if( !what || what.position ){

	            cylinderData.position = calculateCenterArray(
	                bondData.position1, bondData.position2
	            );
	            cylinderData.position1 = bondData.position1;
	            cylinderData.position2 = bondData.position2;
	        }

	        if( !what || what.color ){
	            cylinderData.color = bondData.color1;
	            cylinderData.color2 = bondData.color2;
	        }

	        if( !what || what.radius ){
	            cylinderData.radius = bondData.radius;
	        }

	        data.bufferList[ 0 ].setAttributes( cylinderData );

	    }

	} );


	RepresentationRegistry.add( "contact", ContactRepresentation );

	function TextAtlas( params ){

	    // adapted from https://github.com/unconed/mathbox
	    // MIT License Copyright (C) 2013+ Steven Wittens and contributors

	    var p = Object.assign( {}, params );

	    this.font = defaults( p.font, [ 'sans-serif' ] );
	    this.size = defaults( p.size, 36 );
	    this.style = defaults( p.style, 'normal' );
	    this.variant = defaults( p.variant, 'normal' );
	    this.weight = defaults( p.weight, 'normal' );
	    this.outline = defaults( p.outline, 0 );
	    this.width = defaults( p.width, 1024 );
	    this.height = defaults( p.height, 1024 );

	    this.gamma = 1;
	    if( typeof navigator !== 'undefined' ){
	        var ua = navigator.userAgent;
	        if( ua.match( /Chrome/ ) && ua.match( /OS X/ ) ){
	            this.gamma = 0.5;
	        }
	    }

	    this.mapped = {};
	    this.scratchW = 0;
	    this.scratchH = 0;
	    this.currentX = 0;
	    this.currentY = 0;

	    this.build( p );

	}

	TextAtlas.prototype = {

	    constructor: TextAtlas,

	    build: function(){

	        // Prepare line-height with room for outline and descenders/ascenders
	        var lineHeight = this.size + 2 * this.outline + Math.round( this.size / 4 );
	        var maxWidth = this.width / 4;

	        // Prepare scratch canvas
	        var canvas = document.createElement( "canvas" );
	        canvas.width = maxWidth;
	        canvas.height = lineHeight;

	        // Font string
	        var quote = function(str) {
	            return "\"" + ( str.replace( /(['"\\])/g, "\\$1" ) ) + "\"";
	        };
	        var font = this.font.map( quote ).join( ", " );

	        var ctx = canvas.getContext( "2d" );
	        ctx.font = this.style + " " + this.variant + " " + this.weight + " " + this.size + "px " + this.font;
	        ctx.fillStyle = "#FF0000";
	        ctx.textAlign = "left";
	        ctx.textBaseline = "bottom";
	        ctx.lineJoin = "round";

	        // document.body.appendChild( canvas );
	        // canvas.setAttribute( "style", "position: absolute; top: 0; left: 0; z-index: 100; border: 1px solid red; background: rgba(255,0,255,.25);" );

	        var colors = [];
	        var dilate = this.outline * 3;
	        for( var i = 0; i < dilate; ++i ){
	            // 8 rgb levels = 1 step = .5 pixel increase
	            var val = Math.max( 0, -i * 8 + 128 - ( !i ) * 8 );
	            var hex = ( "00" + val.toString( 16 ) ).slice( -2 );
	            colors.push( "#" + hex + hex + hex );
	        }
	        var scratch = new Uint8Array( maxWidth * lineHeight * 2 );

	        this.canvas = canvas;
	        this.context = ctx;
	        this.lineHeight = lineHeight;
	        this.maxWidth = maxWidth;
	        this.colors = colors;
	        this.scratch = scratch;

	        this.data = new Uint8Array( this.width * this.height * 4 );

	        this.canvas2 = document.createElement( 'canvas' );
	        this.canvas2.width = this.width;
	        this.canvas2.height = this.height;
	        this.context2 = this.canvas2.getContext( '2d' );
	        // document.body.appendChild( this.canvas2 );
	        // this.canvas2.setAttribute( "style", "position: absolute; bottom: 0; right: 0; z-index: 100; border: 1px solid green; background: rgba(255,0,255,.25);" );

	    },

	    map: function( text ){

	        if( this.mapped[ text ] === undefined ){

	            this.draw( text );

	            // ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);

	            if( this.currentX + this.scratchW > this.width ){
	                this.currentX = 0;
	                this.currentY += this.scratchH;
	            }
	            if( this.currentY + this.scratchH > this.height ){
	                console.warn( "canvas to small" );
	            }

	            this.mapped[ text ] = {
	                x: this.currentX,
	                y: this.currentY,
	                w: this.scratchW,
	                h: this.scratchH
	            };

	            this.context2.drawImage(
	                this.canvas,
	                0, 0,
	                this.scratchW, this.scratchH,
	                this.currentX, this.currentY,
	                this.scratchW, this.scratchH
	            );

	            this.currentX += this.scratchW;

	        }

	        return this.mapped[ text ];

	    },

	    draw: function( text ){

	        var h = this.lineHeight;
	        var o = this.outline;
	        var ctx = this.context;
	        var dst = this.scratch;
	        var max = this.maxWidth;
	        var colors = this.colors;

	        // Bottom aligned, take outline into account
	        var x = o;
	        var y = h - this.outline;

	        // Measure text
	        var m = ctx.measureText( text );
	        var w = Math.min( max, Math.ceil( m.width + 2 * x + 1 ) );

	        // Clear scratch area
	        ctx.clearRect(0, 0, w, h);

	        var i, il, j, imageData, data;

	        if( this.outline === 0 ){

	            ctx.fillText( text, x, y );
	            imageData = ctx.getImageData( 0, 0, w, h );
	            data = imageData.data;

	            j = 3;  // Skip to alpha channel
	            for( i = 0, il = data.length / 4; i < il; ++i ){
	                dst[ i ] = data[ j ];
	                j += 4;
	            }

	        }else{

	            ctx.globalCompositeOperation = "source-over";
	            // Draw strokes of decreasing width to create
	            // nested outlines (absolute distance)
	            for( i = o + 1; i > 0; --i ){
	                // Eliminate odd strokes once past > 1px,
	                // don't need the detail
	                j = i > 1 ? i * 2 - 2 : i;
	                ctx.strokeStyle = colors[ j - 1 ];
	                ctx.lineWidth = j;
	                ctx.strokeText( text, x, y );
	            }
	            ctx.globalCompositeOperation = "multiply";
	            ctx.fillStyle = "#FF00FF";
	            ctx.fillText( text, x, y );
	            imageData = ctx.getImageData( 0, 0, w, h );
	            data = imageData.data;

	            j = 0;
	            var gamma = this.gamma;
	            for( i = 0, il = data.length / 4; i < il; ++i ){
	                // Get value + mask
	                var a = data[ j ];
	                var mask = a ? data[ j + 1 ] / a : 1;
	                if( gamma === 0.5 ){
	                    mask = Math.sqrt( mask );
	                }
	                mask = Math.min( 1, Math.max( 0, mask ) );

	                // Blend between positive/outside and negative/inside
	                var b = 256 - a;
	                var c = b + ( a - b ) * mask;

	                // Clamp (slight expansion to hide errors around the transition)
	                dst[ i ] = Math.max( 0, Math.min( 255, c + 2 ) );
	                data[ j + 3 ] = dst[ i ];
	                j += 4;
	            }

	        }

	        ctx.putImageData( imageData, 0, 0 );
	        this.scratchW = w;
	        this.scratchH = h;

	    },

	    dispose: function(){

	        // document.body.removeChild( this.canvas );
	        // document.body.removeChild( this.canvas2 );

	    }

	};


	/**
	 * Text buffer parameter object.
	 * @typedef {Object} TextBufferParameters - text buffer parameters
	 *
	 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
	 * @property {Integer} clipNear - position of camera near/front clipping plane
	 *                                in percent of scene bounding box
	 * @property {String} labelType - type of the label, one of:
	 *                                 "atomname", "atomindex", "occupancy", "bfactor",
	 *                                 "serial", "element", "atom", "resname", "resno",
	 *                                 "res", "text", "qualified". When set to "text", the
	 *                                 `labelText` list is used.
	 * @property {String[]} labelText - list of label strings, must set `labelType` to "text"
	 *                                   to take effect
	 * @property {String} fontFamily - font family, one of: "sans-serif", "monospace", "serif"
	 * @property {String} fontStyle - font style, "normal" or "italic"
	 * @property {String} fontWeight - font weight, "normal" or "bold"
	 * @property {Boolean} sdf - use "signed distance field"-based rendering for sharper edges
	 * @property {Float} xOffset - offset in x-direction
	 * @property {Float} yOffset - offset in y-direction
	 * @property {Float} zOffset - offset in z-direction (i.e. in camera direction)
	 */


	/**
	 * Text buffer
	 * @class
	 * @augments {Buffer}
	 * @param {Float32Array} position - positions
	 *                                  [x1,y1,z1, x2,y2,z2, ..., xN,yN,zN]
	 * @param {Float32Array} size - sizes
	 *                               [s1, s2, ..., sN]
	 * @param {Float32Array} color - colors
	 *                               [r1,g1,b1, r2,g2,b2, ..., rN,gN,bN]
	 * @param {String[]} text - text strings
	 *                               ["t1", "t2", ..., "tN"]
	 * @param {TextBufferParameters} params - parameters object
	 */
	function TextBuffer( position, size, color, text, params ){

	    var p = params || {};
	    p.forceTransparent = true;

	    this.fontFamily = defaults( p.fontFamily, "sans-serif" );
	    this.fontStyle = defaults( p.fontStyle, "normal" );
	    this.fontWeight = defaults( p.fontWeight, "bold" );
	    this.fontSize = defaults( p.fontSize, 48 );
	    this.sdf = defaults( p.sdf, Browser === "Chrome" );
	    this.xOffset = defaults( p.xOffset, 0.0 );
	    this.yOffset = defaults( p.yOffset, 0.0 );
	    this.zOffset = defaults( p.zOffset, 0.5 );

	    var n = position.length / 3;

	    var charCount = 0;
	    for( var i = 0; i < n; ++i ){
	        charCount += text[ i ].length;
	    }

	    this.text = text;
	    this.count = charCount;
	    this.positionCount = n;

	    this.vertexShader = "SDFFont.vert";
	    this.fragmentShader = "SDFFont.frag";

	    QuadBuffer.call( this, p );

	    this.addUniforms( {
	        "fontTexture": { value: null },
	        "xOffset": { value: this.xOffset },
	        "yOffset": { value: this.yOffset },
	        "zOffset": { value: this.zOffset },
	        "ortho": { value: 0.0 }
	    } );

	    this.addAttributes( {
	        "inputTexCoord": { type: "v2", value: null },
	        "inputSize": { type: "f", value: null },
	    } );

	    this.setAttributes( {
	        "position": position,
	        "size": size,
	        "color": color
	    } );

	    this.makeTexture();
	    this.makeMapping();

	}

	TextBuffer.prototype = Object.assign( Object.create(

	    QuadBuffer.prototype ), {

	    constructor: TextBuffer,

	    type: "text",

	    parameters: Object.assign( {

	        fontFamily: { uniform: true },
	        fontStyle: { uniform: true },
	        fontWeight: { uniform: true },
	        fontSize: { uniform: true },
	        sdf: { updateShader: true, uniform: true },
	        xOffset: { uniform: true },
	        yOffset: { uniform: true },
	        zOffset: { uniform: true }

	    }, Buffer.prototype.parameters ),

	    makeMaterial: function(){

	        Buffer.prototype.makeMaterial.call( this );

	        this.material.extensions.derivatives = true;
	        this.material.lights = false;
	        this.material.uniforms.fontTexture.value = this.tex;
	        this.material.needsUpdate = true;

	        this.wireframeMaterial.extensions.derivatives = true;
	        this.wireframeMaterial.lights = false;
	        this.wireframeMaterial.uniforms.fontTexture.value = this.tex;
	        this.wireframeMaterial.needsUpdate = true;

	        this.pickingMaterial.extensions.derivatives = true;
	        this.pickingMaterial.lights = false;
	        this.pickingMaterial.uniforms.fontTexture.value = this.tex;
	        this.pickingMaterial.needsUpdate = true;

	    },

	    setAttributes: function( data ){

	        var position, size, color;
	        var aPosition, inputSize, aColor;

	        var text = this.text;
	        var attributes = this.geometry.attributes;

	        if( data.position ){
	            position = data.position;
	            aPosition = attributes.position.array;
	            attributes.position.needsUpdate = true;
	        }

	        if( data.size ){
	            size = data.size;
	            inputSize = attributes.inputSize.array;
	            attributes.inputSize.needsUpdate = true;
	        }

	        if( data.color ){
	            color = data.color;
	            aColor = attributes.color.array;
	            attributes.color.needsUpdate = true;
	        }

	        var n = this.positionCount;

	        var i, j, o;
	        var iCharAll = 0;
	        var txt, iChar, nChar;

	        for( var v = 0; v < n; v++ ) {

	            o = 3 * v;
	            txt = text[ v ];
	            nChar = txt.length;

	            for( iChar = 0; iChar < nChar; iChar++, iCharAll++ ) {

	                i = iCharAll * 2 * 4;

	                for( var m = 0; m < 4; m++ ) {

	                    j = iCharAll * 4 * 3 + ( 3 * m );

	                    if( position ){

	                        aPosition[ j     ] = position[ o     ];
	                        aPosition[ j + 1 ] = position[ o + 1 ];
	                        aPosition[ j + 2 ] = position[ o + 2 ];

	                    }

	                    if( size ){

	                        inputSize[ ( iCharAll * 4 ) + m ] = size[ v ];

	                    }

	                    if( color ){

	                        aColor[ j     ] = color[ o     ];
	                        aColor[ j + 1 ] = color[ o + 1 ];
	                        aColor[ j + 2 ] = color[ o + 2 ];

	                    }

	                }

	            }

	        }

	    },

	    makeTexture: function(){

	        if( this.tex ) this.tex.dispose();
	        if( this.ta ) this.ta.dispose();

	        var ta = new TextAtlas( {
	            font: [ this.fontFamily ],
	            style: this.fontStyle,
	            weight: this.fontWeight,
	            size: this.fontSize,
	            outline: this.sdf ? 5 : 0
	        } );

	        for( var i = 0; i < 256; ++i ){
	            ta.map( String.fromCharCode( i ) );
	        }

	        this.ta = ta;

	        this.tex = new CanvasTexture( ta.canvas2 );
	        this.tex.flipY = false;
	        this.tex.needsUpdate = true;

	    },

	    makeMapping: function(){

	        var ta = this.ta;
	        var text = this.text;

	        var inputTexCoord = this.geometry.attributes.inputTexCoord.array;
	        var inputMapping = this.geometry.attributes.mapping.array;

	        var n = this.positionCount;

	        var c;
	        var i, j, o;
	        var iCharAll = 0;
	        var txt, xadvance, iChar, nChar;

	        for( var v = 0; v < n; v++ ) {

	            o = 3 * v;
	            txt = text[ v ];
	            xadvance = 0;
	            nChar = txt.length;

	            for( iChar = 0; iChar < nChar; iChar++, iCharAll++ ) {

	                c = ta.mapped[ txt[ iChar ] ];
	                i = iCharAll * 2 * 4;

	                // top left
	                inputMapping[ i + 0 ] = xadvance - ta.outline;
	                inputMapping[ i + 1 ] = c.h - ta.outline;
	                // bottom left
	                inputMapping[ i + 2 ] = xadvance - ta.outline;
	                inputMapping[ i + 3 ] = 0 - ta.outline;
	                // top right
	                inputMapping[ i + 4 ] = xadvance + c.w - ta.outline;
	                inputMapping[ i + 5 ] = c.h - ta.outline;
	                // bottom right
	                inputMapping[ i + 6 ] = xadvance + c.w - ta.outline;
	                inputMapping[ i + 7 ] = 0 - ta.outline;

	                var texWidth = ta.width;
	                var texHeight = ta.height;

	                var texCoords = [
	                    c.x/texWidth, c.y/texHeight,             // top left
	                    c.x/texWidth, (c.y+c.h)/texHeight,       // bottom left
	                    (c.x+c.w)/texWidth, c.y/texHeight,       // top right
	                    (c.x+c.w)/texWidth, (c.y+c.h)/texHeight  // bottom right
	                ];
	                inputTexCoord.set( texCoords, i );

	                xadvance += c.w - 2 * ta.outline;

	            }

	        }

	        this.geometry.attributes.inputTexCoord.needsUpdate = true;
	        this.geometry.attributes.mapping.needsUpdate = true;

	    },

	    getDefines: function( type ){

	        var defines = Buffer.prototype.getDefines.call( this, type );

	        if( this.sdf ){
	            defines.SDF = 1;
	        }

	        return defines;

	    },

	    setUniforms: function( data ){

	        if( data && (
	                data.fontFamily !== undefined ||
	                data.fontStyle !== undefined ||
	                data.fontWeight !== undefined ||
	                data.fontSize !== undefined ||
	                data.sdf !== undefined
	            )
	        ){

	            this.makeTexture();
	            this.makeMapping();
	            data.fontTexture = this.tex;

	        }

	        Buffer.prototype.setUniforms.call( this, data );

	    },

	    dispose: function(){

	        Buffer.prototype.dispose.call( this );

	        if( this.tex ) this.tex.dispose();
	        if( this.ta ) this.ta.dispose();

	    }

	} );

	/**
	 * Distance representation parameter object.
	 * @typedef {Object} DistanceRepresentationParameters - distance representation parameters
	 * @mixes RepresentationParameters
	 * @mixes StructureRepresentationParameters
	 *
	 * @property {Float} labelSize - size of the distance label
	 * @property {Color} labelColor - color of the distance label
	 * @property {Boolean} labelVisible - visibility of the distance label
	 * @property {Float} labelZOffset - offset in z-direction (i.e. in camera direction)
	 * @property {Array[]} atomPair - list of pairs of selection strings, see {@link Selection}
	 * @property {Integer} radialSegments - cylinder quality (number of segments)
	 * @property {Boolean} disableImpostor - disable use of raycasted impostors for rendering
	 */


	/**
	 * Distance representation object
	 * @class
	 * @extends StructureRepresentation
	 * @example
	 * stage.loadFile( "rcsb://1crn" ).then( function( o ){
	 *     o.addRepresentation( "cartoon" );
	 *     // any selection allowed, always takes the first atom a selection evaluates to
	 *     var atomPair = [ [ "1.CA", "4.CA" ], [ "7.CA", "13.CA" ] ];
	 *     o.addRepresentation( "distance", { atomPair: atomPair } );
	 *     stage.centerView();
	 * } );
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {DistanceRepresentationParameters} params - distance representation parameters
	 */
	function DistanceRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	DistanceRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: DistanceRepresentation,

	    type: "distance",

	    defaultSize: 0.15,

	    parameters: Object.assign( {

	        labelSize: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        labelColor: {
	            type: "color"
	        },
	        labelVisible: {
	            type: "boolean"
	        },
	        labelZOffset: {
	            type: "number", precision: 1, max: 20, min: -20, buffer: true
	        },
	        atomPair: {
	            type: "hidden", rebuild: true
	        },
	        radialSegments: true,
	        disableImpostor: true

	    }, StructureRepresentation.prototype.parameters, {
	        flatShaded: null,
	        assembly: null
	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.radius = defaults( p.radius, this.defaultSize );

	        this.fontFamily = defaults( p.fontFamily, "sans-serif" );
	        this.fontStyle = defaults( p.fontStyle, "normal" );
	        this.fontWeight = defaults( p.fontWeight, "bold" );
	        this.sdf = defaults( p.sdf, Browser !== "Firefox" );  // FIXME
	        this.labelSize = defaults( p.labelSize, 2.0 );
	        this.labelColor = defaults( p.labelColor, 0xFFFFFF );
	        this.labelVisible = defaults( p.labelVisible, true );
	        this.labelZOffset = defaults( p.labelZOffset, 0.5 );
	        this.atomPair = defaults( p.atomPair, [] );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getDistanceData: function( sview, atomPair ){

	        var n = atomPair.length;
	        var text = new Array( n );
	        var position = new Float32Array( n * 3 );
	        var sele1 = new Selection();
	        var sele2 = new Selection();

	        var bondStore = new BondStore();

	        var ap1 = sview.getAtomProxy();
	        var ap2 = sview.getAtomProxy();

	        var j = 0;

	        atomPair.forEach( function( pair, i ){

	            i -= j;
	            var i3 = i * 3;

	            sele1.setString( pair[ 0 ] );
	            sele2.setString( pair[ 1 ] );

	            var atomIndices1 = sview.getAtomIndices( sele1 );
	            var atomIndices2 = sview.getAtomIndices( sele2 );

	            if( atomIndices1.length && atomIndices2.length ){

	                ap1.index = atomIndices1[ 0 ];
	                ap2.index = atomIndices2[ 0 ];

	                bondStore.addBond( ap1, ap2, 1 );

	                text[ i ] = ap1.distanceTo( ap2 ).toFixed( 2 );

	                position[ i3 + 0 ] = ( ap1.x + ap2.x ) / 2;
	                position[ i3 + 1 ] = ( ap1.y + ap2.y ) / 2;
	                position[ i3 + 2 ] = ( ap1.z + ap2.z ) / 2;

	            }else{

	                j += 1;

	            }

	        }, this );

	        if( j > 0 ){
	            n -= j;
	            position = position.subarray( 0, n * 3 );
	        }

	        var bondSet = new Bitset( bondStore.count );
	        bondSet.set_all( true );

	        return {
	            text: text,
	            position: position,
	            bondSet: bondSet,
	            bondStore: bondStore
	        };

	    },

	    getBondData: function( sview, what, params ){

	        return sview.getBondData( this.getBondParams( what, params ) );

	    },

	    create: function(){

	        if( this.structureView.atomCount === 0 ) return;

	        var n = this.atomPair.length;
	        if( n === 0 ) return;

	        var distanceData = this.getDistanceData( this.structureView, this.atomPair );

	        var c = new Color( this.labelColor );

	        this.textBuffer = new TextBuffer(
	            distanceData.position,
	            uniformArray( n, this.labelSize ),
	            uniformArray3( n, c.r, c.g, c.b ),
	            distanceData.text,
	            this.getBufferParams( {
	                fontFamily: this.fontFamily,
	                fontStyle: this.fontStyle,
	                fontWeight: this.fontWeight,
	                sdf: this.sdf,
	                zOffset: this.labelZOffset,
	                opacity: 1.0,
	                visible: this.labelVisible
	            } )
	        );

	        var bondParams = {
	            bondSet: distanceData.bondSet,
	            bondStore: distanceData.bondStore
	        };

	        var bondData = this.getBondData( this.structureView, undefined, bondParams );

	        this.cylinderBuffer = new CylinderBuffer(
	            bondData.position1,
	            bondData.position2,
	            bondData.color1,
	            bondData.color2,
	            bondData.radius,
	            bondData.pickingColor1,
	            bondData.pickingColor2,
	            this.getBufferParams( {
	                openEnded: false,
	                radialSegments: this.radialSegments,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.dataList.push( {
	            sview: this.structureView,
	            bondSet: distanceData.bondSet,
	            bondStore: distanceData.bondStore,
	            position: distanceData.position,
	            bufferList: [ this.textBuffer, this.cylinderBuffer ]
	        } );

	    },

	    update: function( what ){

	        if( what.position ){
	            this.build();
	        }else{
	            StructureRepresentation.prototype.update.call( this, what );
	        }

	    },

	    updateData: function( what, data ){

	        var bondParams = {
	            bondSet: data.bondSet,
	            bondStore: data.bondStore
	        };

	        var bondData = this.getBondData( data.sview, what, bondParams );
	        var cylinderData = {};
	        var textData = {};
	        var n = this.atomPair.length;

	        if( what.labelSize ){
	            textData.size = uniformArray( n, this.labelSize );
	        }

	        if( what.labelColor ){
	            var c = new Color( this.labelColor );
	            textData.color = uniformArray3( n, c.r, c.g, c.b );
	        }

	        if( what.color ){
	            cylinderData.color = bondData.color1;
	            cylinderData.color2 = bondData.color2;
	        }

	        if( what.radius || what.scale ){
	            cylinderData.radius = bondData.radius;
	        }

	        this.textBuffer.setAttributes( textData );
	        this.cylinderBuffer.setAttributes( cylinderData );

	    },

	    setVisibility: function( value, noRenderRequest ){

	        StructureRepresentation.prototype.setVisibility.call(
	            this, value, true
	        );

	        if( this.textBuffer ){
	            this.textBuffer.setVisibility(
	                this.labelVisible && this.visible
	            );
	        }

	        if( !noRenderRequest ) this.viewer.requestRender();

	        return this;

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && params.labelSize ){
	            what.labelSize = true;
	        }

	        if( params && params.labelColor ){
	            what.labelColor = true;
	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        if( params && params.labelVisible !== undefined ){
	            this.setVisibility( this.visible );
	        }

	        return this;

	    }

	} );


	RepresentationRegistry.add( "distance", DistanceRepresentation );

	function VectorBuffer( position, vector, params ){

	    var p = params || {};

	    this.size = position.length / 3;
	    this.vertexShader = 'Line.vert';
	    this.fragmentShader = 'Line.frag';
	    this.line = true;

	    var n = this.size;
	    var n2 = n * 2;

	    this.attributeSize = n2;

	    this.scale = p.scale || 1;
	    var color = new Color( p.color || "grey" );

	    this.linePosition = new Float32Array( n2 * 3 );
	    this.lineColor = uniformArray3( n2, color.r, color.g, color.b );

	    Buffer.call(
	        this, this.linePosition, this.lineColor, undefined, undefined, p
	    );

	    this.setAttributes( {
	        position: position,
	        vector: vector
	    } );

	}

	VectorBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: VectorBuffer,

	    setAttributes: function( data ){

	        var attributes = this.geometry.attributes;

	        var position, vector;
	        var aPosition;

	        if( data.position && data.vector ){
	            position = data.position;
	            vector = data.vector;
	            aPosition = attributes.position.array;
	            attributes.position.needsUpdate = true;
	        }

	        var n = this.size;
	        var scale = this.scale;

	        var i, j;

	        if( data.position && data.vector ){

	            for( var v = 0; v < n; v++ ){

	                i = v * 2 * 3;
	                j = v * 3;

	                aPosition[ i + 0 ] = position[ j + 0 ];
	                aPosition[ i + 1 ] = position[ j + 1 ];
	                aPosition[ i + 2 ] = position[ j + 2 ];
	                aPosition[ i + 3 ] = position[ j + 0 ] + vector[ j + 0 ] * scale;
	                aPosition[ i + 4 ] = position[ j + 1 ] + vector[ j + 1 ] * scale;
	                aPosition[ i + 5 ] = position[ j + 2 ] + vector[ j + 2 ] * scale;

	            }

	        }

	    }

	} );

	function HelixorientRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	HelixorientRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: HelixorientRepresentation,

	    type: "helixorient",

	    parameters: Object.assign( {

	        sphereDetail: true,
	        disableImpostor: true

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "sstruc" );
	        p.radius = defaults( p.radius, 0.15 );
	        p.scale = defaults( p.scale, 1.0 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    createData: function( sview ){

	        var bufferList = [];
	        var polymerList = [];

	        this.structure.eachPolymer( function( polymer ){

	            if( polymer.residueCount < 4 ) return;
	            polymerList.push( polymer );

	            var helixorient = new Helixorient( polymer );
	            var position = helixorient.getPosition();
	            var color = helixorient.getColor( this.getColorParams() );
	            var size = helixorient.getSize( this.radius, this.scale );

	            bufferList.push(

	                new SphereBuffer(
	                    position.center,
	                    color.color,
	                    size.size,
	                    color.pickingColor,
	                    this.getBufferParams( {
	                        sphereDetail: this.sphereDetail,
	                        disableImpostor: this.disableImpostor,
	                        dullInterior: true
	                    } )
	                ),

	                new VectorBuffer(
	                    position.center,
	                    position.axis,
	                    this.getBufferParams({
	                        color: "skyblue",
	                        scale: 1
	                    })
	                ),

	                new VectorBuffer(
	                    position.center,
	                    position.resdir,
	                    this.getBufferParams({
	                        color: "lightgreen",
	                        scale: 1
	                    })
	                )

	            );


	        }.bind( this ), sview.getSelection() );

	        return {
	            bufferList: bufferList,
	            polymerList: polymerList
	        };

	    },

	    updateData: function( what, data ){

	        if( exports.Debug ) Log$1.time( this.type + " repr update" );

	        what = what || {};

	        for( var i = 0, il = data.polymerList.length; i < il; ++i ){

	            var j = i * 3;

	            var bufferData = {};
	            var polymer = data.polymerList[ i ];
	            var helixorient = new Helixorient( polymer );

	            if( what.position ){

	                var position = helixorient.getPosition();

	                bufferData.position = position.center;

	                data.bufferList[ j + 1 ].setAttributes( {
	                    "position": position.center,
	                    "vector": position.axis,
	                } );
	                data.bufferList[ j + 2 ].setAttributes( {
	                    "position": position.center,
	                    "vector": position.resdir,
	                } );

	            }

	            data.bufferList[ j ].setAttributes( bufferData );

	        }

	        if( exports.Debug ) Log$1.timeEnd( this.type + " repr update" );

	    }

	} );


	RepresentationRegistry.add( "helixorient", HelixorientRepresentation );

	/**
	 * Licorice representation object ({@link BallAndStickRepresentation} with `aspectRatio` fixed at 1.0)
	 * @class
	 * @extends BallAndStickRepresentation
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {BallAndStickRepresentationParameters} params - ball and stick representation parameters
	 */
	function LicoriceRepresentation( structure, viewer, params ){

	    BallAndStickRepresentation.call( this, structure, viewer, params );

	}

	LicoriceRepresentation.prototype = Object.assign( Object.create(

	    BallAndStickRepresentation.prototype ), {

	    constructor: LicoriceRepresentation,

	    type: "licorice",

	    parameters: Object.assign(
	        {}, BallAndStickRepresentation.prototype.parameters, { aspectRatio: null }
	    ),

	    init: function( params ){

	        var p = params || {};
	        p.aspectRatio = 1.0;

	        BallAndStickRepresentation.prototype.init.call( this, p );

	    }

	} );


	RepresentationRegistry.add( "licorice", LicoriceRepresentation );

	function BoxBuffer( params ){

	    this.mapping = new Float32Array([
	        -1.0, -1.0, -1.0,
	         1.0, -1.0, -1.0,
	         1.0, -1.0,  1.0,
	        -1.0, -1.0,  1.0,
	        -1.0,  1.0, -1.0,
	         1.0,  1.0, -1.0,
	         1.0,  1.0,  1.0,
	        -1.0,  1.0,  1.0
	    ]);

	    this.mappingIndices = new Uint16Array([
	        0, 1, 2,
	        0, 2, 3,
	        1, 5, 6,
	        1, 6, 2,
	        4, 6, 5,
	        4, 7, 6,
	        0, 7, 4,
	        0, 3, 7,
	        0, 5, 1,
	        0, 4, 5,
	        3, 2, 6,
	        3, 6, 7
	    ]);

	    this.mappingIndicesSize = 36;
	    this.mappingType = "v3";
	    this.mappingSize = 8;
	    this.mappingItemSize = 3;

	    MappedBuffer.call( this, params );

	}

	BoxBuffer.prototype = Object.assign( Object.create(

	    MappedBuffer.prototype ), {

	    constructo: BoxBuffer

	} );

	var tmpMatrix = new Matrix4();

	function matrixCalc( object, camera ){

	    var u = object.material.uniforms;

	    if( u.modelViewMatrixInverse ){
	        u.modelViewMatrixInverse.value.getInverse(
	            object.modelViewMatrix
	        );
	    }

	    if( u.modelViewMatrixInverseTranspose ){
	        if( u.modelViewMatrixInverse ){
	            u.modelViewMatrixInverseTranspose.value.copy(
	                u.modelViewMatrixInverse.value
	            ).transpose();
	        }else{
	            u.modelViewMatrixInverseTranspose.value
	                .getInverse( object.modelViewMatrix )
	                .transpose();
	        }
	    }

	    if( u.modelViewProjectionMatrix ){
	        u.modelViewProjectionMatrix.value.multiplyMatrices(
	            camera.projectionMatrix, object.modelViewMatrix
	        );
	    }

	    if( u.modelViewProjectionMatrixInverse ){
	        if( u.modelViewProjectionMatrix ){
	            tmpMatrix.copy(
	                u.modelViewProjectionMatrix.value
	            );
	            u.modelViewProjectionMatrixInverse.value.getInverse(
	                tmpMatrix
	            );
	        }else{
	            tmpMatrix.multiplyMatrices(
	                camera.projectionMatrix, object.modelViewMatrix
	            );
	            u.modelViewProjectionMatrixInverse.value.getInverse(
	                tmpMatrix
	            );
	        }
	    }

	}


	function HyperballStickImpostorBuffer( position1, position2, color, color2, radius1, radius2, pickingColor, pickingColor2, params ){

	    var p = params || {};

	    var shrink = defaults( p.shrink, 0.14 );

	    this.impostor = true;
	    this.count = position1.length / 3;
	    this.vertexShader = "HyperballStickImpostor.vert";
	    this.fragmentShader = "HyperballStickImpostor.frag";

	    BoxBuffer.call( this, p );

	    var modelViewProjectionMatrix = new Uniform( new Matrix4() )
	        .onUpdate( matrixCalc );
	    var modelViewProjectionMatrixInverse = new Uniform( new Matrix4() )
	        .onUpdate( matrixCalc );
	    var modelViewMatrixInverseTranspose = new Uniform( new Matrix4() )
	        .onUpdate( matrixCalc );

	    this.addUniforms( {
	        "modelViewProjectionMatrix": modelViewProjectionMatrix,
	        "modelViewProjectionMatrixInverse": modelViewProjectionMatrixInverse,
	        "modelViewMatrixInverseTranspose": modelViewMatrixInverseTranspose,
	        "shrink": { value: shrink },
	    } );

	    this.addAttributes( {
	        "color": { type: "c", value: null },
	        "color2": { type: "c", value: null },
	        "radius": { type: "f", value: null },
	        "radius2": { type: "f", value: null },
	        "position1": { type: "v3", value: null },
	        "position2": { type: "v3", value: null },
	    } );

	    this.setAttributes( {
	        "color": color,
	        "color2": color2,
	        "radius": radius1,
	        "radius2": radius2,
	        "position1": position1,
	        "position2": position2,

	        "position": calculateCenterArray( position1, position2 ),
	    } );

	    if( pickingColor ){

	        this.addAttributes( {
	            "pickingColor": { type: "c", value: null },
	            "pickingColor2": { type: "c", value: null },
	        } );

	        this.setAttributes( {
	            "pickingColor": pickingColor,
	            "pickingColor2": pickingColor2,
	        } );

	        this.pickable = true;

	    }

	    this.makeMapping();

	}

	HyperballStickImpostorBuffer.prototype = Object.assign( Object.create(

	    BoxBuffer.prototype ), {

	    constructor: HyperballStickImpostorBuffer,

	    parameters: Object.assign( {

	        shrink: { uniform: true }

	    }, BoxBuffer.prototype.parameters )

	} );

	function HyperballStickBuffer( from, to, color, color2, radius1, radius2, pickingColor, pickingColor2, params ){

	    var p = params || {};

	    if( !ExtensionFragDepth || p.disableImpostor ){

	        return new CylinderGeometryBuffer(
	            from, to, color, color2,
	            calculateMinArray( radius1, radius2 ),
	            pickingColor, pickingColor2, params
	        );

	    }else{

	        return new HyperballStickImpostorBuffer(
	            from, to, color, color2,
	            radius1, radius2,
	            pickingColor, pickingColor2, params
	        );

	    }

	}

	function HyperballRepresentation( structure, viewer, params ){

	    LicoriceRepresentation.call( this, structure, viewer, params );

	    this.defaultScale.vdw = 0.2;

	}

	HyperballRepresentation.prototype = Object.assign( Object.create(

	    LicoriceRepresentation.prototype ), {

	    constructor: HyperballRepresentation,

	    type: "hyperball",

	    defaultSize: 1.0,

	    parameters: Object.assign( {

	        shrink: {
	            type: "number", precision: 3, max: 1.0, min: 0.001, buffer: true
	        }

	    }, LicoriceRepresentation.prototype.parameters, {

	        multipleBond: null,
	        bondSpacing: null,

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.scale = defaults( p.scale, 0.2 );
	        p.radius = defaults( p.radius, "vdw" );

	        this.shrink = defaults( p.shrink, 0.12 );

	        LicoriceRepresentation.prototype.init.call( this, p );

	    },

	    getBondParams: function( what, params ){

	        if( !what || what.radius ){
	            params = Object.assign( { radius2: true }, params );
	        }

	        return LicoriceRepresentation.prototype.getBondParams.call( this, what, params );

	    },

	    createData: function( sview ){

	        var atomData = sview.getAtomData( this.getAtomParams() );
	        var bondData = sview.getBondData( this.getBondParams() );

	        var sphereBuffer = new SphereBuffer(
	            atomData.position,
	            atomData.color,
	            atomData.radius,
	            atomData.pickingColor,
	            this.getBufferParams( {
	                sphereDetail: this.sphereDetail,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.__center = new Float32Array( sview.bondCount * 3 );

	        var stickBuffer = new HyperballStickBuffer(
	            bondData.position1,
	            bondData.position2,
	            bondData.color1,
	            bondData.color2,
	            bondData.radius1,
	            bondData.radius2,
	            bondData.pickingColor1,
	            bondData.pickingColor2,
	            this.getBufferParams( {
	                shrink: this.shrink,
	                radialSegments: this.radialSegments,
	                dullInterior: true
	            } ),
	            this.disableImpostor
	        );

	        return {
	            bufferList: [ sphereBuffer, stickBuffer ]
	        };

	    },

	    updateData: function( what, data ){

	        var atomData = data.sview.getAtomData( this.getAtomParams() );
	        var bondData = data.sview.getBondData( this.getBondParams() );
	        var sphereData = {};
	        var stickData = {};

	        if( !what || what.position ){
	            sphereData.position = atomData.position;
	            var from = bondData.position1;
	            var to = bondData.position2;
	            stickData.position = calculateCenterArray( from, to, this.__center );
	            stickData.position1 = from;
	            stickData.position2 = to;
	        }

	        if( !what || what.color ){
	            sphereData.color = atomData.color;
	            stickData.color = bondData.color1;
	            stickData.color2 = bondData.color2;
	        }

	        if( !what || what.radius ){
	            sphereData.radius = atomData.radius;
	            stickData.radius = bondData.radius1;
	            stickData.radius2 = bondData.radius2;
	        }

	        data.bufferList[ 0 ].setAttributes( sphereData );
	        data.bufferList[ 1 ].setAttributes( stickData );

	    }

	} );


	RepresentationRegistry.add( "hyperball", HyperballRepresentation );

	function LabelFactory( type, text ){

	    this.type = type;
	    this.text = text || {};

	}

	LabelFactory.prototype = {

	    constructor: LabelFactory,

	    atomLabel: function( a ){

	        var type = this.type;

	        var l;

	        switch( type ){

	            case "atomname":
	                l = a.atomname;
	                break;

	            case "atomindex":
	                l = "" + a.index;
	                break;

	            case "occupancy":
	                l = a.occupancy.toFixed( 2 );
	                break;

	            case "bfactor":
	                l = a.bfactor.toFixed( 2 );
	                break;

	            case "serial":
	                l = "" + a.serial;
	                break;

	            case "element":
	                l = a.element;
	                break;

	            case "atom":
	                l = a.atomname + "|" + a.index;
	                break;

	            case "resname":
	                l = a.resname;
	                break;

	            case "resno":
	                l = "" + a.resno;
	                break;

	            case "res":
	                l = ( AA1[ a.resname.toUpperCase() ] || '' ) + a.resno;
	                break;

	            case "text":
	                l = this.text[ a.index ];
	                break;

	            // case "qualified":
	            default:
	                l = a.qualifiedName();
	                break;

	        }

	        return l === undefined ? '' : l;

	    }

	};

	LabelFactory.types = {

	    "": "",
	    "atomname": "atom name",
	    "atomindex": "atom index",
	    "occupancy": "occupancy",
	    "bfactor": "b-factor",
	    "serial": "serial",
	    "element": "element",
	    "atom": "atom name + index",
	    "resname": "residue name",
	    "resno": "residue no",
	    "res": "residue name + no",
	    "text": "text",
	    "qualified": "qualified name"

	};

	/**
	 * Label representation parameter object.
	 * @typedef {Object} LabelRepresentationParameters - label representation parameters
	 *
	 * @property {Integer} clipNear - position of camera near/front clipping plane
	 *                                in percent of scene bounding box
	 * @property {Float} opacity - translucency: 1 is fully opaque, 0 is fully transparent
	 * @property {String} labelType - type of the label, one of:
	 *                                 "atomname", "atomindex", "occupancy", "bfactor",
	 *                                 "serial", "element", "atom", "resname", "resno",
	 *                                 "res", "text", "qualified". When set to "text", the
	 *                                 `labelText` list is used.
	 * @property {String[]} labelText - list of label strings, must set `labelType` to "text"
	 *                                   to take effect
	 * @property {String} fontFamily - font family, one of: "sans-serif", "monospace", "serif"
	 * @property {String} fontStyle - font style, "normal" or "italic"
	 * @property {String} fontWeight - font weight, "normal" or "bold"
	 * @property {Boolean} sdf - use "signed distance field"-based rendering for sharper edges
	 * @property {Float} xOffset - offset in x-direction
	 * @property {Float} yOffset - offset in y-direction
	 * @property {Float} zOffset - offset in z-direction (i.e. in camera direction)
	 */


	/**
	 * Label representation object
	 * @class
	 * @extends StructureRepresentation
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {LabelRepresentationParameters} params - label representation parameters
	 */
	function LabelRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	LabelRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: LabelRepresentation,

	    type: "label",

	    parameters: Object.assign( {

	        labelType: {
	            type: "select", options: LabelFactory.types, rebuild: true
	        },
	        labelText: {
	            type: "hidden", rebuild: true
	        },
	        fontFamily: {
	            type: "select", options: {
	                "sans-serif": "sans-serif",
	                "monospace": "monospace",
	                "serif": "serif"
	            },
	            buffer: true
	        },
	        fontStyle: {
	            type: "select", options: {
	                "normal": "normal",
	                "italic": "italic"
	            },
	            buffer: true
	        },
	        fontWeight: {
	            type: "select", options: {
	                "normal": "normal",
	                "bold": "bold"
	            },
	            buffer: true
	        },
	        sdf: {
	            type: "boolean", buffer: true
	        },
	        xOffset: {
	            type: "number", precision: 1, max: 20, min: -20, buffer: true
	        },
	        yOffset: {
	            type: "number", precision: 1, max: 20, min: -20, buffer: true
	        },
	        zOffset: {
	            type: "number", precision: 1, max: 20, min: -20, buffer: true
	        }

	    }, StructureRepresentation.prototype.parameters, {

	        side: null,
	        flatShaded: null,
	        wireframe: null,
	        linewidth: null,

	        roughness: null,
	        metalness: null,
	        diffuse: null,

	    } ),

	    init: function( params ){

	        var p = params || {};

	        this.labelType = defaults( p.labelType, "res" );
	        this.labelText = defaults( p.labelText, {} );
	        this.fontFamily = defaults( p.fontFamily, "sans-serif" );
	        this.fontStyle = defaults( p.fontStyle, "normal" );
	        this.fontWeight = defaults( p.fontWeight, "bold" );
	        this.sdf = defaults( p.sdf, Browser === "Chrome" );
	        this.xOffset = defaults( p.xOffset, 0.0 );
	        this.yOffset = defaults( p.yOffset, 0.0 );
	        this.zOffset = defaults( p.zOffset, 0.5 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    createData: function( sview ){

	        var what = { position: true, color: true, radius: true };
	        var atomData = sview.getAtomData( this.getAtomParams( what ) );

	        var text = [];
	        var labelFactory = new LabelFactory(
	            this.labelType, this.labelText
	        );
	        sview.eachAtom( function( ap ){
	            text.push( labelFactory.atomLabel( ap ) );
	        } );

	        var textBuffer = new TextBuffer(
	            atomData.position,
	            atomData.radius,
	            atomData.color,
	            text,
	            this.getBufferParams( {
	                fontFamily: this.fontFamily,
	                fontStyle: this.fontStyle,
	                fontWeight: this.fontWeight,
	                sdf: this.sdf,
	                xOffset: this.xOffset,
	                yOffset: this.yOffset,
	                zOffset: this.zOffset
	            } )
	        );

	        return {
	            bufferList: [ textBuffer ]
	        };

	    },

	    updateData: function( what, data ){

	        var atomData = data.sview.getAtomData( this.getAtomParams( what ) );
	        var textData = {};

	        if( !what || what.position ){
	            textData.position = atomData.position;
	        }

	        if( !what || what.radius ){
	            textData.size = atomData.radius;
	        }

	        if( !what || what.color ){
	            textData.color = atomData.color;
	        }

	        data.bufferList[ 0 ].setAttributes( textData );

	    }

	} );


	RepresentationRegistry.add( "label", LabelRepresentation );

	/**
	 * Line representation object
	 * @class
	 * @extends StructureRepresentation
	 * @param {Structure} structure - the structure to be represented
	 * @param {Viewer} viewer - a viewer object
	 * @param {RepresentationParameters} params - representation parameters, plus the properties listed below
	 * @param {Boolean} params.multipleBond - whether or not to render multiple bonds
	 * @param {Float} params.bondSpacing - spacing for multiple bond rendering
	 * @param {null} params.flatShaded - not available
	 * @param {null} params.side - not available
	 * @param {null} params.wireframe - not available
	 * @param {null} params.roughness - not available
	 * @param {null} params.matelness - not available
	 * @param {null} params.diffuse - not available
	 */
	function LineRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	LineRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: LineRepresentation,

	    type: "line",

	    parameters: Object.assign( {

	        multipleBond: {
	            type: "boolean", rebuild: true
	        },
	        bondSpacing: {
	            type: "number", precision: 2, max: 1.0, min: 0.5
	        }

	    }, Representation.prototype.parameters, {

	        flatShaded: null,
	        side: null,
	        wireframe: null,

	        roughness: null,
	        metalness: null,
	        diffuse: null,

	    } ),

	    init: function( params ){

	        var p = params || {};

	        this.multipleBond = defaults( p.multipleBond, false );
	        this.bondSpacing = defaults( p.bondSpacing, 0.85 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getBondParams: function( what, params ){

	        params = Object.assign( {
	            multipleBond: this.multipleBond,
	            bondSpacing: this.bondSpacing,
	            radiusParams: { "radius": 0.1, "scale": 1 }
	        }, params );

	        return StructureRepresentation.prototype.getBondParams.call( this, what, params );

	    },

	    createData: function( sview ){

	        var what = { position: true, color: true };
	        var bondData = sview.getBondData( this.getBondParams( what ) );

	        var lineBuffer = new LineBuffer(
	            bondData.position1,
	            bondData.position2,
	            bondData.color1,
	            bondData.color2,
	            this.getBufferParams()
	        );

	        return {
	            bufferList: [ lineBuffer ]
	        };

	    },

	    updateData: function( what, data ){

	        var bondData = data.sview.getBondData( this.getBondParams( what ) );
	        var lineData = {};

	        if( !what || what.position ){
	            lineData.from = bondData.position1;
	            lineData.to = bondData.position2;
	        }

	        if( !what || what.color ){
	            lineData.color = bondData.color1;
	            lineData.color2 = bondData.color2;
	        }

	        data.bufferList[ 0 ].setAttributes( lineData );

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && params.bondSpacing ){

	            what.position = true;

	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );


	RepresentationRegistry.add( "line", LineRepresentation );

	/**
	 * @file Grid
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function Grid( length, width, height, dataCtor, elemSize ){

	    dataCtor = dataCtor || Int32Array;
	    elemSize = elemSize || 1;

	    var j;

	    var data = new dataCtor( length * width * height * elemSize );

	    function index( x, y, z ){

	        return ( ( ( ( x * width ) + y ) * height ) + z ) * elemSize;

	    }

	    this.data = data;

	    this.index = index;

	    this.set = function( x, y, z ){

	        var i = index( x, y, z );

	        for( j = 0; j < elemSize; ++j ){
	            data[ i + j ] = arguments[ 3 + j ];
	        }

	    };

	    this.toArray = function( x, y, z, array, offset ){

	        var i = index( x, y, z );

	        if ( array === undefined ) array = [];
	        if ( offset === undefined ) offset = 0;

	        for( j = 0; j < elemSize; ++j ){
	            array[ j ] = data[ i + j ];
	        }

	    };

	    this.fromArray = function( x, y, z, array, offset ){

	        var i = index( x, y, z );

	        if ( offset === undefined ) offset = 0;

	        for( j = 0; j < elemSize; ++j ){
	            data[ i + j ] = array[ offset + j ];
	        }

	    };

	    this.copy = function( grid ){

	        this.data.set( grid.data );

	    };

	    this.clone = function(){

	        return new Grid(

	            length, width, height, dataCtor, elemSize

	        ).copy( this );

	    };

	}

	function getSurfaceGrid( min, max, maxRadius, scaleFactor, extraMargin ){

	    // need margin to avoid boundary/round off effects
	    var margin = ( 1 / scaleFactor ) * 3;
	    margin += maxRadius;

	    v3subScalar( min, min, extraMargin + margin );
	    v3addScalar( max, max, extraMargin + margin );

	    v3multiplyScalar( min, min, scaleFactor );
	    v3floor( min, min );
	    v3divideScalar( min, min, scaleFactor );

	    v3multiplyScalar( max, max, scaleFactor );
	    v3ceil( max, max );
	    v3divideScalar( max, max, scaleFactor );

	    var dim = new Float32Array( 3 );
	    v3sub( dim, max, min );
	    v3multiplyScalar( dim, dim, scaleFactor );
	    v3ceil( dim, dim );
	    v3addScalar( dim, dim, 1 );

	    var maxSize = Math.pow( 10, 6 ) * 256;
	    var tmpSize = dim.x * dim.y * dim.z * 3;

	    if( maxSize <= tmpSize ){

	        scaleFactor *= Math.pow( maxSize / tmpSize, 1/3 );

	        v3multiplyScalar( min, min, scaleFactor );
	        v3floor( min, min );
	        v3divideScalar( min, min, scaleFactor );

	        v3multiplyScalar( max, max, scaleFactor );
	        v3ceil( max, max );
	        v3divideScalar( max, max, scaleFactor );

	        v3sub( dim, max, min );
	        v3multiplyScalar( dim, dim, scaleFactor );
	        v3ceil( dim, dim );
	        v3addScalar( dim, dim, 1 );

	    }

	    var tran = new Float32Array( min );
	    v3negate( tran, tran );

	    // coordinate transformation matrix
	    var matrix = m4new();
	    var mroty = m4new();
	    m4makeRotationY( mroty, degToRad( 90 ) );
	    m4multiply( matrix, matrix, mroty );

	    var mscale = m4new();
	    m4makeScale( mscale,
	        -1 / scaleFactor,
	        1 / scaleFactor,
	        1 / scaleFactor
	    );
	    m4multiply( matrix, matrix, mscale );

	    var mtrans = m4new();
	    m4makeTranslation( mtrans,
	        -scaleFactor * tran[2],
	        -scaleFactor * tran[1],
	        -scaleFactor * tran[0]
	    );
	    m4multiply( matrix, matrix, mtrans );

	    return {
	        dim: dim,
	        tran: tran,
	        matrix: matrix,
	        scaleFactor: scaleFactor
	    };

	}
	getSurfaceGrid.__deps = [
	    degToRad,
	    v3subScalar, v3addScalar, v3divideScalar, v3multiplyScalar,
	    v3floor, v3ceil, v3sub, v3negate,
	    m4new, m4multiply, m4makeTranslation, m4makeScale, m4makeRotationY
	];


	function getRadiusDict( radiusList ){

	    var radiusDict = {};
	    for( var i = 0, il = radiusList.length; i < il; ++i ){
	        radiusDict[ radiusList[ i ] ] = true;
	    }
	    return radiusDict;

	}


	function EDTSurface( coordList, radiusList, indexList ){

	    // based on D. Xu, Y. Zhang (2009) Generating Triangulated Macromolecular
	    // Surfaces by Euclidean Distance Transform. PLoS ONE 4(12): e8140.
	    //
	    // Permission to use, copy, modify, and distribute this program for
	    // any purpose, with or without fee, is hereby granted, provided that
	    // the notices on the head, the reference information, and this
	    // copyright notice appear in all copies or substantial portions of
	    // the Software. It is provided "as is" without express or implied
	    // warranty.
	    //
	    // ported to JavaScript by biochem_fan (http://webglmol.sourceforge.jp/)
	    // refactored by dkoes (https://github.com/dkoes)
	    //
	    // adapted to NGL by Alexander Rose

	    var radiusDict = getRadiusDict( radiusList );
	    var bbox = computeBoundingBox( coordList );
	    var min = bbox[ 0 ];
	    var max = bbox[ 1 ];

	    var probeRadius, scaleFactor, cutoff;
	    var pLength, pWidth, pHeight;
	    var matrix, ptran;
	    var depty, widxz;
	    var cutRadius;
	    var setAtomID;
	    var vpBits, vpDistance, vpAtomID;

	    var radiusProperty;

	    function init( btype, _probeRadius, _scaleFactor, _cutoff, _setAtomID ){

	        probeRadius = _probeRadius || 1.4;
	        scaleFactor = _scaleFactor || 2.0;
	        setAtomID = _setAtomID || true;

	        var maxRadius = 0;
	        for( var radius in radiusDict ){
	            maxRadius = Math.max( maxRadius, radius );
	        }

	        var grid = getSurfaceGrid(
	            min, max, maxRadius, scaleFactor, btype ? probeRadius : 0
	        );

	        pLength = grid.dim[0];
	        pWidth = grid.dim[1];
	        pHeight = grid.dim[2];

	        matrix = grid.matrix;
	        ptran = grid.tran;
	        scaleFactor = grid.scaleFactor;

	        // boundingatom caches
	        depty = {};
	        widxz = {};
	        boundingatom( btype );

	        cutRadius = probeRadius * scaleFactor;

	        if( _cutoff ){
	            cutoff = _cutoff;
	        }else{
	            // cutoff = Math.max( 0.1, -1.2 + scaleFactor * probeRadius );
	            cutoff = probeRadius / scaleFactor;
	        }

	        vpBits = new Uint8Array( pLength * pWidth * pHeight );
	        if( btype ){
	            vpDistance = new Float64Array( pLength * pWidth * pHeight );
	        }
	        if( setAtomID ){
	            vpAtomID = new Int32Array( pLength * pWidth * pHeight );
	        }

	    }

	    // constants for vpBits bitmasks
	    var INOUT = 1;
	    var ISDONE = 2;
	    var ISBOUND = 4;

	    var nb = [
	        new Int32Array([  1,  0,  0 ]), new Int32Array([ -1,  0,  0 ]),
	        new Int32Array([  0,  1,  0 ]), new Int32Array([  0, -1,  0 ]),
	        new Int32Array([  0,  0,  1 ]), new Int32Array([  0,  0, -1 ]),
	        new Int32Array([  1,  1,  0 ]), new Int32Array([  1, -1,  0 ]),
	        new Int32Array([ -1,  1,  0 ]), new Int32Array([ -1, -1,  0 ]),
	        new Int32Array([  1,  0,  1 ]), new Int32Array([  1,  0, -1 ]),
	        new Int32Array([ -1,  0,  1 ]), new Int32Array([ -1,  0, -1 ]),
	        new Int32Array([  0,  1,  1 ]), new Int32Array([  0,  1, -1 ]),
	        new Int32Array([  0, -1,  1 ]), new Int32Array([  0, -1, -1 ]),
	        new Int32Array([  1,  1,  1 ]), new Int32Array([  1,  1, -1 ]),
	        new Int32Array([  1, -1,  1 ]), new Int32Array([ -1,  1,  1 ]),
	        new Int32Array([  1, -1, -1 ]), new Int32Array([ -1, -1,  1 ]),
	        new Int32Array([ -1,  1, -1 ]), new Int32Array([ -1, -1, -1 ])
	    ];

	    //

	    this.getVolume = function( type, probeRadius, scaleFactor, cutoff, setAtomID ){

	        console.time( "EDTSurface.getVolume" );

	        var btype = type !== "vws";

	        init( btype, probeRadius, scaleFactor, cutoff, setAtomID );

	        fillvoxels( btype );
	        buildboundary();

	        if( type === "ms" || type === "ses" ){
	            fastdistancemap();
	        }

	        if( type === "ses" ){
	            boundingatom( false );
	            fillvoxelswaals();
	        }

	        marchingcubeinit( type );

	        // set atomindex in the volume data
	        for( var i = 0, il = vpAtomID.length; i < il; ++i ){
	            vpAtomID[ i ] = indexList[ vpAtomID[ i ] ];
	        }

	        console.timeEnd( "EDTSurface.getVolume" );

	        return {
	            data: vpBits,
	            nx: pHeight,
	            ny: pWidth,
	            nz: pLength,
	            atomindex: vpAtomID
	        };

	    };

	    this.getSurface = function( type, probeRadius, scaleFactor, cutoff, setAtomID, smooth ){

	        var vd = this.getVolume(
	            type, probeRadius, scaleFactor, cutoff, setAtomID
	        );

	        var volsurf = new VolumeSurface(
	            vd.data, vd.nx, vd.ny, vd.nz, vd.atomindex
	        );

	        return volsurf.getSurface( 1, smooth, undefined, matrix );

	    };

	    function boundingatom( btype ){

	        var r, j, k;
	        var txz, tdept, sradius, tradius, widxz_r;
	        var depty_name, indx;

	        for( var name in radiusDict ){

	            r = radiusDict[ name ];

	            if( depty[ name ] ) continue;

	            if( !btype ){
	                tradius = r * scaleFactor + 0.5;
	            }else{
	                tradius = ( r + probeRadius ) * scaleFactor + 0.5;
	            }

	            sradius = tradius * tradius;
	            widxz_r = Math.floor( tradius ) + 1;
	            depty_name = new Int32Array( widxz_r * widxz_r );
	            indx = 0;

	            for( j = 0; j < widxz_r; ++j ){

	                for( k = 0; k < widxz_r; ++k ){

	                    txz = j * j + k * k;

	                    if( txz > sradius ){

	                        depty_name[ indx ] = -1;

	                    }else{

	                        tdept = Math.sqrt( sradius - txz );
	                        depty_name[ indx ] = Math.floor( tdept );

	                    }

	                    ++indx;

	                }

	            }

	            widxz[ name ] = widxz_r;
	            depty[ name ] = depty_name;

	        }

	    }

	    function fillatom( idx ){

	        var ci = idx * 3;
	        var ri = idx;

	        var cx, cy, cz, ox, oy, oz, mi, mj, mk, i, j, k, si, sj, sk;
	        var ii, jj, kk;

	        cx = Math.floor( 0.5 + scaleFactor * ( coordList[ ci ] + ptran[0] ) );
	        cy = Math.floor( 0.5 + scaleFactor * ( coordList[ ci + 1 ] + ptran[1] ) );
	        cz = Math.floor( 0.5 + scaleFactor * ( coordList[ ci + 2 ] + ptran[2] ) );

	        var at = radiusList[ ri ];
	        var depty_at = depty[ at ];
	        var nind = 0;
	        var cnt = 0;
	        var pWH = pWidth * pHeight;
	        var n = widxz[ at ];

	        var depty_at_nind;

	        for( i = 0; i < n; ++i ){
	        for( j = 0; j < n; ++j ){

	            depty_at_nind = depty_at[ nind ];

	            if( depty_at_nind != -1 ){

	                for( ii = -1; ii < 2; ++ii ){
	                for( jj = -1; jj < 2; ++jj ){
	                for( kk = -1; kk < 2; ++kk ){

	                    if( ii !== 0 && jj !== 0 && kk !== 0 ){

	                        mi = ii * i;
	                        mk = kk * j;

	                        for( k = 0; k <= depty_at_nind; ++k ){

	                            mj = k * jj;
	                            si = cx + mi;
	                            sj = cy + mj;
	                            sk = cz + mk;

	                            if( si < 0 || sj < 0 || sk < 0 ||
	                                si >= pLength || sj >= pWidth || sk >= pHeight
	                            ){
	                                continue;
	                            }

	                            var index = si * pWH + sj * pHeight + sk;

	                            if( !setAtomID ){

	                                vpBits[ index ] |= INOUT;

	                            }else{

	                                if( !( vpBits[ index ] & INOUT ) ){

	                                    vpBits[ index ] |= INOUT;
	                                    vpAtomID[ index ] = idx;

	                                }else if( vpBits[ index ] & INOUT ){
	                                // }else{

	                                    var ci2 = vpAtomID[ index ];

	                                    if( ci2 !== ci ){

	                                        ox = cx + mi - Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 ] + ptran[0] ) );
	                                        oy = cy + mj - Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 + 1 ] + ptran[1] ) );
	                                        oz = cz + mk - Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 + 2 ] + ptran[2] ) );

	                                        if( mi * mi + mj * mj + mk * mk <
	                                            ox * ox + oy * oy + oz * oz
	                                        ){
	                                            vpAtomID[ index ] = idx;
	                                        }

	                                    }

	                                }

	                            }

	                        }// k

	                    }// if

	                }// kk
	                }// jj
	                }// ii

	            }// if

	            nind++;

	        }// j
	        }// i

	    }

	    function fillvoxels( btype ){

	        console.time( "EDTSurface fillvoxels" );

	        var i, il;

	        for( i = 0, il = vpBits.length; i < il; ++i ){
	            vpBits[ i ] = 0;
	            if( btype ) vpDistance[ i ] = -1.0;
	            if( setAtomID ) vpAtomID[ i ] = -1;
	        }

	        for( i = 0, il = coordList.length / 3; i < il; ++i ){
	            fillatom( i );
	        }

	        for( i = 0, il = vpBits.length; i < il; ++i ){
	            if( vpBits[ i ] & INOUT ){
	                vpBits[ i ] |= ISDONE;
	            }
	        }

	        console.timeEnd( "EDTSurface fillvoxels" );

	    }

	    function fillAtomWaals( idx ){

	        var ci = idx * 3;
	        var ri = idx;

	        var cx, cy, cz, ox, oy, oz, nind = 0;
	        var mi, mj, mk, si, sj, sk, i, j, k, ii, jj, kk, n;

	        cx = Math.floor( 0.5 + scaleFactor * ( coordList[ ci ] + ptran[0] ) );
	        cy = Math.floor( 0.5 + scaleFactor * ( coordList[ ci + 1 ] + ptran[1] ) );
	        cz = Math.floor( 0.5 + scaleFactor * ( coordList[ ci + 2 ] + ptran[2] ) );

	        var at = radiusList[ ri ];
	        var pWH = pWidth * pHeight;

	        for( i = 0, n = widxz[at]; i < n; ++i ){
	        for( j = 0; j < n; ++j ){

	            if( depty[ at ][ nind ] != -1 ){

	                for( ii = -1; ii < 2; ++ii ){
	                for( jj = -1; jj < 2; ++jj ){
	                for( kk = -1; kk < 2; ++kk ){

	                    if( ii !== 0 && jj !== 0 && kk !== 0 ){

	                        mi = ii * i;
	                        mk = kk * j;

	                        for( k = 0; k <= depty[ at ][ nind ]; ++k ){

	                            mj = k * jj;
	                            si = cx + mi;
	                            sj = cy + mj;
	                            sk = cz + mk;

	                            if( si < 0 || sj < 0 || sk < 0 ||
	                                si >= pLength || sj >= pWidth || sk >= pHeight
	                            ){
	                                continue;
	                            }

	                            var index = si * pWH + sj * pHeight + sk;

	                            if( !( vpBits[ index ] & ISDONE ) ){

	                                vpBits[ index ] |= ISDONE;
	                                if( setAtomID ) vpAtomID[ index ] = idx;

	                            }else if( setAtomID ){

	                                var ci2 = vpAtomID[ index ];

	                                ox = Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 ] + ptran[0] ) );
	                                oy = Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 + 1 ] + ptran[1] ) );
	                                oz = Math.floor( 0.5 + scaleFactor * ( coordList[ ci2 + 2 ] + ptran[2] ) );

	                                if( mi * mi + mj * mj + mk * mk <
	                                    ox * ox + oy * oy + oz * oz
	                                ){
	                                    vpAtomID[ index ] = idx;
	                                }

	                            }

	                        }// k

	                    }// if

	                }// kk
	                }// jj
	                }// ii

	            }// if

	            nind++;

	        }// j
	        }// i

	    }

	    function fillvoxelswaals(){

	        var i, il;

	        for( i = 0, il = vpBits.length; i < il; ++i ){
	            vpBits[ i ] &= ~ISDONE;  // not isdone
	        }

	        for( i = 0, il = coordList.length / 3; i < il; ++i ){
	            fillAtomWaals( i );
	        }

	    }

	    function buildboundary(){

	        var i, j, k;
	        var pWH = pWidth * pHeight;

	        for( i = 0; i < pLength; ++i ){
	        for( j = 0; j < pHeight; ++j ){
	        for( k = 0; k < pWidth; ++k ){

	            var index = i * pWH + k * pHeight + j;

	            if( vpBits[ index ] & INOUT ){

	                // var flagbound = false;
	                var ii = 0;

	                // while( !flagbound && ii < 26 ){
	                while( ii < 26 ){

	                    var ti = i + nb[ ii ][ 0 ];
	                    var tj = j + nb[ ii ][ 2 ];
	                    var tk = k + nb[ ii ][ 1 ];

	                    if( ti > -1 && ti < pLength &&
	                        tk > -1 && tk < pWidth &&
	                        tj > -1 && tj < pHeight &&
	                        !( vpBits[ ti * pWH + tk * pHeight + tj ] & INOUT )
	                    ){

	                        vpBits[ index ] |= ISBOUND;
	                        // flagbound = true;
	                        break;

	                    }else{

	                        ii++;

	                    }

	                }

	            }

	        } // k
	        } // j
	        } // i

	    }

	    function fastdistancemap(){

	        console.time( "EDTSurface fastdistancemap" );

	        var eliminate = 0;
	        var certificate;
	        var i, j, k, n;

	        var boundPoint = new Grid(
	            pLength, pWidth, pHeight, Uint16Array, 3
	        );
	        var pWH = pWidth * pHeight;
	        var cutRSq = cutRadius * cutRadius;

	        var totalsurfacevox = 0;
	        var totalinnervox = 0;

	        var index;

	        console.log( "l, w, h", pLength, pWidth, pHeight );

	        for( i = 0; i < pLength; ++i ){
	            for( j = 0; j < pWidth; ++j ){
	                for( k = 0; k < pHeight; ++k ){

	                    index = i * pWH + j * pHeight + k;

	                    vpBits[ index ] &= ~ISDONE;

	                    if( vpBits[ index ] & INOUT ){

	                        if( vpBits[ index ] & ISBOUND ){

	                            boundPoint.set(
	                                i, j, k,
	                                i, j, k
	                            );

	                            vpDistance[ index ] = 0;
	                            vpBits[ index ] |= ISDONE;

	                            totalsurfacevox += 1;

	                        }else{

	                            totalinnervox += 1;

	                        }

	                    }

	                }
	            }
	        }

	        console.log( "totalsurfacevox", totalsurfacevox );
	        console.log( "totalinnervox", totalinnervox );

	        var inarray = new Int32Array( 3 * totalsurfacevox );
	        var positin = 0;
	        var outarray = new Int32Array( 3 * totalsurfacevox );
	        var positout = 0;

	        for( i = 0; i < pLength; ++i ){
	            for( j = 0; j < pWidth; ++j ){
	                for( k = 0; k < pHeight; ++k ){

	                    index = i * pWH + j * pHeight + k;

	                    if( vpBits[ index ] & ISBOUND ){

	                        inarray[ positin     ] = i;
	                        inarray[ positin + 1 ] = j;
	                        inarray[ positin + 2 ] = k;
	                        positin += 3;

	                        vpBits[ index ] &= ~ISBOUND;

	                    }

	                }
	            }
	        }

	        do{

	            positout = fastoneshell( inarray, boundPoint, positin, outarray );
	            positin = 0;

	            console.log( "positout", positout / 3 );

	            for( i = 0, n = positout; i < n; i+=3 ){

	                index = pWH * outarray[ i ] + pHeight * outarray[ i + 1 ] + outarray[ i + 2 ];
	                vpBits[ index ] &= ~ISBOUND;

	                if( vpDistance[ index ] <= 1.0404 * cutRSq ){
	                //if( vpDistance[ index ] <= 1.02 * cutRadius ){

	                    inarray[ positin     ] = outarray[ i     ];
	                    inarray[ positin + 1 ] = outarray[ i + 1 ];
	                    inarray[ positin + 2 ] = outarray[ i + 2 ];
	                    positin += 3;

	                }

	            }

	        }while( positin > 0 );

	        // var cutsf = Math.max( 0, scaleFactor - 0.5 );
	        // cutoff = cutRadius - 0.5 / ( 0.1 + cutsf );
	        var cutoffSq = cutoff * cutoff;

	        var index2;
	        var bp = new Uint16Array( 3 );

	        for( i = 0; i < pLength; ++i ){
	            for( j = 0; j < pWidth; ++j ){
	                for( k = 0; k < pHeight; ++k ){

	                    index = i * pWH + j * pHeight + k;
	                    vpBits[ index ] &= ~ISBOUND;

	                    // ses solid

	                    if( vpBits[ index ] & INOUT ) {

	                        if( !( vpBits[ index ] & ISDONE ) ||
	                            ( ( vpBits[ index ] & ISDONE ) && vpDistance[ index ] >= cutoffSq )
	                        ){

	                            vpBits[ index ] |= ISBOUND;

	                            if( setAtomID && ( vpBits[ index ] & ISDONE ) ){

	                                boundPoint.toArray( i, j, k, bp );
	                                index2 = bp[ 0 ] * pWH + bp[ 1 ] * pHeight + bp[ 2 ];

	                                vpAtomID[ index ] = vpAtomID[ index2 ];

	                            }

	                        }
	                    }

	                }
	            }
	        }

	        console.timeEnd( "EDTSurface fastdistancemap" );

	    }

	    function fastoneshell( inarray, boundPoint, positin, outarray ){

	        console.log( "positin", positin / 3 );

	        // *allocout,voxel2
	        // ***boundPoint, int*
	        // outnum, int *elimi)
	        var tx, ty, tz;
	        var dx, dy, dz;
	        var i, j, n;
	        var square;
	        var index;
	        var nb_j;
	        var bp = new Uint16Array( 3 );
	        var positout = 0;

	        if( positin === 0 ){
	            return positout;
	        }

	        var tnv_ix = -1;
	        var tnv_iy = -1;
	        var tnv_iz = -1;

	        var pWH = pWidth * pHeight;

	        for( i = 0, n = positin; i < n; i+=3 ){

	            tx = inarray[ i     ];
	            ty = inarray[ i + 1 ];
	            tz = inarray[ i + 2 ];
	            boundPoint.toArray( tx, ty, tz, bp );

	            for( j = 0; j < 6; ++j ){

	                nb_j = nb[ j ];
	                tnv_ix = tx + nb_j[ 0 ];
	                tnv_iy = ty + nb_j[ 1 ];
	                tnv_iz = tz + nb_j[ 2 ];

	                if( tnv_ix < pLength && tnv_ix > -1 &&
	                    tnv_iy < pWidth  && tnv_iy > -1 &&
	                    tnv_iz < pHeight && tnv_iz > -1
	                ){

	                    index = tnv_ix * pWH + pHeight * tnv_iy + tnv_iz;

	                    if( ( vpBits[ index ] & INOUT ) && !( vpBits[ index ] & ISDONE ) ){

	                        boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        vpDistance[ index ] = square;
	                        vpBits[ index ] |= ISDONE;
	                        vpBits[ index ] |= ISBOUND;

	                        outarray[ positout     ] = tnv_ix;
	                        outarray[ positout + 1 ] = tnv_iy;
	                        outarray[ positout + 2 ] = tnv_iz;
	                        positout += 3;

	                    }else if( ( vpBits[ index ] & INOUT ) && ( vpBits[ index ] & ISDONE ) ){

	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        if( square < vpDistance[ index ] ){

	                            boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                            vpDistance[ index ] = square;

	                            if( !( vpBits[ index ] & ISBOUND ) ){

	                                vpBits[ index ] |= ISBOUND;

	                                outarray[ positout     ] = tnv_ix;
	                                outarray[ positout + 1 ] = tnv_iy;
	                                outarray[ positout + 2 ] = tnv_iz;
	                                positout += 3;

	                            }

	                        }

	                    }

	                }
	            }
	        }

	        // console.log("part1", positout);

	        for( i = 0, n = positin; i < n; i+=3 ){

	            tx = inarray[ i     ];
	            ty = inarray[ i + 1 ];
	            tz = inarray[ i + 2 ];
	            boundPoint.toArray( tx, ty, tz, bp );

	            for (j = 6; j < 18; j++) {

	                nb_j = nb[ j ];
	                tnv_ix = tx + nb_j[ 0 ];
	                tnv_iy = ty + nb_j[ 1 ];
	                tnv_iz = tz + nb_j[ 2 ];

	                if( tnv_ix < pLength && tnv_ix > -1 &&
	                    tnv_iy < pWidth  && tnv_iy > -1 &&
	                    tnv_iz < pHeight && tnv_iz > -1
	                ) {

	                    index = tnv_ix * pWH + pHeight * tnv_iy + tnv_iz;

	                    if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {

	                        boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        vpDistance[index] = square;
	                        vpBits[index] |= ISDONE;
	                        vpBits[index] |= ISBOUND;

	                        outarray[ positout     ] = tnv_ix;
	                        outarray[ positout + 1 ] = tnv_iy;
	                        outarray[ positout + 2 ] = tnv_iz;
	                        positout += 3;

	                    } else if ((vpBits[index] & INOUT) && (vpBits[index] & ISDONE)) {

	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        if (square < vpDistance[index]) {

	                            boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                            vpDistance[index] = square;

	                            if (!(vpBits[index] & ISBOUND)) {

	                                vpBits[index] |= ISBOUND;

	                                outarray[ positout     ] = tnv_ix;
	                                outarray[ positout + 1 ] = tnv_iy;
	                                outarray[ positout + 2 ] = tnv_iz;
	                                positout += 3;

	                            }

	                        }

	                    }

	                }
	            }
	        }

	        // console.log("part2", positout);

	        for( i = 0, n = positin; i < n; i+=3 ){

	            tx = inarray[ i     ];
	            ty = inarray[ i + 1 ];
	            tz = inarray[ i + 2 ];
	            boundPoint.toArray( tx, ty, tz, bp );

	            for (j = 18; j < 26; j++) {

	                nb_j = nb[ j ];
	                tnv_ix = tx + nb_j[ 0 ];
	                tnv_iy = ty + nb_j[ 1 ];
	                tnv_iz = tz + nb_j[ 2 ];

	                if( tnv_ix < pLength && tnv_ix > -1 &&
	                    tnv_iy < pWidth  && tnv_iy > -1 &&
	                    tnv_iz < pHeight && tnv_iz > -1
	                ){

	                    index = tnv_ix * pWH + pHeight * tnv_iy + tnv_iz;

	                    if ((vpBits[index] & INOUT) && !(vpBits[index] & ISDONE)) {

	                        boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        vpDistance[index] = square;
	                        vpBits[index] |= ISDONE;
	                        vpBits[index] |= ISBOUND;

	                        outarray[ positout     ] = tnv_ix;
	                        outarray[ positout + 1 ] = tnv_iy;
	                        outarray[ positout + 2 ] = tnv_iz;
	                        positout += 3;

	                    } else if ((vpBits[index] & INOUT)  && (vpBits[index] & ISDONE)) {

	                        dx = tnv_ix - bp[ 0 ];
	                        dy = tnv_iy - bp[ 1 ];
	                        dz = tnv_iz - bp[ 2 ];
	                        square = dx * dx + dy * dy + dz * dz;
	                        //square = Math.sqrt( square );

	                        if (square < vpDistance[index]) {

	                            boundPoint.fromArray( tnv_ix, tnv_iy, tnv_iz, bp );
	                            vpDistance[index] = square;

	                            if (!(vpBits[index] & ISBOUND)) {

	                                vpBits[index] |= ISBOUND;

	                                outarray[ positout     ] = tnv_ix;
	                                outarray[ positout + 1 ] = tnv_iy;
	                                outarray[ positout + 2 ] = tnv_iz;
	                                positout += 3;

	                            }

	                        }

	                    }

	                }
	            }
	        }

	        // console.log("part3", positout);

	        return positout;

	    }

	    function marchingcubeinit( stype ){

	        var i;
	        var n = vpBits.length;

	        if( stype === "vws" ) {

	            for( i = 0; i < n; ++i ){

	                vpBits[ i ] &= ~ISBOUND;
	                vpBits[ i ] = !!( vpBits[ i ] & ISDONE ) ? 1 : 0;

	            }

	        }else if( stype === "ms" ){  // ses without vdw => ms

	            for( i = 0; i < n; ++i ){

	                vpBits[ i ] &= ~ISDONE;
	                if( vpBits[ i ] & ISBOUND ){
	                    vpBits[ i ] |= ISDONE;
	                }
	                vpBits[ i ] &= ~ISBOUND;
	                vpBits[ i ] = !!( vpBits[ i ] & ISDONE ) ? 1 : 0;

	            }

	        }else if( stype === "ses" ){

	            for( i = 0; i < n; ++i ){

	                if( ( vpBits[ i ] & ISBOUND ) && ( vpBits[ i ] & ISDONE ) ){
	                    vpBits[ i ] &= ~ISBOUND;
	                }else if( ( vpBits[ i ] & ISBOUND ) && !( vpBits[ i ] & ISDONE ) ){
	                    vpBits[ i ] |= ISDONE;
	                }
	                vpBits[ i ] = !!( vpBits[ i ] & ISDONE ) ? 1 : 0;

	            }

	        }else if( stype === "sas" ){

	            for( i = 0; i < n; ++i ){

	                vpBits[ i ] &= ~ISBOUND;
	                vpBits[ i ] = !!( vpBits[ i ] & ISDONE ) ? 1 : 0;

	            }

	        }

	    }

	}
	EDTSurface.__deps = [
	    getSurfaceGrid, getRadiusDict, VolumeSurface, computeBoundingBox, Grid
	];

	WorkerRegistry.add( "molsurf", function func( e, callback ){

	    var a = e.data.args;
	    var p = e.data.params;
	    if( a && p ){

	        var edtsurf = new EDTSurface( a.coordList, a.radiusList, a.indexList );
	        var sd = edtsurf.getSurface(
	            p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth
	        );
	        var transferList = [ sd.position.buffer, sd.index.buffer ];
	        if( sd.normal ) transferList.push( sd.normal.buffer );
	        if( sd.atomindex ) transferList.push( sd.atomindex.buffer );
	        callback( {
	            sd: sd,
	            p: p
	        }, transferList );
	    }

	}, [ EDTSurface ] );



	function MolecularSurface( structure ){

	    this.structure = structure;

	}

	MolecularSurface.prototype = {

	    getAtomData: function(){

	        return this.structure.getAtomData( {
	            what: { position: true, radius: true, index: true },
	            radiusParams: { radius: "vdw", scale: 1 }
	        } );

	    },

	    makeSurface: function( sd, p ){

	        var surface = new Surface( "", "", sd );

	        surface.info.type = p.type;
	        surface.info.probeRadius = p.probeRadius;
	        surface.info.scaleFactor = p.scaleFactor;
	        surface.info.smooth = p.smooth;
	        surface.info.cutoff = p.cutoff;

	        return surface;

	    },

	    getSurface: function( params ){

	        var p = params || {};

	        var atomData = this.getAtomData();
	        var coordList = atomData.position;
	        var radiusList = atomData.radius;
	        var indexList = atomData.index;

	        var edtsurf = new EDTSurface( coordList, radiusList, indexList );
	        var sd = edtsurf.getSurface(
	            p.type, p.probeRadius, p.scaleFactor, p.cutoff, true, p.smooth
	        );

	        return this.makeSurface( sd, p );

	    },

	    getSurfaceWorker: function( params, callback ){

	        var p = Object.assign( {}, params );

	        if( window.Worker ){

	            if( this.worker === undefined ){
	                this.worker = new Worker( "molsurf" );
	            }

	            var atomData = this.getAtomData();
	            var coordList = atomData.position;
	            var radiusList = atomData.radius;
	            var indexList = atomData.index;

	            var msg = {
	                args: {
	                    coordList: coordList,
	                    radiusList: radiusList,
	                    indexList: indexList
	                },
	                params: p
	            };

	            var transferList = [
	                coordList.buffer, radiusList.buffer, indexList.buffer
	            ];

	            this.worker.post( msg, transferList,

	                function( e ){
	                    var sd = e.data.sd;
	                    callback( this.makeSurface( sd, p ) );
	                }.bind( this ),

	                function( e ){
	                    console.warn(
	                        "MolecularSurface.getSurfaceWorker error - trying without worker", e
	                    );
	                    this.worker.terminate();
	                    this.worker = undefined;
	                    var surface = this.getSurface( p );
	                    callback( surface );
	                }.bind( this )

	            );

	        }else{

	            var surface = this.getSurface( p );
	            callback( surface );

	        }

	    },

	    dispose: function(){

	        if( this.worker ) this.worker.terminate();

	    }

	};

	function MolecularSurfaceRepresentation( structure, viewer, params ){

	    this.__infoList = [];

	    StructureRepresentation.call( this, structure, viewer, params );

	    // TODO find a more direct way
	    this.structure.signals.refreshed.add( function(){
	        this.__forceNewMolsurf = true;
	    }, this );

	}

	MolecularSurfaceRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: MolecularSurfaceRepresentation,

	    type: "surface",

	    parameters: Object.assign( {

	        surfaceType: {
	            type: "select", rebuild: true,
	            options: {
	                "vws": "vws",
	                "sas": "sas",
	                "ms": "ms",
	                "ses": "ses"
	            }
	        },
	        probeRadius: {
	            type: "number", precision: 1, max: 20, min: 0,
	            rebuild: true
	        },
	        smooth: {
	            type: "integer", precision: 1, max: 10, min: 0,
	            rebuild: true
	        },
	        scaleFactor: {
	            type: "number", precision: 1, max: 5, min: 0,
	            rebuild: true
	        },
	        cutoff: {
	            type: "number", precision: 2, max: 50, min: 0,
	            rebuild: true
	        },
	        background: {
	            type: "boolean", rebuild: true  // FIXME
	        },
	        opaqueBack: {
	            type: "boolean", buffer: true
	        },
	        filterSele: {
	            type: "text"
	        },
	        volume: {
	            type: "hidden"
	        },
	        useWorker: {
	            type: "boolean", rebuild: true
	        }

	    }, StructureRepresentation.prototype.parameters, {

	        radiusType: null,
	        radius: null,
	        scale: null

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "uniform" );
	        p.colorValue = defaults( p.colorValue, 0xDDDDDD );

	        this.surfaceType = defaults( p.surfaceType, "ms" );
	        this.probeRadius = defaults( p.probeRadius, 1.4 );
	        this.smooth = defaults( p.smooth, 2 );
	        this.scaleFactor = defaults( p.scaleFactor, 2.0 );
	        this.cutoff = defaults( p.cutoff, 0.0 );
	        this.background = defaults( p.background, false );
	        this.opaqueBack = defaults( p.opaqueBack, true );
	        this.filterSele = defaults( p.filterSele, "" );
	        this.volume = defaults( p.volume, undefined );
	        this.useWorker = defaults( p.useWorker, true );

	        StructureRepresentation.prototype.init.call( this, params );

	    },

	    prepareData: function( sview, i, callback ){

	        var info = this.__infoList[ i ];
	        if( !info ){
	            info = {};
	            this.__infoList[ i ] = info;
	        }

	        if( !info.molsurf || info.sele !== sview.selection.string ){

	            info.sele = sview.selection.string;
	            info.molsurf = new MolecularSurface( sview );

	            var p = this.getSurfaceParams();
	            var onSurfaceFinish = function( surface ){
	                info.surface = surface;
	                callback( i );
	            };

	            if( this.useWorker ){
	                info.molsurf.getSurfaceWorker( p, onSurfaceFinish );
	            }else{
	                onSurfaceFinish( info.molsurf.getSurface( p ) );
	            }

	        }else{

	            callback( i );

	        }

	    },

	    prepare: function( callback ){

	        if( this.__forceNewMolsurf || this.__sele !== this.selection.string ||
	                this.__surfaceParams !== JSON.stringify( this.getSurfaceParams() ) ){
	            this.__infoList.forEach( function( info, i ){
	                info.molsurf.dispose();
	            }.bind( this ) );
	            this.__infoList.length = 0;
	        }

	        if( this.structureView.atomCount === 0 ){
	            callback();
	            return;
	        }

	        var after = function(){
	            this.__sele = this.selection.string;
	            this.__surfaceParams = JSON.stringify( this.getSurfaceParams() );
	            this.__forceNewMolsurf = false;
	            callback();
	        }.bind( this );

	        var name = this.assembly === "default" ? this.defaultAssembly : this.assembly;
	        var assembly = this.structure.biomolDict[ name ];

	        if( assembly ){
	            assembly.partList.forEach( function( part, i ){
	                var sview = part.getView( this.structureView );
	                this.prepareData( sview, i, function( _i ){
	                    if( _i === assembly.partList.length - 1 ) after();
	                }.bind( this ) );
	            }, this );
	        }else{
	            this.prepareData( this.structureView, 0, after );
	        }

	    },

	    createData: function( sview, i ){

	        var info = this.__infoList[ i ];

	        var surfaceBuffer = new SurfaceBuffer(
	            info.surface.getPosition(),
	            info.surface.getColor( this.getColorParams() ),
	            info.surface.getFilteredIndex( this.filterSele, sview ),
	            info.surface.getNormal(),
	            info.surface.getPickingColor( this.getColorParams() ),
	            this.getBufferParams( {
	                background: this.background,
	                opaqueBack: this.opaqueBack,
	                dullInterior: false
	            } )
	        );
	        var doubleSidedBuffer = new DoubleSidedBuffer( surfaceBuffer );

	        return {
	            bufferList: [ doubleSidedBuffer ],
	            info: info
	        };

	    },

	    updateData: function( what, data ){

	        var surfaceData = {};

	        if( what.position ){
	            this.__forceNewMolsurf = true;
	            this.build();
	            return;
	        }

	        if( what.color ){
	            surfaceData.color = data.info.surface.getColor( this.getColorParams() );
	        }

	        if( what.index ){
	            surfaceData.index = data.info.surface.getFilteredIndex( this.filterSele, data.sview );
	        }

	        data.bufferList[ 0 ].setAttributes( surfaceData );

	    },

	    setParameters: function( params, what, rebuild ){

	        what = what || {};

	        if( params && params.filterSele ){
	            what.index = true;
	        }

	        if( params && params.volume !== undefined ){
	            what.color = true;
	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    },

	    getSurfaceParams: function( params ){

	        var p = Object.assign( {
	            type: this.surfaceType,
	            probeRadius: this.probeRadius,
	            scaleFactor: this.scaleFactor,
	            smooth: this.smooth,
	            cutoff: this.cutoff,
	            useWorker: this.useWorker
	        }, params );

	        return p;

	    },

	    getColorParams: function(){

	        var p = StructureRepresentation.prototype.getColorParams.call( this );

	        p.volume = this.volume;

	        return p;

	    },

	    clear: function(){

	        StructureRepresentation.prototype.clear.call( this );

	    },

	    dispose: function(){

	        this.__infoList.forEach( function( info, i ){
	            info.molsurf.dispose();
	        }.bind( this ) );
	        this.__infoList.length = 0;

	        StructureRepresentation.prototype.dispose.call( this );

	    }

	} );


	RepresentationRegistry.add( "surface", MolecularSurfaceRepresentation );

	function PointRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	PointRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: PointRepresentation,

	    type: "point",

	    parameters: Object.assign( {

	        pointSize: {
	            type: "number", precision: 1, max: 100, min: 0, buffer: true
	        },
	        sizeAttenuation: {
	            type: "boolean", buffer: true
	        },
	        sortParticles: {
	            type: "boolean", rebuild: true
	        },
	        useTexture: {
	            type: "boolean", buffer: true
	        },
	        alphaTest: {
	            type: "range", step: 0.001, max: 1, min: 0, buffer: true
	        },
	        forceTransparent: {
	            type: "boolean", buffer: true
	        },
	        edgeBleach: {
	            type: "range", step: 0.001, max: 1, min: 0, buffer: true
	        },

	    }, Representation.prototype.parameters, {

	        flatShaded: null,
	        wireframe: null,
	        linewidth: null,

	        roughness: null,
	        metalness: null

	    } ),

	    init: function( params ){

	        var p = params || {};

	        this.pointSize = defaults( p.pointSize, 1 );
	        this.sizeAttenuation = defaults( p.sizeAttenuation, true );
	        this.sortParticles = defaults( p.sortParticles, false );
	        this.useTexture = defaults( p.useTexture, false );
	        this.alphaTest = defaults( p.alphaTest, 0.5 );
	        this.forceTransparent = defaults( p.forceTransparent, false );
	        this.edgeBleach = defaults( p.edgeBleach, 0.0 );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    createData: function( sview ){

	        var what = { position: true, color: true };
	        var atomData = sview.getAtomData( this.getAtomParams( what ) );

	        var pointBuffer = new PointBuffer(
	            atomData.position,
	            atomData.color,
	            this.getBufferParams( {
	                pointSize: this.pointSize,
	                sizeAttenuation: this.sizeAttenuation,
	                sortParticles: this.sortParticles,
	                useTexture: this.useTexture,
	                alphaTest: this.alphaTest,
	                forceTransparent: this.forceTransparent,
	                edgeBleach: this.edgeBleach
	            } )
	        );

	        return {
	            bufferList: [ pointBuffer ]
	        };

	    },

	    updateData: function( what, data ){

	        var atomData = data.sview.getAtomData( this.getAtomParams( what ) );
	        var pointData = {};

	        if( !what || what.position ){
	            pointData.position = atomData.position;
	        }

	        if( !what || what.color ){
	            pointData.color = atomData.color;
	        }

	        data.bufferList[ 0 ].setAttributes( pointData );

	    }

	} );


	RepresentationRegistry.add( "point", PointRepresentation );

	function RibbonBuffer( position, normal, dir, color, size, pickingColor, params ){

	    var p = params || {};

	    var n = ( position.length / 3 ) - 1;
	    var n4 = n * 4;
	    var x = n4 * 3;

	    this.meshPosition = new Float32Array( x );
	    this.meshColor = new Float32Array( x );
	    this.meshNormal = new Float32Array( x );
	    this.meshPickingColor = pickingColor ? new Float32Array( x ) : undefined;

	    var TypedArray = this.meshPosition.length / 3 > 65535 ? Uint32Array : Uint16Array;
	    this.meshIndex = new TypedArray( x );
	    this.makeIndex();

	    MeshBuffer.call(
	        this, this.meshPosition, this.meshColor, this.meshIndex,
	        this.meshNormal, this.meshPickingColor, p
	    );

	    this.vertexShader = 'Ribbon.vert';
	    this.fragmentShader = 'Mesh.frag';

	    this.geometry.addAttribute(
	        'dir', new BufferAttribute( new Float32Array( x ), 3 )
	    );
	    this.geometry.addAttribute(
	        'size', new BufferAttribute( new Float32Array( n4 ), 1 )
	    );

	    this.setAttributes( {
	        position: position,
	        normal: normal,
	        dir: dir,
	        color: color,
	        size: size,
	        pickingColor: pickingColor
	    } );

	}

	RibbonBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: RibbonBuffer,

	    setAttributes: function( data ){

	        var n4 = this.size;
	        var n = n4 / 4;

	        var attributes = this.geometry.attributes;

	        var position, normal, size, dir, color, pickingColor;
	        var aPosition, aNormal, aSize, aDir, aColor, aPickingColor;

	        if( data.position ){
	            position = data.position;
	            aPosition = attributes.position.array;
	            attributes.position.needsUpdate = true;
	        }

	        if( data.normal ){
	            normal = data.normal;
	            aNormal = attributes.normal.array;
	            attributes.normal.needsUpdate = true;
	        }

	        if( data.size ){
	            size = data.size;
	            aSize = attributes.size.array;
	            attributes.size.needsUpdate = true;
	        }

	        if( data.dir ){
	            dir = data.dir;
	            aDir = attributes.dir.array;
	            attributes.dir.needsUpdate = true;
	        }

	        if( data.color ){
	            color = data.color;
	            aColor = attributes.color.array;
	            attributes.color.needsUpdate = true;
	        }

	        if( data.pickingColor ){
	            pickingColor = data.pickingColor;
	            aPickingColor = attributes.pickingColor.array;
	            attributes.pickingColor.needsUpdate = true;
	        }

	        var v, i, k, p, l, v3;
	        var currSize;
	        var prevSize = size ? size[ 0 ] : null;

	        for( v = 0; v < n; ++v ){

	            v3 = v * 3;
	            k = v * 3 * 4;
	            l = v * 4;

	            if( position ){

	                aPosition[ k     ] = aPosition[ k + 3 ] = position[ v3     ];
	                aPosition[ k + 1 ] = aPosition[ k + 4 ] = position[ v3 + 1 ];
	                aPosition[ k + 2 ] = aPosition[ k + 5 ] = position[ v3 + 2 ];

	                aPosition[ k + 6 ] = aPosition[ k +  9 ] = position[ v3 + 3 ];
	                aPosition[ k + 7 ] = aPosition[ k + 10 ] = position[ v3 + 4 ];
	                aPosition[ k + 8 ] = aPosition[ k + 11 ] = position[ v3 + 5 ];

	            }

	            if( normal ){

	                aNormal[ k     ] = aNormal[ k + 3 ] = -normal[ v3     ];
	                aNormal[ k + 1 ] = aNormal[ k + 4 ] = -normal[ v3 + 1 ];
	                aNormal[ k + 2 ] = aNormal[ k + 5 ] = -normal[ v3 + 2 ];

	                aNormal[ k + 6 ] = aNormal[ k +  9 ] = -normal[ v3 + 3 ];
	                aNormal[ k + 7 ] = aNormal[ k + 10 ] = -normal[ v3 + 4 ];
	                aNormal[ k + 8 ] = aNormal[ k + 11 ] = -normal[ v3 + 5 ];

	            }


	            for( i = 0; i<4; ++i ){

	                p = k + 3 * i;

	                if( color ){

	                    aColor[ p     ] = color[ v3     ];
	                    aColor[ p + 1 ] = color[ v3 + 1 ];
	                    aColor[ p + 2 ] = color[ v3 + 2 ];

	                }

	                if( pickingColor ){

	                    aPickingColor[ p     ] = pickingColor[ v3     ];
	                    aPickingColor[ p + 1 ] = pickingColor[ v3 + 1 ];
	                    aPickingColor[ p + 2 ] = pickingColor[ v3 + 2 ];

	                }

	            }

	            if( size ){

	                currSize = size[ v ];

	                if( prevSize !== size[ v ] ){

	                    aSize[ l     ] = prevSize;
	                    aSize[ l + 1 ] = prevSize;
	                    aSize[ l + 2 ] = currSize;
	                    aSize[ l + 3 ] = currSize;

	                }else{

	                    aSize[ l     ] = currSize;
	                    aSize[ l + 1 ] = currSize;
	                    aSize[ l + 2 ] = currSize;
	                    aSize[ l + 3 ] = currSize;

	                }

	                prevSize = currSize;

	            }

	            if( dir ){

	                aDir[ k     ] = dir[ v3     ];
	                aDir[ k + 1 ] = dir[ v3 + 1 ];
	                aDir[ k + 2 ] = dir[ v3 + 2 ];

	                aDir[ k + 3 ] = -dir[ v3     ];
	                aDir[ k + 4 ] = -dir[ v3 + 1 ];
	                aDir[ k + 5 ] = -dir[ v3 + 2 ];

	                aDir[ k + 6 ] = dir[ v3 + 3 ];
	                aDir[ k + 7 ] = dir[ v3 + 4 ];
	                aDir[ k + 8 ] = dir[ v3 + 5 ];

	                aDir[ k +  9 ] = -dir[ v3 + 3 ];
	                aDir[ k + 10 ] = -dir[ v3 + 4 ];
	                aDir[ k + 11 ] = -dir[ v3 + 5 ];

	            }

	        }

	    },

	    makeIndex: function(){

	        var meshIndex = this.meshIndex;
	        var n = meshIndex.length / 4 / 3;

	        var quadIndices = new Uint16Array([
	            0, 1, 2,
	            1, 3, 2
	        ]);

	        var s, v, ix, it;

	        for( v = 0; v < n; ++v ){

	            ix = v * 6;
	            it = v * 4;

	            meshIndex.set( quadIndices, ix );
	            for( s = 0; s < 6; ++s ){
	                meshIndex[ ix + s ] += it;
	            }

	        }

	    }

	} );

	function RibbonRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	    this.defaultScale.sstruc *= 3.0;

	}

	RibbonRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: RibbonRepresentation,

	    type: "ribbon",

	    parameters: Object.assign( {

	        subdiv: {
	            type: "integer", max: 50, min: 1, rebuild: true
	        },
	        tension: {
	            type: "number", precision: 1, max: 1.0, min: 0.1
	        },
	        smoothSheet: {
	            type: "boolean", rebuild: true
	        }

	    }, StructureRepresentation.prototype.parameters, {

	        side: null,
	        wireframe: null,
	        linewidth: null

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "atomindex" );
	        p.colorScale = defaults( p.colorScale, "RdYlBu" );
	        p.radius = defaults( p.radius, "sstruc" );
	        p.scale = defaults( p.scale, 4.0 );

	        if( p.quality === "low" ){
	            this.subdiv = 3;
	        }else if( p.quality === "medium" ){
	            this.subdiv = 6;
	        }else if( p.quality === "high" ){
	            this.subdiv = 12;
	        }else{
	            this.subdiv = defaults( p.subdiv, 6 );
	        }

	        this.tension = defaults( p.tension, NaN );
	        this.smoothSheet = defaults( p.smoothSheet, false );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getSplineParams: function( params ){

	        return Object.assign( {
	            subdiv: this.subdiv,
	            tension: this.tension,
	            directional: true,
	            smoothSheet: this.smoothSheet
	        }, params );

	    },

	    createData: function( sview ){

	        var bufferList = [];
	        var polymerList = [];

	        this.structure.eachPolymer( function( polymer ){

	            if( polymer.residueCount < 4 ) return;
	            polymerList.push( polymer );

	            var spline = new Spline( polymer, this.getSplineParams() );
	            var subPos = spline.getSubdividedPosition();
	            var subOri = spline.getSubdividedOrientation();
	            var subCol = spline.getSubdividedColor( this.getColorParams() );
	            var subSize = spline.getSubdividedSize( this.radius, this.scale );

	            bufferList.push(
	                new RibbonBuffer(
	                    subPos.position,
	                    subOri.binormal,
	                    subOri.normal,
	                    subCol.color,
	                    subSize.size,
	                    subCol.pickingColor,
	                    this.getBufferParams()
	                )
	            );

	        }.bind( this ), sview.getSelection() );

	        return {
	            bufferList: bufferList,
	            polymerList: polymerList
	        };

	    },

	    updateData: function( what, data ){

	        what = what || {};

	        var i = 0;
	        var n = data.polymerList.length;

	        for( i = 0; i < n; ++i ){

	            var bufferData = {};
	            var spline = new Spline( data.polymerList[ i ], this.getSplineParams() );

	            if( what.position ){
	                var subPos = spline.getSubdividedPosition();
	                var subOri = spline.getSubdividedOrientation();
	                bufferData.position = subPos.position;
	                bufferData.normal = subOri.binormal;
	                bufferData.dir = subOri.normal;
	            }

	            if( what.radius || what.scale ){
	                var subSize = spline.getSubdividedSize( this.radius, this.scale );
	                bufferData.size = subSize.size;
	            }

	            if( what.color ){
	                var subCol = spline.getSubdividedColor( this.getColorParams() );
	                bufferData.color = subCol.color;
	            }

	            data.bufferList[ i ].setAttributes( bufferData );

	        }

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && params.tension ){
	            what.position = true;
	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );


	RepresentationRegistry.add( "ribbon", RibbonRepresentation );

	function RocketRepresentation( structure, viewer, params ){

	    this.helixbundleList = [];

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	RocketRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: RocketRepresentation,

	    type: "rocket",

	    parameters: Object.assign( {

	        localAngle: {
	            type: "integer", max: 180, min: 0, rebuild: true
	        },
	        centerDist: {
	            type: "number", precision: 1, max: 10, min: 0, rebuild: true
	        },
	        ssBorder: {
	            type: "boolean", rebuild: true
	        },
	        radialSegments: true,
	        openEnded: true,
	        disableImpostor: true

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "sstruc" );
	        p.radius = defaults( p.radius, 1.5 );
	        p.scale = defaults( p.scale, 1.0 );
	        p.openEnded = defaults( p.openEnded, false );

	        this.localAngle = defaults( p.localAngle, 30 );
	        this.centerDist = defaults( p.centerDist, 2.5 );
	        this.ssBorder = defaults( p.ssBorder, false );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    createData: function( sview ){

	        var length = 0;
	        var axisList = [];
	        var helixbundleList = [];

	        this.structure.eachPolymer( function( polymer ){

	            if( polymer.residueCount < 4 || polymer.isNucleic() ) return;

	            var helixbundle = new Helixbundle( polymer );
	            var axis = helixbundle.getAxis(
	                this.localAngle, this.centerDist, this.ssBorder,
	                this.getColorParams(), this.radius, this.scale
	            );

	            length += axis.size.length;
	            axisList.push( axis );
	            helixbundleList.push( helixbundle );

	        }.bind( this ), sview.getSelection() );

	        var axisData = {
	            begin: new Float32Array( length * 3 ),
	            end: new Float32Array( length * 3 ),
	            size: new Float32Array( length ),
	            color: new Float32Array( length * 3 ),
	            pickingColor: new Float32Array( length * 3 ),
	        };

	        var offset = 0;

	        axisList.forEach( function( axis ){
	            axisData.begin.set( axis.begin, offset * 3 );
	            axisData.end.set( axis.end, offset * 3 );
	            axisData.size.set( axis.size, offset );
	            axisData.color.set( axis.color, offset * 3 );
	            axisData.pickingColor.set( axis.pickingColor, offset * 3 );
	            offset += axis.size.length;
	        } );

	        var cylinderBuffer = new CylinderBuffer(
	            axisData.begin,
	            axisData.end,
	            axisData.color,
	            axisData.color,
	            axisData.size,
	            axisData.pickingColor,
	            axisData.pickingColor,
	            this.getBufferParams( {
	                openEnded: this.openEnded,
	                radialSegments: this.radialSegments,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        return {
	            bufferList: [ cylinderBuffer ],
	            axisList: axisList,
	            helixbundleList: helixbundleList,
	            axisData: axisData
	        };

	    },

	    updateData: function( what, data ){

	        what = what || {};

	        if( what.position ){
	            this.build();
	            return;
	        }

	        var cylinderData = {};

	        if( what.color || what.radius ){

	            var offset = 0;

	            data.helixbundleList.forEach( function( helixbundle ){

	                var axis = helixbundle.getAxis(
	                    this.localAngle, this.centerDist, this.ssBorder,
	                    this.getColorParams(), this.radius, this.scale
	                );
	                if( what.color ){
	                    data.axisData.color.set( axis.color, offset * 3 );
	                }
	                if( what.radius || what.scale ){
	                    data.axisData.size.set( axis.size, offset );
	                }
	                offset += axis.size.length;

	            }.bind( this ) );

	            if( what.color ){
	                cylinderData.color = data.axisData.color;
	                cylinderData.color2 = data.axisData.color;
	            }

	            if( what.radius || what.scale ){
	                cylinderData.radius = data.axisData.size;
	            }

	        }

	        data.bufferList[ 0 ].setAttributes( cylinderData );

	    }

	} );


	RepresentationRegistry.add( "rocket", RocketRepresentation );

	function RopeRepresentation( structure, viewer, params ){

	    CartoonRepresentation.call( this, structure, viewer, params );

	}

	RopeRepresentation.prototype = Object.assign( Object.create(

	    CartoonRepresentation.prototype ), {

	    constructor: RopeRepresentation,

	    type: "rope",

	    parameters: Object.assign( {

	        smooth: {
	            type: "integer", max: 15, min: 0, rebuild: true
	        }

	    }, CartoonRepresentation.prototype.parameters, {
	        aspectRatio: null,
	        smoothSheet: null
	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.aspectRatio = 1.0;
	        p.tension = defaults( p.tension, 0.5 );
	        p.scale = defaults( p.scale, 5.0 );
	        p.smoothSheet = false;

	        this.smooth = defaults( p.smooth, 2 );

	        CartoonRepresentation.prototype.init.call( this, p );

	    },

	    getSpline: function( polymer ){

	        var helixorient = new Helixorient( polymer );

	        return new Spline( polymer, this.getSplineParams( {
	            directional: false,
	            positionIterator: helixorient.getCenterIterator( this.smooth )
	        } ) );

	    }

	} );


	RepresentationRegistry.add( "rope", RopeRepresentation );

	function SpacefillRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	SpacefillRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: SpacefillRepresentation,

	    type: "spacefill",

	    parameters: Object.assign( {

	        sphereDetail: true,
	        disableImpostor: true

	    }, StructureRepresentation.prototype.parameters ),

	    init: function( params ){

	        var p = params || {};

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    createData: function( sview ){

	        var atomData = sview.getAtomData( this.getAtomParams() );

	        var sphereBuffer = new SphereBuffer(
	            atomData.position,
	            atomData.color,
	            atomData.radius,
	            atomData.pickingColor,
	            this.getBufferParams( {
	                sphereDetail: this.sphereDetail,
	                dullInterior: true,
	                disableImpostor: this.disableImpostor
	            } )
	        );

	        return {
	            bufferList: [ sphereBuffer ]
	        };

	    },

	    updateData: function( what, data ){

	        var atomData = data.sview.getAtomData( this.getAtomParams( what ) );
	        var sphereData = {};

	        if( !what || what.position ){
	            sphereData.position = atomData.position;
	        }

	        if( !what || what.color ){
	            sphereData.color = atomData.color;
	        }

	        if( !what || what.radius ){
	            sphereData.radius = atomData.radius;
	        }

	        data.bufferList[ 0 ].setAttributes( sphereData );

	    }

	} );


	RepresentationRegistry.add( "spacefill", SpacefillRepresentation );

	function TraceBuffer( position, color, params ){

	    var p = params || {};

	    this.size = position.length / 3;
	    this.vertexShader = 'Line.vert';
	    this.fragmentShader = 'Line.frag';
	    this.line = true;

	    var n = this.size;
	    var n1 = n - 1;

	    this.attributeSize = n1 * 2;

	    this.linePosition = new Float32Array( n1 * 3 * 2 );
	    this.lineColor = new Float32Array( n1 * 3 * 2 );

	    Buffer.call(
	        this, this.linePosition, this.lineColor, undefined, undefined, p
	    );

	    this.setAttributes( {
	        position: position,
	        color: color
	    } );

	}

	TraceBuffer.prototype = Object.assign( Object.create(

	    Buffer.prototype ), {

	    constructor: TraceBuffer,

	    setAttributes: function( data ){

	        var position, color;
	        var linePosition, lineColor;

	        var attributes = this.geometry.attributes;

	        if( data.position ){
	            position = data.position;
	            linePosition = attributes.position.array;
	            attributes.position.needsUpdate = true;
	        }

	        if( data.color ){
	            color = data.color;
	            lineColor = attributes.color.array;
	            attributes.color.needsUpdate = true;
	        }

	        if( !position && !color ){
	            Log$1.warn( "TraceBuffer.prototype.setAttributes no data" );
	            return;
	        }

	        var v, v2;
	        var n = this.size;
	        var n1 = n - 1;

	        for( var i = 0; i < n1; ++i ){

	            v = 3 * i;
	            v2 = 3 * i * 2;

	            if( position ){

	                linePosition[ v2     ] = position[ v     ];
	                linePosition[ v2 + 1 ] = position[ v + 1 ];
	                linePosition[ v2 + 2 ] = position[ v + 2 ];

	                linePosition[ v2 + 3 ] = position[ v + 3 ];
	                linePosition[ v2 + 4 ] = position[ v + 4 ];
	                linePosition[ v2 + 5 ] = position[ v + 5 ];

	            }

	            if( color ){

	                lineColor[ v2     ] = color[ v     ];
	                lineColor[ v2 + 1 ] = color[ v + 1 ];
	                lineColor[ v2 + 2 ] = color[ v + 2 ];

	                lineColor[ v2 + 3 ] = color[ v + 3 ];
	                lineColor[ v2 + 4 ] = color[ v + 4 ];
	                lineColor[ v2 + 5 ] = color[ v + 5 ];

	            }

	        }

	    }

	} );

	function TraceRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	TraceRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: TraceRepresentation,

	    type: "trace",

	    parameters: Object.assign( {

	        subdiv: {
	            type: "integer", max: 50, min: 1, rebuild: true
	        },
	        tension: {
	            type: "number", precision: 1, max: 1.0, min: 0.1
	        },
	        smoothSheet: {
	            type: "boolean", rebuild: true
	        }

	    }, Representation.prototype.parameters, {

	        flatShaded: null,
	        side: null,
	        wireframe: null

	    } ),

	    init: function( params ){

	        var p = params || {};
	        p.colorScheme = defaults( p.colorScheme, "atomindex" );
	        p.colorScale = defaults( p.colorScale, "RdYlBu" );

	        if( p.quality === "low" ){
	            this.subdiv = 3;
	        }else if( p.quality === "medium" ){
	            this.subdiv = 6;
	        }else if( p.quality === "high" ){
	            this.subdiv = 12;
	        }else{
	            this.subdiv = defaults( p.subdiv, 6 );
	        }

	        this.tension = defaults( p.tension, NaN );
	        this.smoothSheet = defaults( p.smoothSheet, false );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getSplineParams: function( params ){

	        return Object.assign( {
	            subdiv: this.subdiv,
	            tension: this.tension,
	            directional: false,
	            smoothSheet: this.smoothSheet
	        }, params );

	    },

	    createData: function( sview ){

	        var bufferList = [];
	        var polymerList = [];

	        this.structure.eachPolymer( function( polymer ){

	            if( polymer.residueCount < 4 ) return;
	            polymerList.push( polymer );

	            var spline = new Spline( polymer, this.getSplineParams() );
	            var subPos = spline.getSubdividedPosition();
	            var subCol = spline.getSubdividedColor( this.getColorParams() );

	            bufferList.push(
	                new TraceBuffer(
	                    subPos.position,
	                    subCol.color,
	                    this.getBufferParams()
	                )
	            );

	        }.bind( this ), sview.getSelection() );

	        return {
	            bufferList: bufferList,
	            polymerList: polymerList
	        };

	    },

	    updateData: function( what, data ){

	        what = what || {};

	        var i = 0;
	        var n = data.polymerList.length;

	        for( i = 0; i < n; ++i ){

	            var bufferData = {};
	            var spline = new Spline( data.polymerList[ i ], this.getSplineParams() );

	            if( what.position ){
	                var subPos = spline.getSubdividedPosition();
	                bufferData.position = subPos.position;
	            }

	            if( what.color ){
	                var subCol = spline.getSubdividedColor( this.getColorParams() );
	                bufferData.color = subCol.color;
	            }

	            data.bufferList[ i ].setAttributes( bufferData );

	        }

	    },

	    setParameters: function( params ){

	        var rebuild = false;
	        var what = {};

	        if( params && params.tension ){
	            what.position = true;
	        }

	        StructureRepresentation.prototype.setParameters.call(
	            this, params, what, rebuild
	        );

	        return this;

	    }

	} );


	RepresentationRegistry.add( "trace", TraceRepresentation );

	function TubeRepresentation( structure, viewer, params ){

	    CartoonRepresentation.call( this, structure, viewer, params );

	}

	TubeRepresentation.prototype = Object.assign( Object.create(

	    CartoonRepresentation.prototype ), {

	    constructor: TubeRepresentation,

	    type: "tube",

	    parameters: Object.assign(
	        {}, CartoonRepresentation.prototype.parameters, { aspectRatio: null }
	    ),

	    init: function( params ){

	        var p = params || {};
	        p.aspectRatio = 1.0;
	        p.scale = defaults( p.scale, 2.0 );

	        CartoonRepresentation.prototype.init.call( this, p );

	    },

	    getSplineParams: function( params ){

	        return CartoonRepresentation.prototype.getSplineParams.call( this, {
	            directional: false
	        } );

	    }

	} );


	RepresentationRegistry.add( "tube", TubeRepresentation );

	function UnitcellRepresentation( structure, viewer, params ){

	    StructureRepresentation.call( this, structure, viewer, params );

	}

	UnitcellRepresentation.prototype = Object.assign( Object.create(

	    StructureRepresentation.prototype ), {

	    constructor: UnitcellRepresentation,

	    type: "unitcell",

	    parameters: Object.assign( {

	        radius: {
	            type: "number", precision: 3, max: 10.0, min: 0.001
	        },
	        sphereDetail: true,
	        radialSegments: true,
	        disableImpostor: true

	    }, Representation.prototype.parameters, {
	        assembly: null
	    } ),

	    init: function( params ){

	        var p = params || {};

	        p.radius = defaults( p.radius, 0.5 );
	        p.colorValue = defaults( p.colorValue, "orange" );

	        StructureRepresentation.prototype.init.call( this, p );

	    },

	    getUnitcellData: function( structure ){

	        var c = new Color( this.colorValue );

	        var vertexPosition = new Float32Array( 3 * 8 );
	        var vertexColor = uniformArray3( 8, c.r, c.g, c.b );
	        var vertexRadius = uniformArray( 8, this.radius );

	        var edgePosition1 = new Float32Array( 3 * 12 );
	        var edgePosition2 = new Float32Array( 3 * 12 );
	        var edgeColor = uniformArray3( 12, c.r, c.g, c.b );
	        var edgeRadius = uniformArray( 12, this.radius );

	        var uc = structure.unitcell;
	        var centerFrac = structure.center.clone()
	            .applyMatrix4( uc.cartToFrac )
	            .floor().multiplyScalar( 2 ).addScalar( 1 );
	        var v = new Vector3();

	        var cornerOffset = 0;
	        function addCorner( x, y, z ){
	            v.set( x, y, z )
	                .multiply( centerFrac )
	                .applyMatrix4( uc.fracToCart )
	                .toArray( vertexPosition, cornerOffset );
	            cornerOffset += 3;
	        }
	        addCorner( 0, 0, 0 );
	        addCorner( 1, 0, 0 );
	        addCorner( 0, 1, 0 );
	        addCorner( 0, 0, 1 );
	        addCorner( 1, 1, 0 );
	        addCorner( 1, 0, 1 );
	        addCorner( 0, 1, 1 );
	        addCorner( 1, 1, 1 );

	        var edgeOffset = 0;
	        function addEdge( a, b ){
	            v.fromArray( vertexPosition, a * 3 )
	                .toArray( edgePosition1, edgeOffset );
	            v.fromArray( vertexPosition, b * 3 )
	                .toArray( edgePosition2, edgeOffset );
	            edgeOffset += 3;
	        }
	        addEdge( 0, 1 );
	        addEdge( 0, 2 );
	        addEdge( 0, 3 );
	        addEdge( 1, 4 );
	        addEdge( 1, 5 );
	        addEdge( 2, 6 );
	        addEdge( 3, 5 );
	        addEdge( 4, 7 );
	        addEdge( 5, 7 );
	        addEdge( 2, 4 );
	        addEdge( 7, 6 );
	        addEdge( 3, 6 );

	        return {
	            vertexPosition: vertexPosition,
	            vertexColor: vertexColor,
	            vertexRadius: vertexRadius,
	            edgePosition1: edgePosition1,
	            edgePosition2: edgePosition2,
	            edgeColor: edgeColor,
	            edgeRadius: edgeRadius
	        };

	    },

	    create: function(){

	        var structure = this.structureView.getStructure();
	        if( !structure.unitcell ) return;
	        var unitcellData = this.getUnitcellData( structure );

	        this.sphereBuffer = new SphereBuffer(
	            unitcellData.vertexPosition,
	            unitcellData.vertexColor,
	            unitcellData.vertexRadius,
	            undefined,
	            this.getBufferParams( {
	                sphereDetail: this.sphereDetail,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.cylinderBuffer = new CylinderBuffer(
	            unitcellData.edgePosition1,
	            unitcellData.edgePosition2,
	            unitcellData.edgeColor,
	            unitcellData.edgeColor,
	            unitcellData.edgeRadius,
	            undefined,
	            undefined,
	            this.getBufferParams( {
	                openEnded: true,
	                radialSegments: this.radialSegments,
	                disableImpostor: this.disableImpostor,
	                dullInterior: true
	            } )
	        );

	        this.dataList.push( {
	            sview: this.structureView,
	            bufferList: [ this.sphereBuffer, this.cylinderBuffer ]
	        } );

	    },

	    updateData: function( what, data ){

	        var structure = data.sview.getStructure();
	        var unitcellData = this.getUnitcellData( structure );
	        var sphereData = {};
	        var cylinderData = {};

	        if( !what || what.position ){
	            sphereData.position = unitcellData.vertexPosition;
	            cylinderData.position1 = unitcellData.edgePosition1;
	            cylinderData.position2 = unitcellData.edgePosition2;
	        }

	        if( !what || what.color ){
	            sphereData.color = unitcellData.vertexColor;
	            cylinderData.color = unitcellData.edgeColor;
	            cylinderData.color2 = unitcellData.edgeColor;
	        }

	        if( !what || what.radius ){
	            sphereData.radius = unitcellData.vertexRadius;
	            cylinderData.radius = unitcellData.edgeRadius;
	        }

	        this.sphereBuffer.setAttributes( sphereData );
	        this.cylinderBuffer.setAttributes( cylinderData );

	    }

	} );


	RepresentationRegistry.add( "unitcell", UnitcellRepresentation );

	function Parser( streamer, params ){

	    var p = params || {};

	    this.streamer = streamer;

	    this.name = defaults( p.name, "" );
	    this.path = defaults( p.path, "" );

	}

	Parser.prototype = {

	    constructor: Parser,
	    type: "",

	    __objName: "",

	    parse: function( callback ){

	        var self = this;

	        this.streamer.read( function(){
	            self._beforeParse();
	            self._parse( function(){
	                self._afterParse();
	                callback( self[ self.__objName ] );
	            } );
	        } );

	        return this[ this.__objName ];

	    },

	    _parse: function( callback ){

	        Log$1.warn( "Parser._parse not implemented" );
	        callback();

	    },

	    _beforeParse: function(){},

	    _afterParse: function(){

	        if( exports.Debug ) Log$1.log( this[ this.__objName ] );

	    }

	};

	/**
	 * @file Structure Builder
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function StructureBuilder( structure ){

	    var currentModelindex = null;
	    var currentChainname = null;
	    var currentResname = null;
	    var currentResno = null;
	    var currentInscode = null;
	    var currentHetero = null;

	    var previousResname;
	    var previousHetero;

	    var atomStore = structure.atomStore;
	    var residueStore = structure.residueStore;
	    var chainStore = structure.chainStore;
	    var modelStore = structure.modelStore;

	    var residueMap = structure.residueMap;

	    var ai = -1;
	    var ri = -1;
	    var ci = -1;
	    var mi = -1;

	    function addResidueType( ri ){
	        var count = residueStore.atomCount[ ri ];
	        var offset = residueStore.atomOffset[ ri ];
	        var atomTypeIdList = new Array( count );
	        for( var i = 0; i < count; ++i ){
	            atomTypeIdList[ i ] = atomStore.atomTypeId[ offset + i ];
	        }
	        residueStore.residueTypeId[ ri ] = residueMap.add(
	            previousResname, atomTypeIdList, previousHetero
	        );
	    }

	    this.addAtom = function( modelindex, chainname, resname, resno, hetero, sstruc, inscode ){

	        var addModel = false;
	        var addChain = false;
	        var addResidue = false;

	        if( currentModelindex !== modelindex ){
	            addModel = true;
	            addChain = true;
	            addResidue = true;
	            mi += 1;
	            ci += 1;
	            ri += 1;
	        }else if( currentChainname !== chainname ){
	            addChain = true;
	            addResidue = true;
	            ci += 1;
	            ri += 1;
	        }else if( currentResno !== resno || currentResname !== resname || currentInscode !== inscode ){
	            addResidue = true;
	            ri += 1;
	        }
	        ai += 1;

	        if( addModel ){
	            modelStore.growIfFull();
	            modelStore.chainOffset[ mi ] = ci;
	            modelStore.chainCount[ mi ] = 0;
	            modelStore.count += 1;
	            chainStore.modelIndex[ ci ] = mi;
	        }

	        if( addChain ){
	            chainStore.growIfFull();
	            chainStore.setChainname( ci, chainname );
	            chainStore.residueOffset[ ci ] = ri;
	            chainStore.residueCount[ ci ] = 0;
	            chainStore.count += 1;
	            chainStore.modelIndex[ ci ] = mi;
	            modelStore.chainCount[ mi ] += 1;
	            residueStore.chainIndex[ ri ] = ci;
	        }

	        if( addResidue ){
	            previousResname = currentResname;
	            previousHetero = currentHetero;
	            if( ri > 0 ) addResidueType( ri - 1 );
	            residueStore.growIfFull();
	            residueStore.resno[ ri ] = resno;
	            if( sstruc !== undefined ){
	                residueStore.sstruc[ ri ] = sstruc.charCodeAt( 0 );
	            }
	            if( inscode !== undefined ){
	                residueStore.inscode[ ri ] = inscode.charCodeAt( 0 );
	            }
	            residueStore.atomOffset[ ri ] = ai;
	            residueStore.atomCount[ ri ] = 0;
	            residueStore.count += 1;
	            residueStore.chainIndex[ ri ] = ci;
	            chainStore.residueCount[ ci ] += 1;
	        }

	        atomStore.count += 1;
	        atomStore.residueIndex[ ai ] = ri;
	        residueStore.atomCount[ ri ] += 1;

	        currentModelindex = modelindex;
	        currentChainname = chainname;
	        currentResname = resname;
	        currentResno = resno;
	        currentInscode = inscode;
	        currentHetero = hetero;

	    };

	    this.finalize = function(){
	        previousResname = currentResname;
	        previousHetero = currentHetero;
	        if( ri > -1 ) addResidueType( ri );
	    };

	}

	function StructureParser( streamer, params ){

	    var p = params || {};

	    this.firstModelOnly = defaults( p.firstModelOnly, false );
	    this.asTrajectory = defaults( p.asTrajectory, false );
	    this.cAlphaOnly = defaults( p.cAlphaOnly, false );
	    this.reorderAtoms = defaults( p.reorderAtoms, false );
	    this.dontAutoBond = defaults( p.dontAutoBond, false );
	    this.autoBondBetween = defaults( p.autoBondBetween, false );
	    this.doAutoSS = defaults( p.doAutoSS, true );

	    Parser.call( this, streamer, p );

	    this.structure = new Structure( this.name, this.path );
	    this.structureBuilder = new StructureBuilder( this.structure );

	}

	StructureParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: StructureParser,
	    type: "structure",

	    __objName: "structure",

	    _afterParse: function(){

	        if( exports.Debug ) Log$1.time( "StructureParser._afterParse" );

	        var s = this.structure;
	        s.refresh();

	        if( this.reorderAtoms ){
	            reorderAtoms( s );
	        }

	        // check for chain names
	        calculateChainnames( s );

	        if( !this.dontAutoBond ){
	            calculateBonds( s );
	        }else{
	            if( this.autoBondBetween ){
	                calculateBondsBetween( s );
	            }
	        }
	        s.refresh();

	        // check for secondary structure
	        if( this.doAutoSS && s.helices.length === 0 && s.sheets.length === 0 ){
	            calculateSecondaryStructure( s );
	        }

	        if( s.helices.length > 0 || s.sheets.length > 0 ){
	            assignSecondaryStructure( s );
	        }

	        this._postProcess();

	        if( s.unitcell ){
	            buildUnitcellAssembly( s );
	        }

	        if( exports.Debug ) Log$1.timeEnd( "StructureParser._afterParse" );
	        if( exports.Debug ) Log$1.log( this[ this.__objName ] );

	    },

	    _postProcess: function(){}

	} );

	function GroParser( streamer, params ){

	    var p = params || {};

	    p.doAutoSS = defaults( p.doAutoSS, true );

	    StructureParser.call( this, streamer, p );

	}

	GroParser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: GroParser,
	    type: "gro",

	    _parse: function( callback ){

	        // http://manual.gromacs.org/current/online/gro.html

	        if( exports.Debug ) Log$1.time( "GroParser._parse " + this.name );

	        var s = this.structure;
	        var sb = this.structureBuilder;

	        var firstModelOnly = this.firstModelOnly;
	        var asTrajectory = this.asTrajectory;
	        var cAlphaOnly = this.cAlphaOnly;

	        var frames = s.frames;
	        var boxes = s.boxes;
	        var doFrames = false;
	        var currentFrame, currentCoord;

	        var firstLines = this.streamer.peekLines( 3 );

	        s.title = firstLines[ 0 ].trim();

	        // determine number of decimal places
	        var ndec = firstLines[ 2 ].length - firstLines[ 2 ].lastIndexOf( "." ) - 1;
	        var lpos = 5 + ndec;
	        var xpos = 20;
	        var ypos = 20 + lpos;
	        var zpos = 20 + 2 * lpos;

	        //

	        var atomname, resname, element, resno, serial;

	        var atomCount = parseInt( firstLines[ 1 ] );
	        var modelLineCount = atomCount + 3;

	        var atomMap = s.atomMap;
	        var atomStore = s.atomStore;
	        atomStore.resize( atomCount );

	        var idx = 0;
	        var modelIdx = 0;
	        var lineNo = 0;

	        function _parseChunkOfLines( _i, _n, lines ){

	            for( var i = _i; i < _n; ++i ){

	                ++lineNo;
	                var l = lineNo - 1;

	                var line = lines[ i ];

	                if( !line ) continue;

	                if( l % modelLineCount === 0 ){

	                    // Log.log( "title", line )

	                    if( asTrajectory ){

	                        currentFrame = new Float32Array( atomCount * 3 );
	                        frames.push( currentFrame );
	                        currentCoord = 0;

	                    }

	                }else if( l % modelLineCount === 1 ){

	                    // Log.log( "atomCount", line )

	                }else if( l % modelLineCount === modelLineCount - 1 ){

	                    var str = line.trim().split( /\s+/ );
	                    var box = new Float32Array( 9 );
	                    box[ 0 ] = parseFloat( str[ 0 ] ) * 10;
	                    box[ 4 ] = parseFloat( str[ 1 ] ) * 10;
	                    box[ 8 ] = parseFloat( str[ 2 ] ) * 10;
	                    boxes.push( box );

	                    if( firstModelOnly ){

	                        return true;

	                    }

	                    modelIdx += 1;

	                }else{

	                    atomname = line.substr( 10, 5 ).trim();
	                    if( cAlphaOnly && atomname !== 'CA' ) continue;

	                    var x = parseFloat( line.substr( xpos, lpos ) ) * 10;
	                    var y = parseFloat( line.substr( ypos, lpos ) ) * 10;
	                    var z = parseFloat( line.substr( zpos, lpos ) ) * 10;

	                    if( asTrajectory ){

	                        var j = currentCoord * 3;

	                        currentFrame[ j + 0 ] = x;
	                        currentFrame[ j + 1 ] = y;
	                        currentFrame[ j + 2 ] = z;

	                        currentCoord += 1;

	                        if( l > modelLineCount ) continue;

	                    }

	                    resname = line.substr( 5, 5 ).trim();
	                    resno = parseInt( line.substr( 0, 5 ) );
	                    serial = parseInt( line.substr( 15, 5 ) );

	                    atomStore.growIfFull();
	                    atomStore.atomTypeId[ idx ] = atomMap.add( atomname );

	                    atomStore.x[ idx ] = x;
	                    atomStore.y[ idx ] = y;
	                    atomStore.z[ idx ] = z;
	                    atomStore.serial[ idx ] = serial;

	                    sb.addAtom( modelIdx, "", resname, resno, 0, "l" );

	                    idx += 1;

	                }

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        sb.finalize();

	        s.unitcell = new Unitcell(
	            boxes[ 0 ][ 0 ], boxes[ 0 ][ 4 ], boxes[ 0 ][ 8 ],
	            90, 90, 90, "P 1"
	        );

	        if( exports.Debug ) Log$1.timeEnd( "GroParser._parse " + this.name );
	        callback();

	    }

	} );

	ParserRegistry.add( "gro", GroParser );

	// PDB helix record encoding
	var HelixTypes = {
	    1: "h",  // Right-handed alpha (default)
	    2: "h",  // Right-handed omega
	    3: "i",  // Right-handed pi
	    4: "h",  // Right-handed gamma
	    5: "g",  // Right-handed 310
	    6: "h",  // Left-handed alpha
	    7: "h",  // Left-handed omega
	    8: "h",  // Left-handed gamma
	    9: "h",  // 27 ribbon/helix
	    10: "h",  // Polyproline
	    "": "h",
	};


	function PdbParser( streamer, params ){

	    StructureParser.call( this, streamer, params );

	}

	PdbParser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: PdbParser,
	    type: "pdb",

	    _parse: function( callback ){

	        // http://www.wwpdb.org/documentation/file-format.php

	        if( exports.Debug ) Log$1.time( "PdbParser._parse " + this.name );

	        var isPqr = this.type === "pqr";
	        var reWhitespace = /\s+/;

	        var s = this.structure;
	        var sb = this.structureBuilder;

	        var firstModelOnly = this.firstModelOnly;
	        var asTrajectory = this.asTrajectory;
	        var cAlphaOnly = this.cAlphaOnly;

	        var frames = s.frames;
	        var boxes = s.boxes;
	        var doFrames = false;
	        var currentFrame, currentCoord;

	        var helices = s.helices;
	        var sheets = s.sheets;
	        var biomolDict = s.biomolDict;
	        var currentBiomol;
	        var currentPart;
	        var currentMatrix;

	        var line, recordName;
	        var serial, chainname, resno, resname, occupancy,
	            inscode, atomname, element, hetero, bfactor, altloc;

	        var startChain, startResi, startIcode;
	        var endChain, endResi, endIcode;

	        var serialDict = {};
	        var unitcellDict = {};

	        s.hasConnect = false;

	        var atomMap = s.atomMap;
	        var atomStore = s.atomStore;
	        atomStore.resize( Math.round( this.streamer.data.length / 80 ) );

	        var ap1 = s.getAtomProxy();
	        var ap2 = s.getAtomProxy();

	        var idx = 0;
	        var modelIdx = 0;
	        var pendingStart = true;

	        function _parseChunkOfLines( _i, _n, lines ){

	            var j, jl;

	            for( var i = _i; i < _n; ++i ){

	                line = lines[ i ];
	                recordName = line.substr( 0, 6 );

	                if( recordName === 'ATOM  ' || recordName === 'HETATM' ){

	                    // http://www.wwpdb.org/documentation/file-format-content/format33/sect9.html#ATOM
	                    // PQR: Field_name Atom_number Atom_name Residue_name Chain_ID Residue_number X Y Z Charge Radius

	                    if( pendingStart ){

	                        if( asTrajectory ){

	                            if( doFrames ){
	                                currentFrame = new Float32Array( atomStore.count * 3 );
	                                frames.push( currentFrame );
	                            }else{
	                                currentFrame = [];
	                            }
	                            currentCoord = 0;

	                        }else{

	                            if( !firstModelOnly ) serialDict = {};

	                        }

	                    }

	                    pendingStart = false;

	                    if( firstModelOnly && modelIdx > 0 ) continue;

	                    var x, y, z, ls, dd;

	                    if( isPqr ){

	                        ls = line.split( reWhitespace );
	                        dd = ls.length === 10 ? 1 : 0;

	                        atomname = ls[ 2 ];
	                        if( cAlphaOnly && atomname !== 'CA' ) continue;

	                        x = parseFloat( ls[ 6 - dd ] );
	                        y = parseFloat( ls[ 7 - dd ] );
	                        z = parseFloat( ls[ 8 - dd ] );

	                    }else{

	                        atomname = line.substr( 12, 4 ).trim();
	                        if( cAlphaOnly && atomname !== 'CA' ) continue;

	                        x = parseFloat( line.substr( 30, 8 ) );
	                        y = parseFloat( line.substr( 38, 8 ) );
	                        z = parseFloat( line.substr( 46, 8 ) );

	                    }

	                    if( asTrajectory ){

	                        j = currentCoord * 3;

	                        currentFrame[ j + 0 ] = x;
	                        currentFrame[ j + 1 ] = y;
	                        currentFrame[ j + 2 ] = z;

	                        currentCoord += 1;

	                        if( doFrames ) continue;

	                    }

	                    var element;

	                    if( isPqr ){

	                        serial = parseInt( ls[ 1 ] );
	                        element = "";
	                        hetero = ( line[ 0 ] === 'H' ) ? 1 : 0;
	                        chainname = dd ? "" : ls[ 4 ];
	                        resno = parseInt( ls[ 5 - dd ] );
	                        inscode = "";
	                        resname = ls[ 3 ];
	                        bfactor = parseFloat( ls[ 9 - dd ] );  // charge FIXME should be its own field
	                        altloc = "";
	                        occupancy = 0.0;
	                        // FIXME radius field not supported

	                    }else{

	                        serial = parseInt( line.substr( 6, 5 ) );
	                        element = line.substr( 76, 2 ).trim();
	                        hetero = ( line[ 0 ] === 'H' ) ? 1 : 0;
	                        chainname = line[ 21 ].trim();
	                        resno = parseInt( line.substr( 22, 4 ) );
	                        inscode = line[ 26 ].trim();
	                        resname = line.substr( 17, 4 ).trim();
	                        bfactor = parseFloat( line.substr( 60, 6 ) );
	                        altloc = line[ 16 ].trim();
	                        occupancy = parseFloat( line.substr( 54, 6 ) );

	                    }

	                    atomStore.growIfFull();
	                    atomStore.atomTypeId[ idx ] = atomMap.add( atomname, element );

	                    atomStore.x[ idx ] = x;
	                    atomStore.y[ idx ] = y;
	                    atomStore.z[ idx ] = z;
	                    atomStore.serial[ idx ] = serial;
	                    atomStore.bfactor[ idx ] = isNaN( bfactor ) ? 0 : bfactor;
	                    atomStore.altloc[ idx ] = altloc.charCodeAt( 0 );
	                    atomStore.occupancy[ idx ] = isNaN( occupancy ) ? 0 : occupancy;

	                    sb.addAtom( modelIdx, chainname, resname, resno, hetero, undefined, inscode );

	                    serialDict[ serial ] = idx;

	                    idx += 1;

	                }else if( recordName === 'CONECT' ){

	                    var from = serialDict[ parseInt( line.substr( 6, 5 ) ) ];
	                    var pos = [ 11, 16, 21, 26 ];
	                    var bondDict = {};

	                    if( from === undefined ){
	                        // Log.log( "missing CONNECT serial" );
	                        continue;
	                    }

	                    for( j = 0; j < 4; ++j ){

	                        var to = parseInt( line.substr( pos[ j ], 5 ) );
	                        if( Number.isNaN( to ) ) continue;
	                        to = serialDict[ to ];
	                        if( to === undefined ){
	                            // Log.log( "missing CONNECT serial" );
	                            continue;
	                        }/*else if( to < from ){
	                            // likely a duplicate in standard PDB format
	                            // but not necessarily, so better remove duplicates
	                            // in a pass after parsing (and auto bonding)
	                            continue;
	                        }*/

	                        ap1.index = from;
	                        ap2.index = to;

	                        // interpret records where a 'to' atom is given multiple times
	                        // as double/triple bonds, e.g. CONECT 1529 1528 1528 is a double bond
	                        if( bondDict[ to ] !== undefined ){
	                            s.bondStore.bondOrder[ bondDict[ to ] ] += 1;
	                        }else{
	                            bondDict[ to ] = s.bondStore.count;
	                            s.bondStore.addBond( ap1, ap2, 1 );  // start/assume with single bond
	                        }

	                    }

	                    s.hasConnect = true;

	                }else if( recordName === 'HELIX ' ){

	                    startChain = line[ 19 ].trim();
	                    startResi = parseInt( line.substr( 21, 4 ) );
	                    startIcode = line[ 25 ].trim();
	                    endChain = line[ 31 ].trim();
	                    endResi = parseInt( line.substr( 33, 4 ) );
	                    endIcode = line[ 37 ].trim();
	                    var helixType = parseInt( line.substr( 39, 1 ) );
	                    helixType = ( HelixTypes[ helixType ] || HelixTypes[""] ).charCodeAt( 0 );
	                    helices.push( [
	                        startChain, startResi, startIcode,
	                        endChain, endResi, endIcode,
	                        helixType
	                    ] );

	                }else if( recordName === 'SHEET ' ){

	                    startChain = line[ 21 ].trim();
	                    startResi = parseInt( line.substr( 22, 4 ) );
	                    startIcode = line[ 26 ].trim();
	                    endChain = line[ 32 ].trim();
	                    endResi = parseInt( line.substr( 33, 4 ) );
	                    endIcode = line[ 37 ].trim();
	                    sheets.push( [
	                        startChain, startResi, startIcode,
	                        endChain, endResi, endIcode
	                    ] );

	                }else if( recordName === 'REMARK' && line.substr( 7, 3 ) === '350' ){

	                    if( line.substr( 11, 12 ) === "BIOMOLECULE:" ){

	                        var name = line.substr( 23 ).trim();
	                        if( /^(0|[1-9][0-9]*)$/.test( name ) ) name = "BU" + name;

	                        currentBiomol = new Assembly( name );
	                        biomolDict[ name ] = currentBiomol;

	                    }else if( line.substr( 13, 5 ) === "BIOMT" ){

	                        var biomt = line.split( /\s+/ );
	                        var row = parseInt( line[ 18 ] ) - 1;
	                        var mat = biomt[ 3 ].trim();

	                        if( row === 0 ){
	                            currentMatrix = new Matrix4();
	                            currentPart.matrixList.push( currentMatrix );
	                        }

	                        var biomtElms = currentMatrix.elements;

	                        biomtElms[ 4 * 0 + row ] = parseFloat( biomt[ 4 ] );
	                        biomtElms[ 4 * 1 + row ] = parseFloat( biomt[ 5 ] );
	                        biomtElms[ 4 * 2 + row ] = parseFloat( biomt[ 6 ] );
	                        biomtElms[ 4 * 3 + row ] = parseFloat( biomt[ 7 ] );

	                    }else if(
	                        line.substr( 11, 30 ) === 'APPLY THE FOLLOWING TO CHAINS:' ||
	                        line.substr( 11, 30 ) === '                   AND CHAINS:'
	                    ){

	                        if( line.substr( 11, 5 ) === 'APPLY' ){
	                            currentPart = currentBiomol.addPart();
	                        }

	                        var chainList = line.substr( 41, 30 ).split( "," );
	                        for( j, jl = chainList.length; j < jl; ++j ){
	                            var c = chainList[ j ].trim();
	                            if( c ) currentPart.chainList.push( c );
	                        }

	                    }

	                }else if( recordName === 'HEADER' ){

	                    s.id = line.substr( 62, 4 );

	                }else if( recordName === 'TITLE ' ){

	                    s.title += ( s.title ? " " : "" ) + line.substr( 10, 70 ).trim();

	                }else if( recordName === 'MODEL ' ){

	                    pendingStart = true;

	                }else if( recordName === 'ENDMDL' || line.substr( 0, 3 ) === 'END' ){

	                    if( pendingStart ) continue;

	                    if( asTrajectory && !doFrames ){

	                        frames.push( new Float32Array( currentFrame ) );
	                        doFrames = true;

	                    }

	                    modelIdx += 1;
	                    pendingStart = true;

	                }else if( line.substr( 0, 5 ) === 'MTRIX' ){

	                    // ignore 'given' operators
	                    if( line[ 59 ] === "1" ) continue;

	                    var ncs = line.split( /\s+/ );
	                    var ncsMat = ncs[ 1 ].trim();

	                    if( line[ 5 ] === "1" && ncsMat === "1" ){
	                        var ncsName = "NCS";
	                        currentBiomol = new Assembly( ncsName );
	                        biomolDict[ ncsName ] = currentBiomol;
	                        currentPart = currentBiomol.addPart();
	                    }

	                    var ncsRow = parseInt( line[ 5 ] ) - 1;

	                    if( ncsRow === 0 ){
	                        currentMatrix = new Matrix4();
	                        currentPart.matrixList.push( currentMatrix );
	                    }

	                    var ncsElms = currentMatrix.elements;

	                    ncsElms[ 4 * 0 + ncsRow ] = parseFloat( ncs[ 2 ] );
	                    ncsElms[ 4 * 1 + ncsRow ] = parseFloat( ncs[ 3 ] );
	                    ncsElms[ 4 * 2 + ncsRow ] = parseFloat( ncs[ 4 ] );
	                    ncsElms[ 4 * 3 + ncsRow ] = parseFloat( ncs[ 5 ] );

	                }else if( line.substr( 0, 5 ) === 'ORIGX' ){

	                    if( !unitcellDict.origx ){
	                        unitcellDict.origx = new Matrix4();
	                    }

	                    var orgix = line.split( /\s+/ );
	                    var origxRow = parseInt( line[ 5 ] ) - 1;
	                    var origxElms = unitcellDict.origx.elements;

	                    origxElms[ 4 * 0 + origxRow ] = parseFloat( orgix[ 1 ] );
	                    origxElms[ 4 * 1 + origxRow ] = parseFloat( orgix[ 2 ] );
	                    origxElms[ 4 * 2 + origxRow ] = parseFloat( orgix[ 3 ] );
	                    origxElms[ 4 * 3 + origxRow ] = parseFloat( orgix[ 4 ] );

	                }else if( line.substr( 0, 5 ) === 'SCALE' ){

	                    if( !unitcellDict.scale ){
	                        unitcellDict.scale = new Matrix4();
	                    }

	                    var scale = line.split( /\s+/ );
	                    var scaleRow = parseInt( line[ 5 ] ) - 1;
	                    var scaleElms = unitcellDict.scale.elements;

	                    scaleElms[ 4 * 0 + scaleRow ] = parseFloat( scale[ 1 ] );
	                    scaleElms[ 4 * 1 + scaleRow ] = parseFloat( scale[ 2 ] );
	                    scaleElms[ 4 * 2 + scaleRow ] = parseFloat( scale[ 3 ] );
	                    scaleElms[ 4 * 3 + scaleRow ] = parseFloat( scale[ 4 ] );

	                }else if( recordName === 'CRYST1' ){

	                    // CRYST1   55.989   55.989   55.989  90.00  90.00  90.00 P 1           1
	                    //  7 - 15       Real(9.3)      a (Angstroms)
	                    // 16 - 24       Real(9.3)      b (Angstroms)
	                    // 25 - 33       Real(9.3)      c (Angstroms)
	                    // 34 - 40       Real(7.2)      alpha         alpha (degrees).
	                    // 41 - 47       Real(7.2)      beta          beta (degrees).
	                    // 48 - 54       Real(7.2)      gamma         gamma (degrees).
	                    // 56 - 66       LString        sGroup        Space group.
	                    // 67 - 70       Integer        z             Z value.

	                    var aLength = parseFloat( line.substr( 6, 9 ) );
	                    var bLength = parseFloat( line.substr( 15, 9 ) );
	                    var cLength = parseFloat( line.substr( 24, 9 ) );

	                    var alpha = parseFloat( line.substr( 33, 7 ) );
	                    var beta = parseFloat( line.substr( 40, 7 ) );
	                    var gamma = parseFloat( line.substr( 47, 7 ) );

	                    var sGroup = line.substr( 55, 11 ).trim();
	                    var zValue = parseInt( line.substr( 66, 4 ) );

	                    var box = new Float32Array( 9 );
	                    box[ 0 ] = aLength;
	                    box[ 4 ] = bLength;
	                    box[ 8 ] = cLength;
	                    boxes.push( box );

	                    if( modelIdx === 0 ){
	                        unitcellDict.a = aLength;
	                        unitcellDict.b = bLength;
	                        unitcellDict.c = cLength;
	                        unitcellDict.alpha = alpha;
	                        unitcellDict.beta = beta;
	                        unitcellDict.gamma = gamma;
	                        unitcellDict.spacegroup = sGroup;
	                    }

	                }

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        sb.finalize();

	        if( unitcellDict.a !== undefined ){
	            s.unitcell = new Unitcell(
	                unitcellDict.a, unitcellDict.b, unitcellDict.c,
	                unitcellDict.alpha, unitcellDict.beta, unitcellDict.gamma,
	                unitcellDict.spacegroup, unitcellDict.scale
	            );
	        }else{
	            s.unitcell = undefined;
	        }

	        if( exports.Debug ) Log$1.timeEnd( "PdbParser._parse " + this.name );
	        callback();

	    }

	} );

	ParserRegistry.add( "pdb", PdbParser );
	ParserRegistry.add( "pdb1", PdbParser );
	ParserRegistry.add( "ent", PdbParser );

	function PqrParser( streamer, params ){

	    StructureParser.call( this, streamer, params );

	    // http://www.poissonboltzmann.org/docs/file-format-info/

	}

	PqrParser.prototype = Object.assign( Object.create(

	    PdbParser.prototype ), {

	    constructor: PqrParser,
	    type: "pqr",

	} );

	ParserRegistry.add( "pqr", PqrParser );

	function CifParser( streamer, params ){

	    StructureParser.call( this, streamer, params );

	}

	CifParser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: CifParser,
	    type: "cif",

	    _parse: function( callback ){

	        // http://mmcif.wwpdb.org/

	        Log$1.time( "CifParser._parse " + this.name );

	        var s = this.structure;
	        var sb = this.structureBuilder;

	        var firstModelOnly = this.firstModelOnly;
	        var asTrajectory = this.asTrajectory;
	        var cAlphaOnly = this.cAlphaOnly;

	        var frames = s.frames;
	        var boxes = s.boxes;
	        var doFrames = false;
	        var currentFrame, currentCoord;

	        var line, recordName;
	        var altloc, serial, elem, chainname, resno, resname,
	            atomname, element, inscode;

	        s.hasConnect = false;

	        //

	        var reWhitespace = /\s+/;
	        var reQuotedWhitespace = /'((?:(?!'\s).)*)'|"((?:(?!"\s).)*)"|(\S+)/g;
	        var reDoubleQuote = /"/g;
	        var reTrimQuotes = /^['"]+|['"]+$/g;

	        var cif = {};
	        this.cif = cif;

	        var pendingString = false;
	        var currentString = null;
	        var pendingValue = false;
	        var pendingLoop = false;
	        var loopPointers = [];
	        var currentLoopIndex = null;
	        var currentCategory = null;
	        var currentName = null;
	        var first = null;
	        var pointerNames = [];

	        var auth_asym_id, auth_seq_id,
	            label_atom_id, label_comp_id, label_asym_id, label_alt_id,
	            group_PDB, id, type_symbol, pdbx_PDB_model_num, pdbx_PDB_ins_code,
	            Cartn_x, Cartn_y, Cartn_z, B_iso_or_equiv, occupancy;

	        var asymIdDict = {};
	        this.asymIdDict = asymIdDict;

	        //

	        var atomMap = s.atomMap;
	        var atomStore = s.atomStore;
	        atomStore.resize( this.streamer.data.length / 100 );

	        var idx = 0;
	        var modelIdx = 0;
	        var modelNum;

	        function _parseChunkOfLines( _i, _n, lines ){

	            for( var i = _i; i < _n; ++i ){

	                line = lines[i].trim();

	                if( ( !line && !pendingString && !pendingLoop ) || line[0]==="#" ){

	                    // Log.log( "NEW BLOCK" );

	                    pendingString = false;
	                    pendingLoop = false;
	                    pendingValue = false;
	                    loopPointers.length = 0;
	                    currentLoopIndex = null;
	                    currentCategory = null;
	                    currentName = null;
	                    first = null;
	                    pointerNames.length = 0;

	                }else if( line.substring( 0, 5 )==="data_" ){

	                    var data = line.substring( 5 );

	                    // Log.log( "DATA", data );

	                }else if( line[0]===";" ){

	                    if( pendingString ){

	                        // Log.log( "STRING END", currentString );

	                        if( pendingLoop ){

	                            if( currentLoopIndex === loopPointers.length ){
	                                currentLoopIndex = 0;
	                            }
	                            loopPointers[ currentLoopIndex ].push( currentString );
	                            currentLoopIndex += 1;

	                        }else{

	                            cif[ currentCategory ][ currentName ] = currentString;

	                        }

	                        pendingString = false;
	                        currentString = null;

	                    }else{

	                        // Log.log( "STRING START" );

	                        pendingString = true;
	                        currentString = line.substring( 1 );

	                    }

	                }else if( line==="loop_" ){

	                    // Log.log( "LOOP START" );

	                    pendingLoop = true;
	                    loopPointers.length = 0;
	                    pointerNames.length = 0;
	                    currentLoopIndex = 0;

	                }else if( line[0]==="_" ){

	                    var keyParts, category, name;

	                    if( pendingLoop ){

	                        // Log.log( "LOOP KEY", line );

	                        keyParts = line.split(".");
	                        category = keyParts[ 0 ].substring( 1 );
	                        name = keyParts[ 1 ];

	                        if( keyParts.length === 1 ){

	                            name = false;
	                            if( !cif[ category ] ) cif[ category ] = [];
	                            loopPointers.push( cif[ category ] );

	                        }else{

	                            if( !cif[ category ] ) cif[ category ] = {};
	                            if( cif[ category ][ name ] ){
	                                Log$1.warn( category, name, "already exists" );
	                            }else{
	                                cif[ category ][ name ] = [];
	                                loopPointers.push( cif[ category ][ name ] );
	                                pointerNames.push( name );
	                            }

	                        }

	                        currentCategory = category;
	                        currentName = name;
	                        first = true;

	                    }else{

	                        var keyValuePair = line.match( reQuotedWhitespace );
	                        var key = keyValuePair[ 0 ];
	                        var value = keyValuePair[ 1 ];
	                        keyParts = key.split(".");
	                        category = keyParts[ 0 ].substring( 1 );
	                        name = keyParts[ 1 ];

	                        if( keyParts.length === 1 ){

	                            name = false;
	                            if( !cif[ category ] ) cif[ category ] = [];
	                            cif[ category ] = value;

	                        }else{

	                            if( !cif[ category ] ) cif[ category ] = {};

	                            if( cif[ category ][ name ] ){
	                                Log$1.warn( category, name, "already exists" );
	                            }else{
	                                cif[ category ][ name ] = value;
	                            }

	                        }

	                        if( !value ) pendingValue = true;

	                        currentCategory = category;
	                        currentName = name;

	                    }

	                }else{

	                    if( pendingString ){

	                        // Log.log( "STRING VALUE", line );

	                        currentString += " " + line;

	                    }else if( pendingLoop ){

	                        // Log.log( "LOOP VALUE", line );

	                        var nn, ls;

	                        if( !line ){

	                            continue;

	                        }else if( currentCategory==="atom_site" ){

	                            nn = pointerNames.length;
	                            ls = line.split( reWhitespace );

	                            var k;

	                            if( first ){

	                                var names = [
	                                    "auth_asym_id", "auth_seq_id",
	                                    "label_atom_id", "label_comp_id", "label_asym_id", "label_alt_id",
	                                    "group_PDB", "id", "type_symbol", "pdbx_PDB_model_num",
	                                    "Cartn_x", "Cartn_y", "Cartn_z", "B_iso_or_equiv",
	                                    "pdbx_PDB_ins_code", "occupancy"
	                                ];

	                                auth_asym_id = pointerNames.indexOf( "auth_asym_id" );
	                                auth_seq_id = pointerNames.indexOf( "auth_seq_id" );
	                                label_atom_id = pointerNames.indexOf( "label_atom_id" );
	                                label_comp_id = pointerNames.indexOf( "label_comp_id" );
	                                label_asym_id = pointerNames.indexOf( "label_asym_id" );
	                                label_alt_id = pointerNames.indexOf( "label_alt_id" );
	                                Cartn_x = pointerNames.indexOf( "Cartn_x" );
	                                Cartn_y = pointerNames.indexOf( "Cartn_y" );
	                                Cartn_z = pointerNames.indexOf( "Cartn_z" );
	                                id = pointerNames.indexOf( "id" );
	                                type_symbol = pointerNames.indexOf( "type_symbol" );
	                                group_PDB = pointerNames.indexOf( "group_PDB" );
	                                B_iso_or_equiv = pointerNames.indexOf( "B_iso_or_equiv" );
	                                pdbx_PDB_model_num = pointerNames.indexOf( "pdbx_PDB_model_num" );

	                                pdbx_PDB_ins_code = pointerNames.indexOf( "pdbx_PDB_ins_code" );
	                                occupancy = pointerNames.indexOf( "occupancy" );

	                                first = false;

	                                modelNum = parseInt( ls[ pdbx_PDB_model_num ] );

	                                if( asTrajectory ){
	                                    currentFrame = [];
	                                    currentCoord = 0;
	                                }

	                            }

	                            //

	                            var _modelNum = parseInt( ls[ pdbx_PDB_model_num ] );

	                            if( modelNum !== _modelNum ){

	                                if( asTrajectory ){

	                                    if( modelIdx === 0 ){
	                                        frames.push( new Float32Array( currentFrame ) );
	                                    }

	                                    currentFrame = new Float32Array( atomStore.count * 3 );
	                                    frames.push( currentFrame );
	                                    currentCoord = 0;

	                                }

	                                modelIdx += 1;

	                            }

	                            modelNum = _modelNum;

	                            if( firstModelOnly && modelIdx > 0 ) continue;

	                            //

	                            var atomname = ls[ label_atom_id ].replace( reDoubleQuote, '' );
	                            if( cAlphaOnly && atomname !== 'CA' ) continue;

	                            var x = parseFloat( ls[ Cartn_x ] );
	                            var y = parseFloat( ls[ Cartn_y ] );
	                            var z = parseFloat( ls[ Cartn_z ] );

	                            if( asTrajectory ){

	                                var frameOffset = currentCoord * 3;

	                                currentFrame[ frameOffset + 0 ] = x;
	                                currentFrame[ frameOffset + 1 ] = y;
	                                currentFrame[ frameOffset + 2 ] = z;

	                                currentCoord += 1;

	                                if( modelIdx > 0 ) continue;

	                            }

	                            //

	                            var resname = ls[ label_comp_id ];
	                            var resno = parseInt( ls[ auth_seq_id ] );
	                            var inscode = ls[ pdbx_PDB_ins_code ];
	                            inscode = ( inscode === '?' ) ? '' : inscode;
	                            var chainname = ls[ auth_asym_id ];
	                            var hetero = ( ls[ group_PDB ][ 0 ] === 'H' ) ? 1 : 0;

	                            //

	                            var element = ls[ type_symbol ];
	                            var bfactor = parseFloat( ls[ B_iso_or_equiv ] );
	                            var occ = parseFloat( ls[ occupancy ] );
	                            var altloc = ls[ label_alt_id ];
	                            altloc = ( altloc === '.' ) ? '' : altloc;

	                            atomStore.growIfFull();
	                            atomStore.atomTypeId[ idx ] = atomMap.add( atomname, element );

	                            atomStore.x[ idx ] = x;
	                            atomStore.y[ idx ] = y;
	                            atomStore.z[ idx ] = z;
	                            atomStore.serial[ idx ] = parseInt( ls[ id ] );
	                            atomStore.bfactor[ idx ] = isNaN( bfactor ) ? 0 : bfactor;
	                            atomStore.occupancy[ idx ] = isNaN( occ ) ? 0 : occ;
	                            atomStore.altloc[ idx ] = altloc.charCodeAt( 0 );

	                            sb.addAtom( modelIdx, chainname, resname, resno, hetero, undefined, inscode );

	                            if( exports.Debug ){
	                                // check if one-to-many (chainname-asymId) relationship is
	                                // actually a many-to-many mapping
	                                var assignedChainname = asymIdDict[ ls[ label_asym_id ] ];
	                                if( assignedChainname !== undefined && assignedChainname !== chainname ){
	                                    Log$1.warn( assignedChainname, chainname );
	                                }
	                            }
	                            // chainname mapping: label_asym_id -> auth_asym_id
	                            asymIdDict[ ls[ label_asym_id ] ] = chainname;

	                            idx += 1;

	                        }else{

	                            ls = line.match( reQuotedWhitespace );
	                            nn = ls.length;

	                            if( currentLoopIndex === loopPointers.length ){
	                                currentLoopIndex = 0;
	                            }/*else if( currentLoopIndex + nn > loopPointers.length ){
	                                Log.warn( "cif parsing error, wrong number of loop data entries", nn, loopPointers.length );
	                            }*/

	                            for( var j = 0; j < nn; ++j ){
	                                loopPointers[ currentLoopIndex + j ].push( ls[ j ] );
	                            }

	                            currentLoopIndex += nn;

	                        }

	                    }else if( line[0]==="'" && line.substring( line.length-1 )==="'" ){

	                        // Log.log( "NEWLINE STRING", line );

	                        var str = line.substring( 1, line.length - 2 );

	                        if( currentName === false ){
	                            cif[ currentCategory ] = str;
	                        }else{
	                            cif[ currentCategory ][ currentName ] = str;
	                        }

	                    }else if( pendingValue ){

	                        // Log.log( "NEWLINE VALUE", line );

	                        if( currentName === false ){
	                            cif[ currentCategory ] = line.trim();
	                        }else{
	                            cif[ currentCategory ][ currentName ] = line.trim();
	                        }

	                    }else{

	                        if( exports.Debug ) Log$1.log( "CifParser._parse: unknown state", line );

	                    }

	                }


	            }

	        }

	        function postProcess(){

	            function _ensureArray( dict, field ){

	                if( !Array.isArray( dict[ field ] ) ){
	                    Object.keys( dict ).forEach( function( key ){
	                        dict[ key ] = [ dict[ key ] ];
	                    } );
	                }

	            }

	            var i, il, begIcode, endIcode;

	            // get helices
	            var sc = cif.struct_conf;

	            if( sc ){

	                var helices = s.helices;

	                // ensure data is in lists
	                _ensureArray( sc, "id" );

	                for( i = 0, il = sc.beg_auth_seq_id.length; i < il; ++i ){
	                    var helixType = parseInt( sc.pdbx_PDB_helix_class[ i ] );
	                    if( !Number.isNaN( helixType ) ){
	                        begIcode = sc.pdbx_beg_PDB_ins_code[ i ];
	                        endIcode = sc.pdbx_end_PDB_ins_code[ i ];
	                        helices.push( [
	                            asymIdDict[ sc.beg_label_asym_id[ i ] ],
	                            parseInt( sc.beg_auth_seq_id[ i ] ),
	                            begIcode === "?" ? "" : begIcode,
	                            asymIdDict[ sc.end_label_asym_id[ i ] ],
	                            parseInt( sc.end_auth_seq_id[ i ] ),
	                            endIcode === "?" ? "" : endIcode,
	                            ( HelixTypes[ helixType ] || HelixTypes[""] ).charCodeAt( 0 )
	                        ] );
	                    }
	                }

	            }

	            // get sheets
	            var ssr = cif.struct_sheet_range;

	            if( ssr ){

	                var sheets = s.sheets;

	                // ensure data is in lists
	                _ensureArray( ssr, "id" );

	                for( i = 0, il = ssr.beg_auth_seq_id.length; i < il; ++i ){
	                    begIcode = ssr.pdbx_beg_PDB_ins_code[ i ];
	                    endIcode = ssr.pdbx_end_PDB_ins_code[ i ];
	                    sheets.push( [
	                        asymIdDict[ ssr.beg_label_asym_id[ i ] ],
	                        parseInt( ssr.beg_auth_seq_id[ i ] ),
	                        begIcode === "?" ? "" : begIcode,
	                        asymIdDict[ ssr.end_label_asym_id[ i ] ],
	                        parseInt( ssr.end_auth_seq_id[ i ] ),
	                        endIcode === "?" ? "" : endIcode
	                    ] );
	                }

	            }

	        }

	        function parseChemComp(){

	            var i, n;
	            var cc = cif.chem_comp;
	            var cca = cif.chem_comp_atom;
	            var ccb = cif.chem_comp_bond;

	            if( cc ){

	                if( cc.name ){
	                    s.title = cc.name.trim().replace( reTrimQuotes, "" );
	                }
	                if( cc.id ){
	                    s.id = cc.id.trim().replace( reTrimQuotes, "" );
	                }

	            }

	            var atomnameDict = {};

	            if( cca ){

	                var atomname, element, resname, resno;
	                n = cca.comp_id.length;

	                for( i = 0; i < n; ++i ){

	                    atomStore.growIfFull();

	                    atomname = cca.atom_id[ i ];
	                    element = cca.type_symbol[ i ];

	                    atomnameDict[ atomname ] = i;
	                    atomStore.atomTypeId[ i ] = atomMap.add( atomname, element );

	                    atomStore.x[ i ] = cca.model_Cartn_x[ i ];
	                    atomStore.y[ i ] = cca.model_Cartn_y[ i ];
	                    atomStore.z[ i ] = cca.model_Cartn_z[ i ];
	                    atomStore.serial[ i ] = i;

	                    resname = cca.pdbx_component_comp_id[ i ];
	                    resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[ i ] : 1;

	                    sb.addAtom( 0, "", resname, resno, 1 );

	                }

	                for( i = 0; i < n; ++i ){

	                    var j = i + n;

	                    atomStore.growIfFull();

	                    atomname = cca.atom_id[ i ];
	                    element = cca.type_symbol[ i ];

	                    atomStore.atomTypeId[ j ] = atomMap.add( atomname, element );

	                    atomStore.x[ j ] = cca.pdbx_model_Cartn_x_ideal[ i ];
	                    atomStore.y[ j ] = cca.pdbx_model_Cartn_y_ideal[ i ];
	                    atomStore.z[ j ] = cca.pdbx_model_Cartn_z_ideal[ i ];
	                    atomStore.serial[ j ] = j;

	                    resname = cca.pdbx_component_comp_id[ i ];
	                    resno = cca.pdbx_residue_numbering ? cca.pdbx_residue_numbering[ i ] : 1;

	                    sb.addAtom( 1, "", resname, resno, 1 );

	                }

	            }

	            sb.finalize();

	            if( cca && ccb ){

	                var atomname1, atomname2, valueOrder, bondOrder;
	                n = ccb.comp_id.length;
	                var na = cca.comp_id.length;

	                var ap1 = s.getAtomProxy();
	                var ap2 = s.getAtomProxy();

	                for( i = 0; i < n; ++i ){

	                    atomname1 = ccb.atom_id_1[ i ];
	                    atomname2 = ccb.atom_id_2[ i ];
	                    valueOrder = ccb.value_order[ i ].toLowerCase();

	                    if( valueOrder === "?" ){
	                        bondOrder = 1;  // assume single bond
	                    }else if( valueOrder === "sing" ){
	                        bondOrder = 1;
	                    }else if( valueOrder === "doub" ){
	                        bondOrder = 2;
	                    }else if( valueOrder === "trip" ){
	                        bondOrder = 3;
	                    }else if( valueOrder === "quad" ){
	                        bondOrder = 4;
	                    }

	                    ap1.index = atomnameDict[ atomname1 ];
	                    ap2.index = atomnameDict[ atomname2 ];
	                    s.bondStore.growIfFull();
	                    s.bondStore.addBond( ap1, ap2, bondOrder );

	                    ap1.index += na;
	                    ap2.index += na;
	                    s.bondStore.growIfFull();
	                    s.bondStore.addBond( ap1, ap2, bondOrder );

	                }

	            }

	            s.refresh();

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        if( cif.chem_comp && cif.chem_comp_atom ){

	            parseChemComp();
	            this.dontAutoBond = true;
	            assignResidueTypeBonds( s );

	        }else{

	            sb.finalize();

	            if( cif.struct && cif.struct.title ){
	                s.title = cif.struct.title.trim().replace( reTrimQuotes, "" );
	            }
	            if( cif.entry && cif.entry.id ){
	                s.id = cif.entry.id.trim().replace( reTrimQuotes, "" );
	            }

	            postProcess();

	        }

	        if( exports.Debug ) Log$1.timeEnd( "CifParser._parse " + this.name );
	        callback();

	    },

	    _postProcess: function(){

	        if( exports.Debug ) Log$1.time( "CifParser._postProcess" );

	        var s = this.structure;
	        var structure = this.structure;
	        var cif = this.cif;
	        var asymIdDict = this.asymIdDict;

	        function _ensureArray( dict, field ){

	            if( !Array.isArray( dict[ field ] ) ){
	                Object.keys( dict ).forEach( function( key ){
	                    dict[ key ] = [ dict[ key ] ];
	                } );
	            }

	        }

	        // biomol & ncs processing
	        var operDict = {};
	        var biomolDict = s.biomolDict;

	        if( cif.pdbx_struct_oper_list ){

	            var biomolOp = cif.pdbx_struct_oper_list;

	            // ensure data is in lists
	            _ensureArray( biomolOp, "id" );

	            biomolOp.id.forEach( function( id, i ){

	                var m = new Matrix4();
	                var elms = m.elements;

	                elms[  0 ] = parseFloat( biomolOp[ "matrix[1][1]" ][ i ] );
	                elms[  1 ] = parseFloat( biomolOp[ "matrix[1][2]" ][ i ] );
	                elms[  2 ] = parseFloat( biomolOp[ "matrix[1][3]" ][ i ] );

	                elms[  4 ] = parseFloat( biomolOp[ "matrix[2][1]" ][ i ] );
	                elms[  5 ] = parseFloat( biomolOp[ "matrix[2][2]" ][ i ] );
	                elms[  6 ] = parseFloat( biomolOp[ "matrix[2][3]" ][ i ] );

	                elms[  8 ] = parseFloat( biomolOp[ "matrix[3][1]" ][ i ] );
	                elms[  9 ] = parseFloat( biomolOp[ "matrix[3][2]" ][ i ] );
	                elms[ 10 ] = parseFloat( biomolOp[ "matrix[3][3]" ][ i ] );

	                elms[  3 ] = parseFloat( biomolOp[ "vector[1]" ][ i ] );
	                elms[  7 ] = parseFloat( biomolOp[ "vector[2]" ][ i ] );
	                elms[ 11 ] = parseFloat( biomolOp[ "vector[3]" ][ i ] );

	                m.transpose();

	                operDict[ id ] = m;

	            } );

	        }

	        if( cif.pdbx_struct_assembly_gen ){

	            var gen = cif.pdbx_struct_assembly_gen;

	            // ensure data is in lists
	            _ensureArray( gen, "assembly_id" );

	            var getMatrixDict = function( expr ){

	                var matDict = {};

	                var l = expr.replace( /[\(\)']/g, "" ).split( "," );

	                l.forEach( function( e ){

	                    if( e.indexOf( "-" ) !== -1 ){

	                        var es = e.split( "-" );

	                        var j = parseInt( es[ 0 ] );
	                        var m = parseInt( es[ 1 ] );

	                        for( ; j <= m; ++j ){

	                            matDict[ j ] = operDict[ j ];

	                        }

	                    }else{

	                        matDict[ e ] = operDict[ e ];

	                    }

	                } );

	                return matDict;

	            };

	            gen.assembly_id.forEach( function( id, i ){

	                var md = {};
	                var oe = gen.oper_expression[ i ].replace( /'\(|'/g, "" );

	                if( oe.indexOf( ")(" || oe.indexOf( "(" ) > 0 ) !== -1 ){

	                    oe = oe.split( "(" );

	                    var md1 = getMatrixDict( oe[ 0 ] );
	                    var md2 = getMatrixDict( oe[ 1 ] );

	                    Object.keys( md1 ).forEach( function( k1 ){

	                        Object.keys( md2 ).forEach( function( k2 ){

	                            var mat = new Matrix4();

	                            mat.multiplyMatrices( md1[ k1 ], md2[ k2 ] );
	                            md[ k1 + "x" + k2 ] = mat;

	                        } );

	                    } );

	                }else{

	                    md = getMatrixDict( oe );

	                }

	                var matrixList = [];
	                for( var k in md ){
	                    matrixList.push( md[ k ] );
	                }

	                var name = id;
	                if( /^(0|[1-9][0-9]*)$/.test( name ) ) name = "BU" + name;

	                var chainList = gen.asym_id_list[ i ].split( "," );
	                for( var j = 0, jl = chainList.length; j < jl; ++j ){
	                    chainList[ j ] = asymIdDict[ chainList[ j ] ];
	                }

	                if( biomolDict[ name ] === undefined ){
	                    biomolDict[ name ] = new Assembly( name );
	                }
	                biomolDict[ name ].addPart( matrixList, chainList );

	            } );

	        }

	        // non-crystallographic symmetry operations
	        if( cif.struct_ncs_oper ){

	            var ncsOp = cif.struct_ncs_oper;

	            // ensure data is in lists
	            _ensureArray( ncsOp, "id" );

	            var ncsName = "NCS";
	            biomolDict[ ncsName ] = new Assembly( ncsName );
	            var ncsPart = biomolDict[ ncsName ].addPart();

	            ncsOp.id.forEach( function( id, i ){

	                // ignore 'given' operators
	                if( ncsOp.code[ i ] === "given" ) return;

	                var m = new Matrix4();
	                var elms = m.elements;

	                elms[  0 ] = parseFloat( ncsOp[ "matrix[1][1]" ][ i ] );
	                elms[  1 ] = parseFloat( ncsOp[ "matrix[1][2]" ][ i ] );
	                elms[  2 ] = parseFloat( ncsOp[ "matrix[1][3]" ][ i ] );

	                elms[  4 ] = parseFloat( ncsOp[ "matrix[2][1]" ][ i ] );
	                elms[  5 ] = parseFloat( ncsOp[ "matrix[2][2]" ][ i ] );
	                elms[  6 ] = parseFloat( ncsOp[ "matrix[2][3]" ][ i ] );

	                elms[  8 ] = parseFloat( ncsOp[ "matrix[3][1]" ][ i ] );
	                elms[  9 ] = parseFloat( ncsOp[ "matrix[3][2]" ][ i ] );
	                elms[ 10 ] = parseFloat( ncsOp[ "matrix[3][3]" ][ i ] );

	                elms[  3 ] = parseFloat( ncsOp[ "vector[1]" ][ i ] );
	                elms[  7 ] = parseFloat( ncsOp[ "vector[2]" ][ i ] );
	                elms[ 11 ] = parseFloat( ncsOp[ "vector[3]" ][ i ] );

	                m.transpose();

	                ncsPart.matrixList.push( m );

	            } );

	            if( ncsPart.matrixList.length === 0 ){
	                delete biomolDict[ ncsName ];
	            }

	        }

	        // cell & symmetry
	        var unitcellDict = {};

	        if( cif.cell ){

	            var cell = cif.cell;

	            var a = parseFloat( cell.length_a );
	            var b = parseFloat( cell.length_b );
	            var c = parseFloat( cell.length_c );

	            var box = new Float32Array( 9 );
	            box[ 0 ] = a;
	            box[ 4 ] = b;
	            box[ 8 ] = c;
	            structure.boxes.push( box );

	            unitcellDict.a = a;
	            unitcellDict.b = b;
	            unitcellDict.c = c;
	            unitcellDict.alpha = parseFloat( cell.angle_alpha );
	            unitcellDict.beta = parseFloat( cell.angle_beta );
	            unitcellDict.gamma = parseFloat( cell.angle_gamma );

	        }

	        if( cif.symmetry ){

	            var symmetry = cif.symmetry;

	            var sGroup = symmetry[ "space_group_name_H-M" ];
	            if( sGroup[0] === sGroup[ sGroup.length-1 ] &&
	                ( sGroup[0] === "'" || sGroup[0] === '"' )
	            ){
	                sGroup = sGroup.substring( 1, sGroup.length-1 );
	            }

	            unitcellDict.spacegroup = sGroup;

	        }

	        // origx
	        var origx = new Matrix4();

	        if( cif.database_PDB_matrix ){

	            var origxMat = cif.database_PDB_matrix;
	            var origxElms = origx.elements;

	            origxElms[  0 ] = parseFloat( origxMat[ "origx[1][1]" ] );
	            origxElms[  1 ] = parseFloat( origxMat[ "origx[1][2]" ] );
	            origxElms[  2 ] = parseFloat( origxMat[ "origx[1][3]" ] );

	            origxElms[  4 ] = parseFloat( origxMat[ "origx[2][1]" ] );
	            origxElms[  5 ] = parseFloat( origxMat[ "origx[2][2]" ] );
	            origxElms[  6 ] = parseFloat( origxMat[ "origx[2][3]" ] );

	            origxElms[  8 ] = parseFloat( origxMat[ "origx[3][1]" ] );
	            origxElms[  9 ] = parseFloat( origxMat[ "origx[3][2]" ] );
	            origxElms[ 10 ] = parseFloat( origxMat[ "origx[3][3]" ] );

	            origxElms[  3 ] = parseFloat( origxMat[ "origx_vector[1]" ] );
	            origxElms[  7 ] = parseFloat( origxMat[ "origx_vector[2]" ] );
	            origxElms[ 11 ] = parseFloat( origxMat[ "origx_vector[3]" ] );

	            origx.transpose();

	            unitcellDict.origx = origx;

	        }

	        // scale
	        var scale = new Matrix4();

	        if( cif.atom_sites ){

	            var scaleMat = cif.atom_sites;
	            var scaleElms = scale.elements;

	            scaleElms[  0 ] = parseFloat( scaleMat[ "fract_transf_matrix[1][1]" ] );
	            scaleElms[  1 ] = parseFloat( scaleMat[ "fract_transf_matrix[1][2]" ] );
	            scaleElms[  2 ] = parseFloat( scaleMat[ "fract_transf_matrix[1][3]" ] );

	            scaleElms[  4 ] = parseFloat( scaleMat[ "fract_transf_matrix[2][1]" ] );
	            scaleElms[  5 ] = parseFloat( scaleMat[ "fract_transf_matrix[2][2]" ] );
	            scaleElms[  6 ] = parseFloat( scaleMat[ "fract_transf_matrix[2][3]" ] );

	            scaleElms[  8 ] = parseFloat( scaleMat[ "fract_transf_matrix[3][1]" ] );
	            scaleElms[  9 ] = parseFloat( scaleMat[ "fract_transf_matrix[3][2]" ] );
	            scaleElms[ 10 ] = parseFloat( scaleMat[ "fract_transf_matrix[3][3]" ] );

	            scaleElms[  3 ] = parseFloat( scaleMat[ "fract_transf_vector[1]" ] );
	            scaleElms[  7 ] = parseFloat( scaleMat[ "fract_transf_vector[2]" ] );
	            scaleElms[ 11 ] = parseFloat( scaleMat[ "fract_transf_vector[3]" ] );

	            scale.transpose();

	            unitcellDict.scale = scale;

	        }

	        if( unitcellDict.a !== undefined ){
	            s.unitcell = new Unitcell(
	                unitcellDict.a, unitcellDict.b, unitcellDict.c,
	                unitcellDict.alpha, unitcellDict.beta, unitcellDict.gamma,
	                unitcellDict.spacegroup, unitcellDict.scale
	            );
	        }else{
	            s.unitcell = undefined;
	        }

	        // add connections
	        var sc = cif.struct_conn;

	        if( sc ){

	            // ensure data is in lists
	            _ensureArray( sc, "id" );

	            var reDoubleQuote = /"/g;
	            var ap1 = s.getAtomProxy();
	            var ap2 = s.getAtomProxy();
	            var atomIndicesCache = {};

	            for( var i = 0, il = sc.id.length; i < il; ++i ){

	                // ignore:
	                // hydrog - hydrogen bond
	                // mismat - mismatched base pairs
	                // saltbr - ionic interaction

	                var conn_type_id = sc.conn_type_id[ i ];
	                if( conn_type_id === "hydrog" ||
	                    conn_type_id === "mismat" ||
	                    conn_type_id === "saltbr" ) continue;

	                // ignore bonds between symmetry mates
	                if( sc.ptnr1_symmetry[ i ] !== "1_555" ||
	                    sc.ptnr2_symmetry[ i ] !== "1_555" ) continue;

	                // process:
	                // covale - covalent bond
	                // covale_base -
	                //      covalent modification of a nucleotide base
	                // covale_phosphate -
	                //      covalent modification of a nucleotide phosphate
	                // covale_sugar -
	                //      covalent modification of a nucleotide sugar
	                // disulf - disulfide bridge
	                // metalc - metal coordination
	                // modres - covalent residue modification

	                var inscode1 = sc.pdbx_ptnr1_PDB_ins_code[ i ];
	                var altloc1 = sc.pdbx_ptnr1_label_alt_id[ i ];
	                var sele1 = (
	                    sc.ptnr1_auth_seq_id[ i ] +
	                    ( inscode1 === "?" ? "" : ( "^" + inscode1 ) ) +
	                    ":" + asymIdDict[ sc.ptnr1_label_asym_id[ i ] ] +
	                    "." + sc.ptnr1_label_atom_id[ i ].replace( reDoubleQuote, '' ) +
	                    ( altloc1 === "?" ? "" : ( "%" + altloc1 ) )
	                );
	                var atomIndices1 = atomIndicesCache[ sele1 ];
	                if( !atomIndices1 ){
	                    var selection1 = new Selection( sele1 );
	                    if( selection1.selection.error ){
	                        Log$1.warn( "invalid selection for connection", sele1 );
	                        continue;
	                    }
	                    atomIndices1 = s.getAtomIndices( selection1 );
	                    atomIndicesCache[ sele1 ] = atomIndices1;
	                }

	                var inscode2 = sc.pdbx_ptnr2_PDB_ins_code[ i ];
	                var altloc2 = sc.pdbx_ptnr2_label_alt_id[ i ];
	                var sele2 = (
	                    sc.ptnr2_auth_seq_id[ i ] +
	                    ( inscode2 === "?" ? "" : ( "^" + inscode2 ) ) +
	                    ":" + asymIdDict[ sc.ptnr2_label_asym_id[ i ] ] +
	                    "." + sc.ptnr2_label_atom_id[ i ].replace( reDoubleQuote, '' ) +
	                    ( altloc2 === "?" ? "" : ( "%" + altloc2 ) )
	                );
	                var atomIndices2 = atomIndicesCache[ sele2 ];
	                if( !atomIndices2 ){
	                    var selection2 = new Selection( sele2 );
	                    if( selection2.selection.error ){
	                        Log$1.warn( "invalid selection for connection", sele2 );
	                        continue;
	                    }
	                    atomIndices2 = s.getAtomIndices( selection2 );
	                    atomIndicesCache[ sele2 ] = atomIndices2;
	                }

	                // cases with more than one atom per selection
	                // - #altloc1 to #altloc2
	                // - #model to #model
	                // - #altloc1 * #model to #altloc2 * #model

	                var k = atomIndices1.length;
	                var l = atomIndices2.length;

	                if( k > l ){
	                    var tmpA = k;
	                    k = l;
	                    l = tmpA;
	                    var tmpB = atomIndices1;
	                    atomIndices1 = atomIndices2;
	                    atomIndices2 = tmpB;
	                }

	                // console.log( k, l );

	                if( k === 0 || l === 0 ){
	                    Log$1.warn( "no atoms found for", sele1, sele2 );
	                    continue;
	                }

	                for( var j = 0; j < l; ++j ){

	                    ap1.index = atomIndices1[ j % k ];
	                    ap2.index = atomIndices2[ j ];

	                    if( ap1 && ap2 ){
	                        var bondOrder;
	                        var valueOrder = sc.pdbx_value_order[ i ].toLowerCase();
	                        if( valueOrder === "?" ){
	                            bondOrder = 1;  // assume single bond
	                        }else if( valueOrder === "sing" ){
	                            bondOrder = 1;
	                        }else if( valueOrder === "doub" ){
	                            bondOrder = 2;
	                        }else if( valueOrder === "trip" ){
	                            bondOrder = 3;
	                        }else if( valueOrder === "quad" ){
	                            bondOrder = 4;
	                        }
	                        s.bondStore.addBond( ap1, ap2, bondOrder );
	                    }else{
	                        Log$1.log( "atoms for connection not found" );
	                    }

	                }

	            }

	        }

	        if( exports.Debug ) Log$1.timeEnd( "CifParser._postProcess" );

	    }

	} );

	ParserRegistry.add( "cif", CifParser );
	ParserRegistry.add( "mcif", CifParser );
	ParserRegistry.add( "mmcif", CifParser );

	function SdfParser( streamer, params ){

	    var p = params || {};

	    p.dontAutoBond = defaults( p.dontAutoBond, true );

	    StructureParser.call( this, streamer, p );

	}

	SdfParser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: SdfParser,
	    type: "sdf",

	    _parse: function( callback ){

	        // https://en.wikipedia.org/wiki/Chemical_table_file#SDF
	        // http://download.accelrys.com/freeware/ctfile-formats/ctfile-formats.zip

	        if( exports.Debug ) Log$1.time( "SdfParser._parse " + this.name );

	        var s = this.structure;
	        var sb = this.structureBuilder;

	        var firstModelOnly = this.firstModelOnly;
	        var asTrajectory = this.asTrajectory;

	        var headerLines = this.streamer.peekLines( 2 );

	        s.id = headerLines[ 0 ].trim();
	        s.title = headerLines[ 1 ].trim();

	        var frames = s.frames;
	        var boxes = s.boxes;
	        var doFrames = false;
	        var currentFrame, currentCoord;

	        var atomMap = s.atomMap;
	        var atomStore = s.atomStore;
	        atomStore.resize( Math.round( this.streamer.data.length / 50 ) );

	        var ap1 = s.getAtomProxy();
	        var ap2 = s.getAtomProxy();

	        var idx = 0;
	        var lineNo = 0;
	        var modelIdx = 0;
	        var modelAtomIdxStart = 0;

	        var atomCount, bondCount, atomStart, atomEnd, bondStart, bondEnd;

	        function _parseChunkOfLines( _i, _n, lines ){

	            for( var i = _i; i < _n; ++i ){

	                var line = lines[ i ];

	                if( line.substr( 0, 4 ) === "$$$$" ){

	                    lineNo = -1;
	                    ++modelIdx;
	                    modelAtomIdxStart = atomStore.count;

	                }

	                if( lineNo === 3 ){

	                    atomCount = parseInt( line.substr( 0, 3 ) );
	                    bondCount = parseInt( line.substr( 3, 3 ) );

	                    atomStart = 4;
	                    atomEnd = atomStart + atomCount;
	                    bondStart = atomEnd;
	                    bondEnd = bondStart + bondCount;

	                    if( asTrajectory ){

	                        currentCoord = 0;
	                        currentFrame = new Float32Array( atomCount * 3 );
	                        frames.push( currentFrame );

	                        if( modelIdx > 0 ) doFrames = true;

	                    }

	                }

	                if( lineNo >= atomStart && lineNo < atomEnd ){

	                    if( firstModelOnly && modelIdx > 0 ) continue;

	                    var x = parseFloat( line.substr( 0, 10 ) );
	                    var y = parseFloat( line.substr( 10, 10 ) );
	                    var z = parseFloat( line.substr( 20, 10 ) );

	                    if( asTrajectory ){

	                        var j = currentCoord * 3;

	                        currentFrame[ j + 0 ] = x;
	                        currentFrame[ j + 1 ] = y;
	                        currentFrame[ j + 2 ] = z;

	                        currentCoord += 1;

	                        if( doFrames ) continue;

	                    }

	                    var element = line.substr( 31, 3 ).trim();
	                    var atomname = element + ( idx + 1 );

	                    atomStore.growIfFull();
	                    atomStore.atomTypeId[ idx ] = atomMap.add( atomname, element );

	                    atomStore.x[ idx ] = x;
	                    atomStore.y[ idx ] = y;
	                    atomStore.z[ idx ] = z;
	                    atomStore.serial[ idx ] = idx;

	                    sb.addAtom( modelIdx, "", "HET", 1, 1 );

	                    idx += 1;

	                }

	                if( lineNo >= bondStart && lineNo < bondEnd ){

	                    if( firstModelOnly && modelIdx > 0 ) continue;
	                    if( asTrajectory && modelIdx > 0 ) continue;

	                    ap1.index = parseInt( line.substr( 0, 3 ) ) - 1 + modelAtomIdxStart;
	                    ap2.index = parseInt( line.substr( 3, 3 ) ) - 1 + modelAtomIdxStart;
	                    var order = parseInt( line.substr( 6, 3 ) );

	                    s.bondStore.addBond( ap1, ap2, order );

	                }

	                ++lineNo;

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        sb.finalize();
	        s.unitcell = undefined;

	        if( exports.Debug ) Log$1.timeEnd( "SdfParser._parse " + this.name );
	        callback();

	    },

	    _postProcess: function(){

	        assignResidueTypeBonds( this.structure );

	    }

	} );

	ParserRegistry.add( "sdf", SdfParser );

	function Mol2Parser( streamer, params ){

	    var p = params || {};

	    p.dontAutoBond = defaults( p.dontAutoBond, true );

	    StructureParser.call( this, streamer, p );

	}

	Mol2Parser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: Mol2Parser,
	    type: "mol2",

	    _parse: function( callback ){

	        // http://www.tripos.com/data/support/mol2.pdf

	        if( exports.Debug ) Log$1.time( "Mol2Parser._parse " + this.name );

	        var reWhitespace = /\s+/;

	        var s = this.structure;
	        var sb = this.structureBuilder;

	        var firstModelOnly = this.firstModelOnly;
	        var asTrajectory = this.asTrajectory;

	        var frames = s.frames;
	        var boxes = s.boxes;
	        var doFrames = false;
	        var currentFrame, currentCoord;

	        var atomMap = s.atomMap;
	        var atomStore = s.atomStore;
	        atomStore.resize( Math.round( this.streamer.data.length / 60 ) );

	        var idx = 0;
	        var moleculeLineNo = 0;
	        var modelAtomIdxStart = 0;
	        var modelIdx = -1;
	        var numAtoms = 0;

	        var currentRecordType = 0;
	        var moleculeRecordType = 1;
	        var atomRecordType = 2;
	        var bondRecordType = 3;

	        var ap1 = s.getAtomProxy();
	        var ap2 = s.getAtomProxy();

	        var bondTypes = {
	            "1": 1,
	            "2": 2,
	            "3": 3,
	            "am": 1,  // amide
	            "ar": 1,  // aromatic
	            "du": 1,  // dummy
	            "un": 1,  // unknown
	            "nc": 0,  // not connected
	        };

	        function _parseChunkOfLines( _i, _n, lines ){

	            var ls;

	            for( var i = _i; i < _n; ++i ){

	                var line = lines[ i ].trim();

	                if( line === "" || line[ 0 ] === "#" ) continue;

	                if( line[ 0 ] === "@" ){

	                    if( line === "@<TRIPOS>MOLECULE" ){

	                        currentRecordType = moleculeRecordType;
	                        moleculeLineNo = 0;

	                        ++modelIdx;

	                    }else if( line === "@<TRIPOS>ATOM" ){

	                        currentRecordType = atomRecordType;
	                        modelAtomIdxStart = atomStore.count;

	                        if( asTrajectory ){

	                            currentCoord = 0;
	                            currentFrame = new Float32Array( numAtoms * 3 );
	                            frames.push( currentFrame );

	                            if( modelIdx > 0 ) doFrames = true;

	                        }

	                    }else if( line === "@<TRIPOS>BOND" ){

	                        currentRecordType = bondRecordType;

	                    }else{

	                        currentRecordType = 0;

	                    }

	                }else if( currentRecordType === moleculeRecordType ){

	                    if( moleculeLineNo === 0 ){

	                        s.title = line;
	                        s.id = line;

	                    }else if( moleculeLineNo === 1 ){

	                        ls = line.split( reWhitespace );
	                        numAtoms = parseInt( ls[ 0 ] );
	                        // num_atoms [num_bonds [num_subst [num_feat [num_sets]]]]

	                    }else if( moleculeLineNo === 2 ){

	                        var molType = line;
	                        // SMALL, BIOPOLYMER, PROTEIN, NUCLEIC_ACID, SACCHARIDE

	                    }else if( moleculeLineNo === 3 ){

	                        var chargeType = line;
	                        // NO_CHARGES, DEL_RE, GASTEIGER, GAST_HUCK, HUCKEL,
	                        // PULLMAN, GAUSS80_CHARGES, AMPAC_CHARGES,
	                        // MULLIKEN_CHARGES, DICT_ CHARGES, MMFF94_CHARGES,
	                        // USER_CHARGES

	                    }else if( moleculeLineNo === 4 ){

	                        var statusBits = line;

	                    }else if( moleculeLineNo === 5 ){

	                        var molComment = line;

	                    }

	                    ++moleculeLineNo;

	                }else if( currentRecordType === atomRecordType ){

	                    ls = line.split( reWhitespace );

	                    if( firstModelOnly && modelIdx > 0 ) continue;

	                    var x = parseFloat( ls[ 2 ] );
	                    var y = parseFloat( ls[ 3 ] );
	                    var z = parseFloat( ls[ 4 ] );

	                    if( asTrajectory ){

	                        var j = currentCoord * 3;

	                        currentFrame[ j + 0 ] = x;
	                        currentFrame[ j + 1 ] = y;
	                        currentFrame[ j + 2 ] = z;

	                        currentCoord += 1;

	                        if( doFrames ) continue;

	                    }

	                    var serial = ls[ 0 ];
	                    var atomname = ls[ 1 ];
	                    var element = ls[ 5 ].split( "." )[ 0 ];
	                    var resno = ls[ 6 ] ? parseInt( ls[ 6 ] ) : 1;
	                    var resname = ls[ 7 ] ? ls[ 7 ] : "";
	                    var bfactor = ls[ 8 ] ? parseFloat( ls[ 8 ] ) : 0.0;

	                    atomStore.growIfFull();
	                    atomStore.atomTypeId[ idx ] = atomMap.add( atomname, element );

	                    atomStore.x[ idx ] = x;
	                    atomStore.y[ idx ] = y;
	                    atomStore.z[ idx ] = z;
	                    atomStore.serial[ idx ] = serial;
	                    atomStore.bfactor[ idx ] = bfactor;

	                    sb.addAtom( modelIdx, "", resname, resno, 1 );

	                    idx += 1;

	                }else if( currentRecordType === bondRecordType ){

	                    if( firstModelOnly && modelIdx > 0 ) continue;
	                    if( asTrajectory && modelIdx > 0 ) continue;

	                    ls = line.split( reWhitespace );

	                    // ls[ 0 ] is bond id
	                    ap1.index = parseInt( ls[ 1 ] ) - 1 + modelAtomIdxStart;
	                    ap2.index = parseInt( ls[ 2 ] ) - 1 + modelAtomIdxStart;
	                    var order = bondTypes[ ls[ 3 ] ];

	                    s.bondStore.addBond( ap1, ap2, order );

	                }

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        sb.finalize();
	        s.unitcell = undefined;

	        if( exports.Debug ) Log$1.timeEnd( "Mol2Parser._parse " + this.name );
	        callback();

	    },

	    _postProcess: function(){

	        assignResidueTypeBonds( this.structure );

	    }

	} );

	ParserRegistry.add( "mol2", Mol2Parser );

	/**
	 * @file mmtf-constants
	 * @private
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 */


	var PassThroughFields = [
	    "mmtfVersion", "mmtfProducer",
	    "unitCell", "spaceGroup", "structureId", "title",
	    "depositionDate", "releaseDate",
	    "experimentalMethods", "resolution", "rFree", "rWork",
	    "bioAssemblyList", "ncsOperatorList", "entityList", "groupList",
	    "numBonds", "numAtoms", "numGroups", "numChains", "numModels",
	    "groupsPerChain", "chainsPerModel",
	];

	var EncodedFields = [
		// required
	    "xCoordList", "yCoordList", "zCoordList",
	    "groupIdList", "groupTypeList",
	    "chainIdList",
	    // optional
	    "bFactorList", "atomIdList", "altLocList", "occupancyList",
	    "secStructList", "insCodeList", "sequenceIndexList",
	    "chainNameList",
	    "bondAtomList", "bondOrderList"
	];

	var AllFields = PassThroughFields.concat( EncodedFields );

	/**
	 * @file mmtf-utils
	 * @private
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 */

	/**
	 * mmtf utils module.
	 * @module MmtfUtils
	 */


	function getView( ctor, typedArray, elemSize ){
	    return typedArray ? new ctor(
	        typedArray.buffer,
	        typedArray.byteOffset,
	        typedArray.byteLength / ( elemSize || 1 )
	    ) : undefined;
	}

	function getDataView( typedArray ){
	    return getView( DataView, typedArray );
	}

	/**
	 * get an Uint8Array view on the input array memory
	 * @static
	 * @param  {TypedArray} dataArray - input array
	 * @return {Uint8Array} new view on the input array memory
	 */
	function getUint8View( typedArray ){
	    return getView( Uint8Array, typedArray );
	}

	/**
	 * get an Int8Array view on the input array memory
	 * @static
	 * @param  {TypedArray} dataArray - input array
	 * @return {Int8Array} new view on the input array memory
	 */
	function getInt8View( typedArray ){
	    return getView( Int8Array, typedArray );
	}

	/**
	 * get an Int32Array view on the input array memory
	 * @static
	 * @param  {TypedArray} dataArray - input array
	 * @return {Int32Array} new view on the input array memory
	 */
	function getInt32View( typedArray ){
	    return getView( Int32Array, typedArray, 4 );
	}

	function getFloat32View( typedArray ){
	    return getView( Float32Array, typedArray, 4 );
	}


	/**
	 * get an Int16Array copy of the the input array data
	 * @static
	 * @param  {TypedArray} view - input data in big endian format
	 * @param  {Int16Array} [dataArray] - pre-allocated output array
	 * @return {Int16Array} copy of the input array data
	 */
	function decodeInt16( bytes, output ){
	    var n = bytes.length / 2;
	    if( !output ) output = new Int16Array( n );
	    for( var i = 0, i2 = 0; i < n; ++i, i2 += 2 ){
	        output[ i ] = bytes[ i2 ] << 8 ^ bytes[ i2 + 1 ] << 0;
	    }
	    return output;
	}

	/**
	 * get an Int32Array copy of the the input array data
	 * @static
	 * @param  {TypedArray} view - input data in big endian format
	 * @param  {Int32Array} [dataArray] - pre-allocated output array
	 * @return {Int32Array} copy of the input array data
	 */
	function decodeInt32( bytes, output ){
	    var n = bytes.length / 4;
	    if( !output ) output = new Int32Array( n );
	    for( var i = 0, i4 = 0; i < n; ++i, i4 += 4 ){
	        output[ i ] = (
	            bytes[ i4     ] << 24 ^ bytes[ i4 + 1 ] << 16 ^
	            bytes[ i4 + 2 ] <<  8 ^ bytes[ i4 + 3 ] <<  0
	        );
	    }
	    return output;
	}

	function decodeFloat32( bytes, output ){
	    var n = bytes.length;
	    if( !output ) output = new Float32Array( n / 4 );
	    var dvOut = getDataView( output );
	    var dvIn = getDataView( bytes );
	    for( var i = 0, i4 = 0, il = n / 4; i < il; ++i, i4 += 4 ){
	        dvOut.setFloat32( i4, dvIn.getFloat32( i4 ), true );
	    }
	    return output;
	}

	/**
	 * decode integers into floats using given divisor
	 * example:
	 *     intArray: [ 12, 34, 543, 687, 2, 0, 4689 ]
	 *     divisor: 100
	 *     return: [ 0.12, 0.34, 5.43, 6.87, 0.02, 0.00, 46.89 ]
	 * @static
	 * @param  {TypedArray|Array} intArray - input array containing integers
	 * @param  {Number} divisor - number to devide the integers to obtain floats
	 * @param  {Float32Array} [dataArray] - pre-allocated output array
	 * @return {Float32Array} decoded array
	 */
	function decodeInteger( intArray, divisor, output ){
	    var n = intArray.length;
	    var invDiv = 1/divisor;
	    if( !output ) output = new Float32Array( n );
	    for( var i = 0; i < n; ++i ){
	        // multiply by inverse of the divisor which is faster then division
	        output[ i ] = intArray[ i ] * invDiv;
	    }
	    return output;
	}

	/**
	 * perform run-length decoding of input array
	 * example:
	 *     array: [ 0, 2, 3, 5 ]  // pairs of values and length of a run
	 *     return: [ 0, 0, 3, 3, 3, 3, 3 ]
	 * @static
	 * @param  {TypedArray|Array} array - run-length encoded input array
	 * @param  {TypedArray|Array} [dataArray] - pre-allocated output array
	 * @return {TypedArray|Array} decoded array
	 */
	function decodeRun( array, output ){
	    var i, il;
	    if( !output ){
	        // calculate the length the decoded array will have
	        var fullLength = 0;
	        for( i = 0, il = array.length; i < il; i+=2 ){
	            fullLength += array[ i + 1 ];
	        }
	        // create a new array of the same type of the input array
	        output = new array.constructor( fullLength );
	    }
	    var dataOffset = 0;
	    for( i = 0, il = array.length; i < il; i+=2 ){
	        var value = array[ i ];  // value to be repeated
	        var length = array[ i + 1 ];  // number of repeats
	        for( var j = 0; j < length; ++j ){
	            output[ dataOffset ] = value;
	            ++dataOffset;
	        }
	    }
	    return output;
	}

	/**
	 * perform delta decoding of the input array
	 * by iterativly adding the ith element's value to the i+1th
	 * example:
	 *     dataArray: [ 0, 2, 1, 2, 1, 1, -4, -2, 9 ]
	 *     return: [ 0, 2, 3, 5, 6, 7, 3, 1, 10 ]
	 * @static
	 * @param  {TypedArray|Array} dataArray - delta encoded input array
	 * @return {TypedArray|Array} decoded array
	 */
	function decodeDelta( array, output ){
	    var n = array.length;
	    if( !output ) output = new array.constructor( n );
	    if( n ) output[ 0 ] = array[ 0 ];
	    for( var i = 1; i < n; ++i ){
	        output[ i ] = array[ i ] + output[ i - 1 ];
	    }
	    return output;
	}

	/**
	 * [decodePacking description]
	 * @param  {[type]} int16or8 [description]
	 * @param  {[type]} output   [description]
	 * @return {[type]}          [description]
	 */
	function decodePacking( int16or8, output ){
	    var upperLimit = int16or8 instanceof Int8Array ? 0x7F : 0x7FFF;
	    var lowerLimit = -upperLimit - 1;
	    var n = int16or8.length;
	    var i, j;
	    if( !output ){
	        var fullLength = 0;
	        for( i = 0; i < n; ++i ){
	            if( int16or8[ i ] < upperLimit && int16or8[ i ] > lowerLimit ){
	                ++fullLength;
	            }
	        }
	        output = new Int32Array( fullLength );
	    }
	    i = 0;
	    j = 0;
	    while( i < n ){
	        var value = 0;
	        while( int16or8[ i ] === upperLimit || int16or8[ i ] === lowerLimit ){
	            value += int16or8[ i ];
	            ++i;
	            if( int16or8[ i ] === 0 ){
	                break;
	            }
	        }
	        value += int16or8[ i ];
	        ++i;
	        output[ j ] = value;
	        ++j;
	    }
	    return output;
	}

	function decodeDeltaRun( array, output ){
	    return decodeDelta( decodeRun( array ), output );
	}

	/**
	 * perform run-length decoding followed (@see decodeRunLength)
	 * by decoding integers into floats using given divisor (@see decodeIntegerToFloat)
	 * example:
	 *     array: [ 320, 3, 100, 2 ]
	 *     divisor: 100
	 *     return: [ 3.20, 3.20, 3.20, 1.00, 1.00 ]
	 * @static
	 * @param  {Uint8Array} array - run-length encoded int32 array as bytes in big endian format
	 * @param  {Integer} divisor - number to devide the integers to obtain floats
	 * @param  {Float32Array} dataArray - pre-allocated output array
	 * @return {Float32Array} decoded array
	 */
	function decodeIntegerRun( intArray, divisor, output ){
	    return decodeInteger(
	        decodeRun( intArray, getInt32View( output ) ), divisor, output
	    );
	}

	function decodeIntegerDelta( intArray, divisor, output ){
	    return decodeInteger(
	        decodeDelta( intArray, getInt32View( output ) ), divisor, output
	    );
	}

	function decodeIntegerPacking( int16or8, divisor, output ){
	    return decodeInteger(
	        decodePacking( int16or8, getInt32View( output ) ), divisor, output
	    );
	}

	function decodeIntegerDeltaPacking( int16or8, divisor, output ){
	    var unpacked = decodePacking( int16or8, getInt32View( output ) );
	    return decodeIntegerDelta( unpacked, divisor, getFloat32View( unpacked ) );
	}

	function decodeBytes( bytes ){
	    var dv = getDataView( bytes );
	    var type = dv.getInt32( 0 );
	    var size = dv.getInt32( 4 );
	    var param = bytes.subarray( 8, 12 );
	    var bytes = bytes.subarray( 12 );
	    return [ type, bytes, size, param ];
	}

	/**
	 * @file msgpack-decode
	 * @private
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 */

	/**
	 * msgpack decode module.
	 * @module MsgpackDecode
	 */

	/**
	 * decode binary encoded MessagePack v5 (http://msgpack.org/) data
	 * @static
	 * @param  {Uint8Array} buffer - binary encoded MessagePack data
	 * @return {Object|Array|String|Number|Boolean|null} decoded Messagepack data
	 */
	function decodeMsgpack(buffer) {
	  // Loosely based on
	  // The MIT License (MIT)
	  // Copyright (c) 2013 Tim Caswell <tim@creationix.com>
	  // https://github.com/creationix/msgpack-js
	  var offset = 0;
	  var dataView = new DataView(buffer.buffer);

	  /**
	   * decode all key-value pairs of a map into an object
	   * @param  {Integer} length - number of key-value pairs
	   * @return {Object} decoded map
	   */
	  function map(length) {
	    var value = {};
	    for (var i = 0; i < length; i++) {
	      var key = parse();
	      value[key] = parse();
	    }
	    return value;
	  }

	  /**
	   * decode binary array
	   * @param  {Integer} length - number of elements in the array
	   * @return {Uint8Array} decoded array
	   */
	  function bin(length) {
	    var value = buffer.subarray(offset, offset + length);
	    offset += length;
	    return value;
	  }

	  /**
	   * decode string
	   * @param  {Integer} length - number string characters
	   * @return {String} decoded string
	   */
	  function str(length) {
	    var array = buffer.subarray(offset, offset + length);
	    offset += length;
	    // limit number of arguments to String.fromCharCode to something
	    // browsers can handle, see http://stackoverflow.com/a/22747272
	    var chunkSize = 0xffff;
	    if(length > chunkSize){
	      var c = [];
	      for(var i = 0; i < array.length; i += chunkSize) {
	        c.push(String.fromCharCode.apply(
	          null, array.subarray(i, i + chunkSize)
	        ));
	      }
	      return c.join("");
	    }else{
	      return String.fromCharCode.apply(null, array);
	    }
	  }

	  /**
	   * decode array
	   * @param  {Integer} length - number of array elements
	   * @return {Array} decoded array
	   */
	  function array(length) {
	    var value = new Array(length);
	    for (var i = 0; i < length; i++) {
	      value[i] = parse();
	    }
	    return value;
	  }

	  /**
	   * recursively parse the MessagePack data
	   * @return {Object|Array|String|Number|Boolean|null} decoded MessagePack data
	   */
	  function parse() {
	    var type = buffer[offset];
	    var value, length, extType;
	    // Positive FixInt
	    if ((type & 0x80) === 0x00) {
	      offset++;
	      return type;
	    }
	    // FixMap
	    if ((type & 0xf0) === 0x80) {
	      length = type & 0x0f;
	      offset++;
	      return map(length);
	    }
	    // FixArray
	    if ((type & 0xf0) === 0x90) {
	      length = type & 0x0f;
	      offset++;
	      return array(length);
	    }
	    // FixStr
	    if ((type & 0xe0) === 0xa0) {
	      length = type & 0x1f;
	      offset++;
	      return str(length);
	    }
	    // Negative FixInt
	    if ((type & 0xe0) === 0xe0) {
	      value = dataView.getInt8(offset);
	      offset++;
	      return value;
	    }
	    switch (type) {
	    // nil
	    case 0xc0:
	      offset++;
	      return null;
	    // 0xc1: (never used, could be employed for padding)
	    // false
	    case 0xc2:
	      offset++;
	      return false;
	    // true
	    case 0xc3:
	      offset++;
	      return true;
	    // bin 8
	    case 0xc4:
	      length = dataView.getUint8(offset + 1);
	      offset += 2;
	      return bin(length);
	    // bin 16
	    case 0xc5:
	      length = dataView.getUint16(offset + 1);
	      offset += 3;
	      return bin(length);
	    // bin 32
	    case 0xc6:
	      length = dataView.getUint32(offset + 1);
	      offset += 5;
	      return bin(length);
	    // // ext 8
	    // case 0xc7:
	    //   length = dataView.getUint8(offset + 1);
	    //   extType = dataView.getUint8(offset + 2);
	    //   offset += 3;
	    //   return [extType, bin(length)];
	    // // ext 16
	    // case 0xc8:
	    //   length = dataView.getUint16(offset + 1);
	    //   extType = dataView.getUint8(offset + 3);
	    //   offset += 4;
	    //   return [extType, bin(length)];
	    // // ext 32
	    // case 0xc9:
	    //   length = dataView.getUint32(offset + 1);
	    //   extType = dataView.getUint8(offset + 5);
	    //   offset += 6;
	    //   return [extType, bin(length)];
	    // float 32
	    case 0xca:
	      value = dataView.getFloat32(offset + 1);
	      offset += 5;
	      return value;
	    // float 64
	    case 0xcb:
	      value = dataView.getFloat64(offset + 1);
	      offset += 9;
	      return value;
	    // uint8
	    case 0xcc:
	      value = buffer[offset + 1];
	      offset += 2;
	      return value;
	    // uint 16
	    case 0xcd:
	      value = dataView.getUint16(offset + 1);
	      offset += 3;
	      return value;
	    // uint 32
	    case 0xce:
	      value = dataView.getUint32(offset + 1);
	      offset += 5;
	      return value;
	    // // uint64
	    // case 0xcf:
	    //   // FIXME not available/representable in JS
	    //   // largest possible int in JS is 2^53
	    //   // value = dataView.getUint64(offset + 1);
	    //   offset += 9;
	    //   return 0;
	    // int 8
	    case 0xd0:
	      value = dataView.getInt8(offset + 1);
	      offset += 2;
	      return value;
	    // int 16
	    case 0xd1:
	      value = dataView.getInt16(offset + 1);
	      offset += 3;
	      return value;
	    // int 32
	    case 0xd2:
	      value = dataView.getInt32(offset + 1);
	      offset += 5;
	      return value;
	    // // int 64
	    // case 0xd3:
	    //   // FIXME not available/representable in JS
	    //   // largest possible int in JS is 2^53
	    //   // value = dataView.getInt64(offset + 1);
	    //   offset += 9;
	    //   return 0;

	    // // fixext 1
	    // case 0xd4:
	    //   extType = dataView.getUint8(offset + 1);
	    //   offset += 2;
	    //   return [extType, bin(1)];
	    // // fixext 2
	    // case 0xd5:
	    //   extType = dataView.getUint8(offset + 1);
	    //   offset += 2;
	    //   return [extType, bin(2)];
	    // // fixext 4
	    // case 0xd6:
	    //   extType = dataView.getUint8(offset + 1);
	    //   offset += 2;
	    //   return [extType, bin(4)];
	    // // fixext 8
	    // case 0xd7:
	    //   extType = dataView.getUint8(offset + 1);
	    //   offset += 2;
	    //   return [extType, bin(8)];
	    // // fixext 16
	    // case 0xd8:
	    //   extType = dataView.getUint8(offset + 1);
	    //   offset += 2;
	    //   return [extType, bin(16)];
	    // str 8
	    case 0xd9:
	      length = dataView.getUint8(offset + 1);
	      offset += 2;
	      return str(length);
	    // str 16
	    case 0xda:
	      length = dataView.getUint16(offset + 1);
	      offset += 3;
	      return str(length);
	    // str 32
	    case 0xdb:
	      length = dataView.getUint32(offset + 1);
	      offset += 5;
	      return str(length);
	    // array 16
	    case 0xdc:
	      length = dataView.getUint16(offset + 1);
	      offset += 3;
	      return array(length);
	    // array 32
	    case 0xdd:
	      length = dataView.getUint32(offset + 1);
	      offset += 5;
	      return array(length);
	    // map 16:
	    case 0xde:
	      length = dataView.getUint16(offset + 1);
	      offset += 3;
	      return map(length);
	    // map 32
	    case 0xdf:
	      length = dataView.getUint32(offset + 1);
	      offset += 5;
	      return map(length);
	    }

	    throw new Error("Unknown type 0x" + type.toString(16));
	  }

	  // start the recursive parsing
	  return parse();
	}

	/**
	 * Fields shared in encoded and decoded mmtf data objects.
	 * @typedef {Object} module:MmtfDecode.SharedMmtfData
	 * @property {String} mmtfVersion - MMTF specification version
	 * @property {String} mmtfProducer - Program that created the file
	 * @property {Float[]} [unitCell] - Crystallographic unit cell
	 * @property {Float} unitCell.0 - x length
	 * @property {Float} unitCell.1 - y length
	 * @property {Float} unitCell.2 - z length
	 * @property {Float} unitCell.3 - alpha angle
	 * @property {Float} unitCell.4 - beta angle
	 * @property {Float} unitCell.5 - gamma angle
	 * @property {String} [spaceGroup] - Hermann-Mauguin symbol
	 * @property {String} [structureId] - Some reference, e.g. a PDB ID
	 * @property {String} [title] - Short description
	 * @property {String} [depositionDate] - Deposition date in YYYY-MM-DD format
	 * @property {String} [releaseDate] - Release date in YYYY-MM-DD format
	 * @property {String[]} [experimentalMethods] - Structure determination methods
	 * @property {Float} [resolution] - Resolution in Å
	 * @property {Float} [rFree] - R-free value
	 * @property {Float} [rWork] - R-work value
	 * @property {Integer} numBonds - Number of bonds
	 * @property {Integer} numAtoms - Number of atoms
	 * @property {Integer} numGroups - Number of groups (residues)
	 * @property {Integer} numChains - Number of chains
	 * @property {Integer} numModels - Number of models
	 * @property {Integer[]} chainsPerModel - List of number of chains in each model
	 * @property {Integer[]} groupsPerChain - List of number of groups in each chain
	 * @property {Entity[]} [entityList] - List of entity objects
	 * @property {Integer[]} entityList.chainIndexList - Pointers into chain data fields
	 * @property {String} entityList.description - Description of the entity
	 * @property {String} entityList.type - Name of the entity type
	 * @property {String} entityList.sequence - One letter code sequence
	 * @property {Assembly[]} [bioAssemblyList] - List of assembly objects
	 * @property {Transform[]} bioAssemblyList.transformList - List of transform objects
	 * @property {Integer[]} bioAssemblyList.transformList.chainIndexList - Pointers into chain data fields
	 * @property {Float[]} bioAssemblyList.transformList.matrix - 4x4 transformation matrix
	 * @property {GroupType[]} groupList - List of groupType objects
	 * @property {Integer[]} groupList.formalChargeList - List of atom formal charges
	 * @property {String[]} groupList.elementList - List of elements
	 * @property {String[]} groupList.atomNameList - List of atom names
	 * @property {Integer[]} groupList.bondAtomList - List of bonded atom indices
	 * @property {Integer[]} groupList.bondOrderList - List of bond orders
	 * @property {String} groupList.groupName - The name of the group
	 * @property {String} groupList.singleLetterCode - The single letter code
	 * @property {String} groupList.chemCompType -  The chemical component type
	 */

	/**
	 * Encoded mmtf data object. Also includes the fields from {@link module:MmtfDecode.SharedMmtfData}. See MMTF specification on how they are encoded.
	 * @typedef {Object} module:MmtfDecode.EncodedMmtfData
	 * @mixes module:MmtfDecode.SharedMmtfData
	 * @property {Uint8Array} [bondAtomList] - Encoded bonded atom indices
	 * @property {Uint8Array} [bondOrderList] - Encoded bond orders
	 * @property {Uint8Array} xCoordBig - Encoded x coordinates in Å, part 1
	 * @property {Uint8Array} xCoordSmall - Encoded x coordinates in Å, part 2
	 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
	 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
	 * @property {Uint8Array} yCoordBig - Encoded y coordinates in Å, part 1
	 * @property {Uint8Array} yCoordSmall - Encoded y coordinates in Å, part 2
	 * @property {Uint8Array} [bFactorBig] - Encoded B-factors in Å^2, part 1
	 * @property {Uint8Array} [bFactorSmall] - Encoded B-factors in Å^2, part 2
	 * @property {Uint8Array} [atomIdList] - Encoded  atom ids
	 * @property {Uint8Array} [altLocList] - Encoded alternate location labels
	 * @property {Uint8Array} [occupancyList] - Encoded occupancies
	 * @property {Uint8Array} groupIdList - Encoded group ids
	 * @property {Uint8Array} groupTypeList - Encoded group types
	 * @property {Uint8Array} [secStructList] - Encoded secondary structure codes
	 * @property {Uint8Array} [insCodeList] - Encoded insertion codes
	 * @property {Uint8Array} [seuenceIdList] - Encoded sequence ids
	 * @property {Uint8Array} chainIdList - Encoded chain ids
	 * @property {Uint8Array} [chainNameList] - Encoded chain names
	 */

	/**
	 * Decoded mmtf data object. Also includes fields the from {@link module:MmtfDecode.SharedMmtfData}.
	 * @typedef {Object} module:MmtfDecode.MmtfData
	 * @mixes module:MmtfDecode.SharedMmtfData
	 * @property {Int32Array} [bondAtomList] - List of bonded atom indices
	 * @property {Uint8Array} [bondOrderList] - List of bond orders
	 * @property {Float32Array} xCoordList - List of x coordinates in Å
	 * @property {Float32Array} yCoordList - List of y coordinates in Å
	 * @property {Float32Array} zCoordList - List of z coordinates in Å
	 * @property {Float32Array} [bFactorList] - List of B-factors in Å^2
	 * @property {Int32Array} [atomIdList] - List of atom ids
	 * @property {Uint8Array} [altLocList] - List of alternate location labels
	 * @property {Float32Array} [occupancyList] - List of occupancies
	 * @property {Int32Array} groupIdList - List of group ids
	 * @property {Int32Array} groupTypeList - List of group types
	 * @property {Int8Array} [secStructList] - List of secondary structure codes, encoding
	 *    0: pi helix, 1: bend, 2: alpha helix, 3: extended,
	 *    4: 3-10 helix, 5: bridge, 6: turn, 7: coil, -1: undefined
	 * @property {Uint8Array} [insCodeList] - List of insertion codes
	 * @property {Int32Array} [seuenceIdList] - List of sequence ids
	 * @property {Uint8Array} chainIdList - List of chain ids
	 * @property {Uint8Array} [chainNameList] - List of chain names
	 */


	/**
	 * [performDecoding description]
	 * @param  {[type]} bytes [description]
	 * @param  {[type]} size  [description]
	 * @param  {[type]} param [description]
	 * @return {[type]}       [description]
	 */
	function performDecoding( type, bytes, size, param ){

	    switch( type ){
	        case 1:
	            return decodeFloat32( bytes );
	        case 2:
	            return getInt8View( bytes );
	        case 3:
	            return decodeInt16( bytes );
	        case 4:
	            return decodeInt32( bytes );
	        case 5:
	            // var length = decodeInt32( param )[ 0 ];
	            return getUint8View( bytes );  // interpret as string array
	        case 6:
	            // interpret as char array
	            return decodeRun( decodeInt32( bytes ), new Uint8Array( size ) );
	        case 7:
	            return decodeRun( decodeInt32( bytes ) )
	        case 8:
	            return decodeDeltaRun( decodeInt32( bytes ) );
	        case 9:
	            return decodeIntegerRun( decodeInt32( bytes ), decodeInt32( param )[ 0 ] );
	        case 10:
	            return decodeIntegerDeltaPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
	        case 11:
	            return decodeInteger( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
	        case 12:
	            return decodeIntegerPacking( decodeInt16( bytes ), decodeInt32( param )[ 0 ] );
	        case 13:
	            return decodeIntegerPacking( getInt8View( bytes ), decodeInt32( param )[ 0 ] );
	        case 14:
	            return decodePacking( decodeInt16( bytes ) );
	        case 15:
	            return decodePacking( getInt8View( bytes ) );
	    }

	};


	/**
	 * Decode MMTF fields
	 * @static
	 * @param  {Object} inputDict - encoded MMTF data
	 * @param  {Object} [params] - decoding parameters
	 * @param  {String[]} params.ignoreFields - names of optional fields not to decode
	 * @return {module:MmtfDecode.MmtfData} mmtfData
	 */
	function decodeMmtf( inputDict, params ){

	    params = params || {};
	    var ignoreFields = params.ignoreFields;
	    var outputDict = {};

	    AllFields.forEach( function( name ){
	        var ignore = ignoreFields ? ignoreFields.indexOf( name ) !== -1 : false;
	        var data = inputDict[ name ];
	        if( !ignore && data !== undefined ){
	            if( data instanceof Uint8Array ){
	                outputDict[ name ] = performDecoding.apply( null, decodeBytes( data ) );
	            }else{
	                outputDict[ name ] = data;
	            }
	        }
	    } );

	    return outputDict;

	}

	var SstrucMap = {
	    "0": "i".charCodeAt( 0 ),  // pi helix
	    "1": "s".charCodeAt( 0 ),  // bend
	    "2": "h".charCodeAt( 0 ),  // alpha helix
	    "3": "e".charCodeAt( 0 ),  // extended
	    "4": "g".charCodeAt( 0 ),  // 3-10 helix
	    "5": "b".charCodeAt( 0 ),  // bridge
	    "6": "t".charCodeAt( 0 ),  // turn
	    "7": "l".charCodeAt( 0 ),  // coil
	    "-1": "".charCodeAt( 0 )   // NA
	};


	function MmtfParser( streamer, params ){

	    var p = params || {};

	    p.dontAutoBond = defaults( p.dontAutoBond, true );
	    p.autoBondBetween = defaults( p.autoBondBetween, false );
	    p.doAutoSS = defaults( p.doAutoSS, false );

	    StructureParser.call( this, streamer, p );

	}

	MmtfParser.prototype = Object.assign( Object.create(

	    StructureParser.prototype ), {

	    constructor: MmtfParser,
	    type: "mmtf",

	    _parse: function( callback ){

	        // https://github.com/rcsb/mmtf

	        if( exports.Debug ) Log$1.time( "MmtfParser._parse " + this.name );

	        var i, il, j, jl, groupData;

	        var s = this.structure;
	        var sd = decodeMmtf( decodeMsgpack( this.streamer.data ) );

	        var numBonds, numAtoms, numGroups, numChains, numModels;
	        var chainsPerModel;

	        s.id = sd.structureId;
	        s.title = sd.title;

	        if( this.firstModelOnly || this.asTrajectory ){

	            numModels = 1;
	            numChains = sd.chainsPerModel[ 0 ];

	            numGroups = 0;
	            for( i = 0, il = numChains; i < il; ++i ){
	                numGroups += sd.groupsPerChain[ i ];
	            }

	            numAtoms = 0;
	            for( i = 0, il = numGroups; i < il; ++i ){
	                groupData = sd.groupList[ sd.groupTypeList[ i ] ];
	                numAtoms += groupData.atomNameList.length;
	            }

	            numBonds = sd.numBonds;

	            chainsPerModel = [ numChains ];

	        }else{

	            numBonds = sd.numBonds;
	            numAtoms = sd.numAtoms;
	            numGroups = sd.numGroups;
	            numChains = sd.numChains;
	            numModels = sd.numModels;

	            chainsPerModel = sd.chainsPerModel;

	        }

	        numBonds += numGroups;  // add numGroups to have space for polymer bonds

	        //

	        if( this.asTrajectory ){

	            for( i = 0, il = sd.numModels; i < il; ++i ){

	                var frame = new Float32Array( numAtoms * 3 );
	                var frameAtomOffset = numAtoms * i;

	                for( j = 0; j < numAtoms; ++j ){
	                    var j3 = j * 3;
	                    var offset = j + frameAtomOffset;
	                    frame[ j3     ] = sd.xCoordList[ offset ];
	                    frame[ j3 + 1 ] = sd.yCoordList[ offset ];
	                    frame[ j3 + 2 ] = sd.zCoordList[ offset ];
	                }

	                s.frames.push( frame );

	            }

	        }

	        // bondStore
	        var bAtomIndex1 = new Uint32Array( numBonds );
	        var bAtomIndex2 = new Uint32Array( numBonds );
	        var bBondOrder = new Uint8Array( numBonds );

	        var aGroupIndex = new Uint32Array( numAtoms );

	        var gChainIndex = new Uint32Array( numGroups );
	        var gAtomOffset = new Uint32Array( numGroups );
	        var gAtomCount = new Uint16Array( numGroups );

	        var cModelIndex = new Uint16Array( numChains );
	        var cGroupOffset = new Uint32Array( numChains );
	        var cGroupCount = new Uint32Array( numChains );

	        var mChainOffset = new Uint32Array( numModels );
	        var mChainCount = new Uint32Array( numModels );

	        // set-up model-chain relations
	        var chainOffset = 0;
	        for( i = 0, il = numModels; i < il; ++i ){
	            var modelChainCount = chainsPerModel[ i ];
	            mChainOffset[ i ] = chainOffset;
	            mChainCount[ i ] = modelChainCount;
	            for( j = 0; j < modelChainCount; ++j ){
	                cModelIndex[ j + chainOffset ] = i;
	            }
	            chainOffset += modelChainCount;
	        }

	        // set-up chain-residue relations
	        var groupsPerChain = sd.groupsPerChain;
	        var groupOffset = 0;
	        for( i = 0, il = numChains; i < il; ++i ){
	            var chainGroupCount = groupsPerChain[ i ];
	            cGroupOffset[ i ] = groupOffset;
	            cGroupCount[ i ] = chainGroupCount;
	            for( j = 0; j < chainGroupCount; ++j ){
	                gChainIndex[ j + groupOffset ] = i;
	            }
	            groupOffset += chainGroupCount;
	        }

	        //////
	        // get data from group map

	        var atomOffset = 0;
	        var bondOffset = 0;

	        for( i = 0, il = numGroups; i < il; ++i ){

	            groupData = sd.groupList[ sd.groupTypeList[ i ] ];
	            var groupAtomCount = groupData.atomNameList.length;

	            var groupBondAtomList = groupData.bondAtomList;
	            var groupBondOrderList = groupData.bondOrderList;

	            for( j = 0, jl = groupBondOrderList.length; j < jl; ++j ){
	                bAtomIndex1[ bondOffset ] = atomOffset + groupBondAtomList[ j * 2 ];
	                bAtomIndex2[ bondOffset ] = atomOffset + groupBondAtomList[ j * 2 + 1 ];
	                bBondOrder[ bondOffset ] = groupBondOrderList[ j ];
	                bondOffset += 1;
	            }

	            //

	            gAtomOffset[ i ] = atomOffset;
	            gAtomCount[ i ] = groupAtomCount;

	            for( j = 0; j < groupAtomCount; ++j ){
	                aGroupIndex[ atomOffset ] = i;
	                atomOffset += 1;
	            }

	        }

	        // extra bonds

	        var bondAtomList = sd.bondAtomList;
	        if( bondAtomList ){

	            if( sd.bondOrderList ){
	                bBondOrder.set( sd.bondOrderList, bondOffset );
	            }

	            for( i = 0, il = bondAtomList.length; i < il; i += 2 ){
	                var atomIndex1 = bondAtomList[ i ];
	                var atomIndex2 = bondAtomList[ i + 1 ];
	                if( atomIndex1 < numAtoms && atomIndex2 < numAtoms ){
	                    bAtomIndex1[ bondOffset ] = atomIndex1;
	                    bAtomIndex2[ bondOffset ] = atomIndex2;
	                    bondOffset += 1;
	                }
	            }

	        }

	        //

	        s.bondStore.length = bBondOrder.length;
	        s.bondStore.count = bondOffset;
	        s.bondStore.atomIndex1 = bAtomIndex1;
	        s.bondStore.atomIndex2 = bAtomIndex2;
	        s.bondStore.bondOrder = bBondOrder;

	        s.atomStore.length = numAtoms;
	        s.atomStore.count = numAtoms;
	        s.atomStore.residueIndex = aGroupIndex;
	        s.atomStore.atomTypeId = new Uint16Array( numAtoms );
	        s.atomStore.x = sd.xCoordList.subarray( 0, numAtoms );
	        s.atomStore.y = sd.yCoordList.subarray( 0, numAtoms );
	        s.atomStore.z = sd.zCoordList.subarray( 0, numAtoms );
	        s.atomStore.serial = sd.atomIdList.subarray( 0, numAtoms );
	        s.atomStore.bfactor = sd.bFactorList.subarray( 0, numAtoms );
	        s.atomStore.altloc = sd.altLocList.subarray( 0, numAtoms );
	        s.atomStore.occupancy = sd.occupancyList.subarray( 0, numAtoms );

	        s.residueStore.length = numGroups;
	        s.residueStore.count = numGroups;
	        s.residueStore.chainIndex = gChainIndex;
	        s.residueStore.residueTypeId = sd.groupTypeList;
	        s.residueStore.atomOffset = gAtomOffset;
	        s.residueStore.atomCount = gAtomCount;
	        s.residueStore.resno = sd.groupIdList.subarray( 0, numGroups );
	        s.residueStore.sstruc = sd.secStructList.subarray( 0, numGroups );
	        s.residueStore.inscode = sd.insCodeList.subarray( 0, numGroups );

	        s.chainStore.length = numChains;
	        s.chainStore.count = numChains;
	        s.chainStore.modelIndex = cModelIndex;
	        s.chainStore.residueOffset = cGroupOffset;
	        s.chainStore.residueCount = cGroupCount;
	        s.chainStore.chainname = sd.chainNameList.subarray( 0, numChains * 4 );

	        s.modelStore.length = numModels;
	        s.modelStore.count = numModels;
	        s.modelStore.chainOffset = mChainOffset;
	        s.modelStore.chainCount = mChainCount;



	        var groupTypeDict = {};
	        for( i = 0, il = sd.groupList.length; i < il; ++i ){
	            var groupType = sd.groupList[ i ];
	            var atomTypeIdList = [];
	            for( j = 0, jl = groupType.atomNameList.length; j < jl; ++j ){
	                var element = groupType.elementList[ j ].toUpperCase();
	                var atomname = groupType.atomNameList[ j ];
	                atomTypeIdList.push( s.atomMap.add( atomname, element ) );
	            }
	            var chemCompType = groupType.chemCompType.toUpperCase();
	            var hetFlag = ChemCompHetero.indexOf( chemCompType ) !== -1;

	            var numGroupBonds = groupType.bondOrderList.length;
	            var atomIndices1 = new Array( numGroupBonds );
	            var atomIndices2 = new Array( numGroupBonds );
	            for( j = 0; j < numGroupBonds; ++j ){
	                atomIndices1[ j ] = groupType.bondAtomList[ j * 2 ];
	                atomIndices2[ j ] = groupType.bondAtomList[ j * 2 + 1 ];
	            }
	            var bonds = {
	                atomIndices1: atomIndices1,
	                atomIndices2: atomIndices2,
	                bondOrders: groupType.bondOrderList
	            };

	            groupTypeDict[ i ] = s.residueMap.add(
	                groupType.groupName, atomTypeIdList, hetFlag, chemCompType, bonds
	            );
	        }

	        for( i = 0, il = numGroups; i < il; ++i ){
	            s.residueStore.residueTypeId[ i ] = groupTypeDict[ s.residueStore.residueTypeId[ i ] ];
	        }

	        for( i = 0, il = s.atomStore.count; i < il; ++i ){
	            var residueIndex = s.atomStore.residueIndex[ i ];
	            var residueType = s.residueMap.list[ s.residueStore.residueTypeId[ residueIndex ] ];
	            var resAtomOffset = s.residueStore.atomOffset[ residueIndex ];
	            s.atomStore.atomTypeId[ i ] = residueType.atomTypeIdList[ i - resAtomOffset ];
	        }

	        if( sd.secStructList ){
	            var secStructLength = sd.secStructList.length;
	            for( i = 0, il = s.residueStore.count; i < il; ++i ){
	                // with ( i % secStructLength ) secStruct entries are reused
	                var sstruc = SstrucMap[ s.residueStore.sstruc[ i % secStructLength ] ];
	                if( sstruc !== undefined ) s.residueStore.sstruc[ i ] = sstruc;
	            }
	        }

	        //

	        if( sd.bioAssemblyList ){
	            sd.bioAssemblyList.forEach( function( _assembly, k ){
	                var id = k + 1;
	                var assembly = new Assembly( id );
	                s.biomolDict[ "BU" + id ] = assembly;
	                var chainToPart = {};
	                _assembly.transformList.forEach( function( _transform ){
	                    var matrix = new Matrix4().fromArray( _transform.matrix ).transpose();
	                    var chainList = _transform.chainIndexList.map( function( chainIndex ){
	                        var chainname = "";
	                        for( var k = 0; k < 4; ++k ){
	                            var code = sd.chainNameList[ chainIndex * 4 + k ];
	                            if( code ){
	                                chainname += String.fromCharCode( code );
	                            }else{
	                                break;
	                            }
	                        }
	                        return chainname;
	                    } );
	                    var part = chainToPart[ chainList ];
	                    if( part ){
	                        part.matrixList.push( matrix );
	                    }else{
	                        chainToPart[ chainList ] = assembly.addPart( [ matrix ], chainList );
	                    }
	                } );
	            } );
	        }

	        if( sd.ncsOperatorList ){
	            var ncsName = "NCS";
	            var ncsAssembly = new Assembly( ncsName );
	            var ncsPart = ncsAssembly.addPart();
	            sd.ncsOperatorList.forEach( function( _operator, k ){
	                var matrix = new Matrix4().fromArray( _operator ).transpose();
	                ncsPart.matrixList.push( matrix );
	            } );
	            if( ncsPart.matrixList.length > 0 ){
	                s.biomolDict[ ncsName ] = ncsAssembly;
	            }
	        }

	        if( sd.unitCell && Array.isArray( sd.unitCell ) && sd.unitCell[ 0 ] ){
	            s.unitcell = new Unitcell(
	                sd.unitCell[ 0 ], sd.unitCell[ 1 ], sd.unitCell[ 2 ],
	                sd.unitCell[ 3 ], sd.unitCell[ 4 ], sd.unitCell[ 5 ],
	                sd.spaceGroup
	            );
	        }else{
	            s.unitcell = undefined;
	        }

	        if( exports.Debug ) Log$1.timeEnd( "MmtfParser._parse " + this.name );

	        // calculate backbone bonds
	        calculateBondsBetween( s, true );

	        // calculate rung bonds
	        calculateBondsWithin( s, true );

	        callback();

	    }

	} );

	ParserRegistry.add( "mmtf", MmtfParser );

	/**
	 * @file Frames
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @private
	 */


	function Frames( name, path ){

	    this.name = name;
	    this.path = path;

	    this.coordinates = [];
	    this.boxes = [];

	}

	Frames.prototype = {

	    constructor: Frames,

	};

	function TrajectoryParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.frames = new Frames( this.name, this.path );

	}

	TrajectoryParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: TrajectoryParser,
	    type: "trajectory",

	    __objName: "frames"

	} );

	function DcdParser( streamer, params ){

	    var p = params || {};

	    TrajectoryParser.call( this, streamer, p );

	}

	DcdParser.prototype = Object.assign( Object.create(

	    TrajectoryParser.prototype ), {

	    constructor: DcdParser,
	    type: "dcd",

	    _parse: function( callback ){

	        // http://www.ks.uiuc.edu/Research/vmd/plugins/molfile/dcdplugin.html

	        // The DCD format is structured as follows
	        //   (FORTRAN UNFORMATTED, with Fortran data type descriptions):
	        // HDR     NSET    ISTRT   NSAVC   5-ZEROS NATOM-NFREAT    DELTA   9-ZEROS
	        // `CORD'  #files  step 1  step    zeroes  (zero)          timestep  (zeroes)
	        //                         interval
	        // C*4     INT     INT     INT     5INT    INT             DOUBLE  9INT
	        // ==========================================================================
	        // NTITLE          TITLE
	        // INT (=2)        C*MAXTITL
	        //                 (=32)
	        // ==========================================================================
	        // NATOM
	        // #atoms
	        // INT
	        // ==========================================================================
	        // X(I), I=1,NATOM         (DOUBLE)
	        // Y(I), I=1,NATOM
	        // Z(I), I=1,NATOM
	        // ==========================================================================

	        if( exports.Debug ) Log$1.time( "DcdParser._parse " + this.name );

	        var bin = this.streamer.data;
	        if( bin instanceof Uint8Array ){
	            bin = bin.buffer;
	        }
	        var dv = new DataView( bin );

	        var i, n;
	        var f = this.frames;
	        var coordinates = f.coordinates;
	        var boxes = f.boxes;
	        var header = {};
	        var nextPos = 0;

	        // header block

	        var intView = new Int32Array( bin, 0, 23 );
	        var ef = intView[ 0 ] !== dv.getInt32( 0 );  // endianess flag
	        // swap byte order when big endian (84 indicates little endian)
	        if( intView[ 0 ] !== 84 ){
	            n = bin.byteLength;
	            for( i = 0; i < n; i+=4 ){
	                dv.setFloat32( i, dv.getFloat32( i ), true );
	            }
	        }
	        if( intView[ 0 ] !== 84 ){
	            Log$1.error( "dcd bad format, header block start" );
	        }
	        // format indicator, should read 'CORD'
	        var formatString = String.fromCharCode(
	            dv.getUint8( 4 ), dv.getUint8( 5 ),
	            dv.getUint8( 6 ), dv.getUint8( 7 )
	        );
	        if( formatString !== "CORD" ){
	            Log$1.error( "dcd bad format, format string" );
	        }
	        var isCharmm = false;
	        var extraBlock = false;
	        var fourDims = false;
	        // version field in charmm, unused in X-PLOR
	        if( intView[ 22 ] !== 0 ){
	            isCharmm = true;
	            if( intView[ 12 ] !== 0 ) extraBlock = true;
	            if( intView[ 13 ] === 1 ) fourDims = true;
	        }
	        header.NSET = intView[ 2 ];
	        header.ISTART = intView[ 3 ];
	        header.NSAVC = intView[ 4 ];
	        header.NAMNF = intView[ 10 ];
	        if( isCharmm ){
	            header.DELTA = dv.getFloat32( 44, ef );
	        }else{
	            header.DELTA = dv.getFloat64( 44, ef );
	        }
	        if( intView[ 22 ] !== 84 ){
	            Log$1.error( "dcd bad format, header block end" );
	        }
	        nextPos = nextPos + 21 * 4 + 8;

	        // title block

	        var titleLength = dv.getInt32( nextPos, ef );
	        var titlePos = nextPos + 1;
	        if( ( titleLength - 4 ) % 80 !== 0 ){
	            Log$1.error( "dcd bad format, title block start" );
	        }
	        header.TITLE = uint8ToString(
	            new Uint8Array( bin, titlePos, titleLength )
	        );
	        if( dv.getInt32( titlePos + titleLength + 4 - 1, ef ) !== titleLength ){
	            Log$1.error( "dcd bad format, title block end" );
	        }
	        nextPos = nextPos + titleLength + 8;

	        // natom block

	        if( dv.getInt32( nextPos, ef ) !== 4 ){
	            Log$1.error( "dcd bad format, natom block start" );
	        }
	        header.NATOM = dv.getInt32( nextPos + 4, ef );
	        if( dv.getInt32( nextPos + 8, ef ) !== 4 ){
	            Log$1.error( "dcd bad format, natom block end" );
	        }
	        nextPos = nextPos + 4 + 8;

	        // fixed atoms block

	        if( header.NAMNF > 0 ){
	            // TODO read coordinates and indices of fixed atoms
	            Log$1.error( "dcd format with fixed atoms unsupported, aborting" );
	            callback();
	            return;
	        }

	        // frames

	        var natom = header.NATOM;
	        var natom4 = natom * 4;

	        for( i = 0, n = header.NSET; i < n; ++i ){

	            if( extraBlock ){
	                nextPos += 4;  // block start
	                // unitcell: A, alpha, B, beta, gamma, C (doubles)
	                var box = new Float32Array( 9 );
	                box[ 0 ] = dv.getFloat64( nextPos        , ef );
	                box[ 4 ] = dv.getFloat64( nextPos + 2 * 8, ef );
	                box[ 8 ] = dv.getFloat64( nextPos + 5 * 8, ef );
	                boxes.push( box );
	                nextPos += 48;
	                nextPos += 4;  // block end
	            }

	            // xyz coordinates
	            var coord = new Float32Array( natom * 3 );
	            for( var j = 0; j < 3; ++j ){
	                if( dv.getInt32( nextPos, ef ) !== natom4 ){
	                    Log$1.error( "dcd bad format, coord block start", i, j );
	                }
	                nextPos += 4;  // block start
	                var c = new Float32Array( bin, nextPos, natom );
	                for( var k = 0; k < natom; ++k ){
	                    coord[ 3 * k + j ] = c[ k ];
	                }
	                nextPos += natom4;
	                if( dv.getInt32( nextPos, ef ) !== natom4 ){
	                    Log$1.error( "dcd bad format, coord block end", i, j );
	                }
	                nextPos += 4;  // block end
	            }
	            coordinates.push( coord );

	            if( fourDims ){
	                var bytes = dv.getInt32( nextPos, ef );
	                nextPos += 4 + bytes + 4;  // block start + skip + block end
	            }

	        }

	        // console.log( header );
	        // console.log( header.TITLE );
	        // console.log( "isCharmm", isCharmm, "extraBlock", extraBlock, "fourDims", fourDims );

	        if( exports.Debug ) Log$1.timeEnd( "DcdParser._parse " + this.name );
	        callback();

	    },

	} );

	ParserRegistry.add( "dcd", DcdParser );

	function VolumeParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.volume = new Volume( this.name, this.path );

	}

	VolumeParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: VolumeParser,
	    type: "volume",

	    __objName: "volume",

	    _afterParse: function(){

	        this.volume.setMatrix( this.getMatrix() );

	    },

	    getMatrix: function(){

	        return new Matrix4();

	    }

	} );

	function MrcParser( streamer, params ){

	    VolumeParser.call( this, streamer, params );

	}

	MrcParser.prototype = Object.assign( Object.create(

	    VolumeParser.prototype ), {

	    constructor: MrcParser,
	    type: "mrc",

	    _parse: function( callback ){

	        // MRC
	        // http://ami.scripps.edu/software/mrctools/mrc_specification.php
	        // http://www2.mrc-lmb.cam.ac.uk/research/locally-developed-software/image-processing-software/#image
	        // http://bio3d.colorado.edu/imod/doc/mrc_format.txt

	        // CCP4 (MAP)
	        // http://www.ccp4.ac.uk/html/maplib.html

	        // MRC format does not use the skew transformation header records (words 25-37)
	        // CCP4 format does not use the ORIGIN header records (words 50-52)

	        if( exports.Debug ) Log$1.time( "MrcParser._parse " + this.name );

	        var bin = this.streamer.data;

	        if( bin instanceof Uint8Array ){
	            bin = bin.buffer;
	        }

	        var v = this.volume;
	        var header = {};

	        var intView = new Int32Array( bin, 0, 56 );
	        var floatView = new Float32Array( bin, 0, 56 );

	        var dv = new DataView( bin );

	        // 53  MAP         Character string 'MAP ' to identify file type
	        header.MAP = String.fromCharCode(
	            dv.getUint8( 52 * 4 ), dv.getUint8( 52 * 4 + 1 ),
	            dv.getUint8( 52 * 4 + 2 ), dv.getUint8( 52 * 4 + 3 )
	        );

	        // 54  MACHST      Machine stamp indicating machine type which wrote file
	        //                 17 and 17 for big-endian or 68 and 65 for little-endian
	        header.MACHST = [ dv.getUint8( 53 * 4 ), dv.getUint8( 53 * 4 + 1 ) ];

	        // swap byte order when big endian
	        if( header.MACHST[ 0 ] === 17 && header.MACHST[ 1 ] === 17 ){
	            var n = bin.byteLength;
	            for( var i = 0; i < n; i+=4 ){
	                dv.setFloat32( i, dv.getFloat32( i ), true );
	            }
	        }

	        header.NX = intView[ 0 ];  // NC - columns (fastest changing)
	        header.NY = intView[ 1 ];  // NR - rows
	        header.NZ = intView[ 2 ];  // NS - sections (slowest changing)

	        // mode
	        //  0 image : signed 8-bit bytes range -128 to 127
	        //  1 image : 16-bit halfwords
	        //  2 image : 32-bit reals
	        //  3 transform : complex 16-bit integers
	        //  4 transform : complex 32-bit reals
	        //  6 image : unsigned 16-bit range 0 to 65535
	        // 16 image: unsigned char * 3 (for rgb data, non-standard)
	        //
	        // Note: Mode 2 is the normal mode used in the CCP4 programs.
	        //       Other modes than 2 and 0 may NOT WORK
	        header.MODE = intView[ 3 ];

	        // start
	        header.NXSTART = intView[ 4 ];  // NCSTART - first column
	        header.NYSTART = intView[ 5 ];  // NRSTART - first row
	        header.NZSTART = intView[ 6 ];  // NSSTART - first section

	        // intervals
	        header.MX = intView[ 7 ];  // intervals along x
	        header.MY = intView[ 8 ];  // intervals along y
	        header.MZ = intView[ 9 ];  // intervals along z

	        // cell length (Angstroms in CCP4)
	        header.xlen = floatView[ 10 ];
	        header.ylen = floatView[ 11 ];
	        header.zlen = floatView[ 12 ];

	        // cell angle (Degrees)
	        header.alpha = floatView[ 13 ];
	        header.beta  = floatView[ 14 ];
	        header.gamma = floatView[ 15 ];

	        // axis correspondence (1,2,3 for X,Y,Z)
	        header.MAPC = intView[ 16 ];  // column
	        header.MAPR = intView[ 17 ];  // row
	        header.MAPS = intView[ 18 ];  // section

	        // density statistics
	        header.DMIN  = floatView[ 19 ];
	        header.DMAX  = floatView[ 20 ];
	        header.DMEAN = floatView[ 21 ];

	        // space group number 0 or 1 (default=0)
	        header.ISPG = intView[ 22 ];

	        // number of bytes used for symmetry data (0 or 80)
	        header.NSYMBT = intView[ 23 ];

	        // Flag for skew transformation, =0 none, =1 if foll
	        header.LSKFLG = intView[ 24 ];

	        // 26-34  SKWMAT  Skew matrix S (in order S11, S12, S13, S21 etc) if
	        //                LSKFLG .ne. 0.
	        // 35-37  SKWTRN  Skew translation t if LSKFLG != 0.
	        //                Skew transformation is from standard orthogonal
	        //                coordinate frame (as used for atoms) to orthogonal
	        //                map frame, as Xo(map) = S * (Xo(atoms) - t)

	        // 38      future use       (some of these are used by the MSUBSX routines
	        //  .          "              in MAPBRICK, MAPCONT and FRODO)
	        //  .          "   (all set to zero by default)
	        //  .          "
	        // 52          "

	        // 50-52 origin in X,Y,Z used for transforms
	        header.originX = floatView[ 49 ];
	        header.originY = floatView[ 50 ];
	        header.originZ = floatView[ 51 ];

	        // 53  MAP         Character string 'MAP ' to identify file type
	        // => see top of this parser

	        // 54  MACHST      Machine stamp indicating machine type which wrote file
	        // => see top of this parser

	        // Rms deviation of map from mean density
	        header.ARMS = floatView[ 54 ];

	        // 56      NLABL           Number of labels being used
	        // 57-256  LABEL(20,10)    10  80 character text labels (ie. A4 format)

	        v.header = header;

	        // Log.log( header )

	        // FIXME depends on mode
	        var data = new Float32Array(
	            bin, 256 * 4 + header.NSYMBT,
	            header.NX * header.NY * header.NZ
	        );

	        v.setData( data, header.NX, header.NY, header.NZ );

	        if( exports.Debug ) Log$1.timeEnd( "MrcParser._parse " + this.name );
	        callback();

	    },

	    getMatrix: function(){

	        var h = this.volume.header;

	        var basisX = [
	            h.xlen,
	            0,
	            0
	        ];

	        var basisY = [
	            h.ylen * Math.cos( Math.PI / 180.0 * h.gamma ),
	            h.ylen * Math.sin( Math.PI / 180.0 * h.gamma ),
	            0
	        ];

	        var basisZ = [
	            h.zlen * Math.cos( Math.PI / 180.0 * h.beta ),
	            h.zlen * (
	                    Math.cos( Math.PI / 180.0 * h.alpha ) -
	                    Math.cos( Math.PI / 180.0 * h.gamma ) *
	                    Math.cos( Math.PI / 180.0 * h.beta )
	                ) / Math.sin( Math.PI / 180.0 * h.gamma ),
	            0
	        ];
	        basisZ[ 2 ] = Math.sqrt(
	            h.zlen * h.zlen * Math.sin( Math.PI / 180.0 * h.beta ) *
	            Math.sin( Math.PI / 180.0 * h.beta ) - basisZ[ 1 ] * basisZ[ 1 ]
	        );

	        var basis = [ 0, basisX, basisY, basisZ ];
	        var nxyz = [ 0, h.MX, h.MY, h.MZ ];
	        var mapcrs = [ 0, h.MAPC, h.MAPR, h.MAPS ];

	        var matrix = new Matrix4();

	        matrix.set(

	            basis[ mapcrs[1] ][0] / nxyz[ mapcrs[1] ],
	            basis[ mapcrs[2] ][0] / nxyz[ mapcrs[2] ],
	            basis[ mapcrs[3] ][0] / nxyz[ mapcrs[3] ],
	            0,

	            basis[ mapcrs[1] ][1] / nxyz[ mapcrs[1] ],
	            basis[ mapcrs[2] ][1] / nxyz[ mapcrs[2] ],
	            basis[ mapcrs[3] ][1] / nxyz[ mapcrs[3] ],
	            0,

	            basis[ mapcrs[1] ][2] / nxyz[ mapcrs[1] ],
	            basis[ mapcrs[2] ][2] / nxyz[ mapcrs[2] ],
	            basis[ mapcrs[3] ][2] / nxyz[ mapcrs[3] ],
	            0,

	            0, 0, 0, 1

	        );

	        matrix.setPosition( new Vector3(
	            h.originX, h.originY, h.originZ
	        ) );

	        matrix.multiply( new Matrix4().makeTranslation(
	            h.NXSTART, h.NYSTART, h.NZSTART
	        ) );

	        return matrix;

	    }

	} );

	ParserRegistry.add( "mrc", MrcParser );
	ParserRegistry.add( "ccp4", MrcParser );
	ParserRegistry.add( "map", MrcParser );

	function CubeParser( streamer, params ){

	    // @author Johanna Tiemann <johanna.tiemann@googlemail.com>
	    // @author Alexander Rose <alexander.rose@weirdbyte.de>

	    VolumeParser.call( this, streamer, params );

	}

	CubeParser.prototype = Object.assign( Object.create(

	    VolumeParser.prototype ), {

	    constructor: CubeParser,
	    type: "cube",

	    _parse: function( callback ){

	        // http://paulbourke.net/dataformats/cube/

	        if( exports.Debug ) Log$1.time( "CubeParser._parse " + this.name );

	        var v = this.volume;
	        var headerLines = this.streamer.peekLines( 6 );
	        var header = {};
	        var reWhitespace = /\s+/;
	        var bohrToAngstromFactor = 0.529177210859;

	        function headerhelper( k, l ) {
	            var field = headerLines[ k ].trim().split( reWhitespace )[ l ];
	            return parseFloat( field );
	        }

	        header.atomCount = Math.abs( headerhelper( 2, 0 ) ); //Number of atoms
	        header.originX = headerhelper( 2, 1 ) * bohrToAngstromFactor; //Position of origin of volumetric data
	        header.originY = headerhelper( 2, 2 ) * bohrToAngstromFactor;
	        header.originZ = headerhelper( 2, 3 ) * bohrToAngstromFactor;
	        header.NVX = headerhelper( 3, 0 ); //Number of voxels
	        header.NVY = headerhelper( 4, 0 );
	        header.NVZ = headerhelper( 5, 0 );
	        header.AVX = headerhelper( 3, 1 ) * bohrToAngstromFactor; //Axis vector
	        header.AVY = headerhelper( 4, 2 ) * bohrToAngstromFactor;
	        header.AVZ = headerhelper( 5, 3 ) * bohrToAngstromFactor;

	        var data = new Float32Array( header.NVX * header.NVY * header.NVZ );
	        var count = 0;
	        var lineNo = 0;

	        function _parseChunkOfLines( _i, _n, lines ){

	            for( var i = _i; i < _n; ++i ){

	                var line = lines[ i ].trim();

	                if( line !== "" && lineNo >= header.atomCount + 6 ){

	                    line = line.split( reWhitespace );
	                    for( var j = 0, lj = line.length; j < lj; ++j ){
	                        if ( line.length !==1 ) {
	                            data[ count ] = parseFloat( line[ j ] );
	                            ++count;
	                        }
	                    }

	                }

	                ++lineNo;

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        v.header = header;
	        v.setData( data, header.NVZ, header.NVY, header.NVX );

	        if( exports.Debug ) Log$1.timeEnd( "CubeParser._parse " + this.name );
	        callback();

	    },

	    getMatrix: function(){

	        var h = this.volume.header;
	        var matrix = new Matrix4();

	        matrix.multiply(
	            new Matrix4().makeRotationY( degToRad( 90 ) )
	        );

	        matrix.multiply(
	            new Matrix4().makeTranslation(
	                -h.originZ, h.originY, h.originX
	            )
	        );

	        matrix.multiply(
	            new Matrix4().makeScale(
	                -h.AVZ, h.AVY, h.AVX
	            )
	        );

	        return matrix;

	    }

	} );

	ParserRegistry.add( "cube", CubeParser );

	function DxParser( streamer, params ){

	    VolumeParser.call( this, streamer, params );

	}

	DxParser.prototype = Object.assign( Object.create(

	    VolumeParser.prototype ), {

	    constructor: DxParser,
	    type: "dx",

	    _parse: function( callback ){

	        // http://www.poissonboltzmann.org/docs/file-format-info/

	        if( exports.Debug ) Log$1.time( "DxParser._parse " + this.name );

	        var v = this.volume;
	        var headerLines = this.streamer.peekLines( 30 );
	        var headerInfo = this.parseHeaderLines( headerLines );
	        var header = this.volume.header;
	        var dataLineStart = headerInfo.dataLineStart;

	        var reWhitespace = /\s+/;
	        var size = header.nx * header.ny * header.nz;
	        var data = new Float32Array( size );
	        var count = 0;
	        var lineNo = 0;

	        function _parseChunkOfLines( _i, _n, lines ){

	            for( var i = _i; i < _n; ++i ){

	                if( count < size && lineNo > dataLineStart ){

	                    var line = lines[ i ].trim();

	                    if( line !== "" ){

	                        var ls = line.split( reWhitespace );

	                        for( var j = 0, lj = ls.length; j < lj; ++j ){
	                            data[ count ] = parseFloat( ls[ j ] );
	                            ++count;
	                        }

	                    }

	                }

	                ++lineNo;

	            }

	        }

	        this.streamer.eachChunkOfLines( function( lines, chunkNo, chunkCount ){
	            _parseChunkOfLines( 0, lines.length, lines );
	        } );

	        v.setData( data, header.nz, header.ny, header.nx );

	        if( exports.Debug ) Log$1.timeEnd( "DxParser._parse " + this.name );
	        callback();

	    },

	    parseHeaderLines: function( headerLines ){

	        var header = {};
	        var reWhitespace = /\s+/;
	        var n = headerLines.length;

	        var dataLineStart = 0;
	        var headerByteCount = 0;
	        var deltaLineCount = 0;

	        for( var i = 0; i < n; ++i ){

	            var ls;
	            var line = headerLines[ i ];

	            if( line.startsWith( "object 1" ) ){

	                ls = line.split( reWhitespace );

	                header.nx = parseInt( ls[ 5 ] );
	                header.ny = parseInt( ls[ 6 ] );
	                header.nz = parseInt( ls[ 7 ] );

	            }else if( line.startsWith( "origin" ) ){

	                ls = line.split( reWhitespace );

	                header.xmin = parseFloat( ls[ 1 ] );
	                header.ymin = parseFloat( ls[ 2 ] );
	                header.zmin = parseFloat( ls[ 3 ] );

	            }else if( line.startsWith( "delta" ) ){

	                ls = line.split( reWhitespace );

	                if( deltaLineCount === 0 ){
	                    header.hx = parseFloat( ls[ 1 ] );
	                }else if( deltaLineCount === 1 ){
	                    header.hy = parseFloat( ls[ 2 ] );
	                }else if( deltaLineCount === 2 ){
	                    header.hz = parseFloat( ls[ 3 ] );
	                }

	                deltaLineCount += 1;

	            }else if( line.startsWith( "object 3" ) ){

	                dataLineStart = i;
	                headerByteCount += line.length + 1;
	                break;

	            }

	            headerByteCount += line.length + 1;

	        }

	        this.volume.header = header;

	        return {
	            dataLineStart: dataLineStart,
	            headerByteCount: headerByteCount
	        };

	    },

	    getMatrix: function(){

	        var h = this.volume.header;
	        var matrix = new Matrix4();

	        matrix.multiply(
	            new Matrix4().makeRotationY( degToRad( 90 ) )
	        );

	        matrix.multiply(
	            new Matrix4().makeTranslation(
	                -h.zmin, h.ymin, h.xmin
	            )
	        );

	        matrix.multiply(
	            new Matrix4().makeScale(
	                -h.hz, h.hy, h.hx
	            )
	        );

	        return matrix;

	    }

	} );

	ParserRegistry.add( "dx", DxParser );

	function DxbinParser( streamer, params ){

	    DxParser.call( this, streamer, params );

	}

	DxbinParser.prototype = Object.assign( Object.create(

	    DxParser.prototype ), {

	    constructor: DxbinParser,
	    type: "dxbin",

	    _parse: function( callback ){

	        // https://github.com/Electrostatics/apbs-pdb2pqr/issues/216

	        if( exports.Debug ) Log$1.time( "DxbinParser._parse " + this.name );

	        var bin = this.streamer.data;
	        if( bin instanceof Uint8Array ){
	            bin = bin.buffer;
	        }

	        var headerLines = uint8ToLines( new Uint8Array( bin, 0, 1000 ) );
	        var headerInfo = this.parseHeaderLines( headerLines );
	        var header = this.volume.header;
	        var headerByteCount = headerInfo.headerByteCount;

	        var size = header.nx * header.ny * header.nz;
	        var dv = new DataView( bin );
	        var data = new Float32Array( size );

	        for( var i = 0; i < size; ++i ){
	            data[ i ] = dv.getFloat64( i * 8 + headerByteCount, true );
	        }

	        this.volume.setData( data, header.nz, header.ny, header.nx );

	        if( exports.Debug ) Log$1.timeEnd( "DxbinParser._parse " + this.name );

	        callback();

	    }

	} );

	ParserRegistry.add( "dxbin", DxbinParser );

	function SurfaceParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.loader = undefined;
	    this.surface = new Surface( this.name, this.path );

	}

	SurfaceParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: SurfaceParser,
	    type: "surface",

	    __objName: "surface",

	    _parse: function( callback ){

	        var geometry = this.loader.parse( this.streamer.asText() );

	        this.surface.fromGeometry( geometry );

	        callback();

	    }

	} );

	/**
	 * PLYLoader
	 * @class
	 * @private
	 * @author Wei Meng / http://about.me/menway
	 *
	 * @description
	 * A THREE loader for PLY ASCII files (known as the Polygon File Format or the Stanford Triangle Format).
	 *
	 * Limitations: ASCII decoding assumes file is UTF-8.
	 *
	 * @example
	 * var loader = new THREE.PLYLoader();
	 * loader.load('./models/ply/ascii/dolphins.ply', function (geometry) {
	 *     scene.add( new THREE.Mesh( geometry ) );
	 * } );
	 *
	 * // If the PLY file uses non standard property names, they can be mapped while
	 * // loading. For example, the following maps the properties
	 * // “diffuse_(red|green|blue)” in the file to standard color names.
	 *
	 * loader.setPropertyNameMapping( {
	 *     diffuse_red: 'red',
	 *     diffuse_green: 'green',
	 *     diffuse_blue: 'blue'
	 * } );
	 *
	 */
	function PLYLoader() {

		this.propertyNameMapping = {};

	}

	PLYLoader.prototype = {

		constructor: PLYLoader,

		setPropertyNameMapping: function ( mapping ) {

			this.propertyNameMapping = mapping;

		},

		bin2str: function ( buf ) {

			var array_buffer = new Uint8Array( buf );
			var str = '';
			for ( var i = 0; i < buf.byteLength; i ++ ) {

				str += String.fromCharCode( array_buffer[ i ] ); // implicitly assumes little-endian

			}

			return str;

		},

		isASCII: function( data ) {

			var header = this.parseHeader( this.bin2str( data ) );

			return header.format === "ascii";

		},

		parse: function ( data ) {

			if ( data instanceof ArrayBuffer ) {

				return (
					this.isASCII( data ) ?
						this.parseASCII( this.bin2str( data ) ) :
						this.parseBinary( data )
				);

			} else {

				return this.parseASCII( data );

			}

		},

		parseHeader: function ( data ) {

			var patternHeader = /ply([\s\S]*)end_header\s/;
			var headerText = "";
			var headerLength = 0;
			var result = patternHeader.exec( data );
			if ( result !== null ) {

				headerText = result [ 1 ];
				headerLength = result[ 0 ].length;

			}

			var header = {
				comments: [],
				elements: [],
				headerLength: headerLength
			};

			var lines = headerText.split( '\n' );
			var currentElement, lineType, lineValues;

			function make_ply_element_property( propertValues, propertyNameMapping ) {

				var property = {
					type: propertValues[ 0 ]
				};

				if ( property.type === 'list' ) {

					property.name = propertValues[ 3 ];
					property.countType = propertValues[ 1 ];
					property.itemType = propertValues[ 2 ];

				} else {

					property.name = propertValues[ 1 ];

				}

				if ( property.name in propertyNameMapping ) {

					property.name = propertyNameMapping[ property.name ];

				}

				return property;

			}

			for ( var i = 0; i < lines.length; i ++ ) {

				var line = lines[ i ];
				line = line.trim();
				if ( line === "" ) {

					continue;

				}
				lineValues = line.split( /\s+/ );
				lineType = lineValues.shift();
				line = lineValues.join( " " );

				switch ( lineType ) {

				case "format":

					header.format = lineValues[ 0 ];
					header.version = lineValues[ 1 ];

					break;

				case "comment":

					header.comments.push( line );

					break;

				case "element":

					if ( currentElement !== undefined ) {

						header.elements.push( currentElement );

					}

					currentElement = {};
					currentElement.name = lineValues[ 0 ];
					currentElement.count = parseInt( lineValues[ 1 ] );
					currentElement.properties = [];

					break;

				case "property":

					currentElement.properties.push( make_ply_element_property( lineValues, this.propertyNameMapping ) );

					break;


				default:

					console.log( "unhandled", lineType, lineValues );

				}

			}

			if ( currentElement !== undefined ) {

				header.elements.push( currentElement );

			}

			return header;

		},

		parseASCIINumber: function ( n, type ) {

			switch ( type ) {

			case 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':
			case 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':

				return parseInt( n );

			case 'float': case 'double': case 'float32': case 'float64':

				return parseFloat( n );

			}

		},

		parseASCIIElement: function ( properties, line ) {

			var values = line.split( /\s+/ );

			var element = {};

			for ( var i = 0; i < properties.length; i ++ ) {

				if ( properties[ i ].type === "list" ) {

					var list = [];
					var n = this.parseASCIINumber( values.shift(), properties[ i ].countType );

					for ( var j = 0; j < n; j ++ ) {

						list.push( this.parseASCIINumber( values.shift(), properties[ i ].itemType ) );

					}

					element[ properties[ i ].name ] = list;

				} else {

					element[ properties[ i ].name ] = this.parseASCIINumber( values.shift(), properties[ i ].type );

				}

			}

			return element;

		},

		parseASCII: function ( data ) {

			// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)

			var geometry = new Geometry();

			var result;

			var header = this.parseHeader( data );

			var patternBody = /end_header\s([\s\S]*)$/;
			var body = "";
			if ( ( result = patternBody.exec( data ) ) !== null ) {

				body = result [ 1 ];

			}

			var lines = body.split( '\n' );
			var currentElement = 0;
			var currentElementCount = 0;
			geometry.useColor = false;

			for ( var i = 0; i < lines.length; i ++ ) {

				var line = lines[ i ];
				line = line.trim();
				if ( line === "" ) {

					continue;

				}

				if ( currentElementCount >= header.elements[ currentElement ].count ) {

					currentElement ++;
					currentElementCount = 0;

				}

				var element = this.parseASCIIElement( header.elements[ currentElement ].properties, line );

				this.handleElement( geometry, header.elements[ currentElement ].name, element );

				currentElementCount ++;

			}

			return this.postProcess( geometry );

		},

		postProcess: function ( geometry ) {

			if ( geometry.useColor ) {

				for ( var i = 0; i < geometry.faces.length; i ++ ) {

					geometry.faces[ i ].vertexColors = [
						geometry.colors[ geometry.faces[ i ].a ],
						geometry.colors[ geometry.faces[ i ].b ],
						geometry.colors[ geometry.faces[ i ].c ]
					];

				}

				geometry.elementsNeedUpdate = true;

			}

			geometry.computeBoundingSphere();

			return geometry;

		},

		handleElement: function ( geometry, elementName, element ) {

			if ( elementName === "vertex" ) {

				geometry.vertices.push(
					new Vector3( element.x, element.y, element.z )
				);

				if ( 'red' in element && 'green' in element && 'blue' in element ) {

					geometry.useColor = true;

					var color = new Color();
					color.setRGB( element.red / 255.0, element.green / 255.0, element.blue / 255.0 );
					geometry.colors.push( color );

				}

			} else if ( elementName === "face" ) {

				var vertex_indices = element.vertex_indices;

				if ( vertex_indices.length === 3 ) {

					geometry.faces.push(
						new Face3( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] )
					);

				} else if ( vertex_indices.length === 4 ) {

					geometry.faces.push(
						new Face3( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] ),
						new Face3( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] )
					);

				}

			}

		},

		binaryRead: function ( dataview, at, type, little_endian ) {

			switch ( type ) {

				// corespondences for non-specific length types here match rply:
			case 'int8':		case 'char':	 return [ dataview.getInt8( at ), 1 ];

			case 'uint8':		case 'uchar':	 return [ dataview.getUint8( at ), 1 ];

			case 'int16':		case 'short':	 return [ dataview.getInt16( at, little_endian ), 2 ];

			case 'uint16':	case 'ushort': return [ dataview.getUint16( at, little_endian ), 2 ];

			case 'int32':		case 'int':		 return [ dataview.getInt32( at, little_endian ), 4 ];

			case 'uint32':	case 'uint':	 return [ dataview.getUint32( at, little_endian ), 4 ];

			case 'float32': case 'float':	 return [ dataview.getFloat32( at, little_endian ), 4 ];

			case 'float64': case 'double': return [ dataview.getFloat64( at, little_endian ), 8 ];

			}

		},

		binaryReadElement: function ( dataview, at, properties, little_endian ) {

			var element = {};
			var result, read = 0;

			for ( var i = 0; i < properties.length; i ++ ) {

				if ( properties[ i ].type === "list" ) {

					var list = [];

					result = this.binaryRead( dataview, at + read, properties[ i ].countType, little_endian );
					var n = result[ 0 ];
					read += result[ 1 ];

					for ( var j = 0; j < n; j ++ ) {

						result = this.binaryRead( dataview, at + read, properties[ i ].itemType, little_endian );
						list.push( result[ 0 ] );
						read += result[ 1 ];

					}

					element[ properties[ i ].name ] = list;

				} else {

					result = this.binaryRead( dataview, at + read, properties[ i ].type, little_endian );
					element[ properties[ i ].name ] = result[ 0 ];
					read += result[ 1 ];

				}

			}

			return [ element, read ];

		},

		parseBinary: function ( data ) {

			var geometry = new Geometry();

			var header = this.parseHeader( this.bin2str( data ) );
			var little_endian = ( header.format === "binary_little_endian" );
			var body = new DataView( data, header.headerLength );
			var result, loc = 0;

			for ( var currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {

				for ( var currentElementCount = 0; currentElementCount < header.elements[ currentElement ].count; currentElementCount ++ ) {

					result = this.binaryReadElement( body, loc, header.elements[ currentElement ].properties, little_endian );
					loc += result[ 1 ];
					var element = result[ 0 ];

					this.handleElement( geometry, header.elements[ currentElement ].name, element );

				}

			}

			return this.postProcess( geometry );

		}

	};


	function PlyParser( streamer, params ){

	    var p = params || {};

	    SurfaceParser.call( this, streamer, p );

	    this.loader = new PLYLoader();

	}

	PlyParser.prototype = Object.assign( Object.create(

	    SurfaceParser.prototype ), {

	    constructor: PlyParser,
	    type: "ply"

	} );

	ParserRegistry.add( "ply", PlyParser );

	/**
	 * OBJLoader
	 * @class
	 * @private
	 * @author mrdoob / http://mrdoob.com/
	 */
	function OBJLoader() {

	    this.regexp = {
	        // v float float float
	        vertex_pattern           : /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
	        // vn float float float
	        normal_pattern           : /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
	        // vt float float
	        uv_pattern               : /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
	        // f vertex vertex vertex
	        face_vertex              : /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
	        // f vertex/uv vertex/uv vertex/uv
	        face_vertex_uv           : /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
	        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
	        face_vertex_uv_normal    : /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
	        // f vertex//normal vertex//normal vertex//normal
	        face_vertex_normal       : /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
	        // o object_name | g group_name
	        object_pattern           : /^[og]\s*(.+)?/,
	        // s boolean
	        smoothing_pattern        : /^s\s+(\d+|on|off)/,
	        // mtllib file_reference
	        material_library_pattern : /^mtllib /,
	        // usemtl material_name
	        material_use_pattern     : /^usemtl /
	    };

	}

	OBJLoader.prototype = {

	    constructor: OBJLoader,

	    setPath: function ( value ) {

	        this.path = value;

	    },

	    _createParserState : function () {

	        var state = {
	            objects  : [],
	            object   : {},

	            vertices : [],
	            normals  : [],

	            startObject: function ( name, fromDeclaration ) {

	                // If the current object (initial from reset) is not from a g/o declaration in the parsed
	                // file. We need to use it for the first parsed g/o to keep things in sync.
	                if ( this.object && this.object.fromDeclaration === false ) {

	                    this.object.name = name;
	                    this.object.fromDeclaration = ( fromDeclaration !== false );
	                    return;

	                }

	                this.object = {
	                    name : name || '',
	                    geometry : {
	                        vertices : [],
	                        normals  : []
	                    },
	                    fromDeclaration : ( fromDeclaration !== false )
	                };

	                this.objects.push( this.object );

	            },

	            parseVertexIndex: function ( value, len ) {

	                var index = parseInt( value, 10 );
	                return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;

	            },

	            parseNormalIndex: function ( value, len ) {

	                var index = parseInt( value, 10 );
	                return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;

	            },

	            addVertex: function ( a, b, c ) {

	                var src = this.vertices;
	                var dst = this.object.geometry.vertices;

	                dst.push( src[ a + 0 ] );
	                dst.push( src[ a + 1 ] );
	                dst.push( src[ a + 2 ] );
	                dst.push( src[ b + 0 ] );
	                dst.push( src[ b + 1 ] );
	                dst.push( src[ b + 2 ] );
	                dst.push( src[ c + 0 ] );
	                dst.push( src[ c + 1 ] );
	                dst.push( src[ c + 2 ] );

	            },

	            addVertexLine: function ( a ) {

	                var src = this.vertices;
	                var dst = this.object.geometry.vertices;

	                dst.push( src[ a + 0 ] );
	                dst.push( src[ a + 1 ] );
	                dst.push( src[ a + 2 ] );

	            },

	            addNormal : function ( a, b, c ) {

	                var src = this.normals;
	                var dst = this.object.geometry.normals;

	                dst.push( src[ a + 0 ] );
	                dst.push( src[ a + 1 ] );
	                dst.push( src[ a + 2 ] );
	                dst.push( src[ b + 0 ] );
	                dst.push( src[ b + 1 ] );
	                dst.push( src[ b + 2 ] );
	                dst.push( src[ c + 0 ] );
	                dst.push( src[ c + 1 ] );
	                dst.push( src[ c + 2 ] );

	            },

	            addFace: function ( a, b, c, d, na, nb, nc, nd ) {

	                var vLen = this.vertices.length;

	                var ia = this.parseVertexIndex( a, vLen );
	                var ib = this.parseVertexIndex( b, vLen );
	                var ic = this.parseVertexIndex( c, vLen );
	                var id;

	                if ( d === undefined ) {

	                    this.addVertex( ia, ib, ic );

	                } else {

	                    id = this.parseVertexIndex( d, vLen );

	                    this.addVertex( ia, ib, id );
	                    this.addVertex( ib, ic, id );

	                }

	                if ( na !== undefined ) {

	                    // Normals are many times the same. If so, skip function call and parseInt.
	                    var nLen = this.normals.length;
	                    ia = this.parseNormalIndex( na, nLen );

	                    ib = na === nb ? ia : this.parseNormalIndex( nb, nLen );
	                    ic = na === nc ? ia : this.parseNormalIndex( nc, nLen );

	                    if ( d === undefined ) {

	                        this.addNormal( ia, ib, ic );

	                    } else {

	                        id = this.parseNormalIndex( nd, nLen );

	                        this.addNormal( ia, ib, id );
	                        this.addNormal( ib, ic, id );

	                    }

	                }

	            },

	            addLineGeometry: function ( vertices ) {

	                this.object.geometry.type = 'Line';

	                var vLen = this.vertices.length;

	                for ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {

	                    this.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );

	                }

	            }

	        };

	        state.startObject( '', false );

	        return state;

	    },

	    parse: function ( text ) {

	        console.time( 'OBJLoader' );

	        var state = this._createParserState();

	        if ( text.indexOf( '\r\n' ) !== - 1 ) {

	            // This is faster than String.split with regex that splits on both
	            text = text.replace( '\r\n', '\n' );

	        }

	        var i, l;
	        var lines = text.split( '\n' );
	        var line = '', lineFirstChar = '', lineSecondChar = '';
	        var lineLength = 0;
	        var result = [];

	        // Faster to just trim left side of the line. Use if available.
	        var trimLeft = ( typeof ''.trimLeft === 'function' );

	        for ( i = 0, l = lines.length; i < l; i ++ ) {

	            line = lines[ i ];

	            line = trimLeft ? line.trimLeft() : line.trim();

	            lineLength = line.length;

	            if ( lineLength === 0 ) continue;

	            lineFirstChar = line.charAt( 0 );

	            // @todo invoke passed in handler if any
	            if ( lineFirstChar === '#' ) continue;

	            if ( lineFirstChar === 'v' ) {

	                lineSecondChar = line.charAt( 1 );

	                if ( lineSecondChar === ' ' && ( result = this.regexp.vertex_pattern.exec( line ) ) !== null ) {

	                    // 0                  1      2      3
	                    // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

	                    state.vertices.push(
	                        parseFloat( result[ 1 ] ),
	                        parseFloat( result[ 2 ] ),
	                        parseFloat( result[ 3 ] )
	                    );

	                } else if ( lineSecondChar === 'n' && ( result = this.regexp.normal_pattern.exec( line ) ) !== null ) {

	                    // 0                   1      2      3
	                    // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

	                    state.normals.push(
	                        parseFloat( result[ 1 ] ),
	                        parseFloat( result[ 2 ] ),
	                        parseFloat( result[ 3 ] )
	                    );

	                } else if ( lineSecondChar === 't' && ( result = this.regexp.uv_pattern.exec( line ) ) !== null ) {

	                    // ignore uv line

	                } else {

	                    throw new Error( "Unexpected vertex/normal/uv line: '" + line  + "'" );

	                }

	            } else if ( lineFirstChar === "f" ) {

	                if ( ( result = this.regexp.face_vertex_uv_normal.exec( line ) ) !== null ) {

	                    // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
	                    // 0                        1    2    3    4    5    6    7    8    9   10         11         12
	                    // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]

	                    state.addFace(
	                        result[ 1 ], result[ 4 ], result[ 7 ], result[ 10 ],
	                        // result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],  // ignore uv part
	                        result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
	                    );

	                } else if ( ( result = this.regexp.face_vertex_uv.exec( line ) ) !== null ) {

	                    // ignore uv line

	                } else if ( ( result = this.regexp.face_vertex_normal.exec( line ) ) !== null ) {

	                    // f vertex//normal vertex//normal vertex//normal
	                    // 0                     1    2    3    4    5    6   7          8
	                    // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]

	                    state.addFace(
	                        result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
	                        result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
	                    );

	                } else if ( ( result = this.regexp.face_vertex.exec( line ) ) !== null ) {

	                    // f vertex vertex vertex
	                    // 0            1    2    3   4
	                    // ["f 1 2 3", "1", "2", "3", undefined]

	                    state.addFace(
	                        result[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]
	                    );

	                } else {

	                    throw new Error( "Unexpected face line: '" + line  + "'" );

	                }

	            } else if ( lineFirstChar === "l" ) {

	                var lineParts = line.substring( 1 ).trim().split( " " );
	                var lineVertices = [], lineUVs = [];

	                if ( line.indexOf( "/" ) === - 1 ) {

	                    lineVertices = lineParts;

	                } else {

	                    for ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {

	                        var parts = lineParts[ li ].split( "/" );

	                        if ( parts[ 0 ] !== "" ) lineVertices.push( parts[ 0 ] );
	                        if ( parts[ 1 ] !== "" ) lineUVs.push( parts[ 1 ] );

	                    }

	                }
	                state.addLineGeometry( lineVertices, lineUVs );

	            } else if ( ( result = this.regexp.object_pattern.exec( line ) ) !== null ) {

	                // o object_name
	                // or
	                // g group_name

	                var name = result[ 0 ].substr( 1 ).trim();
	                state.startObject( name );

	            // ignore material related lines
	            } else if ( this.regexp.material_use_pattern.test( line ) ) {
	            } else if ( this.regexp.material_library_pattern.test( line ) ) {
	            } else if ( ( result = this.regexp.smoothing_pattern.exec( line ) ) !== null ) {
	            } else {

	                // Handle null terminated files without exception
	                if ( line === '\0' ) continue;

	                throw new Error( "Unexpected line: '" + line  + "'" );

	            }

	        }

	        var container = [];

	        for ( i = 0, l = state.objects.length; i < l; i ++ ) {

	            var object = state.objects[ i ];
	            var geometry = object.geometry;
	            var isLine = ( geometry.type === 'Line' );

	            // Skip o/g line declarations that did not follow with any faces
	            if ( geometry.vertices.length === 0 ) continue;

	            var buffergeometry = new BufferGeometry();

	            buffergeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );

	            if ( geometry.normals.length > 0 ) {

	                buffergeometry.addAttribute( 'normal', new BufferAttribute( new Float32Array( geometry.normals ), 3 ) );

	            } else {

	                buffergeometry.computeVertexNormals();

	            }

	            container.push( buffergeometry );

	        }

	        console.timeEnd( 'OBJLoader' );

	        return container;

	    }

	};


	function ObjParser( streamer, params ){

	    var p = params || {};

	    SurfaceParser.call( this, streamer, p );

	    this.loader = new OBJLoader();

	}

	ObjParser.prototype = Object.assign( Object.create(

	    SurfaceParser.prototype ), {

	    constructor: ObjParser,
	    type: "obj"

	} );

	ParserRegistry.add( "obj", ObjParser );

	function TextParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.text = {

	        name: this.name,
	        path: this.path,
	        data: ""

	    };

	}

	TextParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: TextParser,
	    type: "text",

	    __objName: "text",

	    _parse: function( callback ){

	        this.text.data = this.streamer.asText();

	        callback();

	    }

	} );

	ParserRegistry.add( "txt", TextParser );
	ParserRegistry.add( "text", TextParser );

	function CsvParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.table = {

	        name: this.name,
	        path: this.path,
	        colNames: [],
	        data: []

	    };

	}

	CsvParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: CsvParser,
	    type: "csv",

	    __objName: "table",

	    _parse: function( callback ){

	        var data = this.table.data;
	        var reDelimiter = /\s*,\s*/;

	        this.streamer.eachChunkOfLines( function( chunk, chunkNo, chunkCount ){

	            var n = chunk.length;

	            for( var i = 0; i < n; ++i ){

	                var line = chunk[ i ].trim();
	                var values = line.split( reDelimiter );

	                if( chunkNo === 0 && i === 0 ){

	                    this.table.colNames = values;

	                }else if( line ){

	                    data.push( values );

	                }

	            }

	        }.bind( this ) );

	        callback();

	    }

	} );

	ParserRegistry.add( "csv", CsvParser );

	function JsonParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.json = {

	        name: this.name,
	        path: this.path,
	        data: {}

	    };

	}

	JsonParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: JsonParser,
	    type: "json",

	    __objName: "json",

	    _parse: function( callback ){

	        if( this.streamer.compressed || this.streamer.binary ){
	            this.json.data = JSON.parse( this.streamer.asText() );
	        }else{
	            this.json.data = this.streamer.data;
	        }

	        callback();

	    }

	} );

	ParserRegistry.add( "json", JsonParser );

	function XmlParser( streamer, params ){

	    var p = params || {};

	    Parser.call( this, streamer, p );

	    this.xml = {

	        name: this.name,
	        path: this.path,
	        data: {}

	    };

	}

	XmlParser.prototype = Object.assign( Object.create(

	    Parser.prototype ), {

	    constructor: XmlParser,
	    type: "xml",

	    __objName: "xml",

	    _parse: function( callback ){

	        // https://github.com/segmentio/xml-parser
	        // MIT license

	        function parse( xml ){

	            xml = xml.trim();

	            // strip comments
	            xml = xml.replace( /<!--[\s\S]*?-->/g, '' );

	            return document();

	            function document(){
	                return {
	                    declaration: declaration(),
	                    root: tag()
	                };
	            }

	            function declaration(){
	                var m = match(/^<\?xml\s*/);
	                if (!m) return;
	                // tag
	                var node = {
	                    attributes: {}
	                };
	                // attributes
	                while (!(eos() || is('?>'))) {
	                    var attr = attribute();
	                    if (!attr) return node;
	                    node.attributes[attr.name] = attr.value;
	                }
	                match(/\?>\s*/);
	                return node;
	            }

	            function tag(){
	                var m = match(/^<([\w-:.]+)\s*/);
	                if (!m) return;
	                // name
	                var node = {
	                    name: m[1],
	                    attributes: {},
	                    children: []
	                };
	                // attributes
	                while (!(eos() || is('>') || is('?>') || is('/>'))) {
	                    var attr = attribute();
	                    if (!attr) return node;
	                    node.attributes[attr.name] = attr.value;
	                }
	                // self closing tag
	                if (match(/^\s*\/>\s*/)) {
	                    return node;
	                }
	                match(/\??>\s*/);
	                // content
	                node.content = content();
	                // children
	                var child;
	                while ((child = tag())) {
	                    node.children.push(child);
	                }
	                // closing
	                match(/^<\/[\w-:.]+>\s*/);
	                return node;
	            }

	            function content(){
	                var m = match(/^([^<]*)/);
	                if (m) return m[1];
	                return '';
	            }

	            function attribute(){
	                var m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);
	                if (!m) return;
	                return { name: m[1], value: strip(m[2]) };
	            }

	            function strip( val ){
	                return val.replace(/^['"]|['"]$/g, '');
	            }

	            function match( re ){
	                var m = xml.match(re);
	                if (!m) return;
	                xml = xml.slice(m[0].length);
	                return m;
	            }

	            function eos(){
	                return 0 === xml.length;
	            }

	            function is( prefix ){
	                return 0 === xml.indexOf(prefix);
	            }

	        }

	        this.xml.data = parse( this.streamer.asText() );

	        callback();

	    }

	} );

	ParserRegistry.add( "xml", XmlParser );

	if( !window.Promise ){
	    window.Promise = Promise$1;
	}


	//////////////
	// Polyfills

	( function( global ) {

	    'use strict';

	    // Console-polyfill. MIT license.
	    // https://github.com/paulmillr/console-polyfill
	    // Make it safe to do console.log() always.

	    global.console = global.console || {};
	    var con = global.console;
	    var prop, method;
	    var empty = {};
	    var dummy = function(){};
	    var properties = 'memory'.split( ',' );
	    var methods = (
	        'assert,clear,count,debug,dir,dirxml,error,exception,group,' +
	        'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +
	        'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'
	    ).split(',');

	    while( ( prop = properties.pop() ) ) if( !con[ prop] ) con[ prop ] = empty;
	    while( ( method = methods.pop() ) ) if( !con[ method] ) con[ method ] = dummy;

	    // Using `this` for web workers while maintaining compatibility with browser
	    // targeted script loaders such as Browserify or Webpack where the only way to
	    // get to the global object is via `window`.

	} )( typeof window === 'undefined' ? this : window );


	if( !HTMLCanvasElement.prototype.toBlob ){

	    // http://code.google.com/p/chromium/issues/detail?id=67587#57

	    Object.defineProperty( HTMLCanvasElement.prototype, 'toBlob', {

	        value: function( callback, type, quality ){

	            var bin = window.atob( this.toDataURL( type, quality ).split( ',' )[ 1 ] ),
	                len = bin.length,
	                len32 = len >> 2,
	                a8 = new Uint8Array( len ),
	                a32 = new Uint32Array( a8.buffer, 0, len32 );

	            for( var i=0, j=0; i < len32; i++ ) {

	                a32[i] = bin.charCodeAt( j++ ) |
	                    bin.charCodeAt( j++ ) << 8 |
	                    bin.charCodeAt( j++ ) << 16 |
	                    bin.charCodeAt( j++ ) << 24;

	            }

	            var tailLength = len & 3;

	            while( tailLength-- ){

	                a8[ j ] = bin.charCodeAt( j++ );

	            }

	            callback( new Blob( [ a8 ], { 'type': type || 'image/png' } ) );

	        }

	    } );

	}


	if( !Number.isInteger ){

	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

	    Number.isInteger = function isInteger( nVal ){
	        return typeof nVal === "number" && isFinite( nVal ) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor( nVal ) === nVal;
	    };

	}


	if( !Number.isNaN ){

	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN

	    Number.isNaN = function isNaN( value ){
	        return value !== value;
	    };

	}


	if( !Object.assign ){

	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	    Object.defineProperty( Object, "assign", {

	        enumerable: false,
	        configurable: true,
	        writable: true,

	        value: function(target, firstSource) {

	            "use strict";
	            if (target === undefined || target === null)
	            throw new TypeError("Cannot convert first argument to object");

	            var to = Object(target);

	            var hasPendingException = false;
	            var pendingException;

	            for (var i = 1; i < arguments.length; i++) {

	                var nextSource = arguments[i];
	                if (nextSource === undefined || nextSource === null)
	                    continue;

	                var keysArray = Object.keys(Object(nextSource));
	                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {

	                    var nextKey = keysArray[nextIndex];
	                    try {
	                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	                        if (desc !== undefined && desc.enumerable)
	                            to[nextKey] = nextSource[nextKey];
	                    } catch (e) {
	                        if (!hasPendingException) {
	                            hasPendingException = true;
	                            pendingException = e;
	                        }
	                    }

	                }

	                if (hasPendingException)
	                    throw pendingException;

	            }

	            return to;

	        }

	    } );

	}


	if (!String.prototype.startsWith) {

	    /*! https://mths.be/startswith v0.2.0 by @mathias */

	    (function() {
	        'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
	        var defineProperty = (function() {
	            // IE 8 only supports `Object.defineProperty` on DOM elements
	            var result;
	            try {
	                var object = {};
	                var $defineProperty = Object.defineProperty;
	                result = $defineProperty(object, object, object) && $defineProperty;
	            } catch(error) {}
	            return result;
	        }());
	        var toString = {}.toString;
	        var startsWith = function(search) {
	            if (this === null) {
	                throw TypeError();
	            }
	            var string = String(this);
	            if (search && toString.call(search) == '[object RegExp]') {
	                throw TypeError();
	            }
	            var stringLength = string.length;
	            var searchString = String(search);
	            var searchLength = searchString.length;
	            var position = arguments.length > 1 ? arguments[1] : undefined;
	            // `ToInteger`
	            var pos = position ? Number(position) : 0;
	            if (pos != pos) { // better `isNaN`
	                pos = 0;
	            }
	            var start = Math.min(Math.max(pos, 0), stringLength);
	            // Avoid the `indexOf` call if no match is possible
	            if (searchLength + start > stringLength) {
	                return false;
	            }
	            var index = -1;
	            while (++index < searchLength) {
	                if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        if (defineProperty) {
	            defineProperty(String.prototype, 'startsWith', {
	                'value': startsWith,
	                'configurable': true,
	                'writable': true
	            });
	        } else {
	            String.prototype.startsWith = startsWith;
	        }
	    }());

	}


	if (!String.prototype.endsWith) {
	  String.prototype.endsWith = function(searchString, position) {
	      var subjectString = this.toString();
	      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
	        position = subjectString.length;
	      }
	      position -= searchString.length;
	      var lastIndex = subjectString.indexOf(searchString, position);
	      return lastIndex !== -1 && lastIndex === position;
	  };
	}


	( function() {

	    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

	    // requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

	    // MIT license

	    var lastTime = 0;
	    var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

	    for( var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x ){

	        window.requestAnimationFrame = (
	            window[ vendors[ x ] + 'RequestAnimationFrame' ]
	        );

	        window.cancelAnimationFrame = (
	            window[ vendors[ x ] + 'CancelAnimationFrame' ] ||
	            window[ vendors[ x ] + 'CancelRequestAnimationFrame' ]
	        );

	    }

	    if( !window.requestAnimationFrame ){

	        window.requestAnimationFrame = function( callback, element ){

	            var currTime = new Date().getTime();
	            var timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );

	            var id = window.setTimeout( function(){

	                callback( currTime + timeToCall );

	            }, timeToCall );

	            lastTime = currTime + timeToCall;

	            return id;

	        };

	    }

	    if( !window.cancelAnimationFrame ){

	        window.cancelAnimationFrame = function( id ){
	            clearTimeout( id );
	        };

	    }

	}() );


	if ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {

	    // Missing in IE9-11.
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	    Object.defineProperty( Function.prototype, 'name', {

	        get: function () {

	            return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

	        }

	    } );

	}


	if ( self.performance === undefined ) {

	    self.performance = {};

	}

	if ( self.performance.now === undefined ) {

	    ( function () {

	        var start = Date.now();

	        self.performance.now = function () {

	            return Date.now() - start;

	        };

	    } )();

	}


	////////////////
	// Workarounds

	HTMLElement.prototype.getBoundingClientRect = function(){

	    // workaround for ie11 behavior with disconnected dom nodes

	    var _getBoundingClientRect = HTMLElement.prototype.getBoundingClientRect;

	    return function(){
	        try{
	            return _getBoundingClientRect.apply( this, arguments );
	        }catch( e ){
	            return {
	                top: 0,
	                left: 0,
	                width: this.width,
	                height: this.height
	            };
	        }
	    };

	}();


	if( WebGLRenderingContext ){

	    // wrap WebGL debug function used by three.js and
	    // ignore calls to them when the debug flag is not set

	    WebGLRenderingContext.prototype.getShaderParameter = function(){

	        var _getShaderParameter = WebGLRenderingContext.prototype.getShaderParameter;

	        return function(){

	            if( exports.Debug ){

	                return _getShaderParameter.apply( this, arguments );

	            }else{

	                return true;

	            }

	        };

	    }();

	    WebGLRenderingContext.prototype.getShaderInfoLog = function(){

	        var _getShaderInfoLog = WebGLRenderingContext.prototype.getShaderInfoLog;

	        return function(){

	            if( exports.Debug ){

	                return _getShaderInfoLog.apply( this, arguments );

	            }else{

	                return '';

	            }

	        };

	    }();

	    WebGLRenderingContext.prototype.getProgramParameter = function(){

	        var _getProgramParameter = WebGLRenderingContext.prototype.getProgramParameter;

	        return function( program, pname ){

	            if( exports.Debug || pname !== WebGLRenderingContext.prototype.LINK_STATUS ){

	                return _getProgramParameter.apply( this, arguments );

	            }else{

	                return true;

	            }

	        };

	    }();

	    WebGLRenderingContext.prototype.getProgramInfoLog = function(){

	        var _getProgramInfoLog = WebGLRenderingContext.prototype.getProgramInfoLog;

	        return function(){

	            if( exports.Debug ){

	                return _getProgramInfoLog.apply( this, arguments );

	            }else{

	                return '';

	            }

	        };

	    }();

	}


	//

	DatasourceRegistry.add( "rcsb", new RcsbDatasource() );
	DatasourceRegistry.add( "ftp", new PassThroughDatasource() );
	DatasourceRegistry.add( "http", new PassThroughDatasource() );
	DatasourceRegistry.add( "https", new PassThroughDatasource() );

	//

	/**
	 * Version name
	 * @static
	 * @type {String}
	 */
	var Version = "v0.8+dev";

	exports.Version = Version;
	exports.setDebug = setDebug;
	exports.DatasourceRegistry = DatasourceRegistry;
	exports.StaticDatasource = StaticDatasource;
	exports.autoLoad = autoLoad;
	exports.RepresentationRegistry = RepresentationRegistry;
	exports.ColorMakerRegistry = ColorMakerRegistry;
	exports.Selection = Selection;
	exports.PdbWriter = PdbWriter;
	exports.Stage = Stage;
	exports.Collection = Collection;
	exports.ComponentCollection = ComponentCollection;
	exports.RepresentationCollection = RepresentationCollection;
	exports.Assembly = Assembly;
	exports.TrajectoryPlayer = TrajectoryPlayer;
	exports.superpose = superpose;
	exports.Queue = Queue;
	exports.Counter = Counter;
	exports.throttle = throttle;
	exports.download = download;
	exports.getQuery = getQuery;
	exports.getDataInfo = getDataInfo;
	exports.BufferRepresentation = BufferRepresentation;
	exports.SphereBuffer = SphereBuffer;
	exports.EllipsoidBuffer = EllipsoidBuffer;
	exports.CylinderBuffer = CylinderBuffer;
	exports.ConeBuffer = ConeBuffer;
	exports.ArrowBuffer = ArrowBuffer;
	exports.Shape = Shape;
	exports.Signal = Signal;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.Vector3 = Vector3;
	exports.Quaternion = Quaternion;
	exports.Color = Color;

}));